"bundle";System.registerDynamic("src/views/home/wizard-step-3.html!github:systemjs/plugin-text@0.0.2",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports='<template>\r\n\r\n  <section validate.bind="wizard.validationStep3">\r\n\r\n    <fieldset>\r\n      <legend>The small print</legend>\r\n\r\n      <div class="form-group">\r\n        <label for="agree-terms">\r\n          <input id="agree-terms" type="checkbox" checked.bind="wizard.person.agreeToTerms" validate="person.agreeToTerms">\r\n          I have read the terms and conditions\r\n        </label>\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="sell-kidney-yes">\r\n          <input id="sell-kidney-yes" type="radio" checked.bind="wizard.person.agreeToSellKidney" model.bind="true" name="kidney-radio">\r\n          I agree to sell a kidney\r\n        </label>\r\n\r\n        <label for="sell-kidney-no">\r\n          <input id="sell-kidney-no" type="radio" checked.bind="wizard.person.agreeToSellKidney" model.bind="false"\r\n                 validate="person.agreeToSellKidney" name="kidney-radio">\r\n          No! You can\'t have my kidney</label>\r\n      </div>\r\n\r\n      <p show.bind="!wizard.validationStep3.result.isValid &&\r\n        wizard.validationStep3.result.properties[\'person.agreeToTerms\'].isDirty && wizard.validationStep3.result.properties[\'person.agreeToSellKidney\'].isDirty"\r\n         class="${!wizard.validationStep3.result.isValid ? \'has-warning\' : \'\'}">* You must agree to all the terms and conditions</p>\r\n\r\n    </fieldset>\r\n\r\n  </section>\r\n\r\n</template>\r\n',r.define=n,t.exports}),System.registerDynamic("src/views/home/wizard-step-2.html!github:systemjs/plugin-text@0.0.2",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports='<template>\r\n\r\n  <section validate.bind="wizard.validationStep2">\r\n\r\n    <fieldset>\r\n      <legend>Favourites</legend>\r\n\r\n      <div class="form-group">\r\n        <label for="type">Favourite type of ${wizard.person.favouriteVertebrateClass.label}</label>\r\n        <select id="type" value.bind="wizard.person.favouriteVertebrateType"\r\n                validate="person.favouriteVertebrateType">\r\n          <option value="">Select...</option>\r\n          <option repeat.for="type of wizard.person.favouriteVertebrateClass.examples">${type}</option>\r\n        </select>\r\n      </div>\r\n\r\n    </fieldset>\r\n\r\n    <fieldset>\r\n      <legend>Address</legend>\r\n\r\n      <div class="form-group">\r\n        <label for="houseName">House name</label>\r\n        <input id="houseName" placeholder="house name" value.bind="houseName" validate="address.houseName">\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="houseNumber">House number</label>\r\n        <input id="houseNumber" placeholder="house number" value.bind="houseNumber" validate="address.houseNumber">\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="street">Street</label>\r\n        <input id="street" placeholder="street" value.bind="wizard.address.street" validate="address.street">\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="town">Town</label>\r\n        <input id="town" placeholder="town" value.bind="wizard.address.town" validate="address.town">\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="country">Country</label>\r\n        <select id="country" value.bind="wizard.address.country" validate="address.country">\r\n          <option value="">Select...</option>\r\n          <option repeat.for="country of wizard.countries">${country}</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="postcode">Postcode</label>\r\n        <input id="postcode" placeholder="postcode" value.bind="wizard.address.postcode" validate="address.postcode">\r\n      </div>\r\n\r\n    </fieldset>\r\n\r\n  </section>\r\n\r\n</template>\r\n',r.define=n,t.exports}),System.registerDynamic("src/views/home/wizard-step-1.html!github:systemjs/plugin-text@0.0.2",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports='<template>\r\n\r\n  <section validate.bind="wizard.validationStep1">\r\n\r\n    <fieldset>\r\n      <legend>Personal details</legend>\r\n\r\n      <div class="form-group">\r\n        <label for="forename">Forename</label>\r\n        <input id="forename" placeholder="forename" value.bind="wizard.person.forename" validate="person.forename">\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="surname">Surname</label>\r\n        <input id="surname" placeholder="surname" value.bind="wizard.person.surname" validate="person.surname">\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="vertebrate-class">Favourite class of vertebrate</label>\r\n        <select id="vertebrate-class" value.bind="wizard.person.favouriteVertebrateClass"\r\n                validate="person.favouriteVertebrateClass">\r\n          <option value="">Select...</option>\r\n          <option repeat.for="vertebrate of wizard.vertebrates"\r\n                  model.bind="vertebrate">${vertebrate.type}</option>\r\n        </select>\r\n      </div>\r\n\r\n    </fieldset>\r\n\r\n  </section>\r\n\r\n</template>\r\n',r.define=n,t.exports}),System.registerDynamic("src/views/home/home.html!github:systemjs/plugin-text@0.0.2",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports='<template>\r\n\r\n  <section show.bind="!isComplete">\r\n\r\n    <form class="pure-form pure-form-stacked">\r\n\r\n      <compose view-model="${activeStep.path}"></compose>\r\n\r\n      <div>\r\n        <button click.trigger="previousStep()" disabled.bind="isFirstPage">Previous</button>\r\n        <button click.trigger="nextStep()" disabled.bind="isLastPage">Next</button>\r\n        <br><br>\r\n        <button click.trigger="finish()" show.bind="isLastPage">Submit</button>\r\n      </div>\r\n\r\n    </form>\r\n\r\n  </section>\r\n\r\n  <section show.bind="isComplete">\r\n\r\n    <h2 class="sub-heading">Form contents</h2>\r\n\r\n    <ul>\r\n      <li>\r\n        <strong>Name:</strong> ${wizard.person.fullname}\r\n      </li>\r\n\r\n      <li>\r\n        <strong>Address:</strong> ${wizard.address.formatted}\r\n      </li>\r\n\r\n      <li>\r\n        <strong>Favourite class of vertebrate:</strong> ${wizard.person.favouriteVertebrateClass.type}\r\n      </li>\r\n\r\n      <li>\r\n        <strong>Favourite type of ${wizard.person.favouriteVertebrateClass.label}:</strong>\r\n        ${wizard.person.favouriteVertebrateType}\r\n      </li>\r\n\r\n      <li>\r\n        <strong>Agreed to terms and conditions:</strong> ${wizard.person.agreeToTerms}\r\n      </li>\r\n\r\n      <li>\r\n        <strong>Agreed to sell kidney:</strong> ${wizard.person.agreeToSellKidney}\r\n      </li>\r\n    </ul>\r\n\r\n    <button click.trigger="restart()">Start again</button>\r\n\r\n  </section>\r\n\r\n</template>\r\n',r.define=n,t.exports}),System.registerDynamic("src/app.html!github:systemjs/plugin-text@0.0.2",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports='<template>\r\n\r\n  <div class="page-content">\r\n\r\n    <h1>${router.currentInstruction.config.title}</h1>\r\n\r\n    <router-view></router-view>\r\n\r\n  </div>\r\n\r\n</template>\r\n',r.define=n,t.exports}),System.register("src/views/home/wizard",["github:aurelia/framework@0.16.0","github:aurelia/validation@0.3.0","src/views/home/person","src/views/home/address","src/views/home/data"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n,i,o,s,a,u,c=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();return{setters:[function(e){r=e.inject},function(e){n=e.Validation},function(e){i=e.Person},function(e){o=e.Address},function(e){s=e.vertebrates,a=e.countries}],execute:function(){u=function(){function e(e){t(this,u),this.validation=e,this.vertebrates=s,this.countries=a,this.person=new i,this.address=new o,this.validationStep1=this.setupValidatonStep1(),this.validationStep2=this.setupValidatonStep2(),this.validationStep3=this.setupValidatonStep3()}c(e,[{key:"setupValidatonStep1",value:function(){return this.validation.on(this).ensure("person.forename").isNotEmpty().ensure("person.surname").isNotEmpty().ensure("person.favouriteVertebrateClass").isNotEmpty()}},{key:"setupValidatonStep2",value:function(){var e=this;return this.validation.on(this).ensure("person.favouriteVertebrateType").isNotEmpty().ensure("address.houseName",function(e){e.computedFrom(["address.houseNumber"])})["if"](function(){return!e.address.houseNumber}).isNotEmpty().withMessage(" is required if no house number is entered").endIf()["if"](function(){return!!e.address.houseNumber}).mustBeEmpty().withMessage(" cannot be entered if you have a house number").endIf().ensure("address.houseNumber",function(e){e.computedFrom(["address.houseName"])})["if"](function(){return!e.address.houseName}).isNotEmpty().withMessage(" is required if no house name is entered").endIf()["if"](function(){return!!e.address.houseName}).mustBeEmpty().withMessage(" cannot be entered if you have a house name").endIf().ensure("address.street").isNotEmpty().ensure("address.town").isNotEmpty().ensure("address.country").isNotEmpty().ensure("address.postcode").isNotEmpty()}},{key:"setupValidatonStep3",value:function(){return this.validation.on(this).ensure("person.agreeToTerms").isNotEqualTo(!1).withMessage("*").ensure("person.agreeToSellKidney").isNotEqualTo(!1).withMessage("*")}}]);var u=e;return e=r(n)(e)||e}(),e("Wizard",u)}}}),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/framework@0.16.0",["github:aurelia/framework@0.16.0/aurelia-framework"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0",["github:aurelia/validation@0.3.0/index"],function(e){return e}),e()}(),System.register("src/views/home/person",["github:aurelia/framework@0.16.0"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n,i=function(){function e(e,t,r){for(var n=0;n<t.length;n++){var i=t[n],o=i.decorators,s=i.key;if(delete i.key,delete i.decorators,i.enumerable=i.enumerable||!1,i.configurable=!0,("value"in i||i.initializer)&&(i.writable=!0),o){for(var a=0;a<o.length;a++){var u=o[a];if("function"!=typeof u)throw new TypeError("The decorator for method "+i.key+" is of the invalid type "+typeof u);i=u(e,s,i)||i}if(void 0!==i.initializer){r[s]=i;continue}}Object.defineProperty(e,s,i)}}return function(t,r,n,i,o){return r&&e(t.prototype,r,i),n&&e(t,n,o),t}}();return{setters:[function(e){r=e.computedFrom}],execute:function(){n=function(){function e(){t(this,e),this.forename="",this.surname="",this.favouriteVertebrateClass="",this.favouriteVertebrateType="",this.agreeToTerms=!1,this.agreeToSellKidney=!1}return i(e,[{key:"fullname",decorators:[r("forename","surname")],get:function(){return this.forename+" "+this.surname}}]),e}(),e("Person",n)}}}),System.register("src/views/home/address",[],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();return{setters:[],execute:function(){r=function(){function e(){t(this,e),this.houseName="",this.houseNumber="",this.street="",this.town="",this.country="",this.postcode=""}return n(e,[{key:"formatted",get:function(){return this.houseName+" "+this.houseNumber+", "+this.street+", "+this.town+", "+this.postcode+", "+this.country}}]),e}(),e("Address",r)}}}),System.register("src/views/home/data",[],function(e){"use strict";var t,r;return{setters:[],execute:function(){t=[{type:"mammals",label:"mammal",examples:["ape","cat","dog"]},{type:"bony fish",label:"bony fish",examples:["cod","haddock","salmon","coelacanth"]},{type:"cartilaginous fish",label:"cartilaginous fish",examples:["shark","ray","skate","sawfish"]},{type:"birds",label:"bird",examples:["swan","eagle","vulture","cassowary"]},{type:"amphibians",label:"amphibian",examples:["frog","toad","newt","axolotl"]}],e("vertebrates",t),r=["UK","USA","Other"],e("countries",r)}}}),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/framework@0.16.0/aurelia-framework",["exports","npm:core-js@0.9.18","github:aurelia/logging@0.7.0","github:aurelia/templating@0.15.3","github:aurelia/path@0.9.0","github:aurelia/dependency-injection@0.10.1","github:aurelia/loader@0.9.0","github:aurelia/binding@0.9.1","github:aurelia/metadata@0.8.0","github:aurelia/task-queue@0.7.0"],function(e,t,r,n,i,o,s,a,u,c){"use strict";function l(e,t){var r=t({},e);return delete r["default"],r}function d(e,t){for(var r=Object.getOwnPropertyNames(t),n=0;n<r.length;n++){var i=r[n],o=Object.getOwnPropertyDescriptor(t,i);o&&o.configurable&&void 0===e[i]&&Object.defineProperty(e,i,o)}return e}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){var r=void 0,n=function i(){return(r=t.shift())?Promise.resolve(r(e)).then(i):Promise.resolve()};return n()}function f(e,t,r){return y.debug("Loading plugin "+r.moduleId+"."),e.resourcesRelativeTo=r.resourcesRelativeTo,t.loadModule(r.moduleId).then(function(t){return"configure"in t?Promise.resolve(t.configure(e,r.config||{})).then(function(){e.resourcesRelativeTo=null,y.debug("Configured plugin "+r.moduleId+".")}):(e.resourcesRelativeTo=null,void y.debug("Loaded plugin "+r.moduleId+"."))})}function m(e,t,r){for(var i=e.get(n.ViewEngine),o=Object.keys(t),s=new Array(o.length),a=0,u=o.length;u>a;++a)s[a]=t[o[a]];return i.importViewResources(o,s,r)}function g(e){if(e.processed)throw new Error("This config instance has already been applied. To load more plugins or global resources, create a new FrameworkConfiguration instance.")}function v(){document.body.addEventListener("submit",function(e){var t=e.target,r=t.action;"form"!==t.tagName.toLowerCase()||r||e.preventDefault()})}e.__esModule=!0;var y=r.getLogger("aurelia"),b=function(){function e(t){var r=this;h(this,e),this.aurelia=t,this.container=t.container,this.info=[],this.processed=!1,this.preTasks=[],this.postTasks=[],this.resourcesToLoad={},this.preTask(function(){return System.normalize("aurelia-bootstrapper").then(function(e){return r.bootstrapperName=e})}),this.postTask(function(){return m(t.container,r.resourcesToLoad,t.resources)})}return e.prototype.instance=function(e,t){return this.container.registerInstance(e,t),this},e.prototype.singleton=function(e,t){return this.container.registerSingleton(e,t),this},e.prototype["transient"]=function(e,t){return this.container.registerTransient(e,t),this},e.prototype.preTask=function(e){return g(this),this.preTasks.push(e),this},e.prototype.postTask=function(e){return g(this),this.postTasks.push(e),this},e.prototype.feature=function(e,t){return e=e.endsWith(".js")||e.endsWith(".ts")?e.substring(0,e.length-3):e,this.plugin({moduleId:e+"/index",resourcesRelativeTo:e,config:t||{}})},e.prototype.globalResources=function(e){g(this);for(var t=Array.isArray(e)?e:arguments,r=void 0,n=void 0,o=this.resourcesRelativeTo||"",s=0,a=t.length;a>s;++s){if(r=t[s],"string"!=typeof r)throw new Error("Invalid resource path ["+r+"]. Resources must be specified as relative module IDs.");n=i.join(o,r),this.resourcesToLoad[n]=this.resourcesToLoad[n]}return this},e.prototype.globalName=function(e,t){return g(this),this.resourcesToLoad[e]=t,this},e.prototype.plugin=function(e,t){return g(this),"string"==typeof e?(e=e.endsWith(".js")||e.endsWith(".ts")?e.substring(0,e.length-3):e,this.plugin({moduleId:e,resourcesRelativeTo:e,config:t||{}})):(this.info.push(e),this)},e.prototype._addNormalizedPlugin=function(e,t){var r=this,n={moduleId:e,resourcesRelativeTo:e,config:t||{}};return this.plugin(n),this.preTask(function(){return System.normalize(e,r.bootstrapperName).then(function(t){t=t.endsWith(".js")||t.endsWith(".ts")?t.substring(0,t.length-3):t,n.moduleId=t,n.resourcesRelativeTo=t,System.map[e]=t})}),this},e.prototype.defaultBindingLanguage=function(){return this._addNormalizedPlugin("aurelia-templating-binding")},e.prototype.router=function(){return this._addNormalizedPlugin("aurelia-templating-router")},e.prototype.history=function(){return this._addNormalizedPlugin("aurelia-history-browser")},e.prototype.defaultResources=function(){return this._addNormalizedPlugin("aurelia-templating-resources")},e.prototype.eventAggregator=function(){return this._addNormalizedPlugin("aurelia-event-aggregator")},e.prototype.standardConfiguration=function(){return this.defaultBindingLanguage().defaultResources().history().router().eventAggregator()},e.prototype.developmentLogging=function(){var e=this;return this.preTask(function(){return System.normalize("aurelia-logging-console",e.bootstrapperName).then(function(t){return e.aurelia.loader.loadModule(t).then(function(e){r.addAppender(new e.ConsoleAppender),r.setLevel(r.logLevel.debug)})})}),this},e.prototype.apply=function(){var e=this;return this.processed?Promise.resolve():p(this,this.preTasks).then(function(){var t=e.aurelia.loader,r=e.info,n=void 0,i=function o(){return(n=r.shift())?f(e,t,n).then(o):(e.processed=!0,Promise.resolve())};return i().then(function(){return p(e,e.postTasks)})})},e}();if(e.FrameworkConfiguration=b,!window.CustomEvent||"function"!=typeof window.CustomEvent){var j=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var r=document.createEvent("CustomEvent");return r.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r};j.prototype=window.Event.prototype,window.CustomEvent=j}var k=function(){function e(t,i,a){h(this,e),this.loader=t||new window.AureliaLoader,this.container=i||new o.Container,this.resources=a||new n.ViewResources,this.use=new b(this),this.logger=r.getLogger("aurelia"),this.hostConfigured=!1,this.host=null,this.use.instance(e,this),this.use.instance(s.Loader,this.loader),this.use.instance(n.ViewResources,this.resources),this.container.makeGlobal()}return e.prototype.start=function(){var e=this;return this.started?Promise.resolve(this):(this.started=!0,this.logger.info("Aurelia Starting"),this.use.apply().then(function(){if(v(),!e.container.hasHandler(n.BindingLanguage)){var t="You must configure Aurelia with a BindingLanguage implementation.";throw e.logger.error(t),new Error(t)}e.container.hasHandler(n.Animator)||n.Animator.configureDefault(e.container),e.logger.info("Aurelia Started");var r=new window.CustomEvent("aurelia-started",{bubbles:!0,cancelable:!0});return document.dispatchEvent(r),e}))},e.prototype.enhance=function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=arguments.length<=1||void 0===arguments[1]?null:arguments[1];return this._configureHost(r),new Promise(function(r){var i=e.container.get(n.ViewEngine);return e.root=i.enhance(e.container,e.host,e.resources,t),e.root.attached(),e._onAureliaComposed(),e})},e.prototype.setRoot=function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?"app":arguments[0],r=arguments.length<=1||void 0===arguments[1]?null:arguments[1],i=void 0,o={};return this._configureHost(r),i=this.container.get(n.CompositionEngine),o.viewModel=t,o.container=o.childContainer=this.container,o.viewSlot=this.hostSlot,o.host=this.host,i.compose(o).then(function(t){return e.root=t,o.viewSlot.attached(),e._onAureliaComposed(),e})},e.prototype._configureHost=function(e){this.hostConfigured||(e=e||this.host,e&&"string"!=typeof e?this.host=e:this.host=document.getElementById(e||"applicationHost")||document.body,this.hostConfigured=!0,this.host.aurelia=this,this.hostSlot=new n.ViewSlot(this.host,!0),this.hostSlot.transformChildNodesIntoView(),this.container.registerInstance(n.DOMBoundary,this.host))},e.prototype._onAureliaComposed=function(){var e=new window.CustomEvent("aurelia-composed",{bubbles:!0,cancelable:!0});setTimeout(function(){return document.dispatchEvent(e)},1)},e}();e.Aurelia=k,d(e,l(o,d)),d(e,l(a,d)),d(e,l(u,d)),d(e,l(n,d)),d(e,l(s,d)),d(e,l(c,d)),d(e,l(i,d));var w=r;e.LogManager=w}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/index",["exports","github:aurelia/validation@0.3.0/validation/validation-config","github:aurelia/validation@0.3.0/validation/validation","github:aurelia/validation@0.3.0/validation/utilities","github:aurelia/validation@0.3.0/validation/validation-locale","github:aurelia/validation@0.3.0/validation/validation-result","github:aurelia/validation@0.3.0/validation/validation-rules","github:aurelia/validation@0.3.0/validation/validate-custom-attribute","github:aurelia/validation@0.3.0/validation/validate-custom-attribute-view-strategy","github:aurelia/validation@0.3.0/validation/decorators","github:aurelia/validation@0.3.0/validation/validation-group"],function(e,t,r,n,i,o,s,a,u,c,l){"use strict";function d(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function h(e,t){for(var r=Object.getOwnPropertyNames(t),n=0;n<r.length;n++){var i=r[n],o=Object.getOwnPropertyDescriptor(t,i);o&&o.configurable&&void 0===e[i]&&Object.defineProperty(e,i,o)}return e}function p(e,n){return e.globalResources("./validation/validate-custom-attribute"),void 0!==n&&"function"==typeof n&&n(r.Validation.defaults),e.singleton(t.ValidationConfig,r.Validation.defaults),r.Validation.defaults.locale()}e.__esModule=!0,e.configure=p,e.Utilities=n.Utilities,e.ValidationConfig=t.ValidationConfig,e.ValidationLocale=i.ValidationLocale,h(e,d(o)),h(e,d(s)),e.Validation=r.Validation,e.ValidateCustomAttribute=a.ValidateCustomAttribute,e.ValidateCustomAttributeViewStrategy=u.ValidateCustomAttributeViewStrategy,e.ValidateCustomAttributeViewStrategyBase=u.ValidateCustomAttributeViewStrategyBase,e.ValidationGroup=l.ValidationGroup,e.ensure=c.ensure}),e()}(),System.registerDynamic("npm:core-js@0.9.18",["npm:core-js@0.9.18/index"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=require("npm:core-js@0.9.18/index"),r.define=n,t.exports}),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/logging@0.7.0",["github:aurelia/logging@0.7.0/aurelia-logging"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/templating@0.15.3",["github:aurelia/templating@0.15.3/aurelia-templating"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/path@0.9.0",["github:aurelia/path@0.9.0/aurelia-path"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/dependency-injection@0.10.1",["github:aurelia/dependency-injection@0.10.1/aurelia-dependency-injection"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/loader@0.9.0",["github:aurelia/loader@0.9.0/aurelia-loader"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/binding@0.9.1",["github:aurelia/binding@0.9.1/aurelia-binding"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/metadata@0.8.0",["github:aurelia/metadata@0.8.0/aurelia-metadata"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/task-queue@0.7.0",["github:aurelia/task-queue@0.7.0/aurelia-task-queue"],function(e){return e}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-config",["exports","github:aurelia/validation@0.3.0/validation/validation-locale","github:aurelia/validation@0.3.0/validation/validate-custom-attribute-view-strategy"],function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var i=function s(){n(this,s)};e.ValidationConfigDefaults=i,i._defaults={debounceTimeout:0,dependencies:[],locale:"en-US",localeResources:"aurelia-validation/resources/",viewStrategy:r.ValidateCustomAttributeViewStrategy.TWBootstrapAppendToMessage,allPropertiesAreMandatory:!1},i.defaults=function(){var e={};return Object.assign(e,i._defaults),e};var o=function(){function e(t){n(this,e),this.innerConfig=t,this.values=this.innerConfig?{}:i.defaults(),this.changedHandlers=new Map}return e.prototype.getValue=function(e){if(null!==this.values.hasOwnProperty(e)&&void 0!==this.values[e])return this.values[e];if(null!==this.innerConfig)return this.innerConfig.getValue(e);throw Error("Config not found: "+e)},e.prototype.setValue=function(e,t){return this.values[e]=t,this},e.prototype.onLocaleChanged=function(t){var r=this;if(void 0!==this.innerConfig)return this.innerConfig.onLocaleChanged(t);var n=function(){var n=++e.uniqueListenerId;return r.changedHandlers.set(n,t),{v:function(){r.changedHandlers["delete"](n)}}}();return"object"==typeof n?n.v:void 0},e.prototype.getDebounceTimeout=function(){return this.getValue("debounceTimeout")},e.prototype.useDebounceTimeout=function(e){return this.setValue("debounceTimeout",e)},e.prototype.getDependencies=function(){return this.getValue("dependencies")},e.prototype.computedFrom=function(e){var t=e;return"string"==typeof e&&(t=[],t.push(e)),this.setValue("dependencies",t)},e.prototype.useLocale=function(e){this.setValue("locale",e);for(var t=Array.from(this.changedHandlers.values()),r=0;r<t.length;r++)t[r]();return this},e.prototype.locale=function(){return t.ValidationLocale.Repository.load(this.getValue("locale"),this.getValue("localeResources"))},e.prototype.useViewStrategy=function(e){return this.setValue("viewStrategy",e)},e.prototype.getViewStrategy=function(){return this.getValue("viewStrategy")},e.prototype.treatAllPropertiesAsMandatory=function(){return this.setValue("allPropertiesAreMandatory",!0),this},e.prototype.treatAllPropertiesAsOptional=function(){return this.setValue("allPropertiesAreMandatory",!1),this},e}();e.ValidationConfig=o,o.uniqueListenerId=0}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation",["exports","github:aurelia/binding@0.9.1","github:aurelia/validation@0.3.0/validation/validation-rules","github:aurelia/validation@0.3.0/validation/validation-rules-collection","github:aurelia/validation@0.3.0/validation/validation-group","github:aurelia/dependency-injection@0.10.1","github:aurelia/validation@0.3.0/validation/validation-config"],function(e,t,r,n,i,o,s){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var u=function(){function e(t,n){a(this,r),this.observerLocator=t,this.config=n?n:e.defaults}var r=e;return r.prototype.on=function(e,t){var r=new s.ValidationConfig(this.config);return null!==t&&void 0!==t&&"function"==typeof t&&t(r),new i.ValidationGroup(e,this.observerLocator,r)},r.prototype.onBreezeEntity=function(e,t){var r=this.on(e,t);return r.onBreezeEntity(),r},e=o.inject(t.ObserverLocator)(e)||e}();e.Validation=u,u.defaults=new s.ValidationConfig}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/utilities",["exports"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var r=function(){function e(){t(this,e)}return e.getValue=function(e){return void 0!==e&&"function"==typeof e?e():e},e.isEmptyValue=function(e){return void 0===e?!0:null===e?!0:""===e?!0:("string"==typeof e&&(e=String.prototype.trim?e.trim():e.replace(/^\s+|\s+$/g,"")),void 0!==e.length?0===e.length:!1)},e}();e.Utilities=r}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-locale",["exports"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var r=function(){function e(r,n){t(this,e),this.defaults=r,this.currentLocale=n}return e.prototype.getValueFor=function(e,t){if(this.currentLocale&&this.currentLocale[t]){var r=this.currentLocale[t][e];if(void 0!==r&&null!==r)return r}if(this.defaults[t]){var n=this.defaults[t][e];if(void 0!==n&&null!==n)return n}throw"validation: I18N: Could not find: "+e+" in category: "+t},e.prototype.setting=function(e){return this.getValueFor(e,"settings")},e.prototype.translate=function(e,t,r){var n=this.getValueFor(e,"messages");if("function"==typeof n)return n(t,r);if("string"==typeof n)return n;throw"Validation message for "+e+"was in an unsupported format"},e}();e.ValidationLocale=r;var n=function(){function e(){t(this,e),this["default"]=null,this.instances=new Map,this.defaults={settings:{numericRegex:/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/},messages:{}}}return e.prototype.load=function(e,t){var r=this;return t||(t="aurelia-validation/resources/"),new Promise(function(n,i){if(r.instances.has(e)){var o=r.instances.get(e);n(o)}else System["import"](t+e).then(function(t){var i=r.addLocale(e,t.data);n(i)})})},e.prototype.addLocale=function(e,t){var n=new r(this.defaults,t);return this.instances.set(e,n),null===this["default"]&&(this["default"]=n),n},e}();r.Repository=new n}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-result",["exports"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var r=function(){function e(){t(this,e),this.isValid=!0,this.properties={}}return e.prototype.addProperty=function(e){return this.properties[e]||(this.properties[e]=new n(this)),this.properties[e]},e.prototype.checkValidity=function(){for(var e in this.properties)if(!this.properties[e].isValid)return void(this.isValid=!1);this.isValid=!0},e.prototype.clear=function(){this.isValid=!0},e}();e.ValidationResult=r;var n=function(){function e(r){t(this,e),this.group=r,this.onValidateCallbacks=[],this.clear()}return e.prototype.clear=function(){this.isValid=!0,this.isDirty=!1,this.message="",this.failingRule=null,this.latestValue=null,this.notifyObserversOfChange()},e.prototype.onValidate=function(e){this.onValidateCallbacks.push(e)},e.prototype.notifyObserversOfChange=function(){for(var e=0;e<this.onValidateCallbacks.length;e++){var t=this.onValidateCallbacks[e];t(this)}},e.prototype.setValidity=function(e,t){var r=!this.isDirty&&t||this.isValid!==e.isValid||this.message!==e.message;t&&(this.isDirty=!0),this.message=e.message,this.failingRule=e.failingRule,this.isValid=e.isValid,this.latestValue=e.latestValue,this.isValid!==this.group.isValid&&this.group.checkValidity(),r&&this.notifyObserversOfChange()},e}();e.ValidationResultProperty=n}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-rules",["exports","github:aurelia/validation@0.3.0/validation/utilities","github:aurelia/validation@0.3.0/validation/validation-locale"],function(e,t,r){"use strict";function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{
constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var o=function(){function e(t,r,n,o){i(this,e),this.onValidate=r,this.threshold=t,this.message=n,this.errorMessage=null,this.ruleName=o}return e.prototype.withMessage=function(e){this.message=e},e.prototype.explain=function(){return this.errorMessage},e.prototype.setResult=function(e,t,r){if(e===!0||void 0===e||null===e||""===e)return this.errorMessage=null,!0;if("string"==typeof e)this.errorMessage=e;else if(this.message)if("function"==typeof this.message)this.errorMessage=this.message(t,this.threshold);else{if("string"!=typeof this.message)throw"Unable to handle the error message:"+this.message;this.errorMessage=this.message}else this.errorMessage=r.translate(this.ruleName,t,this.threshold);return!1},e.prototype.validate=function(e,n){var i=this;void 0===n&&(n=r.ValidationLocale.Repository["default"]),e=t.Utilities.getValue(e);var o=this.onValidate(e,this.threshold,n),s=Promise.resolve(o),a=s.then(function(t){return i.setResult(t,e,n)},function(t){return"string"==typeof t&&""!==t?i.setResult(t,e,n):i.setResult(!1,e,n)});return a},e}();e.ValidationRule=o;var s=function(e){function t(r){i(this,t);var n={protocols:["http","https","ftp"],require_tld:!0,require_protocol:!1,allow_underscores:!0,allow_trailing_dot:!1,allow_protocol_relative_urls:!0};void 0===r&&(r=n),e.call(this,r,function(e,r){var n=e;if(!n||n.length>=2083||/\s/.test(n))return!1;if(0===n.indexOf("mailto:"))return!1;var i,o,s,a,u,c,l;if(l=n.split("://"),l.length>1){if(i=l.shift(),-1===r.protocols.indexOf(i))return!1}else{if(r.require_protocol)return!1;r.allow_protocol_relative_urls&&"//"===n.substr(0,2)&&(l[0]=n.substr(2))}return n=l.join("://"),l=n.split("#"),n=l.shift(),l=n.split("?"),n=l.shift(),l=n.split("/"),n=l.shift(),l=n.split("@"),l.length>1&&(o=l.shift(),o.indexOf(":")>=0&&o.split(":").length>2)?!1:(a=l.join("@"),l=a.split(":"),s=l.shift(),l.length&&(c=l.join(":"),u=parseInt(c,10),!/^[0-9]+$/.test(c)||0>=u||u>65535)?!1:t.isIP(s)||t.isFQDN(s,r)||"localhost"===s?r.host_whitelist&&-1===r.host_whitelist.indexOf(s)?!1:r.host_blacklist&&-1!==r.host_blacklist.indexOf(s)?!1:!0:!1)},null,"URLValidationRule")}return n(t,e),t.isIP=function(e,t){var r=/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/,n=/^[0-9A-F]{1,4}$/i;if(!t)return this.isIP(e,4)||this.isIP(e,6);if(4===t){if(!r.test(e))return!1;var i=e.split(".").sort(function(e,t){return e-t});return i[3]<=255}if(6===t){var o=e.split(":"),s=!1;if(o.length>8)return!1;if("::"===e)return!0;"::"===e.substr(0,2)?(o.shift(),o.shift(),s=!0):"::"===e.substr(e.length-2)&&(o.pop(),o.pop(),s=!0);for(var a=0;a<o.length;++a)if(""===o[a]&&a>0&&a<o.length-1){if(s)return!1;s=!0}else if(!n.test(o[a]))return!1;return s?o.length>=1:8===o.length}return!1},t.isFQDN=function(e,t){t.allow_trailing_dot&&"."===e[e.length-1]&&(e=e.substring(0,e.length-1));var r=e.split(".");if(t.require_tld){var n=r.pop();if(!r.length||!/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(n))return!1}for(var i,o=0;o<r.length;o++){if(i=r[o],t.allow_underscores){if(i.indexOf("__")>=0)return!1;i=i.replace(/_/g,"")}if(!/^[a-z\u00a1-\uffff0-9-]+$/i.test(i))return!1;if("-"===i[0]||"-"===i[i.length-1]||i.indexOf("---")>=0)return!1}return!0},t}(o);e.URLValidationRule=s;var a=function(e){function t(){i(this,t),e.call(this,null,function(e,r){if(/\s/.test(e))return!1;var n=e.split("@"),i=n.pop(),o=n.join("@");return t.isFQDN(i)?t.testEmailUserUtf8Regex(o):!1},null,"EmailValidationRule")}return n(t,e),t.testEmailUserUtf8Regex=function(e){var t=/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))$/i;return t.test(e)},t.isFQDN=function(e){for(var t,r=e.split("."),n=0;n<r.length;n++){if(t=r[n],t.indexOf("__")>=0)return!1;if(t=t.replace(/_/g,""),!/^[a-z\u00a1-\uffff0-9-]+$/i.test(t))return!1;if("-"===t[0]||"-"===t[t.length-1]||t.indexOf("---")>=0)return!1}return!0},t}(o);e.EmailValidationRule=a;var u=function(e){function t(r){i(this,t),e.call(this,r,function(e,t){return void 0!==e.length&&e.length>=t},null,"MinimumLengthValidationRule")}return n(t,e),t}(o);e.MinimumLengthValidationRule=u;var c=function(e){function t(r){i(this,t),e.call(this,r,function(e,t){return void 0!==e.length&&e.length<=t},null,"MaximumLengthValidationRule")}return n(t,e),t}(o);e.MaximumLengthValidationRule=c;var l=function(e){function t(r,n){i(this,t),e.call(this,{minimumLength:r,maximumLength:n},function(e,t){return void 0!==e.length&&e.length>=t.minimumLength&&e.length<=t.maximumLength},null,"BetweenLengthValidationRule")}return n(t,e),t}(o);e.BetweenLengthValidationRule=l;var d=function(e){function t(r,n){i(this,t),e.call(this,n,r,null,"CustomFunctionValidationRule")}return n(t,e),t}(o);e.CustomFunctionValidationRule=d;var h=function(e){function t(){i(this,t),e.call(this,null,function(e,t,r){var n=r.setting("numericRegex"),i=parseFloat(e);return!Number.isNaN(parseFloat(e))&&Number.isFinite(i)&&n.test(e)},null,"NumericValidationRule")}return n(t,e),t}(o);e.NumericValidationRule=h;var p=function(e){function t(r,n){i(this,t),e.call(this,r,function(e,t){return t.test(e)},null,n||"RegexValidationRule")}return n(t,e),t}(o);e.RegexValidationRule=p;var f=function(e){function t(r){i(this,t),e.call(this,r,"ContainsOnlyValidationRule")}return n(t,e),t}(p);e.ContainsOnlyValidationRule=f;var m=function(e){function r(n){i(this,r),e.call(this,n,function(e,r){return t.Utilities.getValue(r)<e},null,"MinimumValueValidationRule")}return n(r,e),r}(o);e.MinimumValueValidationRule=m;var g=function(e){function r(n){i(this,r),e.call(this,n,function(e,r){return t.Utilities.getValue(r)<=e},null,"MinimumInclusiveValueValidationRule")}return n(r,e),r}(o);e.MinimumInclusiveValueValidationRule=g;var v=function(e){function r(n){i(this,r),e.call(this,n,function(e,r){return e<t.Utilities.getValue(r)},null,"MaximumValueValidationRule")}return n(r,e),r}(o);e.MaximumValueValidationRule=v;var y=function(e){function r(n){i(this,r),e.call(this,n,function(e,r){return e<=t.Utilities.getValue(r)},null,"MaximumInclusiveValueValidationRule")}return n(r,e),r}(o);e.MaximumInclusiveValueValidationRule=y;var b=function(e){function r(n,o){i(this,r),e.call(this,{minimumValue:n,maximumValue:o},function(e,r){return t.Utilities.getValue(r.minimumValue)<=e&&e<=t.Utilities.getValue(r.maximumValue)},null,"BetweenValueValidationRule")}return n(r,e),r}(o);e.BetweenValueValidationRule=b;var j=function(e){function t(){i(this,t),e.call(this,null,function(e,t){return/^\d+$/.test(e)},null,"DigitValidationRule")}return n(t,e),t}(o);e.DigitValidationRule=j;var k=function(e){function t(){i(this,t),e.call(this,null,function(e,t){return/^\S*$/.test(e)},null,"NoSpacesValidationRule")}return n(t,e),t}(o);e.NoSpacesValidationRule=k;var w=function(e){function t(){i(this,t),e.call(this,null,function(e,t){return/^[a-z0-9]+$/i.test(e)},null,"AlphaNumericValidationRule")}return n(t,e),t}(o);e.AlphaNumericValidationRule=w;var x=function(e){function t(){i(this,t),e.call(this,null,function(e,t){return/^[a-z]+$/i.test(e)},null,"AlphaValidationRule")}return n(t,e),t}(o);e.AlphaValidationRule=x;var $=function(e){function t(){i(this,t),e.call(this,null,function(e,t){return/^[a-z\s]+$/i.test(e)},null,"AlphaOrWhitespaceValidationRule")}return n(t,e),t}(o);e.AlphaOrWhitespaceValidationRule=$;var S=function(e){function t(){i(this,t),e.call(this,null,function(e,t){return/^[a-z0-9\s]+$/i.test(e)},null,"AlphaNumericOrWhitespaceValidationRule")}return n(t,e),t}(o);e.AlphaNumericOrWhitespaceValidationRule=S;var z=function(e){function t(r,n){i(this,t),e.call(this,r?r:3,function(e,t){if("string"!=typeof e)return!1;var r=0;return r+=/[A-Z]+/.test(e)?1:0,r+=/[a-z]+/.test(e)?1:0,r+=/[0-9]+/.test(e)?1:0,r+=/[\W]+/.test(e)?1:0,r>=t},null,n||"MediumPasswordValidationRule")}return n(t,e),t}(o);e.MediumPasswordValidationRule=z;var C=function(e){function t(){i(this,t),e.call(this,4,"StrongPasswordValidationRule")}return n(t,e),t}(z);e.StrongPasswordValidationRule=C;var O=function(e){function r(n,o,s,a){i(this,r),e.call(this,{otherValue:n,equality:o,otherValueLabel:s},function(e,r){var n=t.Utilities.getValue(r.otherValue);return e instanceof Date&&n instanceof Date?r.equality===(e.getTime()===n.getTime()):r.equality===(e===n)},null,a||"EqualityValidationRuleBase")}return n(r,e),r}(o);e.EqualityValidationRuleBase=O;var E=function(e){function t(r){i(this,t),e.call(this,r,!0,null,"EqualityValidationRule")}return n(t,e),t}(O);e.EqualityValidationRule=E;var D=function(e){function t(r,n){i(this,t),e.call(this,r,!0,n,"EqualityWithOtherLabelValidationRule")}return n(t,e),t}(O);e.EqualityWithOtherLabelValidationRule=D;var V=function(e){function t(r){i(this,t),e.call(this,r,!1,null,"InEqualityValidationRule")}return n(t,e),t}(O);e.InEqualityValidationRule=V;var A=function(e){function t(r,n){i(this,t),e.call(this,r,!1,n,"InEqualityWithOtherLabelValidationRule")}return n(t,e),t}(O);e.InEqualityWithOtherLabelValidationRule=A;var R=function(e){function r(n){i(this,r),e.call(this,n,function(e,r){for(var n=t.Utilities.getValue(r),i=0;i<n.length;i++)if(e===n[i])return!0;return!1},null,"InCollectionValidationRule")}return n(r,e),r}(o);e.InCollectionValidationRule=R}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validate-custom-attribute",["exports","github:aurelia/dependency-injection@0.10.1","github:aurelia/templating@0.15.3"],function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var i=function(){function e(e){n(this,i),this.element=e,this.processedValidation=null,this.viewStrategy=null}var i=e;return i.prototype.valueChanged=function(e){null!==this.value&&void 0!==this.value&&(this.processedValidation=this.value,"string"!=typeof this.value&&this.subscribeChangedHandlers(this.element))},i.prototype.subscribeChangedHandlers=function(e){var t=this;this.viewStrategy=this.value.config.getViewStrategy();var r=this.viewStrategy.getValidationProperty(this.value,e);null!==r&&void 0!==r&&(this.viewStrategy.prepareElement(r,e),r.onValidate(function(r){t.viewStrategy.updateElement(r,e)}));for(var n=e.children,i=0;i<n.length;i++)this.subscribeChangedHandlers(n[i])},i.prototype.detached=function(){},i.prototype.attached=function(){(null===this.processedValidation||void 0===this.processedValidation)&&this.valueChanged(this.value)},e=t.inject(Element)(e)||e,e=r.customAttribute("validate")(e)||e}();e.ValidateCustomAttribute=i}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validate-custom-attribute-view-strategy",["exports"],function(e){"use strict";function t(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var n=function(){function e(){r(this,e),this.bindingPathAttributes=["validate","value.bind","value.two-way"]}return e.prototype.getValidationProperty=function(e,t){for(var r=t.attributes,n=0;n<this.bindingPathAttributes.length;n++){var i=this.bindingPathAttributes[n];if(r[i]){var o=r[i].value.trim();-1!=o.indexOf("|")&&(o=o.split("|")[0].trim());var s=e.result.properties[o];return"validate"!=i||null!==s&&void 0!==s||(e.ensure(o),s=e.result.properties[o]),s}}return null},e.prototype.prepareElement=function(e,t){throw Error("View strategy must implement prepareElement(validationProperty, element)")},e.prototype.updateElement=function(e,t){throw Error("View strategy must implement updateElement(validationProperty, element)")},e}();e.ValidateCustomAttributeViewStrategyBase=n;var i=function(e){function n(t,i,o){r(this,n),e.call(this),this.appendMessageToInput=t,this.appendMessageToLabel=i,this.helpBlockClass=o}return t(n,e),n.prototype.searchFormGroup=function(e,t){return 5===t?null:e.classList&&e.classList.contains("form-group")?e:this.searchFormGroup(e.parentNode,1+t)},n.prototype.findLabels=function(e,t){var r=[];return this.findLabelsRecursively(e,t,r,0),r},n.prototype.findLabelsRecursively=function(e,t,r,n){if(5!==n){"LABEL"===e.nodeName&&(e.attributes["for"]&&e.attributes["for"].value===t||!e.attributes["for"])&&r.push(e);for(var i=0;i<e.children.length;i++)this.findLabelsRecursively(e.children[i],t,r,1+n)}},n.prototype.appendMessageToElement=function(e,t){var r=e.nextSibling;r&&(r.classList?r.classList.contains(this.helpBlockClass)||(r=null):r=null),r||(r=document.createElement("p"),r.classList.add("help-block"),r.classList.add(this.helpBlockClass),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)),t?r.textContent=t.message:r.textContent=""},n.prototype.appendUIVisuals=function(e,t){var r=this.searchFormGroup(t,0);if(r&&(e&&e.isDirty?e.isValid?(r.classList.remove("has-warning"),r.classList.add("has-success")):(r.classList.remove("has-success"),r.classList.add("has-warning")):(r.classList.remove("has-warning"),r.classList.remove("has-success")),this.appendMessageToInput&&this.appendMessageToElement(t,e),this.appendMessageToLabel))for(var n=this.findLabels(r,t.id),i=0;i<n.length;i++){var o=n[i];this.appendMessageToElement(o,e)}},n.prototype.prepareElement=function(e,t){this.appendUIVisuals(null,t)},n.prototype.updateElement=function(e,t){this.appendUIVisuals(e,t)},n}(n);e.TWBootstrapViewStrategy=i;var o=function s(){r(this,s)};e.ValidateCustomAttributeViewStrategy=o,o.TWBootstrapAppendToInput=new i(!0,!1,"aurelia-validation-message"),o.TWBootstrapAppendToMessage=new i(!1,!0,"aurelia-validation-message")}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/decorators",["exports","github:aurelia/metadata@0.8.0"],function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e){return function(r,n){var i=t.Metadata.getOrCreateOwn(o.metadataKey,o,r),s=i.getOrCreateProperty(n);s.addSetupStep(e)}}e.__esModule=!0;var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();e.ensure=n;var o=function(){function e(){r(this,e),this.properties=[]}return e.prototype.getOrCreateProperty=function(e){var t=this.properties.find(function(t){return t.propertyName===e});return void 0===t&&(t=new s(e),this.properties.push(t)),t},e.prototype.setup=function(e){this.properties.forEach(function(t){t.setup(e)})},i(e,null,[{key:"metadataKey",value:"aurelia:validation",enumerable:!0}]),e}();e.ValidationMetadata=o;var s=function(){function e(t){r(this,e),this.propertyName=t,this.setupSteps=[]}return e.prototype.addSetupStep=function(e){this.setupSteps.push(e)},e.prototype.setup=function(e){e.ensure(this.propertyName),this.setupSteps.forEach(function(t){t(e)})},e}()}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-group",["exports","github:aurelia/metadata@0.8.0","github:aurelia/validation@0.3.0/validation/validation-group-builder","github:aurelia/validation@0.3.0/validation/validation-result","github:aurelia/validation@0.3.0/validation/validation-locale","github:aurelia/validation@0.3.0/validation/decorators"],function(e,t,r,n,i,o){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var a=function(){function e(i,a,u){var c=this;s(this,e),this.result=new n.ValidationResult,this.subject=i,this.validationProperties=[],this.config=u,this.builder=new r.ValidationGroupBuilder(a,this),this.onValidateCallbacks=[],this.onPropertyValidationCallbacks=[],this.isValidating=!1,this.onDestroy=u.onLocaleChanged(function(){c.validate(!1,!0)});var l=t.Metadata.getOwn(o.ValidationMetadata.metadataKey,this.subject);l&&l.setup(this)}return e.prototype.destroy=function(){for(var e=this.validationProperties.length-1;e>=0;e--)this.validationProperties[e].destroy();this.onDestroy()},e.prototype.clear=function(){this.validationProperties.forEach(function(e){e.clear()}),this.result.clear()},e.prototype.onBreezeEntity=function(){var e=this,t=this.subject,r=this;this.onPropertyValidate(function(r){e.passes(function(){t.entityAspect.validateProperty(r);var e=t.entityAspect.getValidationErrors(r);return 0===e.length?!0:e[0].errorMessage})}),this.onValidate(function(){return t.entityAspect.validateEntity(),{}}),t.entityAspect.validationErrorsChanged.subscribe(function(){t.entityAspect.getValidationErrors().forEach(function(e){var t=e.propertyName;r.result.properties[t]||r.ensure(t);var n=r.result.addProperty(t);n.isValid&&n.setValidity({isValid:!1,message:e.errorMessage,failingRule:"breeze",latestValue:n.latestValue},!0)})})},e.prototype.validate=function(){var e=this,t=void 0===arguments[0]?!0:arguments[0],r=void 0===arguments[1]?!0:arguments[1];this.isValidating=!0;for(var n=Promise.resolve(!0),i=function(i){var o=e.validationProperties[i];n=n.then(function(){return o.validateCurrentValue(t,r)})},o=this.validationProperties.length-1;o>=0;o--)i(o);return n=n["catch"](function(){throw console.log("Should never get here: a validation property should always resolve to true/false!"),Error("Should never get here: a validation property should always resolve to true/false!")}),this.onValidateCallbacks.forEach(function(t){n=n.then(function(){return e.config.locale()}).then(function(r){return Promise.resolve(t.validationFunction()).then(function(t){for(var n in t){e.result.properties[n]||e.ensure(n);var i=e.result.addProperty(n),o=t[n],s={latestValue:i.latestValue};o===!0||null===o||""===o?i.isValid||"onValidateCallback"!==i.failingRule||(s.failingRule=null,s.message="",s.isValid=!0,i.setValidity(s,!0)):i.isValid&&(s.failingRule="onValidateCallback",s.isValid=!1,"string"==typeof o?s.message=o:s.message=r.translate(s.failingRule),i.setValidity(s,!0))}e.result.checkValidity()},function(r,n,i,o,s){e.result.isValid=!1,t.validationFunctionFailedCallback&&t.validationFunctionFailedCallback(r,n,i,o,s)})})}),n=n.then(function(){return e.isValidating=!1,e.result.isValid?Promise.resolve(e.result):Promise.reject(e.result)})},e.prototype.onValidate=function(e,t){return this.onValidateCallbacks.push({validationFunction:e,validationFunctionFailedCallback:t}),this},e.prototype.onPropertyValidate=function(e){return this.onPropertyValidationCallbacks.push(e),this},e.prototype.ensure=function(e,t){return this.builder.ensure(e,t),this.onPropertyValidationCallbacks.forEach(function(t){t(e)}),this},e.prototype.isNotEmpty=function(){return this.builder.isNotEmpty()},e.prototype.canBeEmpty=function(){return this.builder.canBeEmpty()},e.prototype.isGreaterThanOrEqualTo=function(e){return this.builder.isGreaterThanOrEqualTo(e)},e.prototype.isGreaterThan=function(e){return this.builder.isGreaterThan(e)},e.prototype.isBetween=function(e,t){return this.builder.isBetween(e,t)},e.prototype.isLessThanOrEqualTo=function(e){return this.builder.isLessThanOrEqualTo(e)},e.prototype.isLessThan=function(e){return this.builder.isLessThan(e)},e.prototype.isEqualTo=function(e,t){return this.builder.isEqualTo(e,t)},e.prototype.isNotEqualTo=function(e,t){return this.builder.isNotEqualTo(e,t)},e.prototype.isEmail=function(){return this.builder.isEmail()},e.prototype.isURL=function(){return this.builder.isURL()},e.prototype.isIn=function(e){return this.builder.isIn(e)},e.prototype.hasMinLength=function(e){return this.builder.hasMinLength(e)},e.prototype.hasMaxLength=function(e){return this.builder.hasMaxLength(e)},e.prototype.hasLengthBetween=function(e,t){return this.builder.hasLengthBetween(e,t)},e.prototype.isNumber=function(){return this.builder.isNumber()},e.prototype.containsNoSpaces=function(){return this.builder.containsNoSpaces()},e.prototype.containsOnlyDigits=function(){return this.builder.containsOnlyDigits()},e.prototype.containsOnly=function(e){return this.builder.containsOnly(e)},e.prototype.containsOnlyAlpha=function(){return this.builder.containsOnlyAlpha()},e.prototype.containsOnlyAlphaOrWhitespace=function(){return this.builder.containsOnlyAlphaOrWhitespace()},e.prototype.containsOnlyLetters=function(){return this.builder.containsOnlyAlpha()},e.prototype.containsOnlyLettersOrWhitespace=function(){return this.builder.containsOnlyAlphaOrWhitespace()},e.prototype.containsOnlyAlphanumerics=function(){return this.builder.containsOnlyAlphanumerics()},e.prototype.containsOnlyAlphanumericsOrWhitespace=function(){return this.builder.containsOnlyAlphanumericsOrWhitespace()},e.prototype.isStrongPassword=function(e){return this.builder.isStrongPassword(e)},e.prototype.matches=function(e){return this.builder.matches(e)},e.prototype.passes=function(e,t){return this.builder.passes(e,t)},e.prototype.passesRule=function(e){return this.builder.passesRule(e)},e.prototype["if"]=function(e,t){return this.builder["if"](e,t)},e.prototype["else"]=function(){return this.builder["else"]()},e.prototype.endIf=function(){return this.builder.endIf()},e.prototype["switch"]=function(e){return this.builder["switch"](e)},e.prototype["case"]=function(e){return this.builder["case"](e)},e.prototype["default"]=function(){return this.builder["default"]()},e.prototype.endSwitch=function(){return this.builder.endSwitch()},e.prototype.withMessage=function(e){return this.builder.withMessage(e)},e}();e.ValidationGroup=a}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/logging@0.7.0/aurelia-logging",["exports"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t,r){if(t){if(t.innerError&&r)return t;t.stack&&(e+="\n------------------------------------------------\ninner error: "+t.stack)}var n=new Error(e);return t&&(n.innerError=t),n}function n(e,t,r){var n=g.length,i=void 0;for(r=v.call(r),r.unshift(e);n--;)i=g[n],i[t].apply(i,r)}function i(){4>m||n(this,"debug",arguments)}function o(){3>m||n(this,"info",arguments)}function s(){2>m||n(this,"warn",arguments)}function a(){1>m||n(this,"error",arguments)}function u(e){e.debug=i,e.info=o,e.warn=s,e.error=a}function c(e){var t=new b(e,y);return g.length&&u(t),t}function l(e){return f[e]||(f[e]=c(e))}function d(e){if(g.push(e),1===g.length)for(var t in f)u(f[t])}function h(e){m=e}e.__esModule=!0,e.AggregateError=r,e.getLogger=l,e.addAppender=d,e.setLevel=h;var p={none:0,error:1,warn:2,info:3,debug:4};e.logLevel=p;var f={},m=p.none,g=[],v=Array.prototype.slice,y={},b=function(){function e(r,n){if(t(this,e),n!==y)throw new Error('You cannot instantiate "Logger". Use the "getLogger" API instead.');this.id=r}return e.prototype.debug=function(e){},e.prototype.info=function(e){},e.prototype.warn=function(e){},e.prototype.error=function(e){},e}();e.Logger=b}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/path@0.9.0/aurelia-path",["exports"],function(e){"use strict";function t(e){for(var t=0;t<e.length;++t){var r=e[t];if("."===r)e.splice(t,1),t-=1;else if(".."===r){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}}function r(e,r){var n=r&&r.split("/"),i=e.trim().split("/");if("."===i[0].charAt(0)&&n){var o=n.slice(0,n.length-1);i.unshift.apply(i,o)}return t(i),i.join("/")}function n(e,t){if(!e)return t;if(!t)return e;var r=e.match(/^([^\/]*?:)\//),n=r&&r.length>0?r[1]:"";e=e.substr(n.length);var i=void 0;i=0===e.indexOf("///")&&"file:"===n?"///":0===e.indexOf("//")?"//":0===e.indexOf("/")?"/":"";for(var o="/"===t.slice(-1)?"/":"",s=e.split("/"),a=t.split("/"),u=[],c=0,l=s.length;l>c;++c)if(".."===s[c])u.pop();else{if("."===s[c]||""===s[c])continue;u.push(s[c])}for(var c=0,l=a.length;l>c;++c)if(".."===a[c])u.pop();else{if("."===a[c]||""===a[c])continue;u.push(a[c])}return n+i+u.join("/")+o}function i(e){for(var t=[],r=Object.keys(e||{}).sort(),n=encodeURIComponent,i=function(e){return n(e).replace("%24","$")},o=0,s=r.length;s>o;o++){var a=r[o],u=e[a];if(null!==u&&void 0!==u)if(Array.isArray(u))for(var c=i(a)+"[]",l=0,d=u.length;d>l;l++)t.push(c+"="+n(u[l]));else t.push(i(a)+"="+n(u))}return 0===t.length?"":t.join("&")}function o(e){var t={};if(!e||"string"!=typeof e)return t;var r=e;"?"===r.charAt(0)&&(r=r.substr(1));for(var n=r.split("&"),i=0;i<n.length;i++){var o=n[i].split("="),s=decodeURIComponent(o[0]),a=s.length,u=!1,c=void 0;s&&(1===o.length?c=!0:(a>2&&"[]"===s.slice(a-2)&&(u=!0,s=s.slice(0,a-2),t[s]||(t[s]=[])),c=o[1]?decodeURIComponent(o[1]):""),u?t[s].push(c):t[s]=c)}return t}e.__esModule=!0,e.relativeToFile=r,e.join=n,e.buildQueryString=i,e.parseQueryString=o}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/task-queue@0.7.0/aurelia-task-queue",["exports"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e){var t=1,r=new i(e),n=document.createTextNode("");return r.observe(n,{characterData:!0}),function(){t=-t,n.data=t}}function n(e){return function(){function t(){clearTimeout(r),clearInterval(n),e()}var r=setTimeout(t,0),n=setInterval(t,50)}}e.__esModule=!0;var i=window.MutationObserver||window.WebKitMutationObserver,o="function"==typeof setImmediate,s=function(){function e(){var o=this;t(this,e),this.microTaskQueue=[],this.microTaskQueueCapacity=1024,this.taskQueue=[],"function"==typeof i?this.requestFlushMicroTaskQueue=r(function(){return o.flushMicroTaskQueue()}):this.requestFlushMicroTaskQueue=n(function(){return o.flushMicroTaskQueue()}),this.requestFlushTaskQueue=n(function(){return o.flushTaskQueue()})}return e.prototype.queueMicroTask=function(e){this.microTaskQueue.length<1&&this.requestFlushMicroTaskQueue(),this.microTaskQueue.push(e)},e.prototype.queueTask=function(e){this.taskQueue.length<1&&this.requestFlushTaskQueue(),this.taskQueue.push(e)},e.prototype.flushTaskQueue=function(){var e=this.taskQueue,t=0,r=void 0;this.taskQueue=[];try{for(;t<e.length;)r=e[t],r.call(),t++}catch(n){this.onError(n,r)}},e.prototype.flushMicroTaskQueue=function(){var e=this.microTaskQueue,t=this.microTaskQueueCapacity,r=0,n=void 0;try{for(;r<e.length;)if(n=e[r],n.call(),r++,r>t){for(var i=0;r>i;i++)e[i]=e[i+r];e.length-=r,r=0}}catch(o){this.onError(o,n)}e.length=0},e.prototype.onError=function(e,t){"onError"in t?t.onError(e):o?setImmediate(function(){throw e}):setTimeout(function(){throw e},0)},e}();e.TaskQueue=s}),e()}(),System.registerDynamic("npm:core-js@0.9.18/index",["npm:core-js@0.9.18/shim","npm:core-js@0.9.18/modules/core.dict","npm:core-js@0.9.18/modules/core.iter-helpers","npm:core-js@0.9.18/modules/core.$for","npm:core-js@0.9.18/modules/core.delay","npm:core-js@0.9.18/modules/core.function.part","npm:core-js@0.9.18/modules/core.object","npm:core-js@0.9.18/modules/core.array.turn","npm:core-js@0.9.18/modules/core.number.iterator","npm:core-js@0.9.18/modules/core.number.math","npm:core-js@0.9.18/modules/core.string.escape-html","npm:core-js@0.9.18/modules/core.date","npm:core-js@0.9.18/modules/core.global","npm:core-js@0.9.18/modules/core.log","npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("npm:core-js@0.9.18/shim"),require("npm:core-js@0.9.18/modules/core.dict"),require("npm:core-js@0.9.18/modules/core.iter-helpers"),require("npm:core-js@0.9.18/modules/core.$for"),require("npm:core-js@0.9.18/modules/core.delay"),require("npm:core-js@0.9.18/modules/core.function.part"),require("npm:core-js@0.9.18/modules/core.object"),require("npm:core-js@0.9.18/modules/core.array.turn"),require("npm:core-js@0.9.18/modules/core.number.iterator"),require("npm:core-js@0.9.18/modules/core.number.math"),require("npm:core-js@0.9.18/modules/core.string.escape-html"),require("npm:core-js@0.9.18/modules/core.date"),require("npm:core-js@0.9.18/modules/core.global"),require("npm:core-js@0.9.18/modules/core.log"),t.exports=require("npm:core-js@0.9.18/modules/$").core,r.define=n,t.exports}),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/templating@0.15.3/aurelia-templating",["exports","npm:core-js@0.9.18","github:aurelia/logging@0.7.0","github:aurelia/metadata@0.8.0","github:aurelia/path@0.9.0","github:aurelia/loader@0.9.0","github:aurelia/binding@0.9.1","github:aurelia/dependency-injection@0.10.1","github:aurelia/task-queue@0.7.0"],function(e,t,r,n,i,o,s,a,u){"use strict";function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e){if(e.nextElementSibling)return e.nextElementSibling;do e=e.nextSibling;while(e&&1!==e.nodeType);return e}function h(e){var t=document.createElement("div");t.innerHTML=e;var r=t.firstElementChild;if(te)for(r.content=document.createDocumentFragment();r.firstChild;)r.content.appendChild(r.firstChild);return r}function p(e,t,r){t.parentNode?t.parentNode.replaceChild(e,t):re?re.unwrap(r).replaceChild(re.unwrap(e),re.unwrap(t)):r.replaceChild(e,t)}function f(e,t){e.parentNode?e.parentNode.removeChild(e):re?re.unwrap(t).removeChild(re.unwrap(e)):t.removeChild(e)}function m(e,t,r){var n=document.createElement("style");return n.innerHTML=e,n.type="text/css",t=t||document.head,r&&t.childNodes.length>0?t.insertBefore(n,t.childNodes[0]):t.appendChild(n),n}function g(e){return"-"+e.toLowerCase()}function v(e){return(e.charAt(0).toLowerCase()+e.slice(1)).replace(ae,g)}function y(e,t,r,n){if(t){var i=e[t];if(i){if(i!==r)throw new Error("Attempted to register "+n+" when one with the same name already exists. Name: "+t+".")}else e[t]=r}}function b(e,t){for(var r;!r&&t>=0;)r=e[t][0],t--;return r}function j(e){var t=e.firstChild;if(null!==t&&void 0!==t&&8===t.nodeType){var r=d(t);if(null!==r&&void 0!==r&&1===r.nodeType&&r.classList.contains("au-animate"))return r}return null}function k(e){if(e===Element)return this.element;if(e===Se){if(this.boundViewFactory)return this.boundViewFactory;var t=this.instruction.viewFactory,r=this.partReplacements;return r&&(t=r[t.part]||t),this.boundViewFactory=new Se(this,t,this.bindingContext,r)}return e===$e?(void 0===this.viewSlot&&(this.viewSlot=new $e(this.element,this.instruction.anchorIsContainer,this.bindingContext),this.children.push(this.viewSlot)),this.viewSlot):e===be?this.viewResources:e===de?this.instruction:this.superGet(e)}function w(e,t,r,n,i,o,s){var a,u,c=e.createChild();for(c.element=t,c.instruction=r,c.bindingContext=n,c.children=i,c.viewResources=s,c.partReplacements=o,a=r.providers,u=a.length;u--;)c.registerSingleton(a[u]);return c.superGet=c.get,c.get=k,c}function x(e,t){var r=document.createComment("anchor");return t&&(r.hasAttribute=function(t){return e.hasAttribute(t)},r.getAttribute=function(t){return e.getAttribute(t)},r.setAttribute=function(t,r){e.setAttribute(t,r)}),e.parentNode.replaceChild(r,e),r}function $(e,t,r,n,i,o,s,a,u,c){var l,d,h,p,f,m=n.behaviorInstructions,g=n.expressions;if(n.contentExpression)return o.push(n.contentExpression.createBinding(r.nextSibling)),
void r.parentNode.removeChild(r);if(n.contentSelector){var v=document.createComment("anchor");return r.parentNode.replaceChild(v,r),void a.push(new xe(v,n.selector))}if(m.length)for(n.anchorIsContainer||(r=x(r,n.elementInstruction)),e[n.injectorId]=l=w(e[n.parentInjectorId],r,n,t,s,u,c),d=0,h=m.length;h>d;++d)p=m[d],f=p.type.create(l,p,r,o,p.partReplacements),f.contentView&&s.push(f.contentView),i.push(f);for(d=0,h=g.length;h>d;++d)o.push(g[d].createBinding(r))}function S(e,t){var r,n,i,o,s,a=e.split(";");for(t=t||{},n=0;n<a.length;n++)i=a[n],r=i.indexOf(":"),o=i.substring(0,r).trim(),s=i.substring(r+1).trim(),t[o]=s;return t}function z(e){var t="";for(var r in e)t+=r+":"+e[r]+";";return t}function C(e,t,r,n,i,o){var s=r.behaviorInstructions,a=r.expressions,u=r.providers,c=r.values,l=void 0,d=void 0,h=void 0,p=void 0,f=void 0;for(l=u.length;l--;)e.registerSingleton(u[l]);for(var m in c)if(f=t.getAttribute(m)){if("class"===m)t.setAttribute("class",f+" "+c[m]);else if("style"===m){var g=S(c[m]);S(f,g),t.setAttribute("style",z(g))}}else t.setAttribute(m,c[m]);if(s.length)for(l=0,d=s.length;d>l;++l)h=s[l],p=h.type.create(e,h,t,i,h.partReplacements),p.contentView&&o.push(p.contentView),n.push(p);for(l=0,d=a.length;d>l;++l)i.push(a[l].createBinding(t))}function O(){return++Ce}function E(e,t){var r,n,i,o=e.type,s=e.attrName,a=e.attributes,u=t.mapAttribute(s);u&&s in a&&u!==s&&(a[u]=a[s],delete a[s]);for(n in a)i=a[n],null!==i&&"object"==typeof i&&(r=o.attributes[n],void 0!==r?i.targetProperty=r.name:i.targetProperty=n)}function D(){return(++Oe).toString()}function V(e){var t=e.getAttribute("class"),r=D();return e.setAttribute("class",t?t+=" au-target":"au-target"),e.setAttribute("au-target-id",r),r}function A(e,t){return t instanceof o.TemplateRegistryEntry?Promise.resolve(t):e.loadTemplate(t)}function R(e,t,r){var n=t.__observers__;return void 0===n&&(n=e.observerLocator.getOrCreateObserversLookup(t),e.ensurePropertiesDefined(t,n)),n[r]}function M(){return!0}function P(e,t){if(/[A-Z]/.test(e))throw new Error("'"+e+"' is not a valid "+t+" name.  Upper-case letters are not allowed because the DOM is not case-sensitive.")}function N(e){return function(t){n.Metadata.define(n.Metadata.resource,e,t)}}function L(e){return function(t){if(e instanceof Le)n.Metadata.define(n.Metadata.resource,e,t);else{var r=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,t);Object.assign(r,e)}}}function F(e){return P(e,"custom element"),function(t){var r=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,t);r.elementName=e}}function T(e,t){return P(e,"custom attribute"),function(r){var i=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,r);i.attributeName=e,i.attributeDefaultBindingMode=t}}function I(e){var t=function(e){var t=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,e);t.liftsContent=!0};return e?t(e):t}function _(e,t,r){var i=function(t,r,i){var o,s=r?t.constructor:t,a=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,s);return r&&(e=e||{},e.name=r),o=new Me(e),o.registerWith(s,a,i)};if(!e)return i;if(t){var o=e;return e=null,i(o,t,r)}return i}function q(e){var t=function(e){var t=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,e);t.hasDynamicOptions=!0};return e?t(e):t}function B(e){return function(t,r,i){var o=r?t.constructor:t,s=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,o);"string"==typeof e&&(e={selector:e,name:r}),s.addChildBinding(new qe(e))}}function W(e){var t=function(e){var t=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,e);t.targetShadowDOM=!0};return e?t(e):t}function G(){return!1}function U(e){var t=function(e){var t=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,e);t.processContent=G,console.warn("The @skipContentProcessing decorator is deprecated and will be removed in a future release. Please use @processContent(false) instead.")};return e?t(e):t}function H(e){return function(t){var r=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,t);r.processContent=e||G}}function K(e){var t=function(e){var t=n.Metadata.getOrCreateOwn(n.Metadata.resource,Le,e);t.containerless=!0};return e?t(e):t}function Q(e){return function(t){n.Metadata.define(he.metadataKey,e,t)}}function Y(e){return Q(new pe(e))}function J(e,t,r){return Q(new ve(e,t,r))}function X(e){var t=function(e){n.Metadata.define(he.metadataKey,new me,e)};return e?t(e):t}function Z(e){var t=function(e){n.Metadata.define(n.Metadata.resource,new Ge,e)};return e?t(e):t}e.__esModule=!0;var ee=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();e.nextElementSibling=d,e.createTemplateFromMarkup=h,e.replaceNode=p,e.removeNode=f,e.injectStyles=m,e.hyphenate=v,e.resource=N,e.behavior=L,e.customElement=F,e.customAttribute=T,e.templateController=I,e.bindable=_,e.dynamicOptions=q,e.sync=B,e.useShadowDOM=W,e.skipContentProcessing=U,e.processContent=H,e.containerless=K,e.viewStrategy=Q,e.useView=Y,e.inlineView=J,e.noView=X,e.elementConfig=Z;var te=!("content"in document.createElement("template")),re=window.ShadowDOMPolyfill||null,ne="aurelia-dom-boundary";e.DOMBoundary=ne;var ie=!!HTMLElement.prototype.createShadowRoot;e.hasShadowDOM=ie;var oe={enterBegin:"animation:enter:begin",enterActive:"animation:enter:active",enterDone:"animation:enter:done",enterTimeout:"animation:enter:timeout",leaveBegin:"animation:leave:begin",leaveActive:"animation:leave:active",leaveDone:"animation:leave:done",leaveTimeout:"animation:leave:timeout",staggerNext:"animation:stagger:next",removeClassBegin:"animation:remove-class:begin",removeClassActive:"animation:remove-class:active",removeClassDone:"animation:remove-class:done",removeClassTimeout:"animation:remove-class:timeout",addClassBegin:"animation:add-class:begin",addClassActive:"animation:add-class:active",addClassDone:"animation:add-class:done",addClassTimeout:"animation:add-class:timeout",animateBegin:"animation:animate:begin",animateActive:"animation:animate:active",animateDone:"animation:animate:done",animateTimeout:"animation:animate:timeout",sequenceBegin:"animation:sequence:begin",sequenceDone:"animation:sequence:done"};e.animationEvent=oe;var se=function(){function e(){l(this,e)}return e.configureDefault=function(t,r){t.registerInstance(e,e.instance=r||new e)},e.prototype.move=function(){return Promise.resolve(!1)},e.prototype.enter=function(e){return Promise.resolve(!1)},e.prototype.leave=function(e){return Promise.resolve(!1)},e.prototype.removeClass=function(e,t){return Promise.resolve(!1)},e.prototype.addClass=function(e,t){return Promise.resolve(!1)},e.prototype.animate=function(e,t,r){return Promise.resolve(!1)},e.prototype.runSequence=function(e){},e.prototype.registerEffect=function(e,t){},e.prototype.unregisterEffect=function(e){},e}();e.Animator=se;var ae=/([A-Z])/g,ue=function(){function e(){l(this,e),this.dependencies={}}return e.prototype.addDependency=function(e){this.dependencies[e]=!0},e.prototype.doesNotHaveDependency=function(e){return!(e in this.dependencies)},e}();e.ResourceLoadContext=ue;var ce=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?!1:arguments[0],r=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];l(this,e),this.targetShadowDOM=t,this.compileSurrogate=r,this.associatedModuleId=null}return ee(e,null,[{key:"normal",value:new e,enumerable:!0}]),e}();e.ViewCompileInstruction=ce;var le=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];l(this,e),this.suppressBind=t,this.initiatedByBehavior=!1,this.systemControlled=!1,this.enhance=!1,this.partReplacements=null,this.viewFactory=null,this.originalAttrName=null,this.skipContentProcessing=!1,this.contentFactory=null,this.bindingContext=null,this.anchorIsContainer=!1,this.host=null,this.attributes=null,this.type=null,this.attrName=null}return e.element=function(t,r){var n=new e(!0);return n.type=r,n.attributes={},n.anchorIsContainer=!(t.hasAttribute("containerless")||r.containerless),n.initiatedByBehavior=!0,n},e.attribute=function(t,r){var n=new e(!0);return n.attrName=t,n.type=r||null,n.attributes={},n},e.dynamic=function(t,r,n){var i=new e(!0);return i.host=t,i.bindingContext=r,i.viewFactory=n,i},ee(e,null,[{key:"normal",value:new e,enumerable:!0},{key:"contentSelector",value:new e(!0),enumerable:!0}]),e}();e.BehaviorInstruction=le;var de=function(){function e(){l(this,e),this.injectorId=null,this.parentInjectorId=null,this.contentSelector=!1,this.selector=null,this.suppressBind=!1,this.contentExpression=null,this.expressions=null,this.behaviorInstructions=null,this.providers=null,this.viewFactory=null,this.anchorIsContainer=!1,this.elementInstruction=null,this.values=null}return e.contentSelector=function(t,r){var n=new e;return n.parentInjectorId=r,n.contentSelector=!0,n.selector=t.getAttribute("select"),n.suppressBind=!0,n},e.contentExpression=function(t){var r=new e;return r.contentExpression=t,r},e.lifting=function(t,r){var n=new e;return n.parentInjectorId=t,n.expressions=e.noExpressions,n.behaviorInstructions=[r],n.viewFactory=r.viewFactory,n.providers=[r.type.target],n},e.normal=function(t,r,n,i,o,s){var a=new e;return a.injectorId=t,a.parentInjectorId=r,a.providers=n,a.behaviorInstructions=i,a.expressions=o,a.anchorIsContainer=s?s.anchorIsContainer:!0,a.elementInstruction=s,a},e.surrogate=function(t,r,n,i){var o=new e;return o.expressions=n,o.behaviorInstructions=r,o.providers=t,o.values=i,o},ee(e,null,[{key:"noExpressions",value:Object.freeze([]),enumerable:!0}]),e}();e.TargetInstruction=de;var he=function(){function e(){l(this,e)}return e.prototype.makeRelativeTo=function(e){},e.normalize=function(t){if("string"==typeof t&&(t=new pe(t)),t&&!(t instanceof e))throw new Error("The view must be a string or an instance of ViewStrategy.");return t},e.getDefault=function(t){var r,i;if("function"!=typeof t&&(t=t.constructor),i=n.Origin.get(t),r=n.Metadata.get(e.metadataKey,t))i&&(r.moduleId=i.moduleId);else{if(!i)throw new Error("Cannot determinte default view strategy for object.",t);r=new fe(i.moduleId)}return r},ee(e,null,[{key:"metadataKey",value:"aurelia:view-strategy",enumerable:!0}]),e}();e.ViewStrategy=he;var pe=function(e){function t(r){l(this,t),e.call(this),this.path=r}return c(t,e),t.prototype.loadViewFactory=function(e,t,r){return!this.absolutePath&&this.moduleId&&(this.absolutePath=i.relativeToFile(this.path,this.moduleId)),t.associatedModuleId=this.moduleId,e.loadViewFactory(this.absolutePath||this.path,t,r)},t.prototype.makeRelativeTo=function(e){this.absolutePath=i.relativeToFile(this.path,e)},t}(he);e.UseViewStrategy=pe;var fe=function(e){function t(r){l(this,t),e.call(this),this.moduleId=r,this.viewUrl=t.convertModuleIdToViewUrl(r)}return c(t,e),t.prototype.loadViewFactory=function(e,t,r){return t.associatedModuleId=this.moduleId,e.loadViewFactory(this.viewUrl,t,r)},t.convertModuleIdToViewUrl=function(e){var t=e.endsWith(".js")||e.endsWith(".ts")?e.substring(0,e.length-3):e;return t+".html"},t}(he);e.ConventionalViewStrategy=fe;var me=function(e){function t(){l(this,t),e.apply(this,arguments)}return c(t,e),t.prototype.loadViewFactory=function(e,t,r){return Promise.resolve(null)},t}(he);e.NoViewStrategy=me;var ge=function(e){function t(r,n){l(this,t),e.call(this),this.moduleId=r,this.entry=n}return c(t,e),t.prototype.loadViewFactory=function(e,t,r){var n=this.entry;return n.isReady?Promise.resolve(n.factory):(t.associatedModuleId=this.moduleId,e.loadViewFactory(n,t,r))},t}(he);e.TemplateRegistryViewStrategy=ge;var ve=function(e){function t(r,n,i){l(this,t),e.call(this),this.markup=r,this.dependencies=n||null,this.dependencyBaseUrl=i||""}return c(t,e),t.prototype.loadViewFactory=function(e,t,r){var n=this.entry,i=this.dependencies;if(n&&n.isReady)return Promise.resolve(n.factory);if(this.entry=n=new o.TemplateRegistryEntry(this.moduleId||this.dependencyBaseUrl),n.setTemplate(h(this.markup)),null!==i)for(var s=0,a=i.length;a>s;++s){var u=i[s];"string"==typeof u||"function"==typeof u?n.addDependency(u):n.addDependency(u.from,u.as)}return t.associatedModuleId=this.moduleId,e.loadViewFactory(n,t,r)},t}(he);e.InlineViewStrategy=ve;var ye=function(){function e(){l(this,e)}return e.prototype.inspectAttribute=function(e,t,r){throw new Error("A BindingLanguage must implement inspectAttribute(...)")},e.prototype.createAttributeInstruction=function(e,t,r,n){throw new Error("A BindingLanguage must implement createAttributeInstruction(...)")},e.prototype.parseText=function(e,t){throw new Error("A BindingLanguage must implement parseText(...)")},e}();e.BindingLanguage=ye;var be=function(){function e(t,r){l(this,e),this.parent=t||null,this.hasParent=null!==this.parent,this.viewUrl=r||"",this.valueConverterLookupFunction=this.getValueConverter.bind(this),this.attributes={},this.elements={},this.valueConverters={},this.attributeMap={},this.bindingLanguage=null,this.hook1=null,this.hook2=null,this.hook3=null,this.additionalHooks=null}return e.prototype.onBeforeCompile=function(e,t,r){if(this.hasParent&&this.parent.onBeforeCompile(e,t,r),null!==this.hook1&&(this.hook1.beforeCompile(e,t,r),null!==this.hook2&&(this.hook2.beforeCompile(e,t,r),null!==this.hook3&&(this.hook3.beforeCompile(e,t,r),null!==this.additionalHooks))))for(var n=this.additionalHooks,i=0,o=n.length;o>i;++i)n[i].beforeCompile(e,t,r)},e.prototype.onAfterCompile=function(e){if(this.hasParent&&this.parent.onAfterCompile(e),null!==this.hook1&&(this.hook1.afterCompile(e),null!==this.hook2&&(this.hook2.afterCompile(e),null!==this.hook3&&(this.hook3.afterCompile(e),null!==this.additionalHooks))))for(var t=this.additionalHooks,r=0,n=t.length;n>r;++r)t[r].afterCompile(e)},e.prototype.onBeforeCreate=function(e,t,r,n,i){if(this.hasParent&&this.parent.onBeforeCreate(e,t,r,n,i),null!==this.hook1&&(this.hook1.beforeCreate(e,t,r,n,i),null!==this.hook2&&(this.hook2.beforeCreate(e,t,r,n,i),null!==this.hook3&&(this.hook3.beforeCreate(e,t,r,n,i),null!==this.additionalHooks))))for(var o=this.additionalHooks,s=0,a=o.length;a>s;++s)o[s].beforeCreate(e,t,r,n,i)},e.prototype.onAfterCreate=function(e){if(this.hasParent&&this.parent.onAfterCreate(e),null!==this.hook1&&(this.hook1.afterCreate(e),null!==this.hook2&&(this.hook2.afterCreate(e),null!==this.hook3&&(this.hook3.afterCreate(e),null!==this.additionalHooks))))for(var t=this.additionalHooks,r=0,n=t.length;n>r;++r)t[r].afterCreate(e)},e.prototype.registerViewEngineHooks=function(e){void 0===e.beforeCompile&&(e.beforeCompile=n.Metadata.noop),void 0===e.afterCompile&&(e.afterCompile=n.Metadata.noop),void 0===e.beforeCreate&&(e.beforeCreate=n.Metadata.noop),void 0===e.afterCreate&&(e.afterCreate=n.Metadata.noop),null===this.hook1?this.hook1=e:null===this.hook2?this.hook2=e:null===this.hook3?this.hook3=e:(null===this.additionalHooks&&(this.additionalHooks=[]),this.additionalHooks.push(e))},e.prototype.getBindingLanguage=function(e){return this.bindingLanguage||(this.bindingLanguage=e)},e.prototype.patchInParent=function(e){var t=this.parent;this.parent=e||null,this.hasParent=null!==this.parent,null===e.parent&&(e.parent=t,e.hasParent=null!==t)},e.prototype.relativeToView=function(e){return i.relativeToFile(e,this.viewUrl)},e.prototype.registerElement=function(e,t){y(this.elements,e,t,"an Element")},e.prototype.getElement=function(e){return this.elements[e]||(this.hasParent?this.parent.getElement(e):null)},e.prototype.mapAttribute=function(e){return this.attributeMap[e]||(this.hasParent?this.parent.mapAttribute(e):null)},e.prototype.registerAttribute=function(e,t,r){this.attributeMap[e]=r,y(this.attributes,e,t,"an Attribute")},e.prototype.getAttribute=function(e){return this.attributes[e]||(this.hasParent?this.parent.getAttribute(e):null)},e.prototype.registerValueConverter=function(e,t){y(this.valueConverters,e,t,"a ValueConverter")},e.prototype.getValueConverter=function(e){return this.valueConverters[e]||(this.hasParent?this.parent.getValueConverter(e):null)},e}();e.ViewResources=be;var je=function(){function e(t,r,n,i,o,s,a,u){l(this,e),this.viewFactory=t,this.container=r,this.fragment=n,this.behaviors=i,this.bindings=o,this.children=s,this.systemControlled=a,this.contentSelectors=u,this.firstChild=n.firstChild,this.lastChild=n.lastChild,this.isBound=!1,this.isAttached=!1,this.fromCache=!1}return e.prototype.returnToCache=function(){this.viewFactory.returnViewToCache(this)},e.prototype.created=function(){var e,t,r=this.behaviors;for(e=0,t=r.length;t>e;++e)r[e].created(this)},e.prototype.bind=function(e,t){var r,n,i,o,s,a;if(r=t&&!this.systemControlled?this.bindingContext||e:e||this.bindingContext,this.isBound){if(this.bindingContext===r)return;this.unbind()}for(this.isBound=!0,this.bindingContext=r,this.owner&&this.owner.bind(r),i=this.bindings,s=0,a=i.length;a>s;++s)i[s].bind(r);for(n=this.behaviors,s=0,a=n.length;a>s;++s)n[s].bind(r);for(o=this.children,s=0,a=o.length;a>s;++s)o[s].bind(r,!0)},e.prototype.addBinding=function(e){this.bindings.push(e),this.isBound&&e.bind(this.bindingContext)},e.prototype.unbind=function(){var e,t,r,n,i;if(this.isBound){for(this.isBound=!1,this.owner&&this.owner.unbind(),t=this.bindings,n=0,i=t.length;i>n;++n)t[n].unbind();for(e=this.behaviors,n=0,i=e.length;i>n;++n)e[n].unbind();for(r=this.children,n=0,i=r.length;i>n;++n)r[n].unbind()}},e.prototype.insertNodesBefore=function(e){var t=e.parentNode;t.insertBefore(this.fragment,e)},e.prototype.appendNodesTo=function(e){e.appendChild(this.fragment)},e.prototype.removeNodes=function(){for(var e,t=this.firstChild,r=this.lastChild,n=(this.fragment,t),i=!0;i;)n===r&&(i=!1),e=n.nextSibling,this.fragment.appendChild(n),n=e},e.prototype.attached=function(){var e,t,r,n;if(!this.isAttached){for(this.isAttached=!0,this.owner&&this.owner.attached(),e=this.behaviors,r=0,n=e.length;n>r;++r)e[r].attached();for(t=this.children,r=0,n=t.length;n>r;++r)t[r].attached()}},e.prototype.detached=function(){var e,t,r,n;if(this.isAttached){for(this.isAttached=!1,this.owner&&this.owner.detached(),e=this.behaviors,r=0,n=e.length;n>r;++r)e[r].detached();for(t=this.children,r=0,n=t.length;n>r;++r)t[r].detached()}},e}();if(e.View=je,Element&&!Element.prototype.matches){var ke=Element.prototype;ke.matches=ke.matchesSelector||ke.mozMatchesSelector||ke.msMatchesSelector||ke.oMatchesSelector||ke.webkitMatchesSelector}var we=[],xe=function(){function e(t,r){l(this,e),this.anchor=t,this.selector=r,this.all=!this.selector,this.groups=[]}return e.applySelectors=function(e,t,r){for(var n,i,o,s,a=e.fragment.firstChild,u=new Map;a;){if(n=a.nextSibling,a.viewSlot){var c=t.map(function(e){return e.copyForViewSlot()});a.viewSlot.installContentSelectors(c)}else for(i=0,o=t.length;o>i;i++)if(s=t[i],s.matches(a)){var l=u.get(s);l||(l=[],u.set(s,l)),l.push(a);break}a=n}for(i=0,o=t.length;o>i;++i)s=t[i],r(s,u.get(s)||we)},e.prototype.copyForViewSlot=function(){return new e(this.anchor,this.selector)},e.prototype.matches=function(e){return this.all||1===e.nodeType&&e.matches(this.selector)},e.prototype.add=function(e){var t,r,n=this.anchor,i=n.parentNode;for(t=0,r=e.length;r>t;++t)i.insertBefore(e[t],n);this.groups.push(e)},e.prototype.insert=function(e,t){if(t.length){var r,n,i=b(this.groups,e)||this.anchor,o=i.parentNode;for(r=0,n=t.length;n>r;++r)o.insertBefore(t[r],i)}this.groups.splice(e,0,t)},e.prototype.removeAt=function(e,t){var r,n,i=this.groups[e];for(r=0,n=i.length;n>r;++r)t.appendChild(i[r]);this.groups.splice(e,1)},e}();e.ContentSelector=xe;var $e=function(){function e(t,r,n){var i=arguments.length<=3||void 0===arguments[3]?se.instance:arguments[3];l(this,e),this.anchor=t,this.viewAddMethod=r?"appendNodesTo":"insertNodesBefore",this.bindingContext=n,this.animator=i,this.children=[],this.isBound=!1,this.isAttached=!1,this.contentSelectors=null,t.viewSlot=this}return e.prototype.transformChildNodesIntoView=function(){var e=this.anchor;this.children.push({fragment:e,firstChild:e.firstChild,lastChild:e.lastChild,returnToCache:function(){},removeNodes:function(){for(var t;t=e.lastChild;)e.removeChild(t)},created:function(){},bind:function(){},unbind:function(){},attached:function(){},detached:function(){}})},e.prototype.bind=function(e){var t,r,n;if(this.isBound){if(this.bindingContext===e)return;this.unbind()}for(this.isBound=!0,this.bindingContext=e=e||this.bindingContext,n=this.children,t=0,r=n.length;r>t;++t)n[t].bind(e,!0)},e.prototype.unbind=function(){var e,t,r=this.children;for(this.isBound=!1,e=0,t=r.length;t>e;++e)r[e].unbind()},e.prototype.add=function(e){if(e[this.viewAddMethod](this.anchor),this.children.push(e),this.isAttached){e.attached();var t=j(e);if(null!==t)return this.animator.enter(t)}},e.prototype.insert=function(e,t){var r=this.children,n=r.length;if(0===e&&0===n||e>=n)return this.add(t);if(t.insertNodesBefore(r[e].firstChild),r.splice(e,0,t),this.isAttached){t.attached();var i=j(t);if(null!==i)return this.animator.enter(i)}},e.prototype.remove=function(e,t,r){return this.removeAt(this.children.indexOf(e),t,r)},e.prototype.removeAt=function(e,t,r){var n=this,i=this.children[e],o=function(){return i.removeNodes(),n.children.splice(e,1),n.isAttached&&i.detached(),t&&i.returnToCache(),i};if(!r){var s=j(i);if(null!==s)return this.animator.leave(s).then(function(){return o()})}return o()},e.prototype.removeAll=function(e,t){var r,n=this,i=this.children,o=i.length,s=[];i.forEach(function(e){if(t)return void e.removeNodes();var r=j(e);null!==r?s.push(n.animator.leave(r).then(function(){return e.removeNodes()})):e.removeNodes()});var a=function(){if(n.isAttached)for(r=0;o>r;++r)i[r].detached();if(e)for(r=0;o>r;++r)i[r].returnToCache();n.children=[]};return s.length>0?Promise.all(s).then(function(){return a()}):void a()},e.prototype.swap=function(e,t){var r=this,n=this.removeAll(t);return n instanceof Promise?n.then(function(){return r.add(e)}):this.add(e)},e.prototype.attached=function(){var e,t,r,n;if(!this.isAttached)for(this.isAttached=!0,r=this.children,e=0,t=r.length;t>e;++e){n=r[e],n.attached();var i=n.firstChild?d(n.firstChild):null;n.firstChild&&8===n.firstChild.nodeType&&i&&1===i.nodeType&&i.classList.contains("au-animate")&&this.animator.enter(i)}},e.prototype.detached=function(){var e,t,r;if(this.isAttached)for(this.isAttached=!1,r=this.children,e=0,t=r.length;t>e;++e)r[e].detached()},e.prototype.installContentSelectors=function(e){this.contentSelectors=e,this.add=this._contentSelectorAdd,this.insert=this._contentSelectorInsert,this.remove=this._contentSelectorRemove,this.removeAt=this._contentSelectorRemoveAt,this.removeAll=this._contentSelectorRemoveAll},e.prototype._contentSelectorAdd=function(e){xe.applySelectors(e,this.contentSelectors,function(e,t){return e.add(t)}),this.children.push(e),this.isAttached&&e.attached()},e.prototype._contentSelectorInsert=function(e,t){0===e&&!this.children.length||e>=this.children.length?this.add(t):(xe.applySelectors(t,this.contentSelectors,function(t,r){return t.insert(e,r)}),this.children.splice(e,0,t),this.isAttached&&t.attached())},e.prototype._contentSelectorRemove=function(e){var t,r,n=this.children.indexOf(e),i=this.contentSelectors;for(t=0,r=i.length;r>t;++t)i[t].removeAt(n,e.fragment);this.children.splice(n,1),this.isAttached&&e.detached()},e.prototype._contentSelectorRemoveAt=function(e){var t,r,n=this.children[e],i=this.contentSelectors;for(t=0,r=i.length;r>t;++t)i[t].removeAt(e,n.fragment);return this.children.splice(e,1),this.isAttached&&n.detached(),n},e.prototype._contentSelectorRemoveAll=function(){var e,t,r,n=this.children,i=this.contentSelectors,o=n.length,s=i.length;for(e=0;o>e;++e)for(r=n[e],t=0;s>t;++t)i[t].removeAt(0,r.fragment);if(this.isAttached)for(e=0;o>e;++e)n[e].detached();this.children=[]},e}();e.ViewSlot=$e;var Se=function(){function e(t,r,n,i){l(this,e),this.parentContainer=t,this.viewFactory=r,this.bindingContext=n,this.factoryCreateInstruction={partReplacements:i}}return e.prototype.create=function(e){var t=this.parentContainer.createChild(),r=e||this.bindingContext;return this.factoryCreateInstruction.systemControlled=!e,this.viewFactory.create(t,r,this.factoryCreateInstruction)},e.prototype.setCacheSize=function(e,t){this.viewFactory.setCacheSize(e,t)},e.prototype.getCachedView=function(){return this.viewFactory.getCachedView()},e.prototype.returnViewToCache=function(e){this.viewFactory.returnViewToCache(e)},ee(e,[{key:"isCaching",get:function(){return this.viewFactory.isCaching}}]),e}();e.BoundViewFactory=Se;var ze=function(){function e(t,r,n){l(this,e),this.template=t,this.instructions=r,this.resources=n,this.cacheSize=-1,this.cache=null,this.isCaching=!1}return e.prototype.setCacheSize=function(e,t){e&&("*"===e?e=Number.MAX_VALUE:"string"==typeof e&&(e=parseInt(e))),-1!==this.cacheSize&&t||(this.cacheSize=e),this.cacheSize>0?this.cache=[]:this.cache=null,this.isCaching=this.cacheSize>0},e.prototype.getCachedView=function(){return null!==this.cache?this.cache.pop()||null:null},e.prototype.returnViewToCache=function(e){e.isAttached&&e.detached(),e.isBound&&e.unbind(),null!==this.cache&&this.cache.length<this.cacheSize&&(e.fromCache=!0,this.cache.push(e))},e.prototype.create=function(e,t,r,n){r=r||le.normal,n=n||null;var i=this.getCachedView();if(null!==i)return r.suppressBind||i.bind(t),i;var o=r.enhance?this.template:this.template.cloneNode(!0),s=o.querySelectorAll(".au-target"),a=this.instructions,u=this.resources,c=[],l=[],d=[],h=[],p={root:e},f=r.partReplacements,m=void 0,g=void 0,v=void 0,y=void 0,b=void 0;for(this.resources.onBeforeCreate(this,e,o,r,t),null!==n&&null!==this.surrogateInstruction&&C(e,n,this.surrogateInstruction,c,l,d),m=0,g=s.length;g>m;++m)y=s[m],b=a[y.getAttribute("au-target-id")],$(p,t,y,b,c,l,d,h,f,u);return v=new je(this,e,o,c,l,d,r.systemControlled,h),r.initiatedByBehavior||v.created(),this.resources.onAfterCreate(v),r.suppressBind||v.bind(t),v},e}();e.ViewFactory=ze;var Ce=0,Oe=0,Ee=function(){function e(e,r){l(this,t),this.bindingLanguage=e,this.resources=r}e.prototype.compile=function(e,t,r){t=t||this.resources,r=r||ce.normal,e="string"==typeof e?h(e):e;var n=void 0,i=void 0,o=void 0;e.content?(i=e.getAttribute("part"),o=e.getAttribute("view-cache"),n=document.adoptNode(e.content,!0)):n=e,r.targetShadowDOM=r.targetShadowDOM&&ie,t.onBeforeCompile(n,t,r);var s={};this.compileNode(n,t,s,e,"root",!r.targetShadowDOM),n.insertBefore(document.createComment("<view>"),n.firstChild),n.appendChild(document.createComment("</view>"));var a=new ze(n,s,t);return a.surrogateInstruction=r.compileSurrogate?this.compileSurrogate(e,t):null,a.part=i,o&&a.setCacheSize(o),t.onAfterCompile(a),a},e.prototype.compileNode=function(e,t,r,n,i,o){switch(e.nodeType){case 1:return this.compileElement(e,t,r,n,i,o);case 3:var s=t.getBindingLanguage(this.bindingLanguage).parseText(t,e.wholeText);if(s){var a=document.createElement("au-marker"),u=V(a);for((e.parentNode||n).insertBefore(a,e),e.textContent=" ",r[u]=de.contentExpression(s);e.nextSibling&&3===e.nextSibling.nodeType;)(e.parentNode||n).removeChild(e.nextSibling)}else for(;e.nextSibling&&3===e.nextSibling.nodeType;)e=e.nextSibling;return e.nextSibling;case 11:for(var c=e.firstChild;c;)c=this.compileNode(c,t,r,e,i,o)}return e.nextSibling},e.prototype.compileSurrogate=function(e,t){var r=e.attributes,n=t.getBindingLanguage(this.bindingLanguage),i=void 0,o=void 0,s=void 0,a=void 0,u=void 0,c=void 0,l=void 0,d=void 0,h=void 0,p=void 0,f=[],m=void 0,g=[],v={},y=!1,b=[];for(a=0,u=r.length;u>a;++a)if(c=r[a],l=c.name,d=c.value,h=n.inspectAttribute(t,l,d),p=t.getAttribute(h.attrName),p&&(i=t.mapAttribute(h.attrName),i&&(o=p.attributes[i],o&&(h.defaultBindingMode=o.defaultBindingMode,h.command||h.expression||(h.command=o.hasOptions?"options":null)))),s=n.createAttributeInstruction(t,e,h))if(s.alteredAttr&&(p=t.getAttribute(s.attrName)),s.discrete)f.push(s);else if(p){if(s.type=p,E(s,t),p.liftsContent)throw new Error("You cannot place a template controller on a surrogate element.");g.push(s)}else f.push(s.attributes[s.attrName]);else if(p){if(s=le.attribute(l,p),s.attributes[t.mapAttribute(l)]=d,p.liftsContent)throw new Error("You cannot place a template controller on a surrogate element.");g.push(s)}else"id"!==l&&"part"!==l&&"replace-part"!==l&&(y=!0,v[l]=d);if(f.length||g.length||y){for(a=0,u=g.length;u>a;++a)s=g[a],s.type.compile(this,t,e,s),b.push(s.type.target);for(a=0,u=f.length;u>a;++a)m=f[a],void 0!==m.attrToRemove&&e.removeAttribute(m.attrToRemove);return de.surrogate(b,g,f,v)}return null},e.prototype.compileElement=function(e,t,r,n,i,o){var s,a,u,c,l,d,h,p,f,m,g,v,y,b,j,k,w,x=e.tagName.toLowerCase(),$=e.attributes,S=[],z=[],C=[],D=t.getBindingLanguage(this.bindingLanguage);if("content"===x)return o&&(k=V(e),r[k]=de.contentSelector(e,i)),e.nextSibling;for("template"===x?(u=this.compile(e,t),u.part=e.getAttribute("part")):(c=t.getElement(x),c&&(l=le.element(e,c),z.push(l))),h=0,p=$.length;p>h;++h)if(f=$[h],m=f.name,g=f.value,y=D.inspectAttribute(t,m,g),c=t.getAttribute(y.attrName),d=null,c?(j=t.mapAttribute(y.attrName),j&&(b=c.attributes[j],b&&(y.defaultBindingMode=b.defaultBindingMode,y.command||y.expression||(y.command=b.hasOptions?"options":null)))):l&&(d=l.type.attributes[y.attrName],d&&(y.defaultBindingMode=d.defaultBindingMode)),v=d?D.createAttributeInstruction(t,e,y,l):D.createAttributeInstruction(t,e,y))if(v.alteredAttr&&(c=t.getAttribute(v.attrName)),v.discrete)S.push(v);else if(c){if(v.type=c,E(v,t),c.liftsContent){v.originalAttrName=m,a=v;break}z.push(v)}else d?l.attributes[y.attrName].targetProperty=d.name:S.push(v.attributes[v.attrName]);else if(c){if(v=le.attribute(m,c),v.attributes[t.mapAttribute(m)]=g,c.liftsContent){v.originalAttrName=m,a=v;break}z.push(v)}else d&&(l.attributes[m]=g);if(a)a.viewFactory=u,e=a.type.compile(this,t,e,a,n),k=V(e),r[k]=de.lifting(i,a);else{if(S.length||z.length){for(w=z.length?O():!1,h=0,p=z.length;p>h;++h)v=z[h],v.type.compile(this,t,e,v,n),C.push(v.type.target);for(h=0,p=S.length;p>h;++h)s=S[h],void 0!==s.attrToRemove&&e.removeAttribute(s.attrToRemove);k=V(e),r[k]=de.normal(w,i,C,z,S,l)}if(l&&l.skipContentProcessing)return e.nextSibling;for(var A=e.firstChild;A;)A=this.compileNode(A,t,r,e,w||i,o)}return e.nextSibling};var t=e;return e=a.inject(ye,be)(e)||e}();e.ViewCompiler=Ee;var De=r.getLogger("templating"),Ve=function(){function e(t){var r=this;l(this,e),t.then(function(e){return r.absorb(e)})}return e.prototype.absorb=function(e){this.create=e.create.bind(e)},e}(),Ae=function(){function e(t,r,n,i,o){l(this,e),this.loader=t,this.container=r,this.viewCompiler=n,this.moduleAnalyzer=i,this.appResources=o,this._pluginMap={}}return e.inject=function(){return[o.Loader,a.Container,Ee,Ie,be]},e.prototype.addResourcePlugin=function(e,t){var r=e.replace(".","")+"-resource-plugin";this._pluginMap[e]=r,this.loader.addPlugin(r,t)},e.prototype.enhance=function(e,t,r,n){var i={};this.viewCompiler.compileNode(t,r,i,t.parentNode,"root",!0);var o=new ze(t,i,r);return o.create(e,n,{enhance:!0})},e.prototype.loadViewFactory=function(e,t,r){var n=this;return r=r||new ue,A(this.loader,e).then(function(i){return i.onReady?r.doesNotHaveDependency(e)?(r.addDependency(e),i.onReady):Promise.resolve(new Ve(i.onReady)):(r.addDependency(e),i.onReady=n.loadTemplateResources(i,t,r).then(function(e){i.setResources(e);var r=n.viewCompiler.compile(i.template,e,t);return i.setFactory(r),r}))})},e.prototype.loadTemplateResources=function(e,t,r){var n,i,o=new be(this.appResources,e.address),s=e.dependencies;return t=t||ce.normal,0!==s.length||t.associatedModuleId?(n=s.map(function(e){return e.src}),i=s.map(function(e){return e.name}),De.debug("importing resources for "+e.address,n),this.importViewResources(n,i,o,t,r)):Promise.resolve(o)},e.prototype.importViewModelResource=function(e,t){var r=this;return this.loader.loadModule(e).then(function(i){var o=n.Origin.get(i).moduleId,s=r.moduleAnalyzer.analyze(o,i,t);if(!s.mainResource)throw new Error('No view model found in module "'+e+'".');return s.analyze(r.container),s.mainResource})},e.prototype.importViewResources=function(e,t,r,i,o){
var s=this;return o=o||new ue,i=i||ce.normal,e=e.map(function(e){return s._applyLoaderPlugin(e)}),this.loader.loadAllModules(e).then(function(e){var a,u,c,l,d,h,p=s.container,f=s.moduleAnalyzer,m=new Array(e.length);for(a=0,u=e.length;u>a;++a)d=e[a],l=n.Origin.get(d).moduleId,c=f.analyze(l,d),c.analyze(p),c.register(r,t[a]),m[a]=c;for(i.associatedModuleId&&(h=f.getAnalysis(i.associatedModuleId),h&&h.register(r)),a=0,u=m.length;u>a;++a)m[a]=m[a].load(p,o);return Promise.all(m).then(function(){return r})})},e.prototype._applyLoaderPlugin=function(e){var t=e.lastIndexOf(".");if(-1!==t){var r=e.substring(t),n=this._pluginMap[r];return void 0===n?e:this.loader.applyPluginToUrl(e,n)}return e},e}();e.ViewEngine=Ae;var Re=function(){function e(t,r,n){l(this,e),this.behavior=t,this.bindingContext=r,this.isAttached=!1;var i,o,s=t.observerLocator.getOrCreateObserversLookup(r),a=t.handlesBind,u=n.attributes,c=this.boundProperties=[],d=t.properties;for(t.ensurePropertiesDefined(r,s),i=0,o=d.length;o>i;++i)d[i].initialize(r,s,u,a,c)}return e.createForUnitTest=function(t,r,n){var i=Te.get(t);i.analyze(a.Container.instance);var o=a.Container.instance.get(t),s=new e(i.metadata,o,{attributes:r||{}});return s.bind(n||{}),o},e.prototype.created=function(e){this.behavior.handlesCreated&&this.bindingContext.created(e)},e.prototype.bind=function(e){var t,r,n,i,o,s=this.behavior.handlesBind,a=this.boundProperties;for(t=0,r=a.length;r>t;++t)n=a[t],i=n.observer,o=i.selfSubscriber,i.publishing=!1,s&&(i.selfSubscriber=null),n.binding.bind(e),i.call(),i.publishing=!0,i.selfSubscriber=o;s&&this.bindingContext.bind(e),this.view&&this.view.bind(this.bindingContext)},e.prototype.unbind=function(){var e,t,r=this.boundProperties;for(this.view&&this.view.unbind(),this.behavior.handlesUnbind&&this.bindingContext.unbind(),e=0,t=r.length;t>e;++e)r[e].binding.unbind()},e.prototype.attached=function(){this.isAttached||(this.isAttached=!0,this.behavior.handlesAttached&&this.bindingContext.attached(),this.view&&this.view.attached())},e.prototype.detached=function(){this.isAttached&&(this.isAttached=!1,this.view&&this.view.detached(),this.behavior.handlesDetached&&this.bindingContext.detached())},e}();e.BehaviorInstance=Re;var Me=function(){function e(t){l(this,e),"string"==typeof t?this.name=t:Object.assign(this,t),this.attribute=this.attribute||v(this.name),this.defaultBindingMode=this.defaultBindingMode||s.bindingMode.oneWay,this.changeHandler=this.changeHandler||null,this.owner=null}return e.prototype.registerWith=function(e,t,r){return t.properties.push(this),t.attributes[this.attribute]=this,this.owner=t,r?(this.descriptor=r,this.configureDescriptor(t,r)):void 0},e.prototype.configureDescriptor=function(e,t){var r=this.name;return t.configurable=!0,t.enumerable=!0,"initializer"in t&&(this.defaultValue=t.initializer,delete t.initializer,delete t.writable),"value"in t&&(this.defaultValue=t.value,delete t.value,delete t.writable),t.get=function(){return R(e,this,r).getValue()},t.set=function(t){R(e,this,r).setValue(t)},t.get.getObserver=function(t){return R(e,t,r)},t},e.prototype.defineOn=function(e,t){var r,n=this.name;null===this.changeHandler&&(r=n+"Changed",r in e.prototype&&(this.changeHandler=r)),this.descriptor||Object.defineProperty(e.prototype,n,this.configureDescriptor(t,{}))},e.prototype.createObserver=function(e){var t,r=null,n=this.defaultValue,i=this.changeHandler,o=this.name;if(!this.hasOptions){if(i in e)r="propertyChanged"in e?function(t,r){e[i](t,r),e.propertyChanged(o,t,r)}:function(t,r){return e[i](t,r)};else if("propertyChanged"in e)r=function(t,r){return e.propertyChanged(o,t,r)};else if(null!==i)throw new Error("Change handler "+i+" was specified but not delcared on the class.");return void 0!==n&&(t="function"==typeof n?n.call(e):n),new Pe(this.owner.taskQueue,e,this.name,r,t)}},e.prototype.initialize=function(e,t,r,n,i){var o,s,a,u=this.defaultValue;if(this.isDynamic)for(var c in r)this.createDynamicProperty(e,t,n,c,r[c],i);else this.hasOptions||(s=t[this.name],null!==r&&(o=s.selfSubscriber,a=r[this.attribute],n&&(s.selfSubscriber=null),"string"==typeof a?(e[this.name]=a,s.call()):a?i.push({observer:s,binding:a.createBinding(e)}):void 0!==u&&s.call(),s.selfSubscriber=o),s.publishing=!0)},e.prototype.createDynamicProperty=function(e,t,r,n,i,o){var s,a,u=n+"Changed",c=null;u in e?c="propertyChanged"in e?function(t,r){e[u](t,r),e.propertyChanged(n,t,r)}:function(t,r){return e[u](t,r)}:"propertyChanged"in e&&(c=function(t,r){return e.propertyChanged(n,t,r)}),s=t[n]=new Pe(this.owner.taskQueue,e,n,c),Object.defineProperty(e,n,{configurable:!0,enumerable:!0,get:s.getValue.bind(s),set:s.setValue.bind(s)}),r&&(s.selfSubscriber=null),"string"==typeof i?(e[n]=i,s.call()):i&&(a={observer:s,binding:i.createBinding(e)},o.push(a)),s.publishing=!0,s.selfSubscriber=c},e}();e.BindableProperty=Me;var Pe=function(){function e(t,r,n,i,o){l(this,e),this.taskQueue=t,this.obj=r,this.propertyName=n,this.callbacks=[],this.notqueued=!0,this.publishing=!1,this.selfSubscriber=i,this.currentValue=this.oldValue=o}return e.prototype.getValue=function(){return this.currentValue},e.prototype.setValue=function(e){var t=this.currentValue;t!==e&&(this.publishing&&this.notqueued&&(this.notqueued=!1,this.taskQueue.queueMicroTask(this)),this.oldValue=t,this.currentValue=e)},e.prototype.call=function(){var e=this.callbacks,t=e.length,r=this.oldValue,n=this.currentValue;if(this.notqueued=!0,n!==r){for(null!==this.selfSubscriber&&this.selfSubscriber(n,r);t--;)e[t](n,r);this.oldValue=n}},e.prototype.subscribe=function(e){var t=this.callbacks;return t.push(e),function(){t.splice(t.indexOf(e),1)}},e}(),Ne={suppressBind:!0,enhance:!1},Le=function(){function e(){l(this,e),this.elementName=null,this.attributeName=null,this.attributeDefaultBindingMode=void 0,this.liftsContent=!1,this.targetShadowDOM=!1,this.processContent=M,this.usesShadowDOM=!1,this.childBindings=null,this.hasDynamicOptions=!1,this.containerless=!1,this.properties=[],this.attributes={}}return e.convention=function(t,r){var n;return t.endsWith("CustomAttribute")&&(n=r||new e,n.attributeName=v(t.substring(0,t.length-15))),t.endsWith("CustomElement")&&(n=r||new e,n.elementName=v(t.substring(0,t.length-13))),n},e.prototype.addChildBinding=function(e){null===this.childBindings&&(this.childBindings=[]),this.childBindings.push(e)},e.prototype.analyze=function(e,t){var r,n,i,o=t.prototype,a=this.properties,c=this.attributeName,l=this.attributeDefaultBindingMode;if(this.observerLocator=e.get(s.ObserverLocator),this.taskQueue=e.get(u.TaskQueue),this.target=t,this.usesShadowDOM=this.targetShadowDOM&&ie,this.handlesCreated="created"in o,this.handlesBind="bind"in o,this.handlesUnbind="unbind"in o,this.handlesAttached="attached"in o,this.handlesDetached="detached"in o,this.htmlName=this.elementName||this.attributeName,this.apiName=this.htmlName.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()}),null!==c)if(0===a.length&&new Me({name:"value",changeHandler:"valueChanged"in o?"valueChanged":null,attribute:c,defaultBindingMode:l}).registerWith(t,this),i=a[0],1===a.length&&"value"===i.name)i.isDynamic=i.hasOptions=this.hasDynamicOptions,i.defineOn(t,this);else{for(r=0,n=a.length;n>r;++r)a[r].defineOn(t,this);i=new Me({name:"value",changeHandler:"valueChanged"in o?"valueChanged":null,attribute:c,defaultBindingMode:l}),i.hasOptions=!0,i.registerWith(t,this)}else for(r=0,n=a.length;n>r;++r)a[r].defineOn(t,this)},e.prototype.load=function(e,t,r,i,o){var s,a=this;return null!==this.elementName?(r=r||this.viewStrategy||he.getDefault(t),s=new ce(this.targetShadowDOM,!0),r.moduleId||(r.moduleId=n.Origin.get(t).moduleId),r.loadViewFactory(e.get(Ae),s,o).then(function(e){return i&&a.viewFactory||(a.viewFactory=e),e})):Promise.resolve(this)},e.prototype.register=function(e,t){null!==this.attributeName&&e.registerAttribute(t||this.attributeName,this,this.attributeName),null!==this.elementName&&e.registerElement(t||this.elementName,this)},e.prototype.compile=function(e,t,r,n,i){if(this.liftsContent){if(!n.viewFactory){var o=document.createElement("template"),s=document.createDocumentFragment(),a=r.getAttribute("view-cache"),u=r.getAttribute("part");r.removeAttribute(n.originalAttrName),p(o,r,i),s.appendChild(r),n.viewFactory=e.compile(s,t),u&&(n.viewFactory.part=u,r.removeAttribute("part")),a&&(n.viewFactory.setCacheSize(a),r.removeAttribute("view-cache")),r=o}}else if(null!==this.elementName){var c=n.partReplacements={};if(this.processContent(e,t,r,n)&&r.hasChildNodes())if(this.usesShadowDOM){for(var l,d,h=r.firstChild;h;)l=h.nextSibling,"TEMPLATE"===h.tagName&&(d=h.getAttribute("replace-part"))&&(c[d]=e.compile(h,t),f(h,i)),h=l;n.skipContentProcessing=!1}else{for(var l,s=document.createDocumentFragment(),h=r.firstChild;h;)l=h.nextSibling,"TEMPLATE"===h.tagName&&(d=h.getAttribute("replace-part"))?(c[d]=e.compile(h,t),f(h,i)):s.appendChild(h),h=l;n.contentFactory=e.compile(s,t),n.skipContentProcessing=!0}else n.skipContentProcessing=!0}return r},e.prototype.create=function(e,t,r,n){var i=void 0;t=t||le.normal,r=r||null,n=n||null,null!==this.elementName&&r&&(this.usesShadowDOM?(i=r.createShadowRoot(),e.registerInstance(ne,i)):(i=r,this.targetShadowDOM&&e.registerInstance(ne,i)));var o=t.bindingContext||e.get(this.target),s=new Re(this,o,t),a=this.childBindings,u=void 0;if(this.liftsContent)r.primaryBehavior=s;else if(null!==this.elementName){if(u=t.viewFactory||this.viewFactory,e.viewModel=o,u&&(s.view=u.create(e,o,t,r)),r){if(r.primaryBehavior=s,s.view){if(!this.usesShadowDOM&&t.contentFactory){var c=t.contentFactory.create(e,null,Ne);xe.applySelectors(c,s.view.contentSelectors,function(e,t){return e.add(t)}),s.contentView=c}if(t.anchorIsContainer){if(null!==a)for(var l=0,d=a.length;d>l;++l)s.view.addBinding(a[l].create(i,o));s.view.appendNodesTo(i)}else s.view.insertNodesBefore(i)}else if(null!==a)for(var l=0,d=a.length;d>l;++l)n.push(a[l].create(r,o))}else if(s.view){if(s.view.owner=s,null!==a)for(var l=0,d=a.length;d>l;++l)s.view.addBinding(a[l].create(t.host,o))}else if(null!==a)for(var l=0,d=a.length;d>l;++l)n.push(a[l].create(t.host,o))}else if(null!==a)for(var l=0,d=a.length;d>l;++l)n.push(a[l].create(r,o));return r&&(this.apiName in r||(r[this.apiName]=o),this.htmlName in r||(r[this.htmlName]=s)),t.initiatedByBehavior&&u&&s.view.created(),s},e.prototype.ensurePropertiesDefined=function(e,t){var r,n,i,o;if(!("__propertiesDefined__"in t))for(t.__propertiesDefined__=!0,r=this.properties,n=0,i=r.length;i>n;++n)o=r[n].createObserver(e),void 0!==o&&(t[o.propertyName]=o)},e}();e.HtmlBehaviorResource=Le;var Fe=function(){function e(t){l(this,e),this.id=t,this.moduleInstance=null,this.mainResource=null,this.resources=null,this.viewStrategy=null,this.isAnalyzed=!1}return e.prototype.analyze=function(e){var t,r,n=this.mainResource,i=this.resources,o=this.viewStrategy;if(!this.isAnalyzed)for(this.isAnalyzed=!0,n&&(n.metadata.viewStrategy=o,n.analyze(e)),t=0,r=i.length;r>t;++t)n=i[t],n.metadata.viewStrategy=o,n.analyze(e)},e.prototype.register=function(e,t){var r,n,i=this.resources;for(this.mainResource&&(this.mainResource.register(e,t),t=null),r=0,n=i.length;n>r;++r)i[r].register(e,t),t=null},e.prototype.load=function(e,t){if(this.onLoaded)return this.onLoaded;var r,n,i=this.mainResource,o=this.resources,s=[];for(i&&s.push(i.load(e,t)),r=0,n=o.length;n>r;++r)s.push(o[r].load(e,t));return this.onLoaded=Promise.all(s),this.onLoaded},e}();e.ResourceModule=Fe;var Te=function(){function e(t,r,i){l(this,e),i||(i=n.Metadata.get(n.Metadata.resource,r),i||(i=new Le,i.elementName=v(t),n.Metadata.define(n.Metadata.resource,i,r))),i instanceof Le?void 0===i.elementName?i.elementName=v(t):void 0===i.attributeName?i.attributeName=v(t):null===i.attributeName&&null===i.elementName&&Le.convention(t,i):i.name||(i.name=v(t)),this.metadata=i,this.value=r}return e.prototype.analyze=function(e){var t=this.metadata,r=this.value;"analyze"in t&&t.analyze(e,r)},e.prototype.register=function(e,t){this.metadata.register(e,t)},e.prototype.load=function(e,t){var r=this.metadata,n=this.value;return"load"in r?r.load(e,n,null,null,t):void 0},e.get=function(t){var r,i=arguments.length<=1||void 0===arguments[1]?"custom-resource":arguments[1],o=n.Metadata.get(n.Metadata.resource,t);return o?(null===o.attributeName&&null===o.elementName&&Le.convention(i,o),null===o.attributeName&&null===o.elementName&&(o.elementName=v(i)),r=new e(i,t,o)):(o=Le.convention(i))?(r=new e(i,t,o),n.Metadata.define(n.Metadata.resource,o,t)):(o=s.ValueConverterResource.convention(i))&&(r=new e(i,t,o),n.Metadata.define(n.Metadata.resource,o,t)),r},e}();e.ResourceDescription=Te;var Ie=function(){function e(){l(this,e),this.cache={}}return e.prototype.getAnalysis=function(e){return this.cache[e]},e.prototype.analyze=function(e,t,r){var i,a,u,c,l,d,h,p,f,m=[];if(f=this.cache[e])return f;f=new Fe(e),this.cache[e]=f,"function"==typeof t&&(t={"default":t}),r&&(i=new Te(r,t[r]));for(l in t)d=t[l],l!==r&&"function"==typeof d&&(c=n.Metadata.get(n.Metadata.resource,d),c?(null===c.attributeName&&null===c.elementName&&Le.convention(l,c),null===c.attributeName&&null===c.elementName&&(c.elementName=v(l)),!i&&c instanceof Le&&null!==c.elementName?i=new Te(l,d,c):m.push(new Te(l,d,c))):d instanceof he?p=d:d instanceof o.TemplateRegistryEntry?p=new ge(e,d):(h=Le.convention(l))?(null===h.elementName||i?m.push(new Te(l,d,h)):i=new Te(l,d,h),n.Metadata.define(n.Metadata.resource,h,d)):(h=s.ValueConverterResource.convention(l))?(m.push(new Te(l,d,h)),n.Metadata.define(n.Metadata.resource,h,d)):a||(a=d,u=l));return!i&&a&&(i=new Te(u,a)),f.moduleInstance=t,f.mainResource=i,f.resources=m,f.viewStrategy=p,f},e}();e.ModuleAnalyzer=Ie;var _e=[],qe=function(){function e(t){l(this,e),this.name=t.name,this.changeHandler=t.changeHandler||this.name+"Changed",this.selector=t.selector}return e.prototype.create=function(e,t){return new Be(this.selector,e,this.name,t,this.changeHandler)},e}();e.ChildObserver=qe;var Be=function(){function e(t,r,n,i,o){l(this,e),this.selector=t,this.target=r,this.property=n,this.behavior=i,this.changeHandler=o in i?o:null,this.observer=new MutationObserver(this.onChange.bind(this))}return e.prototype.bind=function(e){var t,r,n,i,o,s=this.behavior;for(this.observer.observe(this.target,{childList:!0,subtree:!0}),t=s[this.property],t?t.length=0:t=s[this.property]=[],r=this.target.querySelectorAll(this.selector),n=0,i=r.length;i>n;++n)o=r[n],t.push(o.primaryBehavior?o.primaryBehavior.bindingContext:o);null!==this.changeHandler&&this.behavior[this.changeHandler](_e)},e.prototype.unbind=function(){this.observer.disconnect()},e.prototype.onChange=function(e){var t=this.behavior[this.property],r=this.selector;e.forEach(function(e){var n,i,o,s,a,u=e.addedNodes,c=e.removedNodes,l=e.previousSibling;for(n=0,i=c.length;i>n;++n)a=c[n],1===a.nodeType&&a.matches(r)&&(o=a.primaryBehavior?a.primaryBehavior.bindingContext:a,s=t.indexOf(o),-1!=s&&t.splice(s,1));for(n=0,i=u.length;i>n;++n)if(a=u[n],1===a.nodeType&&a.matches(r)){for(o=a.primaryBehavior?a.primaryBehavior.bindingContext:a,s=0;l;)1===l.nodeType&&l.matches(r)&&s++,l=l.previousSibling;t.splice(s,0,o)}}),null!==this.changeHandler&&this.behavior[this.changeHandler](e)},e}();e.ChildObserverBinder=Be;var We=function(){function e(t){l(this,e),this.viewEngine=t}return e.inject=function(){return[Ae]},e.prototype.activate=function(e){return e.skipActivation||"function"!=typeof e.viewModel.activate?Promise.resolve():e.viewModel.activate(e.model)||Promise.resolve()},e.prototype.createBehaviorAndSwap=function(e){var t=this,r=e.viewSlot.removeAll(!0);return r instanceof Promise?r.then(function(){return t.createBehavior(e).then(function(t){return e.currentBehavior&&e.currentBehavior.unbind(),t.view.bind(t.bindingContext),e.viewSlot.add(t.view),t})}):this.createBehavior(e).then(function(t){return e.currentBehavior&&e.currentBehavior.unbind(),t.view.bind(t.bindingContext),e.viewSlot.add(t.view),t})},e.prototype.createBehavior=function(e){var t,r=e.childContainer,i=e.viewModelResource,o=e.viewModel;return this.activate(e).then(function(){var s,a,u;return"getViewStrategy"in o&&!e.view&&(a=!0,e.view=he.normalize(o.getViewStrategy())),e.view&&(a?(u=n.Origin.get(o.constructor),u&&e.view.makeRelativeTo(u.moduleId)):e.viewResources&&e.view.makeRelativeTo(e.viewResources.viewUrl)),i?(t=i.metadata,s=t.load(r,i.value,e.view,!0)):(t=new Le,t.elementName="dynamic-element",t.analyze(e.container||r,o.constructor),s=t.load(r,o.constructor,e.view,!0).then(function(e){return e})),s.then(function(n){return t.create(r,le.dynamic(e.host,o,n))})})},e.prototype.createViewModel=function(e){var t=e.childContainer||e.container.createChild();return e.viewModel=e.viewResources?e.viewResources.relativeToView(e.viewModel):e.viewModel,this.viewEngine.importViewModelResource(e.viewModel).then(function(r){return t.autoRegister(r.value),e.host&&t.registerInstance(Element,e.host),e.viewModel=t.viewModel=t.get(r.value),e.viewModelResource=r,e})},e.prototype.compose=function(e){var t=this;return e.childContainer=e.childContainer||e.container.createChild(),e.view=he.normalize(e.view),e.viewModel?"string"==typeof e.viewModel?this.createViewModel(e).then(function(e){return t.createBehaviorAndSwap(e)}):this.createBehaviorAndSwap(e):e.view?(e.viewResources&&e.view.makeRelativeTo(e.viewResources.viewUrl),e.view.loadViewFactory(this.viewEngine,new ce).then(function(t){var r=e.viewSlot.removeAll(!0);if(r instanceof Promise)return r.then(function(){var r=t.create(e.childContainer,e.bindingContext);return e.viewSlot.add(r),r});var n=t.create(e.childContainer,e.bindingContext);return e.viewSlot.add(n),n})):e.viewSlot?(e.viewSlot.removeAll(),Promise.resolve(null)):void 0},e}();e.CompositionEngine=We;var Ge=function(){function e(){l(this,e)}return e.prototype.load=function(e,t){var r=new t,n=e.get(s.EventManager);return n.registerElementConfig(r),Promise.resolve(this)},e.prototype.register=function(){},e}();e.ElementConfigResource=Ge,n.Decorators.configure.parameterizedDecorator("resource",N),n.Decorators.configure.parameterizedDecorator("behavior",L),n.Decorators.configure.parameterizedDecorator("customElement",F),n.Decorators.configure.parameterizedDecorator("customAttribute",T),n.Decorators.configure.simpleDecorator("templateController",I),n.Decorators.configure.parameterizedDecorator("bindable",_),n.Decorators.configure.simpleDecorator("dynamicOptions",q),n.Decorators.configure.parameterizedDecorator("sync",B),n.Decorators.configure.simpleDecorator("useShadowDOM",W),n.Decorators.configure.simpleDecorator("skipContentProcessing",U),n.Decorators.configure.parameterizedDecorator("processContent",H),n.Decorators.configure.simpleDecorator("containerless",K),n.Decorators.configure.parameterizedDecorator("viewStrategy",Y),n.Decorators.configure.parameterizedDecorator("useView",Y),n.Decorators.configure.parameterizedDecorator("inlineView",J),n.Decorators.configure.simpleDecorator("noView",X),n.Decorators.configure.simpleDecorator("elementConfig",Z)}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/dependency-injection@0.10.1/aurelia-dependency-injection",["exports","npm:core-js@0.9.18","github:aurelia/metadata@0.8.0","github:aurelia/logging@0.7.0"],function(e,t,r,n){"use strict";function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(){}function a(e){var t=function(e){e.inject=r.Metadata.getOwn(r.Metadata.paramTypes,e)||S};return e?t(e):t}function u(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];return function(e){e.inject=t}}function c(e){return function(t){r.Metadata.define(r.Metadata.registration,e,t)}}function l(e){return c(new m(e))}function d(e){var t=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];return c(new g(e,t))}function h(e){return function(t){r.Metadata.define(r.Metadata.instanceActivator,e,t)}}function p(){return h(x.instance)}e.__esModule=!0;var f=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();e.autoinject=a,e.inject=u,e.registration=c,e["transient"]=l,e.singleton=d,e.instanceActivator=h,e.factory=p;var m=function(){function e(t){o(this,e),this.key=t}return e.prototype.register=function(e,t,r){e.registerTransient(this.key||t,r)},e}();e.TransientRegistration=m;var g=function(){function e(t){var r=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];o(this,e),"boolean"==typeof t?this.registerInChild=t:(this.key=t,this.registerInChild=r)}return e.prototype.register=function(e,t,r){var n=this.registerInChild?e:e.root;n.registerSingleton(this.key||t,r)},e}();e.SingletonRegistration=g;var v=function(){function e(){o(this,e)}return e.prototype.get=function(e){throw new Error("A custom Resolver must implement get(container) and return the resolved instance(s).")},e}();e.Resolver=v;var y=function(e){function t(r){o(this,t),e.call(this),this.key=r}return i(t,e),t.prototype.get=function(e){var t=this;return function(){return e.get(t.key)}},t.of=function(e){return new t(e)},t}(v);e.Lazy=y;var b=function(e){function t(r){o(this,t),e.call(this),this.key=r}return i(t,e),t.prototype.get=function(e){return e.getAll(this.key)},t.of=function(e){return new t(e)},t}(v);e.All=b;var j=function(e){function t(r){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];o(this,t),e.call(this),this.key=r,this.checkParent=n}return i(t,e),t.prototype.get=function(e){return e.hasHandler(this.key,this.checkParent)?e.get(this.key):null},t.of=function(e){var r=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];return new t(e,r)},t}(v);e.Optional=j;var k=function(e){function t(r){o(this,t),e.call(this),this.key=r}return i(t,e),t.prototype.get=function(e){return e.parent?e.parent.get(this.key):null},t.of=function(e){return new t(e)},t}(v);e.Parent=k;var w=function(){function e(){o(this,e)}return e.prototype.invoke=function(e,t){return Reflect.construct(e,t)},f(e,null,[{key:"instance",value:new e,enumerable:!0}]),e}();e.ClassActivator=w;var x=function(){function e(){o(this,e)}return e.prototype.invoke=function(e,t){return e.apply(void 0,t)},f(e,null,[{key:"instance",value:new e,enumerable:!0}]),e}();e.FactoryActivator=x;var $="key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?";r.Metadata.registration="aurelia:registration",r.Metadata.instanceActivator="aurelia:instance-activator",s.name||Object.defineProperty(Function.prototype,"name",{get:function(){var e=this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];return Object.defineProperty(this,"name",{value:e}),e}});var S=Object.freeze([]);e.emptyParameters=S;var z=function(){function e(t){o(this,e),this.constructionInfo=t||new Map,this.entries=new Map,this.root=this}return e.prototype.makeGlobal=function(){return e.instance=this,this},e.prototype.registerInstance=function(e,t){this.registerHandler(e,function(e){return t})},e.prototype.registerTransient=function(e,t){t=t||e,this.registerHandler(e,function(e){return e.invoke(t)})},e.prototype.registerSingleton=function(e,t){var r=null;t=t||e,this.registerHandler(e,function(e){return r||(r=e.invoke(t))})},e.prototype.autoRegister=function(e,t){var n=void 0;if(null===e||void 0===e)throw new Error($);"function"==typeof e?(n=r.Metadata.get(r.Metadata.registration,e),void 0!==n?n.register(this,t||e,e):this.registerSingleton(t||e,e)):this.registerInstance(e,e)},e.prototype.autoRegisterAll=function(e){for(var t=e.length;t--;)this.autoRegister(e[t])},e.prototype.registerHandler=function(e,t){this._getOrCreateEntry(e).push(t)},e.prototype.unregister=function(e){this.entries["delete"](e)},e.prototype.get=function(t){var r=void 0;if(null===t||void 0===t)throw new Error($);return t===e?this:t instanceof v?t.get(this):(r=this.entries.get(t),void 0!==r?r[0](this):this.parent?this.parent.get(t):(this.autoRegister(t),r=this.entries.get(t),r[0](this)))},e.prototype.getAll=function(e){var t=this,r=void 0;if(null===e||void 0===e)throw new Error($);return r=this.entries.get(e),void 0!==r?r.map(function(e){return e(t)}):this.parent?this.parent.getAll(e):[]},e.prototype.hasHandler=function(e){var t=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];if(null===e||void 0===e)throw new Error($);return this.entries.has(e)||t&&this.parent&&this.parent.hasHandler(e,t)},e.prototype.createChild=function(){var t=new e(this.constructionInfo);return t.parent=this,t.root=this.root,t},e.prototype.invoke=function(e,t){var r=void 0,i=void 0,o=void 0,s=void 0,a=void 0;try{for(r=this._getOrCreateConstructionInfo(e),s=r.keys,a=new Array(s.length),i=0,o=s.length;o>i;++i)a[i]=this.get(s[i]);return void 0!==t&&(a=a.concat(t)),r.activator.invoke(e,a)}catch(u){var c=r&&r.activator instanceof w?"instantiating":"invoking",l="Error "+c+" "+e.name+".";throw o>i&&(l+=" The argument at index "+i+" (key:"+s[i]+") could not be satisfied."),l+=" Check the inner error for details.",new n.AggregateError(l,u,!0)}},e.prototype._getOrCreateEntry=function(e){var t=void 0;if(null===e||void 0===e)throw new Error("key cannot be null or undefined.  (Are you trying to inject something that doesn't exist with DI?)");return t=this.entries.get(e),void 0===t&&(t=[],this.entries.set(e,t)),t},e.prototype._getOrCreateConstructionInfo=function(e){var t=this.constructionInfo.get(e);return void 0===t&&(t=this._createConstructionInfo(e),this.constructionInfo.set(e,t)),t},e.prototype._createConstructionInfo=function(e){var t={activator:r.Metadata.getOwn(r.Metadata.instanceActivator,e)||w.instance};return void 0!==e.inject?("function"==typeof e.inject?t.keys=e.inject():t.keys=e.inject,t):(t.keys=r.Metadata.getOwn(r.Metadata.paramTypes,e)||S,t)},e}();e.Container=z,r.Decorators.configure.simpleDecorator("autoinject",a),r.Decorators.configure.parameterizedDecorator("inject",u),r.Decorators.configure.parameterizedDecorator("registration",c),r.Decorators.configure.parameterizedDecorator("transient",l),r.Decorators.configure.parameterizedDecorator("singleton",d),r.Decorators.configure.parameterizedDecorator("instanceActivator",h),r.Decorators.configure.parameterizedDecorator("factory",p)}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/loader@0.9.0/aurelia-loader",["exports","github:zloirock/core-js@0.8.4","github:aurelia/path@0.9.0","github:aurelia/metadata@0.8.0"],function(e,t,r,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function c(e,t){i(this,c),this.src=e,this.name=t};e.TemplateDependency=s;var a=function(){function e(t){i(this,e),this.address=t,this.template=null,this.dependencies=null,this.resources=null,this.factory=null}return e.prototype.setTemplate=function(e){var t=this.address,n=void 0,i=void 0,o=void 0;if(this.template=e,n=e.content.querySelectorAll("require"),this.dependencies=new Array(n.length),0!==n.length)for(var a=0,u=n.length;u>a;++a){if(i=n[a],o=i.getAttribute("from"),!o)throw new Error("<require> element in "+t+' has no "from" attribute.');this.dependencies[a]=new s(r.relativeToFile(o,t),i.getAttribute("as")),i.parentNode&&i.parentNode.removeChild(i)}},e.prototype.addDependency=function(e,t){if("string"==typeof e)this.dependencies.push(new s(r.relativeToFile(e,this.address),t));else if("function"==typeof e){var i=n.Origin.get(e);this.dependencies.push(new s(i.moduleId,t))}},e.prototype.setResources=function(e){this.resources=e},e.prototype.setFactory=function(e){this.factory=e},o(e,[{key:"templateIsLoaded",get:function(){return null!==this.template}},{key:"isReady",get:function(){return null!==this.factory}}]),e}();e.TemplateRegistryEntry=a;var u=function(){function e(){i(this,e),this.templateRegistry={}}return e.prototype.loadModule=function(e){throw new Error("Loaders must implement loadModule(id).")},e.prototype.loadAllModules=function(e){throw new Error("Loader must implement loadAllModules(ids).")},e.prototype.loadTemplate=function(e){throw new Error("Loader must implement loadTemplate(url).")},e.prototype.loadText=function(e){throw new Error("Loader must implement loadText(url).")},e.prototype.applyPluginToUrl=function(e,t){throw new Error("Loader must implement applyPluginToUrl(url, pluginName).")},e.prototype.addPlugin=function(e,t){throw new Error("Loader must implement addPlugin(pluginName, implementation).")},e.prototype.getOrCreateTemplateRegistryEntry=function(e){var t=this.templateRegistry[e];return void 0===t&&(this.templateRegistry[e]=t=new a(e)),t},e}();e.Loader=u}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/binding@0.9.1/aurelia-binding",["exports","npm:core-js@0.9.18","github:aurelia/task-queue@0.7.0","github:aurelia/dependency-injection@0.10.1","github:aurelia/metadata@0.8.0"],function(e,t,r,n,i){"use strict";function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e){return+e===e>>>0}function u(e){return+e}function c(e,t,r){return{index:e,removed:t,addedCount:r}}function l(){}function d(e,t,r,n,i,o){return K.calcSplices(e,t,r,n,i,o)}function h(e,t,r,n){return r>t||e>n?-1:t==r||n==e?0:r>e?n>t?t-r:n-r:t>n?n-e:t-e}function p(e,t,r,n){for(var i=c(t,r,n),o=!1,s=0,a=0;a<e.length;a++){var u=e[a];if(u.index+=s,!o){var l=h(i.index,i.index+i.removed.length,u.index,u.index+u.addedCount);if(l>=0){e.splice(a,1),a--,s-=u.addedCount-u.removed.length,i.addedCount+=u.addedCount-l;var d=i.removed.length+u.removed.length-l;if(i.addedCount||d){var r=u.removed;if(i.index<u.index){var p=i.removed.slice(0,u.index-i.index);Array.prototype.push.apply(p,r),r=p}if(i.index+i.removed.length>u.index+u.addedCount){var f=i.removed.slice(u.index+u.addedCount-i.index);Array.prototype.push.apply(r,f)}i.removed=r,u.index<i.index&&(i.index=u.index)}else o=!0}else if(i.index<u.index){o=!0,e.splice(a,0,i),a++;var m=i.addedCount-i.removed.length;u.index+=m,s+=m}}}o||e.push(i)}function f(e,t){for(var r=[],n=0;n<t.length;n++){var i=t[n];switch(i.type){case"splice":p(r,i.index,i.removed.slice(),i.addedCount);break;case"add":case"update":case"delete":if(!a(i.name))continue;var o=u(i.name);if(0>o)continue;p(r,o,[i.oldValue],"delete"===i.type?0:1);break;default:console.error("Unexpected record type: "+JSON.stringify(i))}}return r}function m(e,t){var r=[];return f(e,t).forEach(function(t){return 1==t.addedCount&&1==t.removed.length?void(t.removed[0]!==e[t.index]&&r.push(t)):void(r=r.concat(d(e,t.index,t.index+t.addedCount,t.removed,0,t.removed.length)))}),r}function g(e,t,r,n){return{type:e,object:t,key:r,oldValue:n}}function v(e){for(var t=[],r=e.keys(),n=Array.isArray(r),i=0,r=n?r:r[Symbol.iterator]();;){var o;if(n){if(i>=r.length)break;o=r[i++]}else{if(i=r.next(),i.done)break;o=i.value}var s=o;t.push(g("added",e,s))}return t}function y(e,t){return Y?new te(t):ee.create(e,t)}function b(e,t,r){var n,i,o=t.length;for(n=we.length;o>=n;++n)we.push([]);var s=we[o];for(i=0;o>i;++i)s[i]=t[i].evaluate(e,r);return s}function j(e,t){
return null!=e&&null!=t?"string"==typeof e&&"string"!=typeof t?e+t.toString():"string"!=typeof e&&"string"==typeof t?e.toString()+t:e+t:null!=e?e:null!=t?t:0}function k(e,t){var r=e[t];if("function"==typeof r)return r;throw null===r?new Error("Undefined function "+t):new Error(t+" is not a function")}function w(e,t){if(Array.isArray(e))return e[parseInt(t)];if(e)return e[t];if(null===e)throw new Error("Accessing null object");return e[t]}function x(e,t,r){if(Array.isArray(e)){var n=parseInt(t);e.length<=n&&(e.length=n+1),e[n]=r}else e[t]=r;return r}function $(e){return e>=Ee&&De>=e||e===ft}function S(e){return e>=at&&lt>=e||e>=Ze&&tt>=e||e===st||e===Re}function z(e){return e>=at&&lt>=e||e>=Ze&&tt>=e||e>=Je&&Xe>=e||e===st||e===Re}function C(e){return e>=Je&&Xe>=e}function O(e){return e===ut||e===et}function E(e){return e===qe||e===Ie}function D(e,t){if(!e)throw t||"Assertion failed"}function V(e,t){return bt.create(e,t)}function A(e){return e.originalTarget||e.path&&e.path[0]||e.deepPath&&e.deepPath[0]||e.target||e.srcElement}function R(e){e=e||window.event;for(var t,r=A(e);r&&!t;)r.delegatedCallbacks&&(t=r.delegatedCallbacks[e.type]),t||(r=r.parentNode);t&&t(e)}function M(e){return e&&e.get&&e.get.dependencies&&e.get.dependencies.length>0}function P(e,t,r){var n=Object.getOwnPropertyDescriptor(e.prototype,t);n.get.dependencies=r}function N(e,t){return Ft[e]&&Tt[t]||Lt[e]&&-1!==Lt[e].indexOf(t)}function L(e){var t=document.createElement("div");return t.innerHTML=e,t.firstChild}function F(e,t){var r=new Ct(e,t);try{Object.defineProperty(e,"__observer__",{enumerable:!1,configurable:!1,writable:!1,value:r})}catch(n){}return r}function T(e){return e.charAt(0).toLowerCase()+e.slice(1)}function I(e){return void 0===e||"string"==typeof e?function(t){i.Metadata.define(i.Metadata.resource,new Ut(e),t)}:void i.Metadata.define(i.Metadata.resource,new Ut,e)}function _(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];return function(e,r,n){return n.get.dependencies=t,n}}e.__esModule=!0;var q=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();e.calcSplices=d,e.projectArraySplices=m,e.getChangeRecords=v,e.getArrayObserver=y,e.getMapObserver=V,e.hasDeclaredDependencies=M,e.declarePropertyDependencies=P,e.isStandardSvgAttribute=N,e.valueConverter=I,e.computedFrom=_;var B=function(){function e(t,r,n,i){var o=this;s(this,e),this.objectInfo=t,this.keyInfo=r,this.evaluate=i,this.observerLocator=n,r.observer&&(this.disposeKey=r.observer.subscribe(function(e){return o.objectOrKeyChanged(void 0,e)})),t.observer&&(this.disposeObject=t.observer.subscribe(function(e){return o.objectOrKeyChanged(e)})),this.updatePropertySubscription(t.value,r.value)}return e.prototype.updatePropertySubscription=function(e,t){var r=this;this.disposeProperty&&(this.disposeProperty(),this.disposeProperty=null),e instanceof Object&&(this.disposeProperty=this.observerLocator.getObserver(e,t).subscribe(function(){return r.notify()}))},e.prototype.objectOrKeyChanged=function(e,t){var r=void 0,n=void 0;e=e||((r=this.objectInfo.observer)&&r.getValue?r.getValue():this.objectInfo.value),t=t||((n=this.keyInfo.observer)&&n.getValue?n.getValue():this.keyInfo.value),this.updatePropertySubscription(e,t),this.notify()},e.prototype.subscribe=function(e){var t=this;return t.callback=e,function(){t.callback=null}},e.prototype.notify=function(){var e=this.callback;e&&e(this.evaluate())},e.prototype.dispose=function(){this.objectInfo=null,this.keyInfo=null,this.evaluate=null,this.observerLocator=null,this.disposeObject&&this.disposeObject(),this.disposeKey&&this.disposeKey(),this.disposeProperty&&this.disposeProperty()},e}();e.AccessKeyedObserver=B;var W=0,G=1,U=2,H=3;l.prototype={calcEditDistances:function(e,t,r,n,i,o){var s,a,u,c,l=o-i+1,d=r-t+1,h=new Array(l);for(s=0;l>s;++s)h[s]=new Array(d),h[s][0]=s;for(a=0;d>a;++a)h[0][a]=a;for(s=1;l>s;++s)for(a=1;d>a;++a)this.equals(e[t+a-1],n[i+s-1])?h[s][a]=h[s-1][a-1]:(u=h[s-1][a]+1,c=h[s][a-1]+1,h[s][a]=c>u?u:c);return h},spliceOperationsFromEditDistances:function(e){for(var t=e.length-1,r=e[0].length-1,n=e[t][r],i=[];t>0||r>0;)if(0!=t)if(0!=r){var o,s=e[t-1][r-1],a=e[t-1][r],u=e[t][r-1];o=u>a?s>a?a:s:s>u?u:s,o==s?(s==n?i.push(W):(i.push(G),n=s),t--,r--):o==a?(i.push(H),t--,n=a):(i.push(U),r--,n=u)}else i.push(H),t--;else i.push(U),r--;return i.reverse(),i},calcSplices:function(e,t,r,n,i,o){var s=0,a=0,u=Math.min(r-t,o-i);if(0==t&&0==i&&(s=this.sharedPrefix(e,n,u)),r==e.length&&o==n.length&&(a=this.sharedSuffix(e,n,u-s)),t+=s,i+=s,r-=a,o-=a,r-t==0&&o-i==0)return[];if(t==r){for(var l=c(t,[],0);o>i;)l.removed.push(n[i++]);return[l]}if(i==o)return[c(t,[],r-t)];for(var d=this.spliceOperationsFromEditDistances(this.calcEditDistances(e,t,r,n,i,o)),l=void 0,h=[],p=t,f=i,m=0;m<d.length;++m)switch(d[m]){case W:l&&(h.push(l),l=void 0),p++,f++;break;case G:l||(l=c(p,[],0)),l.addedCount++,p++,l.removed.push(n[f]),f++;break;case U:l||(l=c(p,[],0)),l.addedCount++,p++;break;case H:l||(l=c(p,[],0)),l.removed.push(n[f]),f++}return l&&h.push(l),h},sharedPrefix:function(e,t,r){for(var n=0;r>n;++n)if(!this.equals(e[n],t[n]))return n;return r},sharedSuffix:function(e,t,r){for(var n=e.length,i=t.length,o=0;r>o&&this.equals(e[--n],t[--i]);)o++;return o},calculateSplices:function(e,t){return this.calcSplices(e,0,e.length,t,0,t.length)},equals:function(e,t){return e===t}};var K=new l,Q=function(){function e(e){t=e}if("function"!=typeof Object.observe)return!1;var t=[],r={};return Object.observe(r,e),r.id=1,r.id=2,delete r.id,Object.deliverChangeRecords(e),3!==t.length?!1:"add"!=t[0].type||"update"!=t[1].type||"delete"!=t[2].type?!1:(Object.unobserve(r,e),!0)}();e.hasObjectObserve=Q;var Y=function(){function e(e){t=e}if("function"!=typeof Array.observe)return!1;var t=[],r=[];return Array.observe(r,e),r.push(1,2),r.length=0,Object.deliverChangeRecords(e),2!==t.length?!1:"splice"!=t[0].type||"splice"!=t[1].type?!1:(Array.unobserve(r,e),!0)}();e.hasArrayObserve=Y;var J=function(){function e(t,r){s(this,e),this.taskQueue=t,this.queued=!1,this.callbacks=[],this.changeRecords=[],this.oldCollection=null,this.collection=r,this.lengthPropertyName=r instanceof Map?"size":"length"}return e.prototype.subscribe=function(e){var t=this.callbacks;return t.push(e),function(){t.splice(t.indexOf(e),1)}},e.prototype.addChangeRecord=function(e){(0!==this.callbacks.length||this.lengthObserver)&&(this.changeRecords.push(e),this.queued||(this.queued=!0,this.taskQueue.queueMicroTask(this)))},e.prototype.reset=function(e){this.callbacks.length&&(this.oldCollection=e,this.queued||(this.queued=!0,this.taskQueue.queueMicroTask(this)))},e.prototype.getLengthObserver=function(){return this.lengthObserver||(this.lengthObserver=new X(this.collection))},e.prototype.call=function(){var e,t=this.callbacks,r=t.length,n=this.changeRecords,i=this.oldCollection;if(this.queued=!1,this.changeRecords=[],this.oldCollection=null,r)for(e=i?this.collection instanceof Map?v(i):d(this.collection,0,this.collection.length,i,0,i.length):this.collection instanceof Map?n:m(this.collection,n);r--;)t[r](e);this.lengthObserver&&this.lengthObserver.call(this.collection[this.lengthPropertyName])},e}();e.ModifyCollectionObserver=J;var X=function(){function e(t){s(this,e),this.collection=t,this.callbacks=[],this.lengthPropertyName=t instanceof Map?"size":"length",this.currentValue=t[this.lengthPropertyName]}return e.prototype.getValue=function(){return this.collection[this.lengthPropertyName]},e.prototype.setValue=function(e){this.collection[this.lengthPropertyName]=e},e.prototype.subscribe=function(e){var t=this.callbacks;return t.push(e),function(){t.splice(t.indexOf(e),1)}},e.prototype.call=function(e){for(var t=this.callbacks,r=t.length,n=this.currentValue;r--;)t[r](e,n);this.currentValue=e},e}();e.CollectionLengthObserver=X;var Z=Array.prototype,ee=function(e){function t(r,n){s(this,t),e.call(this,r,n)}return o(t,e),t.create=function(e,r){var n=new t(e,r);return r.pop=function(){var e=Z.pop.apply(r,arguments);return n.addChangeRecord({type:"delete",object:r,name:r.length,oldValue:e}),e},r.push=function(){var e=Z.push.apply(r,arguments);return n.addChangeRecord({type:"splice",object:r,index:r.length-arguments.length,removed:[],addedCount:arguments.length}),e},r.reverse=function(){var e=r.slice(),t=Z.reverse.apply(r,arguments);return n.reset(e),t},r.shift=function(){var e=Z.shift.apply(r,arguments);return n.addChangeRecord({type:"delete",object:r,name:0,oldValue:e}),e},r.sort=function(){var e=r.slice(),t=Z.sort.apply(r,arguments);return n.reset(e),t},r.splice=function(){var e=Z.splice.apply(r,arguments);return n.addChangeRecord({type:"splice",object:r,index:arguments[0],removed:e,addedCount:arguments.length>2?arguments.length-2:0}),e},r.unshift=function(){var e=Z.unshift.apply(r,arguments);return n.addChangeRecord({type:"splice",object:r,index:0,removed:[],addedCount:arguments.length}),e},n},t}(J),te=function(){function e(t){s(this,e),this.array=t,this.callbacks=[]}return e.prototype.subscribe=function(e){var t=this,r=this.callbacks;return 0===r.length&&(this.handler=this.handleChanges.bind(this),Array.observe(this.array,this.handler)),r.push(e),function(){r.splice(r.indexOf(e),1),0===r.length&&Array.unobserve(t.array,t.handler)}},e.prototype.getLengthObserver=function(){return this.lengthObserver||(this.lengthObserver=new X(this.array))},e.prototype.handleChanges=function(e){var t,r=this.callbacks,n=r.length;if(n)for(t=m(this.array,e);n--;)r[n](t);this.lengthObserver&&this.lengthObserver.call(this.array.length)},e}(),re=function(){function e(t,r,n){var i=this;s(this,e),this.leftObserver=t,this.disposeLeft=t.subscribe(function(e){var t=i.updateRight(r(e));i.notify(t)}),this.updateRight(r(n))}return e.prototype.updateRight=function(e){var t=this;return this.rightObserver=e,this.disposeRight&&this.disposeRight(),e?(this.disposeRight=e.subscribe(function(e){return t.notify(e)}),e.getValue()):null},e.prototype.subscribe=function(e){var t=this;return t.callback=e,function(){t.callback=null}},e.prototype.notify=function(e){var t=this.callback;t&&t(e)},e.prototype.dispose=function(){this.disposeLeft&&this.disposeLeft(),this.disposeRight&&this.disposeRight()},e}();e.PathObserver=re;var ne=function(){function e(t,r){var n=this;s(this,e),this.subscriptions=new Array(t.length),this.evaluate=r;for(var i=0,o=t.length;o>i;i++)this.subscriptions[i]=t[i].subscribe(function(e){n.notify(n.evaluate())})}return e.prototype.subscribe=function(e){var t=this;return t.callback=e,function(){t.callback=null}},e.prototype.notify=function(e){var t=this.callback;t&&t(e)},e.prototype.dispose=function(){for(var e=this.subscriptions,t=e.length;t--;)e[t]()},e}();e.CompositeObserver=ne;var ie=function(){function e(){s(this,e),this.isChain=!1,this.isAssignable=!1}return e.prototype.evaluate=function(e,t,r){throw new Error("Cannot evaluate "+this)},e.prototype.assign=function(e,t,r){throw new Error("Cannot assign to "+this)},e.prototype.toString=function(){return ke.unparse(this)},e}();e.Expression=ie;var oe=function(e){function t(r){s(this,t),e.call(this),this.expressions=r,this.isChain=!0}return o(t,e),t.prototype.evaluate=function(e,t){var r,n,i,o=this.expressions,s=o.length;for(n=0;s>n;++n)i=o[n].evaluate(e,t),null!==i&&(r=i);return r},t.prototype.accept=function(e){e.visitChain(this)},t}(ie);e.Chain=oe;var se=function(e){function t(r,n,i,o){s(this,t),e.call(this),this.expression=r,this.name=n,this.args=i,this.allArgs=o}return o(t,e),t.prototype.evaluate=function(e,t){var r=t(this.name);if(!r)throw new Error('No ValueConverter named "'+this.name+'" was found!');return"toView"in r?r.toView.apply(r,b(e,this.allArgs,t)):this.allArgs[0].evaluate(e,t)},t.prototype.assign=function(e,t,r){var n=r(this.name);if(!n)throw new Error('No ValueConverter named "'+this.name+'" was found!');return"fromView"in n&&(t=n.fromView.apply(n,[t].concat(b(e,this.args,r)))),this.allArgs[0].assign(e,t,r)},t.prototype.accept=function(e){e.visitValueConverter(this)},t.prototype.connect=function(e,t){var r,n,i,o,s,a=this,u=[];for(n=0,i=this.allArgs.length;i>n;++n)o=this.allArgs[n],s=o.connect(e,t),s.observer&&u.push(s.observer);return u.length&&(r=new ne(u,function(){return a.evaluate(t,e.valueConverterLookupFunction)})),{value:this.evaluate(t,e.valueConverterLookupFunction),observer:r}},t}(ie);e.ValueConverter=se;var ae=function(e){function t(r,n){s(this,t),e.call(this),this.target=r,this.value=n}return o(t,e),t.prototype.evaluate=function(e,t){return this.target.assign(e,this.value.evaluate(e,t))},t.prototype.accept=function(e){e.visitAssign(this)},t.prototype.connect=function(e,t){return{value:this.evaluate(t,e.valueConverterLookupFunction)}},t}(ie);e.Assign=ae;var ue=function(e){function t(r,n,i){s(this,t),e.call(this),this.condition=r,this.yes=n,this.no=i}return o(t,e),t.prototype.evaluate=function(e,t){return this.condition.evaluate(e)?this.yes.evaluate(e):this.no.evaluate(e)},t.prototype.accept=function(e){e.visitConditional(this)},t.prototype.connect=function(e,t){var r,n=this,i=this.condition.connect(e,t),o=this.yes.connect(e,t),s=this.no.connect(e,t),a=[];return i.observer&&a.push(i.observer),o.observer&&a.push(o.observer),s.observer&&a.push(s.observer),a.length&&(r=new ne(a,function(){return n.evaluate(t,e.valueConverterLookupFunction)})),{value:i.value?o.value:s.value,observer:r}},t}(ie);e.Conditional=ue;var ce=function(e){function t(r){s(this,t),e.call(this),this.name=r,this.isAssignable=!0}return o(t,e),t.prototype.evaluate=function(e,t){return e[this.name]},t.prototype.assign=function(e,t){return e[this.name]=t},t.prototype.accept=function(e){e.visitAccessScope(this)},t.prototype.connect=function(e,t){var r=e.getObserver(t,this.name);return{value:r.getValue(),observer:r}},t}(ie);e.AccessScope=ce;var le=function(e){function t(r,n){s(this,t),e.call(this),this.object=r,this.name=n,this.isAssignable=!0}return o(t,e),t.prototype.evaluate=function(e,t){var r=this.object.evaluate(e,t);return null===r||void 0===r?r:r[this.name]},t.prototype.assign=function(e,t){var r=this.object.evaluate(e);return(null===r||void 0===r)&&(r={},this.object.assign(e,r)),r[this.name]=t},t.prototype.accept=function(e){e.visitAccessMember(this)},t.prototype.connect=function(e,t){var r,n=this,i=this.object.connect(e,t),o=i.value,s=i.observer;return r=s?new re(s,function(t){return null==t||void 0==t?t:e.getObserver(t,n.name)},o):e.getObserver(o,this.name),{value:null==o?null:o[this.name],observer:r}},t}(ie);e.AccessMember=le;var de=function(e){function t(r,n){s(this,t),e.call(this),this.object=r,this.key=n,this.isAssignable=!0}return o(t,e),t.prototype.evaluate=function(e,t){var r=this.object.evaluate(e,t),n=this.key.evaluate(e,t);return w(r,n)},t.prototype.assign=function(e,t){var r=this.object.evaluate(e),n=this.key.evaluate(e);return x(r,n,t)},t.prototype.accept=function(e){e.visitAccessKeyed(this)},t.prototype.connect=function(e,t){var r=this,n=this.object.connect(e,t),i=this.key.connect(e,t),o=new B(n,i,e.observerLocator,function(){return r.evaluate(t,e.valueConverterLookupFunction)});return{value:this.evaluate(t,e.valueConverterLookupFunction),observer:o}},t}(ie);e.AccessKeyed=de;var he=function(e){function t(r,n){s(this,t),e.call(this),this.name=r,this.args=n}return o(t,e),t.prototype.evaluate=function(e,t,r){return r=r||b(e,this.args,t),k(e,this.name).apply(e,r)},t.prototype.accept=function(e){e.visitCallScope(this)},t.prototype.connect=function(e,t){var r,n,i,o,s,a=this,u=[];for(n=0,i=this.args.length;i>n;++n)o=this.args[n],s=o.connect(e,t),s.observer&&u.push(s.observer);return u.length&&(r=new ne(u,function(){return a.evaluate(t,e.valueConverterLookupFunction)})),{value:this.evaluate(t,e.valueConverterLookupFunction),observer:r}},t}(ie);e.CallScope=he;var pe=function(e){function t(r,n,i){s(this,t),e.call(this),this.object=r,this.name=n,this.args=i}return o(t,e),t.prototype.evaluate=function(e,t,r){var n=this.object.evaluate(e,t);return r=r||b(e,this.args,t),k(n,this.name).apply(n,r)},t.prototype.accept=function(e){e.visitCallMember(this)},t.prototype.connect=function(e,t){var r,n,i,o,s,a=this,u=this.object.connect(e,t),c=[];for(u.observer&&c.push(u.observer),n=0,i=this.args.length;i>n;++n)o=this.args[n],s=o.connect(e,t),s.observer&&c.push(s.observer);return c.length&&(r=new ne(c,function(){return a.evaluate(t,e.valueConverterLookupFunction)})),{value:this.evaluate(t,e.valueConverterLookupFunction),observer:r}},t}(ie);e.CallMember=pe;var fe=function(e){function t(r,n){s(this,t),e.call(this),this.func=r,this.args=n}return o(t,e),t.prototype.evaluate=function(e,t,r){var n=this.func.evaluate(e,t);if("function"!=typeof n)throw new Error(this.func+" is not a function");return n.apply(null,r||b(e,this.args,t))},t.prototype.accept=function(e){e.visitCallFunction(this)},t.prototype.connect=function(e,t){var r,n,i,o,s,a=this,u=this.func.connect(e,t),c=[];for(u.observer&&c.push(u.observer),n=0,i=this.args.length;i>n;++n)o=this.args[n],s=o.connect(e,t),s.observer&&c.push(s.observer);return c.length&&(r=new ne(c,function(){return a.evaluate(t,e.valueConverterLookupFunction)})),{value:this.evaluate(t,e.valueConverterLookupFunction),observer:r}},t}(ie);e.CallFunction=fe;var me=function(e){function t(r,n,i){s(this,t),e.call(this),this.operation=r,this.left=n,this.right=i}return o(t,e),t.prototype.evaluate=function(e,t){var r=this.left.evaluate(e);switch(this.operation){case"&&":return r&&this.right.evaluate(e);case"||":return r||this.right.evaluate(e)}var n=this.right.evaluate(e);switch(this.operation){case"==":return r==n;case"===":return r===n;case"!=":return r!=n;case"!==":return r!==n}if(null===r||null===n){switch(this.operation){case"+":return null!=r?r:null!=n?n:0;case"-":return null!=r?r:null!=n?0-n:0}return null}switch(this.operation){case"+":return j(r,n);case"-":return r-n;case"*":return r*n;case"/":return r/n;case"%":return r%n;case"<":return n>r;case">":return r>n;case"<=":return n>=r;case">=":return r>=n;case"^":return r^n;case"&":return r&n}throw new Error("Internal error ["+this.operation+"] not handled")},t.prototype.accept=function(e){e.visitBinary(this)},t.prototype.connect=function(e,t){var r,n=this,i=this.left.connect(e,t),o=this.right.connect(e,t),s=[];return i.observer&&s.push(i.observer),o.observer&&s.push(o.observer),s.length&&(r=new ne(s,function(){return n.evaluate(t,e.valueConverterLookupFunction)})),{value:this.evaluate(t,e.valueConverterLookupFunction),observer:r}},t}(ie);e.Binary=me;var ge=function(e){function t(r,n){s(this,t),e.call(this),this.operation=r,this.expression=n}return o(t,e),t.prototype.evaluate=function(e,t){return!this.expression.evaluate(e)},t.prototype.accept=function(e){e.visitPrefix(this)},t.prototype.connect=function(e,t){var r,n=this,i=this.expression.connect(e,t);return i.observer&&(r=new ne([i.observer],function(){return n.evaluate(t,e.valueConverterLookupFunction)})),{value:!i.value,observer:r}},t}(ie);e.PrefixNot=ge;var ve=function(e){function t(r){s(this,t),e.call(this),this.value=r}return o(t,e),t.prototype.evaluate=function(e,t){return this.value},t.prototype.accept=function(e){e.visitLiteralPrimitive(this)},t.prototype.connect=function(e,t){return{value:this.value}},t}(ie);e.LiteralPrimitive=ve;var ye=function(e){function t(r){s(this,t),e.call(this),this.value=r}return o(t,e),t.prototype.evaluate=function(e,t){return this.value},t.prototype.accept=function(e){e.visitLiteralString(this)},t.prototype.connect=function(e,t){return{value:this.value}},t}(ie);e.LiteralString=ye;var be=function(e){function t(r){s(this,t),e.call(this),this.elements=r}return o(t,e),t.prototype.evaluate=function(e,t){var r,n=this.elements,i=n.length,o=[];for(r=0;i>r;++r)o[r]=n[r].evaluate(e,t);return o},t.prototype.accept=function(e){e.visitLiteralArray(this)},t.prototype.connect=function(e,t){var r,n,i,o,s,a=this,u=[],c=[];for(n=0,i=this.elements.length;i>n;++n)o=this.elements[n],s=o.connect(e,t),s.observer&&u.push(s.observer),c[n]=s.value;return u.length&&(r=new ne(u,function(){return a.evaluate(t,e.valueConverterLookupFunction)})),{value:c,observer:r}},t}(ie);e.LiteralArray=be;var je=function(e){function t(r,n){s(this,t),e.call(this),this.keys=r,this.values=n}return o(t,e),t.prototype.evaluate=function(e,t){var r,n={},i=this.keys,o=this.values,s=i.length;for(r=0;s>r;++r)n[i[r]]=o[r].evaluate(e,t);return n},t.prototype.accept=function(e){e.visitLiteralObject(this)},t.prototype.connect=function(e,t){var r,n,i,o=this,s=[],a={},u=this.keys,c=this.values,l=u.length;for(n=0;l>n;++n)i=c[n].connect(e,t),i.observer&&s.push(i.observer),a[u[n]]=i.value;return s.length&&(r=new ne(s,function(){return o.evaluate(t,e.valueConverterLookupFunction)})),{value:a,observer:r}},t}(ie);e.LiteralObject=je;var ke=function(){function e(t){s(this,e),this.buffer=t}return e.unparse=function(t){var r=[],n=new e(r);return t.accept(n),r.join("")},e.prototype.write=function(e){this.buffer.push(e)},e.prototype.writeArgs=function(e){var t,r;for(this.write("("),t=0,r=e.length;r>t;++t)0!==t&&this.write(","),e[t].accept(this);this.write(")")},e.prototype.visitChain=function(e){var t,r=e.expressions,n=r.length;for(t=0;n>t;++t)0!==t&&this.write(";"),r[t].accept(this)},e.prototype.visitValueConverter=function(e){var t,r=e.args,n=r.length;for(this.write("("),e.expression.accept(this),this.write("|"+e.name),t=0;n>t;++t)this.write(" :"),r[t].accept(this);this.write(")")},e.prototype.visitAssign=function(e){e.target.accept(this),this.write("="),e.value.accept(this)},e.prototype.visitConditional=function(e){e.condition.accept(this),this.write("?"),e.yes.accept(this),this.write(":"),e.no.accept(this)},e.prototype.visitAccessScope=function(e){this.write(e.name)},e.prototype.visitAccessMember=function(e){e.object.accept(this),this.write("."+e.name)},e.prototype.visitAccessKeyed=function(e){e.object.accept(this),this.write("["),e.key.accept(this),this.write("]")},e.prototype.visitCallScope=function(e){this.write(e.name),this.writeArgs(e.args)},e.prototype.visitCallFunction=function(e){e.func.accept(this),this.writeArgs(e.args)},e.prototype.visitCallMember=function(e){e.object.accept(this),this.write("."+e.name),this.writeArgs(e.args)},e.prototype.visitPrefix=function(e){this.write("("+e.operation),e.expression.accept(this),this.write(")")},e.prototype.visitBinary=function(e){this.write("("),e.left.accept(this),this.write(e.operation),e.right.accept(this),this.write(")")},e.prototype.visitLiteralPrimitive=function(e){this.write(""+e.value)},e.prototype.visitLiteralArray=function(e){var t,r=e.elements,n=r.length;for(this.write("["),t=0;n>t;++t)0!==t&&this.write(","),r[t].accept(this);this.write("]")},e.prototype.visitLiteralObject=function(e){var t,r=e.keys,n=e.values,i=r.length;for(this.write("{"),t=0;i>t;++t)0!==t&&this.write(","),this.write("'"+r[t]+"':"),n[t].accept(this);this.write("}")},e.prototype.visitLiteralString=function(e){var t=e.value.replace(/'/g,"'");this.write("'"+t+"'")},e}();e.Unparser=ke;var we=[[],[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0]],xe={oneTime:0,oneWay:1,twoWay:2};e.bindingMode=xe;var $e=function(){function e(t,r){s(this,e),this.index=t,this.text=r}return e.prototype.withOp=function(e){return this.opKey=e,this},e.prototype.withGetterSetter=function(e){return this.key=e,this},e.prototype.withValue=function(e){return this.value=e,this},e.prototype.toString=function(){return"Token("+this.text+")"},e}();e.Token=$e;var Se=function(){function e(){s(this,e)}return e.prototype.lex=function(e){for(var t=new ze(e),r=[],n=t.scanToken();n;)r.push(n),n=t.scanToken();return r},e}();e.Lexer=Se;var ze=function(){function e(t){s(this,e),this.input=t,this.length=t.length,this.peek=0,this.index=-1,this.advance()}return e.prototype.scanToken=function(){for(;this.peek<=De;){if(++this.index>=this.length)return this.peek=Oe,null;this.peek=this.input.charCodeAt(this.index)}if(S(this.peek))return this.scanIdentifier();if(C(this.peek))return this.scanNumber(this.index);var e=this.index;switch(this.peek){case Be:return this.advance(),C(this.peek)?this.scanNumber(e):new $e(e,".");case Le:case Fe:case dt:case pt:case rt:case it:case _e:case Ge:case Ue:return this.scanCharacter(e,String.fromCharCode(this.peek));case Ne:case Ae:return this.scanString();case Ie:case qe:case Te:case We:case Me:case ot:case Ye:return this.scanOperator(e,String.fromCharCode(this.peek));case He:case Qe:case Ve:case Ke:return this.scanComplexOperator(e,Ke,String.fromCharCode(this.peek),"=");case Pe:return this.scanComplexOperator(e,Pe,"&","&");case ht:return this.scanComplexOperator(e,ht,"|","|");case ft:for(;$(this.peek);)this.advance();return this.scanToken()}var t=String.fromCharCode(this.peek);return this.error("Unexpected character ["+t+"]"),null},e.prototype.scanCharacter=function(e,t){return D(this.peek===t.charCodeAt(0)),this.advance(),new $e(e,t)},e.prototype.scanOperator=function(e,t){return D(this.peek===t.charCodeAt(0)),D(-1!==Ce.indexOf(t)),this.advance(),new $e(e,t).withOp(t)},e.prototype.scanComplexOperator=function(e,t,r,n){D(this.peek===r.charCodeAt(0)),this.advance();var i=r;return this.peek===t&&(this.advance(),i+=n),this.peek===t&&(this.advance(),i+=n),D(-1!=Ce.indexOf(i)),new $e(e,i).withOp(i)},e.prototype.scanIdentifier=function(){D(S(this.peek));var e=this.index;for(this.advance();z(this.peek);)this.advance();var t=this.input.substring(e,this.index),r=new $e(e,t);return-1!==Ce.indexOf(t)?r.withOp(t):r.withGetterSetter(t),r},e.prototype.scanNumber=function(e){D(C(this.peek));var t=this.index===e;for(this.advance();;){if(C(this.peek));else if(this.peek===Be)t=!1;else{if(!O(this.peek))break;this.advance(),E(this.peek)&&this.advance(),C(this.peek)||this.error("Invalid exponent",-1),t=!1}this.advance()}var r=this.input.substring(e,this.index),n=t?parseInt(r):parseFloat(r);return new $e(e,r).withValue(n)},e.prototype.scanString=function(){D(this.peek===Ne||this.peek===Ae);var e=this.index,t=this.peek;this.advance();for(var r,n=this.index;this.peek!==t;)if(this.peek===nt){null===r&&(r=[]),r.push(this.input.substring(n,this.index)),this.advance();var i;if(this.peek===ct){var o=this.input.substring(this.index+1,this.index+5);/[A-Z0-9]{4}/.test(o)||this.error("Invalid unicode escape [\\u"+o+"]"),i=parseInt(o,16);for(var s=0;5>s;++s)this.advance()}else i=decodeURIComponent(this.peek),this.advance();r.push(String.fromCharCode(i)),n=this.index}else this.peek===Oe?this.error("Unterminated quote"):this.advance();var a=this.input.substring(n,this.index);this.advance();var u=this.input.substring(e,this.index),i=a;return null!=r&&(r.push(a),i=r.join("")),new $e(e,u).withValue(i)},e.prototype.advance=function(){++this.index>=this.length?this.peek=Oe:this.peek=this.input.charCodeAt(this.index)},e.prototype.error=function(e){var t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=this.index+t;throw new Error("Lexer Error: "+e+" at column "+r+" in expression ["+this.input+"]")},e}();e.Scanner=ze;var Ce=["undefined","null","true","false","+","-","*","/","%","^","=","==","===","!=","!==","<",">","<=",">=","&&","||","&","|","!","?"],Oe=0,Ee=9,De=32,Ve=33,Ae=34,Re=36,Me=37,Pe=38,Ne=39,Le=40,Fe=41,Te=42,Ie=43,_e=44,qe=45,Be=46,We=47,Ge=58,Ue=59,He=60,Ke=61,Qe=62,Ye=63,Je=48,Xe=57,Ze=65,et=69,tt=90,rt=91,nt=92,it=93,ot=94,st=95,at=97,ut=101,ct=117,lt=122,dt=123,ht=124,pt=125,ft=160,mt=new $e(-1,null),gt=function(){function e(){s(this,e),this.cache={},this.lexer=new Se}return e.prototype.parse=function(e){return e=e||"",this.cache[e]||(this.cache[e]=new vt(this.lexer,e).parseChain())},e}();e.Parser=gt;var vt=function(){function e(t,r){s(this,e),this.index=0,this.input=r,this.tokens=t.lex(r)}return e.prototype.parseChain=function(){for(var e=!1,t=[];this.optional(";");)e=!0;for(;this.index<this.tokens.length;){(")"===this.peek.text||"}"===this.peek.text||"]"===this.peek.text)&&this.error("Unconsumed token "+this.peek.text);var r=this.parseValueConverter();for(t.push(r);this.optional(";");)e=!0;e&&r instanceof se&&this.error("cannot have a value converter in a chain")}return 1===t.length?t[0]:new oe(t)},e.prototype.parseValueConverter=function(){for(var e=this.parseExpression();this.optional("|");){var t=this.peek.text,r=[];for(this.advance();this.optional(":");)r.push(this.parseExpression());e=new se(e,t,r,[e].concat(r))}return e},e.prototype.parseExpression=function(){for(var e=this.peek.index,t=this.parseConditional();"="===this.peek.text;){if(!t.isAssignable){var r=this.index<this.tokens.length?this.peek.index:this.input.length,n=this.input.substring(e,r);this.error("Expression "+n+" is not assignable")}this.expect("="),t=new ae(t,this.parseConditional())}return t},e.prototype.parseConditional=function(){var e=this.peek.index,t=this.parseLogicalOr();if(this.optional("?")){var r=this.parseExpression();if(!this.optional(":")){var n=this.index<this.tokens.length?this.peek.index:this.input.length,i=this.input.substring(e,n);this.error("Conditional expression "+i+" requires all 3 expressions")}var o=this.parseExpression();t=new ue(t,r,o)}return t},e.prototype.parseLogicalOr=function(){for(var e=this.parseLogicalAnd();this.optional("||");)e=new me("||",e,this.parseLogicalAnd());return e},e.prototype.parseLogicalAnd=function(){for(var e=this.parseEquality();this.optional("&&");)e=new me("&&",e,this.parseEquality());return e},e.prototype.parseEquality=function(){for(var e=this.parseRelational();;)if(this.optional("=="))e=new me("==",e,this.parseRelational());else if(this.optional("!="))e=new me("!=",e,this.parseRelational());else if(this.optional("==="))e=new me("===",e,this.parseRelational());else{if(!this.optional("!=="))return e;e=new me("!==",e,this.parseRelational())}},e.prototype.parseRelational=function(){for(var e=this.parseAdditive();;)if(this.optional("<"))e=new me("<",e,this.parseAdditive());else if(this.optional(">"))e=new me(">",e,this.parseAdditive());else if(this.optional("<="))e=new me("<=",e,this.parseAdditive());else{if(!this.optional(">="))return e;e=new me(">=",e,this.parseAdditive())}},e.prototype.parseAdditive=function(){for(var e=this.parseMultiplicative();;)if(this.optional("+"))e=new me("+",e,this.parseMultiplicative());else{if(!this.optional("-"))return e;e=new me("-",e,this.parseMultiplicative())}},e.prototype.parseMultiplicative=function(){for(var e=this.parsePrefix();;)if(this.optional("*"))e=new me("*",e,this.parsePrefix());else if(this.optional("%"))e=new me("%",e,this.parsePrefix());else{if(!this.optional("/"))return e;e=new me("/",e,this.parsePrefix())}},e.prototype.parsePrefix=function(){return this.optional("+")?this.parsePrefix():this.optional("-")?new me("-",new ve(0),this.parsePrefix()):this.optional("!")?new ge("!",this.parsePrefix()):this.parseAccessOrCallMember()},e.prototype.parseAccessOrCallMember=function(){for(var e=this.parsePrimary();;)if(this.optional(".")){var t=this.peek.text;if(this.advance(),this.optional("(")){var r=this.parseExpressionList(")");this.expect(")"),e=new pe(e,t,r)}else e=new le(e,t)}else if(this.optional("[")){var n=this.parseExpression();this.expect("]"),e=new de(e,n)}else{if(!this.optional("("))return e;var r=this.parseExpressionList(")");this.expect(")"),e=new fe(e,r)}},e.prototype.parsePrimary=function(){if(this.optional("(")){var e=this.parseExpression();return this.expect(")"),e}if(this.optional("null")||this.optional("undefined"))return new ve(null);if(this.optional("true"))return new ve(!0);if(this.optional("false"))return new ve(!1);if(this.optional("[")){var t=this.parseExpressionList("]");return this.expect("]"),new be(t)}if("{"==this.peek.text)return this.parseObject();if(null!=this.peek.key)return this.parseAccessOrCallScope();if(null!=this.peek.value){var r=this.peek.value;return this.advance(),isNaN(r)?new ye(r):new ve(r)}if(this.index>=this.tokens.length)throw new Error("Unexpected end of expression: "+this.input);this.error("Unexpected token "+this.peek.text)},e.prototype.parseAccessOrCallScope=function(){var e=this.peek.key;
if(this.advance(),!this.optional("("))return new ce(e);var t=this.parseExpressionList(")");return this.expect(")"),new he(e,t)},e.prototype.parseObject=function(){var e=[],t=[];if(this.expect("{"),"}"!==this.peek.text)do{var r=this.peek.value;e.push("string"==typeof r?r:this.peek.text),this.advance(),this.expect(":"),t.push(this.parseExpression())}while(this.optional(","));return this.expect("}"),new je(e,t)},e.prototype.parseExpressionList=function(e){var t=[];if(this.peek.text!=e)do t.push(this.parseExpression());while(this.optional(","));return t},e.prototype.optional=function(e){return this.peek.text===e?(this.advance(),!0):!1},e.prototype.expect=function(e){this.peek.text===e?this.advance():this.error("Missing expected "+e)},e.prototype.advance=function(){this.index++},e.prototype.error=function(e){var t=this.index<this.tokens.length?"at column "+(this.tokens[this.index].index+1)+" in":"at the end of the expression";throw new Error("Parser Error: "+e+" "+t+" ["+this.input+"]")},q(e,[{key:"peek",get:function(){return this.index<this.tokens.length?this.tokens[this.index]:mt}}]),e}();e.ParserImplementation=vt;var yt=Map.prototype,bt=function(e){function t(r,n){s(this,t),e.call(this,r,n)}return o(t,e),t.create=function(e,r){var n=new t(e,r);return r.set=function(){var e=r.get(arguments[0]),t=e?"update":"add",i=yt.set.apply(r,arguments);return n.addChangeRecord({type:t,object:r,key:arguments[0],oldValue:e}),i},r["delete"]=function(){var e=r.get(arguments[0]),t=yt["delete"].apply(r,arguments);return n.addChangeRecord({type:"delete",object:r,key:arguments[0],oldValue:e}),t},r.clear=function(){var e=yt.clear.apply(r,arguments);return n.addChangeRecord({type:"clear",object:r}),e},n},t}(J),jt=function(){function e(t){s(this,e),this.eventName=t,this.count=0}return e.prototype.increment=function(){this.count++,1===this.count&&document.addEventListener(this.eventName,R,!1)},e.prototype.decrement=function(){this.count--,0===this.count&&document.removeEventListener(this.eventName,R)},e}(),kt=function(){function e(){s(this,e)}return e.prototype.subscribe=function(e,t,r,n){if(!n)return e.addEventListener(t,r,!1),function(){e.removeEventListener(t,r)};var i=function(){var n=document.delegatedHandlers||(document.delegatedHandlers={}),i=n[t]||(n[t]=new jt(t)),o=e.delegatedCallbacks||(e.delegatedCallbacks={});return i.increment(),o[t]=r,{v:function(){i.decrement(),o[t]=null}}}();return"object"==typeof i?i.v:void 0},e}(),wt=function(){function e(){s(this,e),this.elementHandlerLookup={},this.eventStrategyLookup={},this.registerElementConfig({tagName:"input",properties:{value:["change","input"],checked:["change","input"],files:["change","input"]}}),this.registerElementConfig({tagName:"textarea",properties:{value:["change","input"]}}),this.registerElementConfig({tagName:"select",properties:{value:["change"]}}),this.registerElementConfig({tagName:"content editable",properties:{value:["change","input","blur","keyup","paste"]}}),this.registerElementConfig({tagName:"scrollable element",properties:{scrollTop:["scroll"],scrollLeft:["scroll"]}}),this.defaultEventStrategy=new kt}return e.prototype.registerElementConfig=function(e){var t,r=e.tagName.toLowerCase(),n=e.properties;this.elementHandlerLookup[r]={};for(t in n)n.hasOwnProperty(t)&&this.registerElementPropertyConfig(r,t,n[t])},e.prototype.registerElementPropertyConfig=function(e,t,r){this.elementHandlerLookup[e][t]={subscribe:function(e,t){return r.forEach(function(r){e.addEventListener(r,t,!1)}),function(){r.forEach(function(r){e.removeEventListener(r,t)})}}}},e.prototype.registerElementHandler=function(e,t){this.elementHandlerLookup[e.toLowerCase()]=t},e.prototype.registerEventStrategy=function(e,t){this.eventStrategyLookup[e]=t},e.prototype.getElementHandler=function(e,t){var r,n=this.elementHandlerLookup;if(e.tagName){if(r=e.tagName.toLowerCase(),n[r]&&n[r][t])return n[r][t];if("textContent"===t||"innerHTML"===t)return n["content editable"].value;if("scrollTop"===t||"scrollLeft"===t)return n["scrollable element"][t]}return null},e.prototype.addEventListener=function(e,t,r,n){return(this.eventStrategyLookup[t]||this.defaultEventStrategy).subscribe(e,t,r,n)},e}();e.EventManager=wt;var xt=function(){function e(){s(this,e),this.tracked=[],this.checkDelay=120}return e.prototype.addProperty=function(e){var t=this.tracked;t.push(e),1===t.length&&this.scheduleDirtyCheck()},e.prototype.removeProperty=function(e){var t=this.tracked;t.splice(t.indexOf(e),1)},e.prototype.scheduleDirtyCheck=function(){var e=this;setTimeout(function(){return e.check()},this.checkDelay)},e.prototype.check=function(){for(var e=this.tracked,t=e.length;t--;){var r=e[t];r.isDirty()&&r.call()}e.length&&this.scheduleDirtyCheck()},e}();e.DirtyChecker=xt;var $t=function(){function e(t,r,n){s(this,e),this.dirtyChecker=t,this.obj=r,this.propertyName=n,this.callbacks=[],this.isSVG=r instanceof SVGElement}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.isSVG?this.obj.setAttributeNS(null,this.propertyName,e):this.obj[this.propertyName]=e},e.prototype.call=function(){for(var e=this.callbacks,t=e.length,r=this.oldValue,n=this.getValue();t--;)e[t](n,r);this.oldValue=n},e.prototype.isDirty=function(){return this.oldValue!==this.getValue()},e.prototype.beginTracking=function(){this.tracking=!0,this.oldValue=this.newValue=this.getValue(),this.dirtyChecker.addProperty(this)},e.prototype.endTracking=function(){this.tracking=!1,this.dirtyChecker.removeProperty(this)},e.prototype.subscribe=function(e){var t=this.callbacks,r=this;return t.push(e),this.tracking||this.beginTracking(),function(){t.splice(t.indexOf(e),1),0===t.length&&r.endTracking()}},e}();e.DirtyCheckProperty=$t;var St=function(){function e(t,r,n){s(this,e),this.taskQueue=t,this.obj=r,this.propertyName=n,this.callbacks=[],this.queued=!1,this.observing=!1}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e.prototype.getterValue=function(){return this.currentValue},e.prototype.setterValue=function(e){var t=this.currentValue;t!==e&&(this.queued||(this.oldValue=t,this.queued=!0,this.taskQueue.queueMicroTask(this)),this.currentValue=e)},e.prototype.call=function(){var e=this.callbacks,t=e.length,r=this.oldValue,n=this.currentValue;for(this.queued=!1;t--;)e[t](n,r)},e.prototype.subscribe=function(e){var t=this.callbacks;return t.push(e),this.observing||this.convertProperty(),function(){t.splice(t.indexOf(e),1)}},e.prototype.convertProperty=function(){this.observing=!0,this.currentValue=this.obj[this.propertyName],this.setValue=this.setterValue,this.getValue=this.getterValue;try{Object.defineProperty(this.obj,this.propertyName,{configurable:!0,enumerable:!0,get:this.getValue.bind(this),set:this.setValue.bind(this)})}catch(e){}},e}();e.SetterObserver=St;var zt=function(){function e(t,r,n){s(this,e),this.obj=t,this.propertyName=r,this.subscribe=n}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e}();e.OoPropertyObserver=zt;var Ct=function(){function e(t,r){s(this,e),this.obj=t,this.observerLocator=r,this.observers={},this.callbacks={},this.callbackCount=0}return e.prototype.subscribe=function(e,t){if(this.callbacks[e]?this.callbacks[e].push(t):(this.callbacks[e]=[t],this.callbacks[e].oldValue=this.obj[e]),0===this.callbackCount){this.handler=this.handleChanges.bind(this);try{Object.observe(this.obj,this.handler,["update","add"])}catch(r){}}return this.callbackCount++,this.unsubscribe.bind(this,e,t)},e.prototype.unsubscribe=function(e,t){var r=this.callbacks[e],n=r.indexOf(t);if(-1!==n&&(r.splice(n,1),0===r.length&&(r.oldValue=null,this.callbacks[e]=null),this.callbackCount--,0===this.callbackCount))try{Object.unobserve(this.obj,this.handler)}catch(i){}},e.prototype.getObserver=function(e,t){var r=this.observers[e];return r||(r=t?this.observers[e]=new zt(this.obj,e,this.subscribe.bind(this,e)):this.observers[e]=new Ot(this,this.obj,e)),r},e.prototype.handleChanges=function(e){var t,r,n,i,o,s,a={};for(t=0,r=e.length;r>t;t++)n=e[t],a[n.name]=n;for(name in a)if(s=this.callbacks[name])for(n=a[name],o=n.object[name],i=n.oldValue,t=0,r=s.length;r>t;t++)s[t](o,i)},e}();e.OoObjectObserver=Ct;var Ot=function(){function e(t,r,n){s(this,e),this.owner=t,this.obj=r,this.propertyName=n,this.callbackMap=new Map}return e.prototype.getValue=function(){return this.actual?this.actual.getValue():this.obj[this.propertyName]},e.prototype.setValue=function(e){return this.actual?void this.actual.setValue(e):(this.obj[this.propertyName]=e,void this.trigger(e,void 0))},e.prototype.trigger=function(e,t){var r;this.subscription&&this.subscription(),this.getObserver();for(var n=this.callbackMap.keys(),i=Array.isArray(n),o=0,n=i?n:n[Symbol.iterator]();;){if(i){if(o>=n.length)break;r=n[o++]}else{if(o=n.next(),o.done)break;r=o.value}r(e,t)}},e.prototype.getObserver=function(){var e,t;if(Object.getOwnPropertyDescriptor(this.obj,this.propertyName)){t=this.owner.observerLocator,delete this.owner.observers[this.propertyName],delete t.getOrCreateObserversLookup(this.obj,t)[this.propertyName],this.actual=t.getObserver(this.obj,this.propertyName);for(var r=this.callbackMap.keys(),n=Array.isArray(r),i=0,r=n?r:r[Symbol.iterator]();;){if(n){if(i>=r.length)break;e=r[i++]}else{if(i=r.next(),i.done)break;e=i.value}this.callbackMap.set(e,this.actual.subscribe(e))}}},e.prototype.subscribe=function(e){var t=this;return this.actual||this.getObserver(),this.actual?this.actual.subscribe(e):(this.subscription||(this.subscription=this.owner.subscribe(this.propertyName,this.trigger.bind(this))),this.callbackMap.set(e,null),function(){var r=t.callbackMap.get(e);r&&r(),t.callbackMap["delete"](e)})},e}();e.UndefinedPropertyObserver=Ot;var Et=function(){function e(t,r,n){s(this,e),this.element=t,this.propertyName=r,this.attributeName=n}return e.prototype.getValue=function(){return this.element.getAttributeNS("http://www.w3.org/1999/xlink",this.attributeName)},e.prototype.setValue=function(e){return this.element.setAttributeNS("http://www.w3.org/1999/xlink",this.attributeName,e)},e.prototype.subscribe=function(e){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}();e.XLinkAttributeObserver=Et;var Dt=function(){function e(t,r){s(this,e),this.element=t,this.propertyName=r}return e.prototype.getValue=function(){return this.element.getAttribute(this.propertyName)},e.prototype.setValue=function(e){return this.element.setAttribute(this.propertyName,e)},e.prototype.subscribe=function(e){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}();e.DataAttributeObserver=Dt;var Vt=function(){function e(t,r){s(this,e),this.element=t,this.propertyName=r}return e.prototype.getValue=function(){return this.element.style.cssText},e.prototype.setValue=function(e){e instanceof Object&&(e=this.flattenCss(e)),this.element.style.cssText=e},e.prototype.subscribe=function(e){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e.prototype.flattenCss=function(e){var t="";for(var r in e)e.hasOwnProperty(r)&&(t+=r+": "+e[r]+"; ");return t},e}();e.StyleObserver=Vt;var At=function(){function e(t,r,n){s(this,e),this.element=t,this.propertyName=r,this.handler=n,this.callbacks=[]}return e.prototype.getValue=function(){return this.element[this.propertyName]},e.prototype.setValue=function(e){this.element[this.propertyName]=void 0===e||null===e?"":e,this.call()},e.prototype.call=function(){for(var e=this.callbacks,t=e.length,r=this.oldValue,n=this.getValue();t--;)e[t](n,r);this.oldValue=n},e.prototype.subscribe=function(e){return this.disposeHandler||(this.oldValue=this.getValue(),this.disposeHandler=this.handler.subscribe(this.element,this.call.bind(this))),this.callbacks.push(e),this.unsubscribe.bind(this,e)},e.prototype.unsubscribe=function(e){var t=this.callbacks;t.splice(t.indexOf(e),1),0===t.length&&(this.disposeHandler(),this.disposeHandler=null)},e}();e.ValueAttributeObserver=At;var Rt=function(){function e(t,r,n){s(this,e),this.element=t,this.handler=r,this.observerLocator=n}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){var t=this;if(null!==e&&void 0!==e&&this.element.multiple&&!Array.isArray(e))throw new Error("Only null or Array instances can be bound to a multi-select.");this.value!==e&&(this.arraySubscription&&(this.arraySubscription(),this.arraySubscription=null),Array.isArray(e)&&(this.arraySubscription=this.observerLocator.getArrayObserver(e).subscribe(this.synchronizeOptions.bind(this))),this.value=e,this.synchronizeOptions(),this.element.options.length>0&&!this.initialSync&&(this.initialSync=!0,this.observerLocator.taskQueue.queueMicroTask({call:function(){return t.synchronizeOptions()}})))},e.prototype.synchronizeOptions=function(){var e,t,r,n,i,o,s=this.value;for(null===s||void 0===s?i=!0:Array.isArray(s)&&(o=!0),t=this.element.options,e=t.length;e--;)r=t.item(e),i?r.selected=!1:(n=r.hasOwnProperty("model")?r.model:r.value,o?r.selected=-1!==s.indexOf(n):r.selected=s===n)},e.prototype.synchronizeValue=function(){var e,t,r,n=this.element.options,i=0,o=[];for(t=0,r=n.length;r>t;t++)e=n.item(t),e.selected&&(o[i]=e.hasOwnProperty("model")?e.model:e.value,i++);this.element.multiple||(o=0===i?null:o[0]),this.oldValue=this.value,this.value=o,this.call()},e.prototype.call=function(){for(var e=this.callbacks,t=e.length,r=this.oldValue,n=this.value;t--;)e[t](n,r)},e.prototype.subscribe=function(e){return this.callbacks||(this.callbacks=[],this.disposeHandler=this.handler.subscribe(this.element,this.synchronizeValue.bind(this,!1))),this.callbacks.push(e),this.unsubscribe.bind(this,e)},e.prototype.unsubscribe=function(e){var t=this.callbacks;t.splice(t.indexOf(e),1),0===t.length&&(this.disposeHandler(),this.disposeHandler=null,this.callbacks=null)},e.prototype.bind=function(){var e=this;this.domObserver=new MutationObserver(function(){e.synchronizeOptions(),e.synchronizeValue()}),this.domObserver.observe(this.element,{childList:!0,subtree:!0})},e.prototype.unbind=function(){this.domObserver.disconnect(),this.domObserver=null,this.arraySubscription&&(this.arraySubscription(),this.arraySubscription=null)},e}();e.SelectValueObserver=Rt;var Mt=function(){function e(t,r,n){s(this,e),this.element=t,this.handler=r,this.observerLocator=n}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){var t=this;this.value!==e&&(this.arraySubscription&&(this.arraySubscription(),this.arraySubscription=null),"checkbox"===this.element.type&&Array.isArray(e)&&(this.arraySubscription=this.observerLocator.getArrayObserver(e).subscribe(this.synchronizeElement.bind(this))),this.value=e,this.synchronizeElement(),this.element.hasOwnProperty("model")||this.initialSync||(this.initialSync=!0,this.observerLocator.taskQueue.queueMicroTask({call:function(){return t.synchronizeElement()}})))},e.prototype.synchronizeElement=function(){var e=this.value,t=this.element,r=t.hasOwnProperty("model")?t.model:t.value,n="radio"===t.type;t.checked=n&&e===r||!n&&e===!0||!n&&Array.isArray(e)&&-1!==e.indexOf(r)},e.prototype.synchronizeValue=function(){var e,t=this.value,r=this.element,n=r.hasOwnProperty("model")?r.model:r.value;if("checkbox"===r.type){if(Array.isArray(t))return e=t.indexOf(n),void(r.checked&&-1===e?t.push(n):r.checked||-1===e||t.splice(e,1));t=r.checked}else{if(!r.checked)return;t=n}this.oldValue=this.value,this.value=t,this.call()},e.prototype.call=function(){for(var e=this.callbacks,t=e.length,r=this.oldValue,n=this.value;t--;)e[t](n,r)},e.prototype.subscribe=function(e){return this.callbacks||(this.callbacks=[],this.disposeHandler=this.handler.subscribe(this.element,this.synchronizeValue.bind(this,!1))),this.callbacks.push(e),this.unsubscribe.bind(this,e)},e.prototype.unsubscribe=function(e){var t=this.callbacks;t.splice(t.indexOf(e),1),0===t.length&&(this.disposeHandler(),this.disposeHandler=null,this.callbacks=null)},e.prototype.unbind=function(){this.arraySubscription&&(this.arraySubscription(),this.arraySubscription=null)},e}();e.CheckedObserver=Mt;var Pt=function(){function e(t){s(this,e),this.element=t,this.doNotCache=!0,this.value="",this.version=0}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){var t,r,n,i=this.nameIndex||{},o=this.version;if(null!==e&&void 0!==e&&e.length)for(t=e.split(" "),n=t.length;n--;)r=t[n],""!==r&&(i[r]=o,this.element.classList.add(r));if(this.value=e,this.nameIndex=i,this.version+=1,0!==o){o-=1;for(r in i)i.hasOwnProperty(r)&&i[r]===o&&this.element.classList.remove(r)}},e.prototype.subscribe=function(e){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "class" property is not supported.')},e}();e.ClassObserver=Pt;var Nt=function(){function e(t,r,n,i){s(this,e),this.obj=t,this.propertyName=r,this.descriptor=n,this.observerLocator=i,this.callbacks=[]}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e.prototype.trigger=function(e,t){for(var r=this.callbacks,n=r.length;n--;)r[n](e,t)},e.prototype.evaluate=function(){var e=this.getValue();this.oldValue!==e&&(this.trigger(e,this.oldValue),this.oldValue=e)},e.prototype.subscribe=function(e){var t,r,n,i=this;if(this.callbacks.push(e),void 0===this.oldValue)for(this.oldValue=this.getValue(),this.subscriptions=[],t=this.descriptor.get.dependencies,r=0,n=t.length;n>r;r++)this.subscriptions.push(this.observerLocator.getObserver(this.obj,t[r]).subscribe(function(){return i.evaluate()}));return function(){if(i.callbacks.splice(i.callbacks.indexOf(e),1),!(i.callbacks.length>0)){for(;i.subscriptions.length;)i.subscriptions.pop()();i.oldValue=void 0}}},e}();e.ComputedPropertyObserver=Nt;var Lt={a:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","target","transform","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],altGlyph:["class","dx","dy","externalResourcesRequired","format","glyphRef","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],altGlyphDef:["id","xml:base","xml:lang","xml:space"],altGlyphItem:["id","xml:base","xml:lang","xml:space"],animate:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateColor:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateMotion:["accumulate","additive","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keyPoints","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","origin","path","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","rotate","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateTransform:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","type","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],circle:["class","cx","cy","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","r","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],clipPath:["class","clipPathUnits","externalResourcesRequired","id","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],"color-profile":["id","local","name","rendering-intent","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],cursor:["externalResourcesRequired","id","requiredExtensions","requiredFeatures","systemLanguage","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],defs:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],desc:["class","id","style","xml:base","xml:lang","xml:space"],ellipse:["class","cx","cy","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rx","ry","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],feBlend:["class","height","id","in","in2","mode","result","style","width","x","xml:base","xml:lang","xml:space","y"],feColorMatrix:["class","height","id","in","result","style","type","values","width","x","xml:base","xml:lang","xml:space","y"],feComponentTransfer:["class","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],feComposite:["class","height","id","in","in2","k1","k2","k3","k4","operator","result","style","width","x","xml:base","xml:lang","xml:space","y"],feConvolveMatrix:["bias","class","divisor","edgeMode","height","id","in","kernelMatrix","kernelUnitLength","order","preserveAlpha","result","style","targetX","targetY","width","x","xml:base","xml:lang","xml:space","y"],feDiffuseLighting:["class","diffuseConstant","height","id","in","kernelUnitLength","result","style","surfaceScale","width","x","xml:base","xml:lang","xml:space","y"],feDisplacementMap:["class","height","id","in","in2","result","scale","style","width","x","xChannelSelector","xml:base","xml:lang","xml:space","y","yChannelSelector"],feDistantLight:["azimuth","elevation","id","xml:base","xml:lang","xml:space"],feFlood:["class","height","id","result","style","width","x","xml:base","xml:lang","xml:space","y"],feFuncA:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncB:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncG:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncR:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feGaussianBlur:["class","height","id","in","result","stdDeviation","style","width","x","xml:base","xml:lang","xml:space","y"],feImage:["class","externalResourcesRequired","height","id","preserveAspectRatio","result","style","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],feMerge:["class","height","id","result","style","width","x","xml:base","xml:lang","xml:space","y"],feMergeNode:["id","xml:base","xml:lang","xml:space"],feMorphology:["class","height","id","in","operator","radius","result","style","width","x","xml:base","xml:lang","xml:space","y"],feOffset:["class","dx","dy","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],fePointLight:["id","x","xml:base","xml:lang","xml:space","y","z"],feSpecularLighting:["class","height","id","in","kernelUnitLength","result","specularConstant","specularExponent","style","surfaceScale","width","x","xml:base","xml:lang","xml:space","y"],feSpotLight:["id","limitingConeAngle","pointsAtX","pointsAtY","pointsAtZ","specularExponent","x","xml:base","xml:lang","xml:space","y","z"],feTile:["class","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],feTurbulence:["baseFrequency","class","height","id","numOctaves","result","seed","stitchTiles","style","type","width","x","xml:base","xml:lang","xml:space","y"],filter:["class","externalResourcesRequired","filterRes","filterUnits","height","id","primitiveUnits","style","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],font:["class","externalResourcesRequired","horiz-adv-x","horiz-origin-x","horiz-origin-y","id","style","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],"font-face":["accent-height","alphabetic","ascent","bbox","cap-height","descent","font-family","font-size","font-stretch","font-style","font-variant","font-weight","hanging","id","ideographic","mathematical","overline-position","overline-thickness","panose-1","slope","stemh","stemv","strikethrough-position","strikethrough-thickness","underline-position","underline-thickness","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","widths","x-height","xml:base","xml:lang","xml:space"],"font-face-format":["id","string","xml:base","xml:lang","xml:space"],"font-face-name":["id","name","xml:base","xml:lang","xml:space"],"font-face-src":["id","xml:base","xml:lang","xml:space"],"font-face-uri":["id","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],foreignObject:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xml:base","xml:lang","xml:space","y"],g:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],glyph:["arabic-form","class","d","glyph-name","horiz-adv-x","id","lang","orientation","style","unicode","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],glyphRef:["class","dx","dy","format","glyphRef","id","style","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],hkern:["g1","g2","id","k","u1","u2","xml:base","xml:lang","xml:space"],image:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],line:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","x1","x2","xml:base","xml:lang","xml:space","y1","y2"],linearGradient:["class","externalResourcesRequired","gradientTransform","gradientUnits","id","spreadMethod","style","x1","x2","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y1","y2"],marker:["class","externalResourcesRequired","id","markerHeight","markerUnits","markerWidth","orient","preserveAspectRatio","refX","refY","style","viewBox","xml:base","xml:lang","xml:space"],mask:["class","externalResourcesRequired","height","id","maskContentUnits","maskUnits","requiredExtensions","requiredFeatures","style","systemLanguage","width","x","xml:base","xml:lang","xml:space","y"],metadata:["id","xml:base","xml:lang","xml:space"],"missing-glyph":["class","d","horiz-adv-x","id","style","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],mpath:["externalResourcesRequired","id","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],path:["class","d","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","pathLength","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],pattern:["class","externalResourcesRequired","height","id","patternContentUnits","patternTransform","patternUnits","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","viewBox","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],polygon:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","points","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],polyline:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","points","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],radialGradient:["class","cx","cy","externalResourcesRequired","fx","fy","gradientTransform","gradientUnits","id","r","spreadMethod","style","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],rect:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rx","ry","style","systemLanguage","transform","width","x","xml:base","xml:lang","xml:space","y"],script:["externalResourcesRequired","id","type","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],set:["attributeName","attributeType","begin","dur","end","externalResourcesRequired","fill","id","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],stop:["class","id","offset","style","xml:base","xml:lang","xml:space"],
style:["id","media","title","type","xml:base","xml:lang","xml:space"],svg:["baseProfile","class","contentScriptType","contentStyleType","externalResourcesRequired","height","id","onabort","onactivate","onclick","onerror","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","onresize","onscroll","onunload","onzoom","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","version","viewBox","width","x","xml:base","xml:lang","xml:space","y","zoomAndPan"],"switch":["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],symbol:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","preserveAspectRatio","style","viewBox","xml:base","xml:lang","xml:space"],text:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","transform","x","xml:base","xml:lang","xml:space","y"],textPath:["class","externalResourcesRequired","id","lengthAdjust","method","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","spacing","startOffset","style","systemLanguage","textLength","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],title:["class","id","style","xml:base","xml:lang","xml:space"],tref:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","x","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],tspan:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","x","xml:base","xml:lang","xml:space","y"],use:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],view:["externalResourcesRequired","id","preserveAspectRatio","viewBox","viewTarget","xml:base","xml:lang","xml:space","zoomAndPan"],vkern:["g1","g2","id","k","u1","u2","xml:base","xml:lang","xml:space"]};e.elements=Lt;var Ft={a:!0,altGlyph:!0,animate:!0,animateColor:!0,circle:!0,clipPath:!0,defs:!0,ellipse:!0,feBlend:!0,feColorMatrix:!0,feComponentTransfer:!0,feComposite:!0,feConvolveMatrix:!0,feDiffuseLighting:!0,feDisplacementMap:!0,feFlood:!0,feGaussianBlur:!0,feImage:!0,feMerge:!0,feMorphology:!0,feOffset:!0,feSpecularLighting:!0,feTile:!0,feTurbulence:!0,filter:!0,font:!0,foreignObject:!0,g:!0,glyph:!0,glyphRef:!0,image:!0,line:!0,linearGradient:!0,marker:!0,mask:!0,"missing-glyph":!0,path:!0,pattern:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,svg:!0,"switch":!0,symbol:!0,text:!0,textPath:!0,tref:!0,tspan:!0,use:!0};e.presentationElements=Ft;var Tt={"alignment-baseline":!0,"baseline-shift":!0,"clip-path":!0,"clip-rule":!0,clip:!0,"color-interpolation-filters":!0,"color-interpolation":!0,"color-profile":!0,"color-rendering":!0,color:!0,cursor:!0,direction:!0,display:!0,"dominant-baseline":!0,"enable-background":!0,"fill-opacity":!0,"fill-rule":!0,fill:!0,filter:!0,"flood-color":!0,"flood-opacity":!0,"font-family":!0,"font-size-adjust":!0,"font-size":!0,"font-stretch":!0,"font-style":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-horizontal":!0,"glyph-orientation-vertical":!0,"image-rendering":!0,kerning:!0,"letter-spacing":!0,"lighting-color":!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,mask:!0,opacity:!0,overflow:!0,"pointer-events":!0,"shape-rendering":!0,"stop-color":!0,"stop-opacity":!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,stroke:!0,"text-anchor":!0,"text-decoration":!0,"text-rendering":!0,"unicode-bidi":!0,visibility:!0,"word-spacing":!0,"writing-mode":!0};e.presentationAttributes=Tt,"altglyph"===L("<svg><altGlyph /></svg>").firstElementChild.nodeName&&(Lt.altglyph=Lt.altGlyph,delete Lt.altGlyph,Lt.altglyphdef=Lt.altGlyphDef,delete Lt.altGlyphDef,Lt.altglyphitem=Lt.altGlyphItem,delete Lt.altGlyphItem,Lt.glyphref=Lt.glyphRef,delete Lt.glyphRef),"function"!=typeof Object.getPropertyDescriptor&&(Object.getPropertyDescriptor=function(e,t){for(var r=Object.getOwnPropertyDescriptor(e,t),n=Object.getPrototypeOf(e);"undefined"==typeof r&&null!==n;)r=Object.getOwnPropertyDescriptor(n,t),n=Object.getPrototypeOf(n);return r});var It=function(){function e(t,r,n,i){s(this,e),this.taskQueue=t,this.eventManager=r,this.dirtyChecker=n,this.observationAdapters=i}return e.inject=function(){return[r.TaskQueue,wt,xt,n.All.of(_t)]},e.prototype.getObserver=function(e,t){var r,n=e.__observers__;return n&&t in n?n[t]:(r=this.createPropertyObserver(e,t),r.doNotCache||(void 0===n&&(n=this.getOrCreateObserversLookup(e)),n[t]=r),r)},e.prototype.getOrCreateObserversLookup=function(e){return e.__observers__||this.createObserversLookup(e)},e.prototype.createObserversLookup=function(e){var t={};try{Object.defineProperty(e,"__observers__",{enumerable:!1,configurable:!1,writable:!1,value:t})}catch(r){}return t},e.prototype.getObservationAdapter=function(e,t,r){var n,i,o;for(n=0,i=this.observationAdapters.length;i>n;n++)if(o=this.observationAdapters[n],o.handlesProperty(e,t,r))return o;return null},e.prototype.createPropertyObserver=function(e,t){var r,n,i,o,s;if(e instanceof Element){if("class"===t)return new Pt(e);if("style"===t||"css"===t)return new Vt(e,t);if(i=this.eventManager.getElementHandler(e,t),"value"===t&&"select"===e.tagName.toLowerCase())return new Rt(e,i,this);if("checked"===t&&"input"===e.tagName.toLowerCase())return new Mt(e,i,this);if(i)return new At(e,t,i);if(s=/^xlink:(.+)$/.exec(t))return new Et(e,t,s[1]);if(/^\w+:|^data-|^aria-/.test(t)||e instanceof SVGElement&&N(e.nodeName,t))return new Dt(e,t)}if(n=Object.getPropertyDescriptor(e,t),M(n))return new Nt(e,t,n,this);var a=void 0;return n&&(a=n.get||n.set)?a.getObserver?a.getObserver(e):(o=this.getObservationAdapter(e,t,n),o?o.getObserver(e,t,n):new $t(this.dirtyChecker,e,t)):Q?(r=e.__observer__||F(e,this),r.getObserver(t,n)):e instanceof Array?"length"===t?this.getArrayObserver(e).getLengthObserver():new $t(this.dirtyChecker,e,t):e instanceof Map?"size"===t?this.getMapObserver(e).getLengthObserver():new $t(this.dirtyChecker,e,t):new St(this.taskQueue,e,t)},e.prototype.getArrayObserver=function(e){return"__array_observer__"in e?e.__array_observer__:e.__array_observer__=y(this.taskQueue,e)},e.prototype.getMapObserver=function(e){return"__map_observer__"in e?e.__map_observer__:e.__map_observer__=V(this.taskQueue,e)},e}();e.ObserverLocator=It;var _t=function(){function e(){s(this,e)}return e.prototype.handlesProperty=function(e,t,r){throw new Error("BindingAdapters must implement handlesProperty(object, propertyName).")},e.prototype.getObserver=function(e,t,r){throw new Error("BindingAdapters must implement createObserver(object, propertyName).")},e}();e.ObjectObservationAdapter=_t;var qt=function(){function e(t,r,n,i,o,a){s(this,e),this.observerLocator=t,this.targetProperty=r,this.sourceExpression=n,this.mode=i,this.valueConverterLookupFunction=o,this.attribute=a,this.discrete=!1}return e.prototype.createBinding=function(e){return new Bt(this.observerLocator,this.sourceExpression,e,this.targetProperty,this.mode,this.valueConverterLookupFunction)},e.create=function(t,r){var i=arguments.length<=2||void 0===arguments[2]?xe.oneWay:arguments[2],o=n.Container.instance.get(gt),s=n.Container.instance.get(It);return new e(s,t,o.parse(r),i)},e}();e.BindingExpression=qt;var Bt=function(){function e(t,r,n,i,o,a){s(this,e),this.observerLocator=t,this.sourceExpression=r,this.targetProperty=t.getObserver(n,i),this.mode=o,this.valueConverterLookupFunction=a}return e.prototype.getObserver=function(e,t){return this.observerLocator.getObserver(e,t)},e.prototype.bind=function(e){var t,r=this,n=this.targetProperty;if("bind"in n&&n.bind(),this.mode==xe.oneWay||this.mode==xe.twoWay){if(this._disposeObserver){if(this.source===e)return;this.unbind()}t=this.sourceExpression.connect(this,e),t.observer&&(this._disposeObserver=t.observer.subscribe(function(e){var t=n.getValue();e!==t&&n.setValue(e)})),n.setValue(t.value),this.mode==xe.twoWay&&(this._disposeListener=n.subscribe(function(t){r.sourceExpression.assign(e,t,r.valueConverterLookupFunction)})),this.source=e}else{var i=this.sourceExpression.evaluate(e,this.valueConverterLookupFunction);n.setValue(i)}},e.prototype.unbind=function(){"unbind"in this.targetProperty&&this.targetProperty.unbind(),this._disposeObserver&&(this._disposeObserver(),this._disposeObserver=null),this._disposeListener&&(this._disposeListener(),this._disposeListener=null)},e}(),Wt=function(){function e(t,r,n,i){s(this,e),this.observerLocator=t,this.targetProperty=r,this.sourceExpression=n,this.valueConverterLookupFunction=i}return e.prototype.createBinding=function(e){return new Gt(this.observerLocator,this.sourceExpression,e,this.targetProperty,this.valueConverterLookupFunction)},e}();e.CallExpression=Wt;var Gt=function(){function e(t,r,n,i,o){s(this,e),this.sourceExpression=r,this.target=n,this.targetProperty=t.getObserver(n,i),this.valueConverterLookupFunction=o}return e.prototype.bind=function(e){var t=this;if(this.source){if(this.source===e)return;this.unbind()}this.source=e,this.targetProperty.setValue(function(r){var n,i=e.$event;return e.$event=r,n=t.sourceExpression.evaluate(e,t.valueConverterLookupFunction),e.$event=i,n})},e.prototype.unbind=function(){this.source&&(this.targetProperty.setValue(null),this.source=null)},e}();"classList"in document.createElement("_")&&(!document.createElementNS||"classList"in document.createElementNS("http://www.w3.org/2000/svg","g"))?!function(){var e=document.createElement("_");if(e.classList.add("c1","c2"),!e.classList.contains("c2")){var t=function(e){var t=DOMTokenList.prototype[e];DOMTokenList.prototype[e]=function(e){var r,n=arguments.length;for(r=0;n>r;r++)e=arguments[r],t.call(this,e)}};t("add"),t("remove")}if(e.classList.toggle("c3",!1),e.classList.contains("c3")){var r=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(e,t){return 1 in arguments&&!this.contains(e)==!t?t:r.call(this,e)}}e=null}():!function(e){if("Element"in e){var t="classList",r="prototype",n=e.Element[r],i=Object,o=String[r].trim||function(){return this.replace(/^\s+|\s+$/g,"")},s=Array[r].indexOf||function(e){for(var t=0,r=this.length;r>t;t++)if(t in this&&this[t]===e)return t;return-1},a=function(e,t){this.name=e,this.code=DOMException[e],this.message=t},u=function(e,t){if(""===t)throw new a("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(t))throw new a("INVALID_CHARACTER_ERR","String contains an invalid character");return s.call(e,t)},c=function(e){for(var t=o.call(e.getAttribute("class")||""),r=t?t.split(/\s+/):[],n=0,i=r.length;i>n;n++)this.push(r[n]);this._updateClassName=function(){e.setAttribute("class",this.toString())}},l=c[r]=[],d=function(){return new c(this)};if(a[r]=Error[r],l.item=function(e){return this[e]||null},l.contains=function(e){return e+="",-1!==u(this,e)},l.add=function(){var e,t=arguments,r=0,n=t.length,i=!1;do e=t[r]+"",-1===u(this,e)&&(this.push(e),i=!0);while(++r<n);i&&this._updateClassName()},l.remove=function(){var e,t,r=arguments,n=0,i=r.length,o=!1;do for(e=r[n]+"",t=u(this,e);-1!==t;)this.splice(t,1),o=!0,t=u(this,e);while(++n<i);o&&this._updateClassName()},l.toggle=function(e,t){e+="";var r=this.contains(e),n=r?t!==!0&&"remove":t!==!1&&"add";return n&&this[n](e),t===!0||t===!1?t:!r},l.toString=function(){return this.join(" ")},i.defineProperty){var h={get:d,enumerable:!0,configurable:!0};try{i.defineProperty(n,t,h)}catch(p){-2146823252===p.number&&(h.enumerable=!1,i.defineProperty(n,t,h))}}else i[r].__defineGetter__&&n.__defineGetter__(t,d)}}(self);var Ut=function(){function e(t){s(this,e),this.name=t}return e.convention=function(t){return t.endsWith("ValueConverter")?new e(T(t.substring(0,t.length-14))):void 0},e.prototype.analyze=function(e,t){this.instance=e.get(t)},e.prototype.register=function(e,t){e.registerValueConverter(t||this.name,this.instance)},e.prototype.load=function(e,t){return Promise.resolve(this)},e}();e.ValueConverterResource=Ut,i.Decorators.configure.parameterizedDecorator("valueConverter",I);var Ht=function(){function e(t,r,n,i,o){s(this,e),this.eventManager=t,this.targetEvent=r,this.sourceExpression=n,this.delegate=i,this.discrete=!0,this.preventDefault=o}return e.prototype.createBinding=function(e){return new Kt(this.eventManager,this.targetEvent,this.delegate,this.sourceExpression,e,this.preventDefault)},e}();e.ListenerExpression=Ht;var Kt=function(){function e(t,r,n,i,o,a){s(this,e),this.eventManager=t,this.targetEvent=r,this.delegate=n,this.sourceExpression=i,this.target=o,this.preventDefault=a}return e.prototype.bind=function(e){var t=this;if(this._disposeListener){if(this.source===e)return;this.unbind()}this.source=e,this._disposeListener=this.eventManager.addEventListener(this.target,this.targetEvent,function(r){var n=e.$event;e.$event=r;var i=t.sourceExpression.evaluate(e);return e.$event=n,i!==!0&&t.preventDefault&&r.preventDefault(),i},this.delegate)},e.prototype.unbind=function(){this._disposeListener&&(this._disposeListener(),this._disposeListener=null)},e}(),Qt=function(){function e(t,r){s(this,e),this.property=t,this.discrete=!0,this.mode=r}return e.prototype.createBinding=function(e){return new Yt(this.property,e,this.mode)},e}();e.NameExpression=Qt;var Yt=function(){function e(t,r,n){switch(s(this,e),this.property=t,n){case"element":this.target=r;break;case"view-model":this.target=r.primaryBehavior.bindingContext;break;default:if(this.target=r[n],void 0===this.target)throw new Error('Attempted to reference "'+n+'", but it was not found on the target element.');this.target=this.target.bindingContext||this.target}}return e.prototype.bind=function(e){if(this.source){if(this.source===e)return;this.unbind()}this.source=e,e[this.property]=this.target},e.prototype.unbind=function(){this.source&&(this.source[this.property]=null,this.source=null)},e}()}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/metadata@0.8.0/aurelia-metadata",["exports","npm:core-js@0.9.18"],function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e){var t=void 0;if(t="function"==typeof e.decorators?e.decorators():e.decorators,"function"!=typeof t._decorate)throw new Error("The return value of your decorator's method was not valid.");delete e.decorators,t._decorate(e)}e.__esModule=!0;var i=function(){return"undefined"!=typeof self?self:"undefined"!=typeof global?global:new Function("return this")()}(),o=Object.freeze({}),s="__metadata__";"undefined"==typeof i.System&&(i.System={isFake:!0}),"undefined"==typeof i.System.forEachModule&&(i.System.forEachModule=function(){}),"undefined"==typeof i.Reflect&&(i.Reflect={}),"undefined"==typeof i.Reflect.getOwnMetadata&&(Reflect.getOwnMetadata=function(e,t,r){return((t[s]||o)[r]||o)[e]}),"undefined"==typeof i.Reflect.defineMetadata&&(Reflect.defineMetadata=function(e,t,r,n){var i=r.hasOwnProperty(s)?r[s]:r[s]={},o=i[n]||(i[n]={});o[e]=t}),"undefined"==typeof i.Reflect.metadata&&(Reflect.metadata=function(e,t){return function(r,n){Reflect.defineMetadata(e,t,r,n)}});var a={global:i,noop:function(){},resource:"aurelia:resource",paramTypes:"design:paramtypes",properties:"design:properties",get:function(e,t,r){if(!t)return void 0;var n=a.getOwn(e,t,r);return void 0===n?a.get(e,Object.getPrototypeOf(t),r):n},getOwn:function(e,t,r){return t?(t.hasOwnProperty("decorators")&&n(t),Reflect.getOwnMetadata(e,t,r)):void 0},define:function(e,t,r,n){Reflect.defineMetadata(e,t,r,n)},getOrCreateOwn:function(e,t,r,n){var i=a.getOwn(e,r,n);return void 0===i&&(i=new t,Reflect.defineMetadata(e,i,r,n)),i}};e.Metadata=a;var u=new Map,c=Object.freeze({moduleId:void 0,moduleMember:void 0}),l=function(){function e(t,n){r(this,e),this.moduleId=t,this.moduleMember=n}return e.get=function(t){var r=u.get(t);return void 0===r&&System.forEachModule(function(n,i){for(var o in i){var s=i[o];if(s===t)return u.set(t,r=new e(n,o)),!0}return i===t?(u.set(t,r=new e(n,"default")),!0):void 0}),r||c},e.set=function(e,t){u.set(e,t)},e}();e.Origin=l;var d=function(){function e(){r(this,e),this._first=null,this._second=null,this._third=null,this._rest=null}return e.prototype.decorator=function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e){return null===this._first?(this._first=e,this):null===this._second?(this._second=e,this):null===this._third?(this._third=e,this):(null===this._rest&&(this._rest=[]),this._rest.push(e),this)}),e.prototype._decorate=function(e){null!==this._first&&this._first(e),null!==this._second&&this._second(e),null!==this._third&&this._third(e);var t=this._rest;if(null!==t)for(var r=0,n=t.length;n>r;++r)t[r](e)},e}();e.DecoratorApplicator=d;var h={configure:{parameterizedDecorator:function(e,t){h[e]=function(){var t=new d;return t[e].apply(t,arguments)},d.prototype[e]=function(){var e=t.apply(null,arguments);return this.decorator(e)}},simpleDecorator:function(e,t){h[e]=function(){return(new d).decorator(t)},d.prototype[e]=function(){return this.decorator(t)}}}};e.Decorators=h}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-rules-collection",["exports","github:aurelia/validation@0.3.0/validation/utilities","github:aurelia/validation@0.3.0/validation/validation-locale"],function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var i=function(){function e(t){n(this,e),this.isRequired=t?t.getValue("allPropertiesAreMandatory"):!1,this.validationRules=[],this.validationCollections=[],this.isRequiredMessage=null}return e.prototype.validate=function(e,n){var i=this;void 0===n&&(n=r.ValidationLocale.Repository["default"]),e=t.Utilities.getValue(e);var o=!0;if(t.Utilities.isEmptyValue(e)){if(this.isRequired)return Promise.resolve({isValid:!1,message:this.isRequiredMessage?"function"==typeof this.isRequiredMessage?this.isRequiredMessage(e):this.isRequiredMessage:n.translate("isRequired"),failingRule:"isRequired",latestValue:e});o=!1}var s=Promise.resolve({isValid:!0,message:"",failingRule:null,latestValue:e});if(o)for(var a=function(t){var r=i.validationRules[t];s=s.then(function(t){return t.isValid===!1?t:r.validate(e,n).then(function(n){if(n===!1)return{isValid:!1,message:r.explain(),failingRule:r.ruleName,latestValue:e};if(!t.isValid)throw Error("ValidationRulesCollection.validate caught an unexpected result while validating it's chain of rules.");return t})})},u=0;u<this.validationRules.length;u++)a(u);for(var c=function(t){var r=i.validationCollections[t];s=s.then(function(t){return t.isValid?r.validate(e,n):t})},u=0;u<this.validationCollections.length;u++)c(u);return s},e.prototype.addValidationRule=function(e){if(void 0===e.validate)throw new Error("That's not a valid validationRule");this.validationRules.push(e)},e.prototype.addValidationRuleCollection=function(e){this.validationCollections.push(e)},e.prototype.isNotEmpty=function(){this.isRequired=!0},e.prototype.canBeEmpty=function(){this.isRequired=!1},e.prototype.withMessage=function(e){0===this.validationRules.length?this.isRequiredMessage=e:this.validationRules[this.validationRules.length-1].withMessage(e)},e}();e.ValidationRulesCollection=i;var o=function(){function e(t,r){n(this,e),this.conditionExpression=t,this.config=r,this.innerCollections=[],this.defaultCollection=new i(this.config),this.caseLabel="",this.defaultCaseLabel={description:"this is the case label for 'default'"}}return e.prototype["case"]=function(e){this.caseLabel=e,this.getCurrentCollection(e,!0)},e.prototype["default"]=function(){this.caseLabel=this.defaultCaseLabel},e.prototype.getCurrentCollection=function(e){var t=void 0===arguments[1]?!1:arguments[1];if(e===this.defaultCaseLabel)return this.defaultCollection;for(var r=null,n=0;n<this.innerCollections.length;n++)if(r=this.innerCollections[n],r.caseLabel===e)return r.collection;return t?(r={caseLabel:e,collection:new i(this.config)},this.innerCollections.push(r),r.collection):null},e.prototype.validate=function(e,t){var r=this.getCurrentCollection(this.conditionExpression(e));return null!==r?r.validate(e,t):this.defaultCollection.validate(e,t)},e.prototype.addValidationRule=function(e){var t=this.getCurrentCollection(this.caseLabel,!0);t.addValidationRule(e)},e.prototype.addValidationRuleCollection=function(e){var t=this.getCurrentCollection(this.caseLabel,!0);t.addValidationRuleCollection(e)},e.prototype.isNotEmpty=function(){var e=this.getCurrentCollection(this.caseLabel);null!==e?e.isNotEmpty():this.defaultCollection.isNotEmpty()},e.prototype.canBeEmpty=function(){var e=this.getCurrentCollection(this.caseLabel);null!==e?e.canBeEmpty():this.defaultCollection.canBeEmpty()},e.prototype.withMessage=function(e){var t=this.getCurrentCollection(this.caseLabel);null!==t?t.withMessage(e):this.defaultCollection.withMessage(e)},e}();e.SwitchCaseValidationRulesCollection=o}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-group-builder",["exports","github:aurelia/validation@0.3.0/validation/validation-rules","github:aurelia/validation@0.3.0/validation/validation-rules-collection","github:aurelia/validation@0.3.0/validation/validation-property","github:aurelia/validation@0.3.0/validation/validation-config"],function(e,t,r,n,i){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var s=function(){function e(t,r){o(this,e),this.observerLocator=t,this.validationRuleCollections=[],this.validationGroup=r}return e.prototype.ensure=function(e,t){var r=null;this.validationRuleCollections=[];for(var o=0;o<this.validationGroup.validationProperties.length;o++)if(this.validationGroup.validationProperties[o].propertyName===e){if(r=this.validationGroup.validationProperties[o],void 0!==t&&"function"==typeof t)throw Error("When creating validation rules on binding path "+e+" a configuration callback function was provided, but validation rules have previously already been instantiated for this binding path");break}if(null===r){var s=this.validationGroup.result.addProperty(e),a=new i.ValidationConfig(this.validationGroup.config);void 0!==t&&"function"==typeof t&&t(a),r=new n.ValidationProperty(this.observerLocator,e,this.validationGroup,s,a),this.validationGroup.validationProperties.push(r)}return this.validationRuleCollections.unshift(r.collectionOfValidationRules),this.validationGroup},e.prototype.isNotEmpty=function(){return this.validationRuleCollections[0].isNotEmpty(),this.checkLast(),this.validationGroup},e.prototype.canBeEmpty=function(){return this.validationRuleCollections[0].canBeEmpty(),this.checkLast(),this.validationGroup},e.prototype.isGreaterThan=function(e){return this.passesRule(new t.MinimumValueValidationRule(e))},e.prototype.isGreaterThanOrEqualTo=function(e){return this.passesRule(new t.MinimumInclusiveValueValidationRule(e))},e.prototype.isBetween=function(e,r){return this.passesRule(new t.BetweenValueValidationRule(e,r))},e.prototype.isIn=function(e){return this.passesRule(new t.InCollectionValidationRule(e))},e.prototype.isLessThan=function(e){return this.passesRule(new t.MaximumValueValidationRule(e))},e.prototype.isLessThanOrEqualTo=function(e){return this.passesRule(new t.MaximumInclusiveValueValidationRule(e))},e.prototype.isEqualTo=function(e,r){return r?this.passesRule(new t.EqualityWithOtherLabelValidationRule(e,r)):this.passesRule(new t.EqualityValidationRule(e))},e.prototype.isNotEqualTo=function(e,r){return r?this.passesRule(new t.InEqualityWithOtherLabelValidationRule(e,r)):this.passesRule(new t.InEqualityValidationRule(e))},e.prototype.isEmail=function(){return this.passesRule(new t.EmailValidationRule)},e.prototype.isURL=function(){return this.passesRule(new t.URLValidationRule)},e.prototype.hasMinLength=function(e){return this.passesRule(new t.MinimumLengthValidationRule(e))},e.prototype.hasMaxLength=function(e){return this.passesRule(new t.MaximumLengthValidationRule(e))},e.prototype.hasLengthBetween=function(e,r){return this.passesRule(new t.BetweenLengthValidationRule(e,r))},e.prototype.isNumber=function(){return this.passesRule(new t.NumericValidationRule)},e.prototype.containsNoSpaces=function(){return this.passesRule(new t.NoSpacesValidationRule)},e.prototype.containsOnlyDigits=function(){return this.passesRule(new t.DigitValidationRule)},e.prototype.containsOnlyAlpha=function(){return this.passesRule(new t.AlphaValidationRule)},e.prototype.containsOnlyAlphaOrWhitespace=function(){return this.passesRule(new t.AlphaOrWhitespaceValidationRule)},e.prototype.containsOnlyAlphanumerics=function(){return this.passesRule(new t.AlphaNumericValidationRule)},e.prototype.containsOnlyAlphanumericsOrWhitespace=function(){return this.passesRule(new t.AlphaNumericOrWhitespaceValidationRule)},e.prototype.isStrongPassword=function(e){return 4===e?this.passesRule(new t.StrongPasswordValidationRule):this.passesRule(new t.MediumPasswordValidationRule(e))},e.prototype.containsOnly=function(e){return this.passesRule(new t.ContainsOnlyValidationRule(e))},e.prototype.matches=function(e){return this.passesRule(new t.RegexValidationRule(e))},e.prototype.passes=function(e,r){return this.passesRule(new t.CustomFunctionValidationRule(e,r))},e.prototype.passesRule=function(e){return this.validationRuleCollections[0].addValidationRule(e),this.checkLast(),this.validationGroup},e.prototype.checkLast=function(){var e=this.validationGroup.validationProperties[this.validationGroup.validationProperties.length-1];e.validateCurrentValue(!1)},e.prototype.withMessage=function(e){return this.validationRuleCollections[0].withMessage(e),this.checkLast(),this.validationGroup},e.prototype["if"]=function(e){var t=new r.SwitchCaseValidationRulesCollection(e);return t["case"](!0),this.validationRuleCollections[0].addValidationRuleCollection(t),this.validationRuleCollections.unshift(t),this.validationGroup},e.prototype["else"]=function(){if(!this.validationRuleCollections[0]["default"])throw"Invalid statement: 'else'";return this.validationRuleCollections[0]["default"](),this.validationGroup},e.prototype.endIf=function(){if(!this.validationRuleCollections[0]["default"])throw"Invalid statement: 'endIf'";return this.validationRuleCollections.shift(),this.checkLast(),this.validationGroup},e.prototype["switch"]=function(e){var t=this,n=e;void 0===n&&!function(){var e=t.validationGroup.validationProperties[t.validationGroup.validationProperties.length-1].observer;n=function(){return e.getValue()}}();var i=new r.SwitchCaseValidationRulesCollection(n);return this.validationRuleCollections[0].addValidationRuleCollection(i),this.validationRuleCollections.unshift(i),this.validationGroup},e.prototype["case"]=function(e){if(!this.validationRuleCollections[0]["default"])throw"Invalid statement: 'case'";return this.validationRuleCollections[0]["case"](e),this.validationGroup},e.prototype["default"]=function(){if(!this.validationRuleCollections[0]["default"])throw"Invalid statement: 'case'";return this.validationRuleCollections[0]["default"](),this.validationGroup},e.prototype.endSwitch=function(){if(!this.validationRuleCollections[0]["default"])throw"Invalid statement: 'endIf'";return this.validationRuleCollections.shift(),this.checkLast(),this.validationGroup},e}();e.ValidationGroupBuilder=s}),e()}(),System.registerDynamic("github:zloirock/core-js@0.8.4",["github:zloirock/core-js@0.8.4/index"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=require("github:zloirock/core-js@0.8.4/index"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/shim",["npm:core-js@0.9.18/modules/es5","npm:core-js@0.9.18/modules/es6.symbol","npm:core-js@0.9.18/modules/es6.object.assign","npm:core-js@0.9.18/modules/es6.object.is","npm:core-js@0.9.18/modules/es6.object.set-prototype-of","npm:core-js@0.9.18/modules/es6.object.to-string","npm:core-js@0.9.18/modules/es6.object.statics-accept-primitives","npm:core-js@0.9.18/modules/es6.function.name","npm:core-js@0.9.18/modules/es6.function.has-instance","npm:core-js@0.9.18/modules/es6.number.constructor","npm:core-js@0.9.18/modules/es6.number.statics","npm:core-js@0.9.18/modules/es6.math","npm:core-js@0.9.18/modules/es6.string.from-code-point","npm:core-js@0.9.18/modules/es6.string.raw","npm:core-js@0.9.18/modules/es6.string.iterator","npm:core-js@0.9.18/modules/es6.string.code-point-at","npm:core-js@0.9.18/modules/es6.string.ends-with","npm:core-js@0.9.18/modules/es6.string.includes","npm:core-js@0.9.18/modules/es6.string.repeat","npm:core-js@0.9.18/modules/es6.string.starts-with","npm:core-js@0.9.18/modules/es6.array.from","npm:core-js@0.9.18/modules/es6.array.of","npm:core-js@0.9.18/modules/es6.array.iterator","npm:core-js@0.9.18/modules/es6.array.species","npm:core-js@0.9.18/modules/es6.array.copy-within","npm:core-js@0.9.18/modules/es6.array.fill","npm:core-js@0.9.18/modules/es6.array.find","npm:core-js@0.9.18/modules/es6.array.find-index","npm:core-js@0.9.18/modules/es6.regexp","npm:core-js@0.9.18/modules/es6.promise","npm:core-js@0.9.18/modules/es6.map","npm:core-js@0.9.18/modules/es6.set","npm:core-js@0.9.18/modules/es6.weak-map","npm:core-js@0.9.18/modules/es6.weak-set","npm:core-js@0.9.18/modules/es6.reflect","npm:core-js@0.9.18/modules/es7.array.includes","npm:core-js@0.9.18/modules/es7.string.at","npm:core-js@0.9.18/modules/es7.string.lpad","npm:core-js@0.9.18/modules/es7.string.rpad","npm:core-js@0.9.18/modules/es7.regexp.escape","npm:core-js@0.9.18/modules/es7.object.get-own-property-descriptors","npm:core-js@0.9.18/modules/es7.object.to-array","npm:core-js@0.9.18/modules/es7.map.to-json","npm:core-js@0.9.18/modules/es7.set.to-json","npm:core-js@0.9.18/modules/js.array.statics","npm:core-js@0.9.18/modules/web.timers","npm:core-js@0.9.18/modules/web.immediate","npm:core-js@0.9.18/modules/web.dom.iterable","npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("npm:core-js@0.9.18/modules/es5"),require("npm:core-js@0.9.18/modules/es6.symbol"),require("npm:core-js@0.9.18/modules/es6.object.assign"),require("npm:core-js@0.9.18/modules/es6.object.is"),require("npm:core-js@0.9.18/modules/es6.object.set-prototype-of"),require("npm:core-js@0.9.18/modules/es6.object.to-string"),require("npm:core-js@0.9.18/modules/es6.object.statics-accept-primitives"),require("npm:core-js@0.9.18/modules/es6.function.name"),require("npm:core-js@0.9.18/modules/es6.function.has-instance"),require("npm:core-js@0.9.18/modules/es6.number.constructor"),
require("npm:core-js@0.9.18/modules/es6.number.statics"),require("npm:core-js@0.9.18/modules/es6.math"),require("npm:core-js@0.9.18/modules/es6.string.from-code-point"),require("npm:core-js@0.9.18/modules/es6.string.raw"),require("npm:core-js@0.9.18/modules/es6.string.iterator"),require("npm:core-js@0.9.18/modules/es6.string.code-point-at"),require("npm:core-js@0.9.18/modules/es6.string.ends-with"),require("npm:core-js@0.9.18/modules/es6.string.includes"),require("npm:core-js@0.9.18/modules/es6.string.repeat"),require("npm:core-js@0.9.18/modules/es6.string.starts-with"),require("npm:core-js@0.9.18/modules/es6.array.from"),require("npm:core-js@0.9.18/modules/es6.array.of"),require("npm:core-js@0.9.18/modules/es6.array.iterator"),require("npm:core-js@0.9.18/modules/es6.array.species"),require("npm:core-js@0.9.18/modules/es6.array.copy-within"),require("npm:core-js@0.9.18/modules/es6.array.fill"),require("npm:core-js@0.9.18/modules/es6.array.find"),require("npm:core-js@0.9.18/modules/es6.array.find-index"),require("npm:core-js@0.9.18/modules/es6.regexp"),require("npm:core-js@0.9.18/modules/es6.promise"),require("npm:core-js@0.9.18/modules/es6.map"),require("npm:core-js@0.9.18/modules/es6.set"),require("npm:core-js@0.9.18/modules/es6.weak-map"),require("npm:core-js@0.9.18/modules/es6.weak-set"),require("npm:core-js@0.9.18/modules/es6.reflect"),require("npm:core-js@0.9.18/modules/es7.array.includes"),require("npm:core-js@0.9.18/modules/es7.string.at"),require("npm:core-js@0.9.18/modules/es7.string.lpad"),require("npm:core-js@0.9.18/modules/es7.string.rpad"),require("npm:core-js@0.9.18/modules/es7.regexp.escape"),require("npm:core-js@0.9.18/modules/es7.object.get-own-property-descriptors"),require("npm:core-js@0.9.18/modules/es7.object.to-array"),require("npm:core-js@0.9.18/modules/es7.map.to-json"),require("npm:core-js@0.9.18/modules/es7.set.to-json"),require("npm:core-js@0.9.18/modules/js.array.statics"),require("npm:core-js@0.9.18/modules/web.timers"),require("npm:core-js@0.9.18/modules/web.immediate"),require("npm:core-js@0.9.18/modules/web.dom.iterable"),t.exports=require("npm:core-js@0.9.18/modules/$").core,r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.dict",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.assign","npm:core-js@0.9.18/modules/$.keyof","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.for-of"],!0,function(require,e,t){function r(e){var t=l.create(null);return void 0!=e&&(v.is(e)?y(e,!0,function(e,r){t[e]=r}):p(t,e)),t}function n(e,t){l.set(this,m,{o:k(e),a:j(e),i:0,k:t})}function i(e){return function(t){return new n(t,e)}}function o(e,t){return"function"==typeof e?e:t}function s(e){var t=1==e,n=4==e;return function(i,s,a){var u,c,l,h=d(s,a,3),p=k(i),f=t||7==e||2==e?new(o(this,r)):void 0;for(u in p)if(w(p,u)&&(c=p[u],l=h(c,u,i),e))if(t)f[u]=l;else if(l)switch(e){case 2:f[u]=c;break;case 3:return!0;case 5:return c;case 6:return u;case 7:f[l[0]]=l[1]}else if(n)return!1;return 3==e||n?n:f}}function a(e){return function(t,n,i){g.fn(n);var s,a,u,c=k(t),l=j(c),d=l.length,h=0;for(e?s=void 0==i?new(o(this,r)):Object(i):arguments.length<3?(g(d,"Reduce of empty object with no initial value"),s=c[l[h++]]):s=Object(i);d>h;)if(w(c,a=l[h++]))if(u=n(s,c[a],a,t),e){if(u===!1)break}else s=u;return s}}var u=this,c=u.define;u.define=void 0;var l=require("npm:core-js@0.9.18/modules/$"),d=require("npm:core-js@0.9.18/modules/$.ctx"),h=require("npm:core-js@0.9.18/modules/$.def"),p=require("npm:core-js@0.9.18/modules/$.assign"),f=require("npm:core-js@0.9.18/modules/$.keyof"),m=require("npm:core-js@0.9.18/modules/$.uid").safe("iter"),g=require("npm:core-js@0.9.18/modules/$.assert"),v=require("npm:core-js@0.9.18/modules/$.iter"),y=require("npm:core-js@0.9.18/modules/$.for-of"),b=v.step,j=l.getKeys,k=l.toObject,w=l.has;r.prototype=null,v.create(n,"Dict",function(){var e,t=this[m],r=t.o,n=t.a,i=t.k;do if(t.i>=n.length)return t.o=void 0,b(1);while(!w(r,e=n[t.i++]));return"keys"==i?b(0,e):"values"==i?b(0,r[e]):b(0,[e,r[e]])});var x=s(6);return h(h.G+h.F,{Dict:r}),h(h.S,"Dict",{keys:i("keys"),values:i("values"),entries:i("entries"),forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findKey:x,mapPairs:s(7),reduce:a(!1),turn:a(!0),keyOf:f,includes:function(e,t){return void 0!==(t==t?f(e,t):x(e,function(e){return e!=e}))},has:w,get:function(e,t){return w(e,t)?e[t]:void 0},set:l.def,isDict:function(e){return l.isObject(e)&&l.getProto(e)===r.prototype}}),u.define=c,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.iter-helpers",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.iter"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$").core,o=require("npm:core-js@0.9.18/modules/$.iter");return i.isIterable=o.is,i.getIterator=o.get,r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.$for",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.for-of","npm:core-js@0.9.18/modules/$.iter-call","npm:core-js@0.9.18/modules/$.mix"],!0,function(require,e,t){function r(e,t){return this instanceof r?(this[f]=g(e),void(this[h]=!!t)):new r(e,t)}function n(e){function t(e,t,r){this[f]=g(e),this[h]=e[h],this[p]=a(t,r,e[h]?2:1)}return y(t,"Chain",e,b),v(t.prototype,s.that),t}var i=this,o=i.define;i.define=void 0;var s=require("npm:core-js@0.9.18/modules/$"),a=require("npm:core-js@0.9.18/modules/$.ctx"),u=require("npm:core-js@0.9.18/modules/$.uid").safe,c=require("npm:core-js@0.9.18/modules/$.def"),l=require("npm:core-js@0.9.18/modules/$.iter"),d=require("npm:core-js@0.9.18/modules/$.for-of"),h=u("entries"),p=u("fn"),f=u("iter"),m=require("npm:core-js@0.9.18/modules/$.iter-call"),g=l.get,v=l.set,y=l.create;y(r,"Wrapper",function(){return this[f].next()});var b=r.prototype;v(b,function(){return this[f]});var j=n(function(){var e=this[f].next();return e.done?e:l.step(0,m(this[f],this[p],e.value,this[h]))}),k=n(function(){for(;;){var e=this[f].next();if(e.done||m(this[f],this[p],e.value,this[h]))return e}});return require("npm:core-js@0.9.18/modules/$.mix")(b,{of:function(e,t){d(this,this[h],e,t)},array:function(e,t){var r=[];return d(void 0!=e?this.map(e,t):this,!1,r.push,r),r},filter:function(e,t){return new k(this,e,t)},map:function(e,t){return new j(this,e,t)}}),r.isIterable=l.is,r.getIterator=g,c(c.G+c.F,{$for:r}),i.define=o,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.delay",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.partial"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=require("npm:core-js@0.9.18/modules/$.partial");return o(o.G+o.F,{delay:function(e){return new(i.core.Promise||i.g.Promise)(function(t){setTimeout(s.call(t,!0),e)})}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.function.part",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.partial"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def");return i.core._=i.path._=i.path._||{},o(o.P+o.F,"Function",{part:require("npm:core-js@0.9.18/modules/$.partial")}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.object",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.own-keys","npm:core-js@0.9.18/modules/$.cof"],!0,function(require,e,t){function r(e,t){for(var r,n=a(o.toObject(t)),i=n.length,s=0;i>s;)o.setDesc(e,r=n[s++],o.getDesc(t,r));return e}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.def"),a=require("npm:core-js@0.9.18/modules/$.own-keys");return s(s.S+s.F,"Object",{isObject:o.isObject,classof:require("npm:core-js@0.9.18/modules/$.cof").classof,define:r,make:function(e,t){return r(o.create(e),t)}}),n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.array.turn",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=require("npm:core-js@0.9.18/modules/$.assert").fn;return o(o.P+o.F,"Array",{turn:function(e,t){s(e);for(var r=void 0==t?[]:Object(t),n=i.ES5Object(this),o=i.toLength(n.length),a=0;o>a&&e(r,n[a],a++,this)!==!1;);return r}}),require("npm:core-js@0.9.18/modules/$.unscope")("turn"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.number.iterator",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.iter-define"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.uid").safe("iter");return require("npm:core-js@0.9.18/modules/$.iter-define")(Number,"Number",function(e){i.set(this,o,{l:i.toLength(e),i:0})},function(){var e=this[o],t=e.i++,r=t>=e.l;return{done:r,value:r?void 0:t}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.number.math",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.invoke"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=require("npm:core-js@0.9.18/modules/$.invoke"),a={};return a.random=function(e){var t=+this,r=void 0==e?0:+e,n=Math.min(t,r);return Math.random()*(Math.max(t,r)-n)+n},i.FW&&i.each.call("round,floor,ceil,abs,sin,asin,cos,acos,tan,atan,exp,sqrt,max,min,pow,atan2,acosh,asinh,atanh,cbrt,clz32,cosh,expm1,hypot,imul,log1p,log10,log2,sign,sinh,tanh,trunc".split(","),function(e){var t=Math[e];t&&(a[e]=function(){for(var e=[+this],r=0;arguments.length>r;)e.push(arguments[r++]);return s(t,e)})}),o(o.P+o.F,"Number",a),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.string.escape-html",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.replacer"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i,o=require("npm:core-js@0.9.18/modules/$.def"),s=require("npm:core-js@0.9.18/modules/$.replacer"),a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;"},u={};for(i in a)u[a[i]]=i;return o(o.P+o.F,"String",{escapeHTML:s(/[&<>"']/g,a),unescapeHTML:s(/&(?:amp|lt|gt|quot|apos);/g,u)}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.date",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){function r(e){return e>9?e:"0"+e}function n(e){return function(t,n){function i(t){return o[e+t]()}var o=this,s=h[a.has(h,n)?n:p];return String(t).replace(l,function(e){switch(e){case"s":return i(f);case"ss":return r(i(f));case"m":return i(m);case"mm":return r(i(m));case"h":return i(g);case"hh":return r(i(g));case"D":return i(v);case"DD":return r(i(v));case"W":return s[0][i("Day")];case"N":return i(y)+1;case"NN":return r(i(y)+1);case"M":return s[2][i(y)];case"MM":return s[1][i(y)];case"Y":return i(b);case"YY":return r(i(b)%100)}return e})}}function i(e,t){function r(e){var r=[];return a.each.call(t.months.split(","),function(t){r.push(t.replace(d,"$"+e))}),r}return h[e]=[t.weekdays.split(","),r(1),r(2)],c}var o=this,s=o.define;o.define=void 0;var a=require("npm:core-js@0.9.18/modules/$"),u=require("npm:core-js@0.9.18/modules/$.def"),c=a.core,l=/\b\w\w?\b/g,d=/:(.*)\|(.*)$/,h={},p="en",f="Seconds",m="Minutes",g="Hours",v="Date",y="Month",b="FullYear";return u(u.P+u.F,v,{format:n("get"),formatUTC:n("getUTC")}),i(p,{weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",months:"January,February,March,April,May,June,July,August,September,October,November,December"}),i("ru",{weekdays:"\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435,\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a,\u0412\u0442\u043e\u0440\u043d\u0438\u043a,\u0421\u0440\u0435\u0434\u0430,\u0427\u0435\u0442\u0432\u0435\u0440\u0433,\u041f\u044f\u0442\u043d\u0438\u0446\u0430,\u0421\u0443\u0431\u0431\u043e\u0442\u0430",months:"\u042f\u043d\u0432\u0430\u0440:\u044f|\u044c,\u0424\u0435\u0432\u0440\u0430\u043b:\u044f|\u044c,\u041c\u0430\u0440\u0442:\u0430|,\u0410\u043f\u0440\u0435\u043b:\u044f|\u044c,\u041c\u0430:\u044f|\u0439,\u0418\u044e\u043d:\u044f|\u044c,\u0418\u044e\u043b:\u044f|\u044c,\u0410\u0432\u0433\u0443\u0441\u0442:\u0430|,\u0421\u0435\u043d\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041e\u043a\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041d\u043e\u044f\u0431\u0440:\u044f|\u044c,\u0414\u0435\u043a\u0430\u0431\u0440:\u044f|\u044c"}),c.locale=function(e){return a.has(h,e)?p=e:p},c.addLocale=i,o.define=s,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.global",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.G+i.F,{global:require("npm:core-js@0.9.18/modules/$").g}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/core.log",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.assign"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s={},a=!0;return i.each.call("assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,isIndependentlyComposed,log,markTimeline,profile,profileEnd,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(","),function(e){s[e]=function(){return a&&i.g.console&&i.isFunction(console[e])?Function.apply.call(console[e],console,arguments):void 0}}),o(o.G+o.F,{log:require("npm:core-js@0.9.18/modules/$.assign")(s.log,s,{enable:function(){a=!0},disable:function(){a=!1}})}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$",["npm:core-js@0.9.18/modules/$.fw"],!0,function(require,e,t){function r(e){return isNaN(e=+e)?0:(e>0?m:f)(e)}function n(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}function i(e,t,r){return e[t]=r,e}function o(e){return y?function(t,r,i){return j.setDesc(t,r,n(e,i))}:i}function s(e){return null!==e&&("object"==typeof e||"function"==typeof e)}function a(e){return"function"==typeof e}function u(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}var c=this,l=c.define;c.define=void 0;var c="undefined"!=typeof self?self:Function("return this")(),d={},h=Object.defineProperty,p={}.hasOwnProperty,f=Math.ceil,m=Math.floor,g=Math.max,v=Math.min,y=!!function(){try{return 2==h({},"a",{get:function(){return 2}}).a}catch(e){}}(),b=o(1),j=t.exports=require("npm:core-js@0.9.18/modules/$.fw")({g:c,core:d,html:c.document&&document.documentElement,isObject:s,isFunction:a,that:function(){return this},toInteger:r,toLength:function(e){return e>0?v(r(e),9007199254740991):0},toIndex:function(e,t){return e=r(e),0>e?g(e+t,0):v(e,t)},has:function(e,t){return p.call(e,t)},create:Object.create,getProto:Object.getPrototypeOf,DESC:y,desc:n,getDesc:Object.getOwnPropertyDescriptor,setDesc:h,setDescs:Object.defineProperties,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:u,ES5Object:Object,toObject:function(e){return j.ES5Object(u(e))},hide:b,def:o(0),set:c.Symbol?i:b,each:[].forEach});return"undefined"!=typeof __e&&(__e=d),"undefined"!=typeof __g&&(__g=c),c.define=l,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/index",["github:zloirock/core-js@0.8.4/shim","github:zloirock/core-js@0.8.4/modules/core.dict","github:zloirock/core-js@0.8.4/modules/core.iter-helpers","github:zloirock/core-js@0.8.4/modules/core.$for","github:zloirock/core-js@0.8.4/modules/core.delay","github:zloirock/core-js@0.8.4/modules/core.binding","github:zloirock/core-js@0.8.4/modules/core.object","github:zloirock/core-js@0.8.4/modules/core.array.turn","github:zloirock/core-js@0.8.4/modules/core.number.iterator","github:zloirock/core-js@0.8.4/modules/core.number.math","github:zloirock/core-js@0.8.4/modules/core.string.escape-html","github:zloirock/core-js@0.8.4/modules/core.date","github:zloirock/core-js@0.8.4/modules/core.global","github:zloirock/core-js@0.8.4/modules/core.log","github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("github:zloirock/core-js@0.8.4/shim"),require("github:zloirock/core-js@0.8.4/modules/core.dict"),require("github:zloirock/core-js@0.8.4/modules/core.iter-helpers"),require("github:zloirock/core-js@0.8.4/modules/core.$for"),require("github:zloirock/core-js@0.8.4/modules/core.delay"),require("github:zloirock/core-js@0.8.4/modules/core.binding"),require("github:zloirock/core-js@0.8.4/modules/core.object"),require("github:zloirock/core-js@0.8.4/modules/core.array.turn"),require("github:zloirock/core-js@0.8.4/modules/core.number.iterator"),require("github:zloirock/core-js@0.8.4/modules/core.number.math"),require("github:zloirock/core-js@0.8.4/modules/core.string.escape-html"),require("github:zloirock/core-js@0.8.4/modules/core.date"),require("github:zloirock/core-js@0.8.4/modules/core.global"),require("github:zloirock/core-js@0.8.4/modules/core.log"),t.exports=require("github:zloirock/core-js@0.8.4/modules/$").core,r.define=n,t.exports}),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/validation-property",["exports","github:aurelia/validation@0.3.0/validation/validation-rules-collection","github:aurelia/validation@0.3.0/validation/path-observer","github:aurelia/validation@0.3.0/validation/debouncer"],function(e,t,r,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var o=function(){function e(o,s,a,u,c){var l=this;i(this,e),this.propertyResult=u,this.propertyName=s,this.validationGroup=a,this.collectionOfValidationRules=new t.ValidationRulesCollection(c),this.config=c,this.latestValue=void 0,this.observer=new r.PathObserver(o,a.subject,s).getObserver(),this.debouncer=new n.Debouncer(c.getDebounceTimeout()),this.subscription=this.observer.subscribe(function(){l.debouncer.debounce(function(){var e=l.observer.getValue();e!==l.latestValue&&l.validate(e,!0)})}),this.dependencyObservers=[];for(var d=this.config.getDependencies(),h=0;h<d.length;h++){var p=new r.PathObserver(o,a.subject,d[h]).getObserver();p.subscribe(function(){l.debouncer.debounce(function(){l.validateCurrentValue(!0)})}),this.dependencyObservers.push(p)}}return e.prototype.addValidationRule=function(e){if(void 0===e.validate)throw new Error("That's not a valid validationRule");this.collectionOfValidationRules.addValidationRule(e),this.validateCurrentValue(!1)},e.prototype.validateCurrentValue=function(e,t){return this.validate(this.observer.getValue(),e,t)},e.prototype.clear=function(){this.latestValue=this.observer.getValue(),this.propertyResult.clear()},e.prototype.destroy=function(){this.subscription&&this.subscription()},e.prototype.validate=function(e,t,r){var n=this;return!this.propertyResult.isDirty&&t||this.latestValue!==e||r?(this.latestValue=e,this.config.locale().then(function(r){return n.collectionOfValidationRules.validate(e,r).then(function(e){return n.latestValue===e.latestValue&&n.propertyResult.setValidity(e,t),e.isValid})["catch"](function(e){throw console.log("Unexpected behavior: a validation-rules-collection should always fulfil",e),Error("Unexpected behavior: a validation-rules-collection should always fulfil")})},function(){throw Error("An exception occurred while trying to load the locale")})):void 0},e}();e.ValidationProperty=o}),e()}(),System.registerDynamic("github:zloirock/core-js@0.8.4/shim",["github:zloirock/core-js@0.8.4/modules/es5","github:zloirock/core-js@0.8.4/modules/es6.symbol","github:zloirock/core-js@0.8.4/modules/es6.object.assign","github:zloirock/core-js@0.8.4/modules/es6.object.is","github:zloirock/core-js@0.8.4/modules/es6.object.set-prototype-of","github:zloirock/core-js@0.8.4/modules/es6.object.to-string","github:zloirock/core-js@0.8.4/modules/es6.object.statics-accept-primitives","github:zloirock/core-js@0.8.4/modules/es6.function.name","github:zloirock/core-js@0.8.4/modules/es6.number.constructor","github:zloirock/core-js@0.8.4/modules/es6.number.statics","github:zloirock/core-js@0.8.4/modules/es6.math","github:zloirock/core-js@0.8.4/modules/es6.string.from-code-point","github:zloirock/core-js@0.8.4/modules/es6.string.raw","github:zloirock/core-js@0.8.4/modules/es6.string.iterator","github:zloirock/core-js@0.8.4/modules/es6.string.code-point-at","github:zloirock/core-js@0.8.4/modules/es6.string.ends-with","github:zloirock/core-js@0.8.4/modules/es6.string.includes","github:zloirock/core-js@0.8.4/modules/es6.string.repeat","github:zloirock/core-js@0.8.4/modules/es6.string.starts-with","github:zloirock/core-js@0.8.4/modules/es6.array.from","github:zloirock/core-js@0.8.4/modules/es6.array.of","github:zloirock/core-js@0.8.4/modules/es6.array.iterator","github:zloirock/core-js@0.8.4/modules/es6.array.species","github:zloirock/core-js@0.8.4/modules/es6.array.copy-within","github:zloirock/core-js@0.8.4/modules/es6.array.fill","github:zloirock/core-js@0.8.4/modules/es6.array.find","github:zloirock/core-js@0.8.4/modules/es6.array.find-index","github:zloirock/core-js@0.8.4/modules/es6.regexp","github:zloirock/core-js@0.8.4/modules/es6.promise","github:zloirock/core-js@0.8.4/modules/es6.map","github:zloirock/core-js@0.8.4/modules/es6.set","github:zloirock/core-js@0.8.4/modules/es6.weak-map","github:zloirock/core-js@0.8.4/modules/es6.weak-set","github:zloirock/core-js@0.8.4/modules/es6.reflect","github:zloirock/core-js@0.8.4/modules/es7.array.includes","github:zloirock/core-js@0.8.4/modules/es7.string.at","github:zloirock/core-js@0.8.4/modules/es7.regexp.escape","github:zloirock/core-js@0.8.4/modules/es7.object.get-own-property-descriptors","github:zloirock/core-js@0.8.4/modules/es7.object.to-array","github:zloirock/core-js@0.8.4/modules/es7.set.to-json","github:zloirock/core-js@0.8.4/modules/js.array.statics","github:zloirock/core-js@0.8.4/modules/web.timers","github:zloirock/core-js@0.8.4/modules/web.immediate","github:zloirock/core-js@0.8.4/modules/web.dom.iterable","github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("github:zloirock/core-js@0.8.4/modules/es5"),require("github:zloirock/core-js@0.8.4/modules/es6.symbol"),require("github:zloirock/core-js@0.8.4/modules/es6.object.assign"),require("github:zloirock/core-js@0.8.4/modules/es6.object.is"),require("github:zloirock/core-js@0.8.4/modules/es6.object.set-prototype-of"),require("github:zloirock/core-js@0.8.4/modules/es6.object.to-string"),require("github:zloirock/core-js@0.8.4/modules/es6.object.statics-accept-primitives"),require("github:zloirock/core-js@0.8.4/modules/es6.function.name"),require("github:zloirock/core-js@0.8.4/modules/es6.number.constructor"),require("github:zloirock/core-js@0.8.4/modules/es6.number.statics"),require("github:zloirock/core-js@0.8.4/modules/es6.math"),require("github:zloirock/core-js@0.8.4/modules/es6.string.from-code-point"),require("github:zloirock/core-js@0.8.4/modules/es6.string.raw"),require("github:zloirock/core-js@0.8.4/modules/es6.string.iterator"),require("github:zloirock/core-js@0.8.4/modules/es6.string.code-point-at"),require("github:zloirock/core-js@0.8.4/modules/es6.string.ends-with"),require("github:zloirock/core-js@0.8.4/modules/es6.string.includes"),require("github:zloirock/core-js@0.8.4/modules/es6.string.repeat"),require("github:zloirock/core-js@0.8.4/modules/es6.string.starts-with"),require("github:zloirock/core-js@0.8.4/modules/es6.array.from"),require("github:zloirock/core-js@0.8.4/modules/es6.array.of"),require("github:zloirock/core-js@0.8.4/modules/es6.array.iterator"),require("github:zloirock/core-js@0.8.4/modules/es6.array.species"),require("github:zloirock/core-js@0.8.4/modules/es6.array.copy-within"),require("github:zloirock/core-js@0.8.4/modules/es6.array.fill"),require("github:zloirock/core-js@0.8.4/modules/es6.array.find"),require("github:zloirock/core-js@0.8.4/modules/es6.array.find-index"),require("github:zloirock/core-js@0.8.4/modules/es6.regexp"),require("github:zloirock/core-js@0.8.4/modules/es6.promise"),require("github:zloirock/core-js@0.8.4/modules/es6.map"),require("github:zloirock/core-js@0.8.4/modules/es6.set"),require("github:zloirock/core-js@0.8.4/modules/es6.weak-map"),require("github:zloirock/core-js@0.8.4/modules/es6.weak-set"),require("github:zloirock/core-js@0.8.4/modules/es6.reflect"),require("github:zloirock/core-js@0.8.4/modules/es7.array.includes"),require("github:zloirock/core-js@0.8.4/modules/es7.string.at"),require("github:zloirock/core-js@0.8.4/modules/es7.regexp.escape"),require("github:zloirock/core-js@0.8.4/modules/es7.object.get-own-property-descriptors"),require("github:zloirock/core-js@0.8.4/modules/es7.object.to-array"),require("github:zloirock/core-js@0.8.4/modules/es7.set.to-json"),require("github:zloirock/core-js@0.8.4/modules/js.array.statics"),require("github:zloirock/core-js@0.8.4/modules/web.timers"),require("github:zloirock/core-js@0.8.4/modules/web.immediate"),require("github:zloirock/core-js@0.8.4/modules/web.dom.iterable"),t.exports=require("github:zloirock/core-js@0.8.4/modules/$").core,r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.dict",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.assign","github:zloirock/core-js@0.8.4/modules/$.keyof","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){function r(e){var t=l.create(null);return void 0!=e&&(v.is(e)?v.forOf(e,!0,function(e,r){t[e]=r}):p(t,e)),t}function n(e,t){l.set(this,m,{o:j(e),a:b(e),i:0,k:t})}function i(e){return function(t){return new n(t,e)}}function o(e,t){return"function"==typeof e?e:t}function s(e){var t=1==e,n=4==e;return function(i,s,a){var u,c,l,h=d(s,a,3),p=j(i),f=t||7==e||2==e?new(o(this,r)):void 0;for(u in p)if(k(p,u)&&(c=p[u],l=h(c,u,i),e))if(t)f[u]=l;else if(l)switch(e){case 2:f[u]=c;break;case 3:return!0;case 5:return c;case 6:return u;case 7:f[l[0]]=l[1]}else if(n)return!1;return 3==e||n?n:f}}function a(e){return function(t,n,i){g.fn(n);var s,a,u,c=j(t),l=b(c),d=l.length,h=0;for(e?s=void 0==i?new(o(this,r)):Object(i):arguments.length<3?(g(d,"Reduce of empty object with no initial value"),s=c[l[h++]]):s=Object(i);d>h;)if(k(c,a=l[h++]))if(u=n(s,c[a],a,t),e){if(u===!1)break}else s=u;return s}}var u=this,c=u.define;u.define=void 0;var l=require("github:zloirock/core-js@0.8.4/modules/$"),d=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),h=require("github:zloirock/core-js@0.8.4/modules/$.def"),p=require("github:zloirock/core-js@0.8.4/modules/$.assign"),f=require("github:zloirock/core-js@0.8.4/modules/$.keyof"),m=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("iter"),g=require("github:zloirock/core-js@0.8.4/modules/$.assert"),v=require("github:zloirock/core-js@0.8.4/modules/$.iter"),y=v.step,b=l.getKeys,j=l.toObject,k=l.has;r.prototype=null,v.create(n,"Dict",function(){var e,t=this[m],r=t.o,n=t.a,i=t.k;do if(t.i>=n.length)return t.o=void 0,y(1);while(!k(r,e=n[t.i++]));return"key"==i?y(0,e):"value"==i?y(0,r[e]):y(0,[e,r[e]])});var w=s(6);return h(h.G+h.F,{Dict:l.mix(r,{keys:i("key"),values:i("value"),entries:i("key+value"),forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findKey:w,mapPairs:s(7),reduce:a(!1),turn:a(!0),keyOf:f,includes:function(e,t){return void 0!==(t==t?f(e,t):w(e,function(e){return e!=e}))},has:k,get:function(e,t){return k(e,t)?e[t]:void 0},set:l.def,isDict:function(e){return l.isObject(e)&&l.getProto(e)===r.prototype}})}),u.define=c,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.iter-helpers",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$").core,o=require("github:zloirock/core-js@0.8.4/modules/$.iter");return i.isIterable=o.is,i.getIterator=o.get,r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.$for",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){function r(e,t){return this instanceof r?(this[p]=g(e),void(this[d]=!!t)):new r(e,t)}function n(e){function t(e,t,r){this[p]=g(e),this[d]=e[d],this[h]=a(t,r,e[d]?2:1)}return y(t,"Chain",e,b),v(t.prototype,s.that),t}var i=this,o=i.define;i.define=void 0;var s=require("github:zloirock/core-js@0.8.4/modules/$"),a=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),u=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe,c=require("github:zloirock/core-js@0.8.4/modules/$.def"),l=require("github:zloirock/core-js@0.8.4/modules/$.iter"),d=u("entries"),h=u("fn"),p=u("iter"),f=l.forOf,m=l.stepCall,g=l.get,v=l.set,y=l.create;y(r,"Wrapper",function(){return this[p].next()});var b=r.prototype;v(b,function(){return this[p]});var j=n(function(){var e=this[p].next();return e.done?e:l.step(0,m(this[p],this[h],e.value,this[d]))}),k=n(function(){for(;;){var e=this[p].next();if(e.done||m(this[p],this[h],e.value,this[d]))return e}});return s.mix(b,{of:function(e,t){f(this,this[d],e,t)},array:function(e,t){var r=[];return f(void 0!=e?this.map(e,t):this,!1,r.push,r),r},filter:function(e,t){return new k(this,e,t)},map:function(e,t){return new j(this,e,t)}}),r.isIterable=l.is,r.getIterator=g,c(c.G+c.F,{$for:r}),i.define=o,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.delay",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.partial"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=require("github:zloirock/core-js@0.8.4/modules/$.partial");return o(o.G+o.F,{delay:function(e){return new(i.core.Promise||i.g.Promise)(function(t){setTimeout(s.call(t,!0),e)})}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.binding",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.invoke","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.partial"],!0,function(require,e,t){function r(e){var t=this,r={};return c(t,d,function(e){return void 0!==e&&e in t?o.has(r,e)?r[e]:r[e]=s(t[e],t,-1):h.call(t)})[d](e)}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),a=require("github:zloirock/core-js@0.8.4/modules/$.def"),u=require("github:zloirock/core-js@0.8.4/modules/$.invoke"),c=o.hide,l=require("github:zloirock/core-js@0.8.4/modules/$.assert").fn,d=o.DESC?require("github:zloirock/core-js@0.8.4/modules/$.uid")("tie"):"toLocaleString",h={}.toLocaleString;
return o.core._=o.path._=o.path._||{},a(a.P+a.F,"Function",{part:require("github:zloirock/core-js@0.8.4/modules/$.partial"),only:function(e,t){var r=l(this),n=o.toLength(e),i=arguments.length>1;return function(){for(var e=Math.min(n,arguments.length),o=Array(e),s=0;e>s;)o[s]=arguments[s++];return u(r,o,i?t:this)}}}),c(o.path._,"toString",function(){return d}),c(Object.prototype,d,r),o.DESC||c(Array.prototype,d,r),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.object",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.own-keys","github:zloirock/core-js@0.8.4/modules/$.cof"],!0,function(require,e,t){function r(e,t){for(var r,n=a(o.toObject(t)),i=n.length,s=0;i>s;)o.setDesc(e,r=n[s++],o.getDesc(t,r));return e}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=require("github:zloirock/core-js@0.8.4/modules/$.own-keys");return s(s.S+s.F,"Object",{isObject:o.isObject,classof:require("github:zloirock/core-js@0.8.4/modules/$.cof").classof,define:r,make:function(e,t){return r(o.create(e),t)}}),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.array.turn",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=require("github:zloirock/core-js@0.8.4/modules/$.assert").fn;return o(o.P+o.F,"Array",{turn:function(e,t){s(e);for(var r=void 0==t?[]:Object(t),n=i.ES5Object(this),o=i.toLength(n.length),a=0;o>a&&e(r,n[a],a++,this)!==!1;);return r}}),require("github:zloirock/core-js@0.8.4/modules/$.unscope")("turn"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.number.iterator",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){function r(e){o.set(this,s,{l:o.toLength(e),i:0})}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("iter"),a=require("github:zloirock/core-js@0.8.4/modules/$.iter"),u=a.step,c="Number";return a.create(r,c,function(){var e=this[s],t=e.i++;return t<e.l?u(0,t):u(1)}),a.define(Number,c,function(){return new r(this)}),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.number.math",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.invoke"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=require("github:zloirock/core-js@0.8.4/modules/$.invoke"),a={};return a.random=function(e){var t=+this,r=void 0==e?0:+e,n=Math.min(t,r);return Math.random()*(Math.max(t,r)-n)+n},i.FW&&i.each.call("round,floor,ceil,abs,sin,asin,cos,acos,tan,atan,exp,sqrt,max,min,pow,atan2,acosh,asinh,atanh,cbrt,clz32,cosh,expm1,hypot,imul,log1p,log10,log2,sign,sinh,tanh,trunc".split(","),function(e){var t=Math[e];t&&(a[e]=function(){for(var e=[+this],r=0;arguments.length>r;)e.push(arguments[r++]);return s(t,e)})}),o(o.P+o.F,"Number",a),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.string.escape-html",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.replacer"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i,o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=require("github:zloirock/core-js@0.8.4/modules/$.replacer"),a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;"},u={};for(i in a)u[a[i]]=i;return o(o.P+o.F,"String",{escapeHTML:s(/[&<>"']/g,a),unescapeHTML:s(/&(?:amp|lt|gt|quot|apos);/g,u)}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.date",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){function r(e){return e>9?e:"0"+e}function n(e){return function(t,n){function i(t){return o[e+t]()}var o=this,s=h[a.has(h,n)?n:p];return String(t).replace(l,function(e){switch(e){case"s":return i(f);case"ss":return r(i(f));case"m":return i(m);case"mm":return r(i(m));case"h":return i(g);case"hh":return r(i(g));case"D":return i(v);case"DD":return r(i(v));case"W":return s[0][i("Day")];case"N":return i(y)+1;case"NN":return r(i(y)+1);case"M":return s[2][i(y)];case"MM":return s[1][i(y)];case"Y":return i(b);case"YY":return r(i(b)%100)}return e})}}function i(e,t){function r(e){var r=[];return a.each.call(t.months.split(","),function(t){r.push(t.replace(d,"$"+e))}),r}return h[e]=[t.weekdays.split(","),r(1),r(2)],c}var o=this,s=o.define;o.define=void 0;var a=require("github:zloirock/core-js@0.8.4/modules/$"),u=require("github:zloirock/core-js@0.8.4/modules/$.def"),c=a.core,l=/\b\w\w?\b/g,d=/:(.*)\|(.*)$/,h={},p="en",f="Seconds",m="Minutes",g="Hours",v="Date",y="Month",b="FullYear";return u(u.P+u.F,v,{format:n("get"),formatUTC:n("getUTC")}),i(p,{weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",months:"January,February,March,April,May,June,July,August,September,October,November,December"}),i("ru",{weekdays:"\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435,\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a,\u0412\u0442\u043e\u0440\u043d\u0438\u043a,\u0421\u0440\u0435\u0434\u0430,\u0427\u0435\u0442\u0432\u0435\u0440\u0433,\u041f\u044f\u0442\u043d\u0438\u0446\u0430,\u0421\u0443\u0431\u0431\u043e\u0442\u0430",months:"\u042f\u043d\u0432\u0430\u0440:\u044f|\u044c,\u0424\u0435\u0432\u0440\u0430\u043b:\u044f|\u044c,\u041c\u0430\u0440\u0442:\u0430|,\u0410\u043f\u0440\u0435\u043b:\u044f|\u044c,\u041c\u0430:\u044f|\u0439,\u0418\u044e\u043d:\u044f|\u044c,\u0418\u044e\u043b:\u044f|\u044c,\u0410\u0432\u0433\u0443\u0441\u0442:\u0430|,\u0421\u0435\u043d\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041e\u043a\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041d\u043e\u044f\u0431\u0440:\u044f|\u044c,\u0414\u0435\u043a\u0430\u0431\u0440:\u044f|\u044c"}),c.locale=function(e){return a.has(h,e)?p=e:p},c.addLocale=i,o.define=s,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.global",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.G+i.F,{global:require("github:zloirock/core-js@0.8.4/modules/$").g}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/core.log",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.assign"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s={},a=!0;return i.each.call("assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,isIndependentlyComposed,log,markTimeline,profile,profileEnd,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(","),function(e){s[e]=function(){return a&&i.g.console&&i.isFunction(console[e])?Function.apply.call(console[e],console,arguments):void 0}}),o(o.G+o.F,{log:require("github:zloirock/core-js@0.8.4/modules/$.assign")(s.log,s,{enable:function(){a=!0},disable:function(){a=!1}})}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$",["github:zloirock/core-js@0.8.4/modules/$.fw"],!0,function(require,e,t){function r(e){return isNaN(e=+e)?0:(e>0?m:f)(e)}function n(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}function i(e,t,r){return e[t]=r,e}function o(e){return y?function(t,r,i){return j.setDesc(t,r,n(e,i))}:i}function s(e){return null!==e&&("object"==typeof e||"function"==typeof e)}function a(e){return"function"==typeof e}function u(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}var c=this,l=c.define;c.define=void 0;var c="undefined"!=typeof self?self:Function("return this")(),d={},h=Object.defineProperty,p={}.hasOwnProperty,f=Math.ceil,m=Math.floor,g=Math.max,v=Math.min,y=!!function(){try{return 2==h({},"a",{get:function(){return 2}}).a}catch(e){}}(),b=o(1),j=t.exports=require("github:zloirock/core-js@0.8.4/modules/$.fw")({g:c,core:d,html:c.document&&document.documentElement,isObject:s,isFunction:a,it:function(e){return e},that:function(){return this},toInteger:r,toLength:function(e){return e>0?v(r(e),9007199254740991):0},toIndex:function(e,t){return e=r(e),0>e?g(e+t,0):v(e,t)},has:function(e,t){return p.call(e,t)},create:Object.create,getProto:Object.getPrototypeOf,DESC:y,desc:n,getDesc:Object.getOwnPropertyDescriptor,setDesc:h,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:u,ES5Object:Object,toObject:function(e){return j.ES5Object(u(e))},hide:b,def:o(0),set:c.Symbol?i:b,mix:function(e,t){for(var r in t)b(e,r,t[r]);return e},each:[].forEach});return"undefined"!=typeof __e&&(__e=d),"undefined"!=typeof __g&&(__g=c),c.define=l,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es5",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.dom-create","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.invoke","npm:core-js@0.9.18/modules/$.array-methods","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.array-includes","npm:core-js@0.9.18/modules/$.replacer","npm:core-js@0.9.18/modules/$.throws"],!0,function(require,e,t){function r(e,t){return function(r){var n,i=E(r),o=0,s=[];for(n in i)n!=f&&x(i,n)&&s.push(n);for(;t>o;)x(i,n=e[o++])&&(~R(s,n)||s.push(n));return s}}function n(){}function i(e){return function(t,r){m.fn(t);var n=E(this),i=D(n.length),o=e?i-1:0,s=e?-1:1;if(arguments.length<2)for(;;){if(o in n){r=n[o],o+=s;break}o+=s,m(e?o>=0:i>o,"Reduce of empty array with no initial value")}for(;e?o>=0:i>o;o+=s)o in n&&(r=t(r,n[o],o,this));return r}}function o(e){return e>9?e:"0"+e}var s=this,a=s.define;s.define=void 0;var u=require("npm:core-js@0.9.18/modules/$"),c=require("npm:core-js@0.9.18/modules/$.dom-create"),l=require("npm:core-js@0.9.18/modules/$.cof"),d=require("npm:core-js@0.9.18/modules/$.def"),h=require("npm:core-js@0.9.18/modules/$.invoke"),p=require("npm:core-js@0.9.18/modules/$.array-methods"),f=require("npm:core-js@0.9.18/modules/$.uid").safe("__proto__"),m=require("npm:core-js@0.9.18/modules/$.assert"),g=m.obj,v=Object.prototype,y=u.html,b=[],j=b.slice,k=b.join,w=l.classof,x=u.has,$=u.setDesc,S=u.getDesc,z=u.setDescs,C=u.isFunction,O=u.isObject,E=u.toObject,D=u.toLength,V=u.toIndex,A=!1,R=require("npm:core-js@0.9.18/modules/$.array-includes")(!1),M=p(0),P=p(1),N=p(2),L=p(3),F=p(4);if(!u.DESC){try{A=8==$(c("div"),"x",{get:function(){return 8}}).x}catch(T){}u.setDesc=function(e,t,r){if(A)try{return $(e,t,r)}catch(n){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(g(e)[t]=r.value),e},u.getDesc=function(e,t){if(A)try{return S(e,t)}catch(r){}return x(e,t)?u.desc(!v.propertyIsEnumerable.call(e,t),e[t]):void 0},u.setDescs=z=function(e,t){g(e);for(var r,n=u.getKeys(t),i=n.length,o=0;i>o;)u.setDesc(e,r=n[o++],t[r]);return e}}d(d.S+d.F*!u.DESC,"Object",{getOwnPropertyDescriptor:u.getDesc,defineProperty:u.setDesc,defineProperties:z});var I="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),_=I.concat("length","prototype"),q=I.length,B=function(){var e,t=c("iframe"),r=q,n=">";for(t.style.display="none",y.appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write("<script>document.F=Object</script"+n),e.close(),B=e.F;r--;)delete B.prototype[I[r]];return B()};d(d.S,"Object",{getPrototypeOf:u.getProto=u.getProto||function(e){return e=Object(m.def(e)),x(e,f)?e[f]:C(e.constructor)&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?v:null},getOwnPropertyNames:u.getNames=u.getNames||r(_,_.length,!0),create:u.create=u.create||function(e,t){var r;return null!==e?(n.prototype=g(e),r=new n,n.prototype=null,r[f]=e):r=B(),void 0===t?r:z(r,t)},keys:u.getKeys=u.getKeys||r(I,q,!1),seal:function(e){return e},freeze:function(e){return e},preventExtensions:function(e){return e},isSealed:function(e){return!O(e)},isFrozen:function(e){return!O(e)},isExtensible:function(e){return O(e)}}),d(d.P,"Function",{bind:function(e){function t(){var i=n.concat(j.call(arguments)),o=this instanceof t,s=o?u.create(r.prototype):e,a=h(r,i,s);return o?s:a}var r=m.fn(this),n=j.call(arguments,1);return r.prototype&&(t.prototype=r.prototype),t}}),0 in Object("z")&&"z"=="z"[0]||(u.ES5Object=function(e){return"String"==l(e)?e.split(""):Object(e)});var W=!0;try{y&&j.call(y),W=!1}catch(T){}d(d.P+d.F*W,"Array",{slice:function(e,t){var r=D(this.length),n=l(this);if(t=void 0===t?r:t,"Array"==n)return j.call(this,e,t);for(var i=V(e,r),o=V(t,r),s=D(o-i),a=Array(s),u=0;s>u;u++)a[u]="String"==n?this.charAt(i+u):this[i+u];return a}}),d(d.P+d.F*(u.ES5Object!=Object),"Array",{join:function(){return k.apply(u.ES5Object(this),arguments)}}),d(d.S,"Array",{isArray:function(e){return"Array"==l(e)}}),d(d.P,"Array",{forEach:u.each=u.each||function(e){return M(this,e,arguments[1])},map:function(e){return P(this,e,arguments[1])},filter:function(e){return N(this,e,arguments[1])},some:function(e){return L(this,e,arguments[1])},every:function(e){return F(this,e,arguments[1])},reduce:i(!1),reduceRight:i(!0),indexOf:function(e){return R(this,e,arguments[1])},lastIndexOf:function(e,t){var r=E(this),n=D(r.length),i=n-1;for(arguments.length>1&&(i=Math.min(i,u.toInteger(t))),0>i&&(i=D(n+i));i>=0;i--)if(i in r&&r[i]===e)return i;return-1}}),d(d.P,"String",{trim:require("npm:core-js@0.9.18/modules/$.replacer")(/^\s*([\s\S]*\S)?\s*$/,"$1")}),d(d.S,"Date",{now:function(){return+new Date}});var G=new Date(-5e13-1),U=!(G.toISOString&&"0385-07-25T07:06:39.999Z"==G.toISOString()&&require("npm:core-js@0.9.18/modules/$.throws")(function(){new Date(NaN).toISOString()}));return d(d.P+d.F*U,"Date",{toISOString:function(){if(!isFinite(this))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),r=e.getUTCMilliseconds(),n=0>t?"-":t>9999?"+":"";return n+("00000"+Math.abs(t)).slice(n?-6:-4)+"-"+o(e.getUTCMonth()+1)+"-"+o(e.getUTCDate())+"T"+o(e.getUTCHours())+":"+o(e.getUTCMinutes())+":"+o(e.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}}),"Object"==w(function(){return arguments}())&&(l.classof=function(e){var t=w(e);return"Object"==t&&C(e.callee)?"Arguments":t}),s.define=a,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.symbol",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.shared","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.redef","npm:core-js@0.9.18/modules/$.keyof","npm:core-js@0.9.18/modules/$.enum-keys","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.get-names","npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){function r(e){var t=L[e]=h.set($(V.prototype),R,e);return w&&A&&T(k,e,{configurable:!0,set:function(t){x(this,M)&&x(this[M],e)&&(this[M][e]=!1),T(this,e,C(1,t))}}),t}function n(e,t,r){return r&&x(L,t)?(r.enumerable?(x(e,M)&&e[M][t]&&(e[M][t]=!1),r=$(r,{enumerable:C(0,!1)})):(x(e,M)||z(e,M,C(1,{})),e[M][t]=!0),T(e,t,r)):z(e,t,r)}function i(e,t){j(e);for(var r,i=b(t=D(t)),o=0,s=i.length;s>o;)n(e,r=i[o++],t[r]);return e}function o(e,t){return void 0===t?$(e):i($(e),t)}function s(e){var t=P.call(this,e);return t||!x(this,e)||!x(L,e)||x(this,M)&&this[M][e]?t:!0}function a(e,t){var r=S(e=D(e),t);return!r||!x(L,t)||x(e,M)&&e[M][t]||(r.enumerable=!0),r}function u(e){for(var t,r=E(D(e)),n=[],i=0;r.length>i;)x(L,t=r[i++])||t==M||n.push(t);return n}function c(e){for(var t,r=E(D(e)),n=[],i=0;r.length>i;)x(L,t=r[i++])&&n.push(L[t]);return n}var l=this,d=l.define;l.define=void 0;var h=require("npm:core-js@0.9.18/modules/$"),p=require("npm:core-js@0.9.18/modules/$.cof").set,f=require("npm:core-js@0.9.18/modules/$.uid"),m=require("npm:core-js@0.9.18/modules/$.shared"),g=require("npm:core-js@0.9.18/modules/$.def"),v=require("npm:core-js@0.9.18/modules/$.redef"),y=require("npm:core-js@0.9.18/modules/$.keyof"),b=require("npm:core-js@0.9.18/modules/$.enum-keys"),j=require("npm:core-js@0.9.18/modules/$.assert").obj,k=Object.prototype,w=h.DESC,x=h.has,$=h.create,S=h.getDesc,z=h.setDesc,C=h.desc,O=require("npm:core-js@0.9.18/modules/$.get-names"),E=O.get,D=h.toObject,V=h.g.Symbol,A=!1,R=f("tag"),M=f("hidden"),P={}.propertyIsEnumerable,N=m("symbol-registry"),L=m("symbols"),F=h.isFunction(V),T=w?function(){try{return $(z({},M,{get:function(){return z(this,M,{value:!1})[M]}}))[M]||z}catch(e){return function(e,t,r){var n=S(k,t);n&&delete k[t],z(e,t,r),n&&e!==k&&z(k,t,n)}}}():z;F||(V=function(){if(this instanceof V)throw TypeError("Symbol is not a constructor");return r(f(arguments[0]))},v(V.prototype,"toString",function(){return this[R]}),h.create=o,h.setDesc=n,h.getDesc=a,h.setDescs=i,h.getNames=O.get=u,h.getSymbols=c,h.DESC&&h.FW&&v(k,"propertyIsEnumerable",s,!0));var I={"for":function(e){return x(N,e+="")?N[e]:N[e]=V(e)},keyFor:function(e){return y(N,e)},useSetter:function(){A=!0},useSimple:function(){A=!1}};return h.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(e){var t=require("npm:core-js@0.9.18/modules/$.wks")(e);I[e]=F?t:r(t)}),A=!0,g(g.G+g.W,{Symbol:V}),g(g.S,"Symbol",I),g(g.S+g.F*!F,"Object",{create:o,defineProperty:n,defineProperties:i,getOwnPropertyDescriptor:a,getOwnPropertyNames:u,getOwnPropertySymbols:c}),p(V,"Symbol"),p(Math,"Math",!0),p(h.g.JSON,"JSON",!0),l.define=d,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.object.assign",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.assign"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.S,"Object",{assign:require("npm:core-js@0.9.18/modules/$.assign")}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.object.is",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.same"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.S,"Object",{is:require("npm:core-js@0.9.18/modules/$.same")}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.object.set-prototype-of",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.set-proto"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.S,"Object",{setPrototypeOf:require("npm:core-js@0.9.18/modules/$.set-proto").set}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.object.to-string",["npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.wks","npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.redef"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.cof"),o={};return o[require("npm:core-js@0.9.18/modules/$.wks")("toStringTag")]="z",require("npm:core-js@0.9.18/modules/$").FW&&"z"!=i(o)&&require("npm:core-js@0.9.18/modules/$.redef")(Object.prototype,"toString",function(){return"[object "+i.classof(this)+"]"},!0),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.object.statics-accept-primitives",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.get-names"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=i.isObject,a=i.toObject;return i.each.call("freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames".split(","),function(e,t){var r=(i.core.Object||{})[e]||Object[e],n=0,u={};u[e]=0==t?function(e){return s(e)?r(e):e}:1==t?function(e){return s(e)?r(e):e}:2==t?function(e){return s(e)?r(e):e}:3==t?function(e){return s(e)?r(e):!0}:4==t?function(e){return s(e)?r(e):!0}:5==t?function(e){return s(e)?r(e):!1}:6==t?function(e,t){return r(a(e),t)}:7==t?function(e){return r(Object(i.assertDefined(e)))}:8==t?function(e){return r(a(e))}:require("npm:core-js@0.9.18/modules/$.get-names").get;try{r("z")}catch(c){n=1}o(o.S+o.F*n,"Object",u)}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.function.name",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o="name",s=i.setDesc,a=Function.prototype;return o in a||i.FW&&i.DESC&&s(a,o,{configurable:!0,get:function(){var e=String(this).match(/^\s*function ([^ (]*)/),t=e?e[1]:"";return i.has(this,o)||s(this,o,i.desc(5,t)),t},set:function(e){i.has(this,o)||s(this,o,i.desc(0,e))}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.function.has-instance",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.wks")("hasInstance"),s=Function.prototype;return o in s||i.setDesc(s,o,{value:function(e){if(!i.isFunction(this)||!i.isObject(e))return!1;if(!i.isObject(this.prototype))return e instanceof this;for(;e=i.getProto(e);)if(this.prototype===e)return!0;return!1}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.number.constructor",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.redef"],!0,function(require,e,t){function r(e){var t,r;if(u(t=e.valueOf)&&!a(r=t.call(e)))return r;if(u(t=e.toString)&&!a(r=t.call(e)))return r;throw TypeError("Can't convert object to number")}function n(e){if(a(e)&&(e=r(e)),"string"==typeof e&&e.length>2&&48==e.charCodeAt(0)){var t=!1;switch(e.charCodeAt(1)){case 66:case 98:t=!0;case 79:case 111:return parseInt(e.slice(2),t?2:8)}}return+e}var i=this,o=i.define;i.define=void 0;var s=require("npm:core-js@0.9.18/modules/$"),a=s.isObject,u=s.isFunction,c="Number",l=s.g[c],d=l,h=l.prototype;return!s.FW||l("0o1")&&l("0b1")||(l=function(e){return this instanceof l?new d(n(e)):n(e)},s.each.call(s.DESC?s.getNames(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),function(e){s.has(d,e)&&!s.has(l,e)&&s.setDesc(l,e,s.getDesc(d,e))}),l.prototype=h,h.constructor=l,require("npm:core-js@0.9.18/modules/$.redef")(s.g,c,l)),i.define=o,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.number.statics",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){function r(e){return!o.isObject(e)&&c(e)&&u(e)===e}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.def"),a=Math.abs,u=Math.floor,c=o.g.isFinite,l=9007199254740991;return s(s.S,"Number",{EPSILON:Math.pow(2,-52),isFinite:function(e){return"number"==typeof e&&c(e)},isInteger:r,isNaN:function(e){return e!=e},isSafeInteger:function(e){return r(e)&&a(e)<=l},MAX_SAFE_INTEGER:l,MIN_SAFE_INTEGER:-l,parseFloat:parseFloat,parseInt:parseInt}),n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.math",["npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){function r(e){return e+1/y-1/y}function n(e){return 0==(e=+e)||e!=e?e:0>e?-1:1}function i(e){return isFinite(e=+e)&&0!=e?0>e?-i(-e):f(e+m(e*e+1)):e}function o(e){return 0==(e=+e)?e:e>-1e-6&&1e-6>e?e+e*e/2:p(e)-1}var s=this,a=s.define;s.define=void 0;var u=1/0,c=require("npm:core-js@0.9.18/modules/$.def"),l=Math.E,d=Math.pow,h=Math.abs,p=Math.exp,f=Math.log,m=Math.sqrt,g=Math.ceil,v=Math.floor,y=d(2,-52),b=d(2,-23),j=d(2,127)*(2-b),k=d(2,-126);return c(c.S,"Math",{acosh:function(e){return(e=+e)<1?NaN:isFinite(e)?f(e/l+m(e+1)*m(e-1)/l)+1:e},asinh:i,atanh:function(e){return 0==(e=+e)?e:f((1+e)/(1-e))/2},cbrt:function(e){return n(e=+e)*d(h(e),1/3)},clz32:function(e){return(e>>>=0)?31-v(f(e+.5)*Math.LOG2E):32},cosh:function(e){return(p(e=+e)+p(-e))/2},expm1:o,fround:function(e){var t,i,o=h(e),s=n(e);return k>o?s*r(o/k/b)*k*b:(t=(1+b/y)*o,i=t-(t-o),i>j||i!=i?s*u:s*i)},hypot:function(e,t){for(var r,n,i=0,o=0,s=arguments.length,a=0;s>o;)r=h(arguments[o++]),r>a?(n=a/r,i=i*n*n+1,a=r):r>0?(n=r/a,i+=n*n):i+=r;return a===u?u:a*m(i)},imul:function(e,t){var r=65535,n=+e,i=+t,o=r&n,s=r&i;return 0|o*s+((r&n>>>16)*s+o*(r&i>>>16)<<16>>>0)},log1p:function(e){return(e=+e)>-1e-8&&1e-8>e?e-e*e/2:f(1+e)},log10:function(e){return f(e)/Math.LN10},log2:function(e){return f(e)/Math.LN2},sign:n,sinh:function(e){return h(e=+e)<1?(o(e)-o(-e))/2:(p(e-1)-p(-e-1))*(l/2)},tanh:function(e){var t=o(e=+e),r=o(-e);return t==u?1:r==u?-1:(t-r)/(p(e)+p(-e))},trunc:function(e){return(e>0?v:g)(e)}}),s.define=a,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.from-code-point",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$").toIndex,s=String.fromCharCode,a=String.fromCodePoint;return i(i.S+i.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,i=0;n>i;){if(t=+arguments[i++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");r.push(65536>t?s(t):s(((t-=65536)>>10)+55296,t%1024+56320))}return r.join("")}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.raw",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def");return o(o.S,"String",{raw:function(e){for(var t=i.toObject(e.raw),r=i.toLength(t.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(t[s++])),n>s&&o.push(String(arguments[s]));return o.join("")}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.iterator",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.string-at","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.iter-define"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$").set,o=require("npm:core-js@0.9.18/modules/$.string-at")(!0),s=require("npm:core-js@0.9.18/modules/$.uid").safe("iter"),a=require("npm:core-js@0.9.18/modules/$.iter"),u=a.step;return require("npm:core-js@0.9.18/modules/$.iter-define")(String,"String",function(e){i(this,s,{o:String(e),i:0})},function(){var e,t=this[s],r=t.o,n=t.i;return n>=r.length?u(1):(e=o(r,n),t.i+=e.length,u(0,e))}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.code-point-at",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.string-at"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.string-at")(!1);return i(i.P,"String",{codePointAt:function(e){return o(this,e)}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.ends-with",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.throws"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.cof"),s=require("npm:core-js@0.9.18/modules/$.def"),a=i.toLength;return s(s.P+s.F*!require("npm:core-js@0.9.18/modules/$.throws")(function(){"q".endsWith(/./)}),"String",{endsWith:function(e){if("RegExp"==o(e))throw TypeError();var t=String(i.assertDefined(this)),r=arguments[1],n=a(t.length),s=void 0===r?n:Math.min(a(r),n);return e+="",t.slice(s-e.length,s)===e}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.includes",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.cof"),s=require("npm:core-js@0.9.18/modules/$.def");return s(s.P,"String",{includes:function(e){if("RegExp"==o(e))throw TypeError();return!!~String(i.assertDefined(this)).indexOf(e,arguments[1])}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.repeat",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.string-repeat"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.P,"String",{repeat:require("npm:core-js@0.9.18/modules/$.string-repeat")}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.string.starts-with",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.throws"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.cof"),s=require("npm:core-js@0.9.18/modules/$.def");return s(s.P+s.F*!require("npm:core-js@0.9.18/modules/$.throws")(function(){"q".startsWith(/./)}),"String",{startsWith:function(e){if("RegExp"==o(e))throw TypeError();var t=String(i.assertDefined(this)),r=i.toLength(Math.min(arguments[1],t.length));return e+="",t.slice(r,r+e.length)===e}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.from",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.iter-call","npm:core-js@0.9.18/modules/$.iter-detect"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.ctx"),s=require("npm:core-js@0.9.18/modules/$.def"),a=require("npm:core-js@0.9.18/modules/$.iter"),u=require("npm:core-js@0.9.18/modules/$.iter-call");return s(s.S+s.F*!require("npm:core-js@0.9.18/modules/$.iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e){var t,r,n,s,c=Object(i.assertDefined(e)),l=arguments[1],d=void 0!==l,h=d?o(l,arguments[2],2):void 0,p=0;if(a.is(c))for(s=a.get(c),r=new("function"==typeof this?this:Array);!(n=s.next()).done;p++)r[p]=d?u(s,h,[n.value,p],!0):n.value;else for(r=new("function"==typeof this?this:Array)(t=i.toLength(c.length));t>p;p++)r[p]=d?h(c[p],p):c[p];return r.length=p,r}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.of",["npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.S,"Array",{of:function(){for(var e=0,t=arguments.length,r=new("function"==typeof this?this:Array)(t);t>e;)r[e]=arguments[e++];return r.length=t,r}}),
r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.iterator",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.unscope","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.iter-define"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.unscope"),s=require("npm:core-js@0.9.18/modules/$.uid").safe("iter"),a=require("npm:core-js@0.9.18/modules/$.iter"),u=a.step,c=a.Iterators;return require("npm:core-js@0.9.18/modules/$.iter-define")(Array,"Array",function(e,t){i.set(this,s,{o:i.toObject(e),i:0,k:t})},function(){var e=this[s],t=e.o,r=e.k,n=e.i++;return!t||n>=t.length?(e.o=void 0,u(1)):"keys"==r?u(0,n):"values"==r?u(0,t[n]):u(0,[n,t[n]])},"values"),c.Arguments=c.Array,o("keys"),o("values"),o("entries"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.species",["npm:core-js@0.9.18/modules/$.species"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("npm:core-js@0.9.18/modules/$.species")(Array),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.copy-within",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=i.toIndex;return o(o.P,"Array",{copyWithin:function(e,t){var r=Object(i.assertDefined(this)),n=i.toLength(r.length),o=s(e,n),a=s(t,n),u=arguments[2],c=void 0===u?n:s(u,n),l=Math.min(c-a,n-o),d=1;for(o>a&&a+l>o&&(d=-1,a=a+l-1,o=o+l-1);l-->0;)a in r?r[o]=r[a]:delete r[o],o+=d,a+=d;return r}}),require("npm:core-js@0.9.18/modules/$.unscope")("copyWithin"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.fill",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=i.toIndex;return o(o.P,"Array",{fill:function(e){for(var t=Object(i.assertDefined(this)),r=i.toLength(t.length),n=s(arguments[1],r),o=arguments[2],a=void 0===o?r:s(o,r);a>n;)t[n++]=e;return t}}),require("npm:core-js@0.9.18/modules/$.unscope")("fill"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.find",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.array-methods","npm:core-js@0.9.18/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i="find",o=require("npm:core-js@0.9.18/modules/$.def"),s=!0,a=require("npm:core-js@0.9.18/modules/$.array-methods")(5);return i in[]&&Array(1)[i](function(){s=!1}),o(o.P+o.F*s,"Array",{find:function(e){return a(this,e,arguments[1])}}),require("npm:core-js@0.9.18/modules/$.unscope")(i),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.array.find-index",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.array-methods","npm:core-js@0.9.18/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i="findIndex",o=require("npm:core-js@0.9.18/modules/$.def"),s=!0,a=require("npm:core-js@0.9.18/modules/$.array-methods")(6);return i in[]&&Array(1)[i](function(){s=!1}),o(o.P+o.F*s,"Array",{findIndex:function(e){return a(this,e,arguments[1])}}),require("npm:core-js@0.9.18/modules/$.unscope")(i),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.regexp",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.redef","npm:core-js@0.9.18/modules/$.replacer","npm:core-js@0.9.18/modules/$.species"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.cof"),s=i.g.RegExp,a=s,u=s.prototype,c=/a/g,l=new s(c)!==c,d=function(){try{return"/a/i"==s(c,"i")}catch(e){}}();return i.FW&&i.DESC&&(l&&d||(s=function(e,t){var r="RegExp"==o(e),n=void 0===t;return this instanceof s||!r||!n?l?new a(r&&!n?e.source:e,t):new a(r?e.source:e,r&&n?e.flags:t):e},i.each.call(i.getNames(a),function(e){e in s||i.setDesc(s,e,{configurable:!0,get:function(){return a[e]},set:function(t){a[e]=t}})}),u.constructor=s,s.prototype=u,require("npm:core-js@0.9.18/modules/$.redef")(i.g,"RegExp",s)),"g"!=/./g.flags&&i.setDesc(u,"flags",{configurable:!0,get:require("npm:core-js@0.9.18/modules/$.replacer")(/^.*\/(\w*)$/,"$1")})),require("npm:core-js@0.9.18/modules/$.species")(s),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.promise",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.for-of","npm:core-js@0.9.18/modules/$.set-proto","npm:core-js@0.9.18/modules/$.same","npm:core-js@0.9.18/modules/$.species","npm:core-js@0.9.18/modules/$.wks","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.task","npm:core-js@0.9.18/modules/$.mix","npm:core-js@0.9.18/modules/$.iter-detect","github:jspm/nodelibs-process@0.1.1"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,function(e){"use strict";function t(e){var t=new z(function(){});return e&&(t.constructor=Object),z.resolve(t)===t}function r(e){return O(e)&&(V?"Promise"==p.classof(e):k in e)}function n(e,t){return d.FW||e!==z||t!==l?y(e,t):!0}function i(e){var t=D(e)[j];return void 0!=t?t:e}function o(e){var t;return O(e)&&(t=e.then),C(t)?t:!1}function s(e){var t=e.c;t.length&&S.call(x,function(){function r(t){var r,s,a=i?t.ok:t.fail;try{a?(i||(e.h=!0),r=a===!0?n:a(n),r===t.P?t.rej(TypeError("Promise-chain cycle")):(s=o(r))?s.call(r,t.res,t.rej):t.res(r)):t.rej(n)}catch(u){t.rej(u)}}for(var n=e.v,i=1==e.s,s=0;t.length>s;)r(t[s++]);t.length=0})}function a(e){var t,r=e[k],n=r.a||r.c,i=0;if(r.h)return!1;for(;n.length>i;)if(t=n[i++],t.fail||!a(t.P))return!1;return!0}function u(t){var r,n=this;n.d||(n.d=!0,n=n.r||n,n.v=t,n.s=2,n.a=n.c.slice(),setTimeout(function(){S.call(x,function(){a(r=n.p)&&($?e.emit("unhandledRejection",t,r):x.console&&console.error&&console.error("Unhandled promise rejection",t)),n.a=void 0})},1),s(n))}function c(e){var t,r=this;if(!r.d){r.d=!0,r=r.r||r;try{(t=o(e))?S.call(x,function(){var n={r:r,d:!1};try{t.call(e,h(c,n,1),h(u,n,1))}catch(i){u.call(n,i)}}):(r.v=e,r.s=1,s(r))}catch(n){u.call({r:r,d:!1},n)}}}var l,d=require("npm:core-js@0.9.18/modules/$"),h=require("npm:core-js@0.9.18/modules/$.ctx"),p=require("npm:core-js@0.9.18/modules/$.cof"),f=require("npm:core-js@0.9.18/modules/$.def"),m=require("npm:core-js@0.9.18/modules/$.assert"),g=require("npm:core-js@0.9.18/modules/$.for-of"),v=require("npm:core-js@0.9.18/modules/$.set-proto").set,y=require("npm:core-js@0.9.18/modules/$.same"),b=require("npm:core-js@0.9.18/modules/$.species"),j=require("npm:core-js@0.9.18/modules/$.wks")("species"),k=require("npm:core-js@0.9.18/modules/$.uid").safe("record"),w="Promise",x=d.g,e=x.process,$="process"==p(e),S=e&&e.nextTick||require("npm:core-js@0.9.18/modules/$.task").set,z=x[w],C=d.isFunction,O=d.isObject,E=m.fn,D=m.obj,V=function(){function e(t){var r=new z(t);return v(r,e.prototype),r}var r=!1;try{if(r=C(z)&&C(z.resolve)&&t(),v(e,z),e.prototype=d.create(z.prototype,{constructor:{value:e}}),e.resolve(5).then(function(){})instanceof e||(r=!1),r&&d.DESC){var n=!1;z.resolve(d.setDesc({},"then",{get:function(){n=!0}})),r=n}}catch(i){r=!1}return r}();V||(z=function(e){E(e);var t={p:m.inst(this,z,w),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1};d.hide(this,k,t);try{e(h(c,t,1),h(u,t,1))}catch(r){u.call(t,r)}},require("npm:core-js@0.9.18/modules/$.mix")(z.prototype,{then:function(e,t){var r=D(D(this).constructor)[j],n={ok:C(e)?e:!0,fail:C(t)?t:!1},i=n.P=new(void 0!=r?r:z)(function(e,t){n.res=E(e),n.rej=E(t)}),o=this[k];return o.c.push(n),o.a&&o.a.push(n),o.s&&s(o),i},"catch":function(e){return this.then(void 0,e)}})),f(f.G+f.W+f.F*!V,{Promise:z}),p.set(z,w),b(z),b(l=d.core[w]),f(f.S+f.F*!V,w,{reject:function(e){return new(i(this))(function(t,r){r(e)})}}),f(f.S+f.F*(!V||t(!0)),w,{resolve:function(e){return r(e)&&n(e.constructor,this)?e:new this(function(t){t(e)})}}),f(f.S+f.F*!(V&&require("npm:core-js@0.9.18/modules/$.iter-detect")(function(e){z.all(e)["catch"](function(){})})),w,{all:function(e){var t=i(this),r=[];return new t(function(n,i){g(e,!1,r.push,r);var o=r.length,s=Array(o);o?d.each.call(r,function(e,r){t.resolve(e).then(function(e){s[r]=e,--o||n(s)},i)}):n(s)})},race:function(e){var t=i(this);return new t(function(r,n){g(e,!1,function(e){t.resolve(e).then(r,n)})})}})}(require("github:jspm/nodelibs-process@0.1.1")),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.map",["npm:core-js@0.9.18/modules/$.collection-strong","npm:core-js@0.9.18/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.collection-strong");return require("npm:core-js@0.9.18/modules/$.collection")("Map",function(e){return function(){return e(this,arguments[0])}},{get:function(e){var t=i.getEntry(this,e);return t&&t.v},set:function(e,t){return i.def(this,0===e?0:e,t)}},i,!0),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.set",["npm:core-js@0.9.18/modules/$.collection-strong","npm:core-js@0.9.18/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.collection-strong");return require("npm:core-js@0.9.18/modules/$.collection")("Set",function(e){return function(){return e(this,arguments[0])}},{add:function(e){return i.def(this,e=0===e?0:e,e)}},i),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.weak-map",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.collection-weak","npm:core-js@0.9.18/modules/$.collection","npm:core-js@0.9.18/modules/$.redef"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.collection-weak"),s=o.leakStore,a=o.ID,u=o.WEAK,c=i.has,l=i.isObject,d=Object.isExtensible||l,h={},p=require("npm:core-js@0.9.18/modules/$.collection")("WeakMap",function(e){return function(){return e(this,arguments[0])}},{get:function(e){if(l(e)){if(!d(e))return s(this).get(e);if(c(e,u))return e[u][this[a]]}},set:function(e,t){return o.def(this,e,t)}},o,!0,!0);return 7!=(new p).set((Object.freeze||Object)(h),7).get(h)&&i.each.call(["delete","has","get","set"],function(e){var t=p.prototype,r=t[e];require("npm:core-js@0.9.18/modules/$.redef")(t,e,function(t,n){if(l(t)&&!d(t)){var i=s(this)[e](t,n);return"set"==e?this:i}return r.call(this,t,n)})}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.weak-set",["npm:core-js@0.9.18/modules/$.collection-weak","npm:core-js@0.9.18/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.collection-weak");return require("npm:core-js@0.9.18/modules/$.collection")("WeakSet",function(e){return function(){return e(this,arguments[0])}},{add:function(e){return i.def(this,e,!0)}},i,!1,!0),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es6.reflect",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.set-proto","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.wks","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.own-keys"],!0,function(require,e,t){function r(e){o.set(this,l,{o:e,k:void 0,i:0})}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.def"),a=require("npm:core-js@0.9.18/modules/$.set-proto"),u=require("npm:core-js@0.9.18/modules/$.iter"),c=require("npm:core-js@0.9.18/modules/$.wks")("iterator"),l=require("npm:core-js@0.9.18/modules/$.uid").safe("iter"),d=u.step,h=require("npm:core-js@0.9.18/modules/$.assert"),p=o.isObject,f=o.getProto,m=o.g.Reflect,g=Function.apply,v=h.obj,y=Object.isExtensible||p,b=Object.preventExtensions,j=!(m&&m.enumerate&&c in m.enumerate({}));u.create(r,"Object",function(){var e,t=this[l],r=t.k;if(void 0==r){t.k=r=[];for(e in t.o)r.push(e)}do if(t.i>=r.length)return d(1);while(!((e=r[t.i++])in t.o));return d(0,e)});var k={apply:function(e,t,r){return g.call(e,t,r)},construct:function(e,t){var r=h.fn(arguments.length<3?e:arguments[2]).prototype,n=o.create(p(r)?r:Object.prototype),i=g.call(e,n,t);return p(i)?i:n},defineProperty:function(e,t,r){v(e);try{return o.setDesc(e,t,r),!0}catch(n){return!1}},deleteProperty:function(e,t){var r=o.getDesc(v(e),t);return r&&!r.configurable?!1:delete e[t]},get:function w(e,t){var r,n=arguments.length<3?e:arguments[2],i=o.getDesc(v(e),t);return i?o.has(i,"value")?i.value:void 0===i.get?void 0:i.get.call(n):p(r=f(e))?w(r,t,n):void 0},getOwnPropertyDescriptor:function(e,t){return o.getDesc(v(e),t)},getPrototypeOf:function(e){return f(v(e))},has:function(e,t){return t in e},isExtensible:function(e){return y(v(e))},ownKeys:require("npm:core-js@0.9.18/modules/$.own-keys"),preventExtensions:function(e){v(e);try{return b&&b(e),!0}catch(t){return!1}},set:function x(e,t,r){var n,i,s=arguments.length<4?e:arguments[3],a=o.getDesc(v(e),t);if(!a){if(p(i=f(e)))return x(i,t,r,s);a=o.desc(0)}return o.has(a,"value")?a.writable!==!1&&p(s)?(n=o.getDesc(s,t)||o.desc(0),n.value=r,o.setDesc(s,t,n),!0):!1:void 0===a.set?!1:(a.set.call(s,r),!0)}};return a&&(k.setPrototypeOf=function(e,t){a.check(e,t);try{return a.set(e,t),!0}catch(r){return!1}}),s(s.G,{Reflect:{}}),s(s.S+s.F*j,"Reflect",{enumerate:function(e){return new r(v(e))}}),s(s.S,"Reflect",k),n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.array.includes",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.array-includes","npm:core-js@0.9.18/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.array-includes")(!0);return i(i.P,"Array",{includes:function(e){return o(this,e,arguments[1])}}),require("npm:core-js@0.9.18/modules/$.unscope")("includes"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.string.at",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.string-at"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.string-at")(!0);return i(i.P,"String",{at:function(e){return o(this,e)}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.string.lpad",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.string-pad"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.string-pad");return i(i.P,"String",{lpad:function(e){return o(this,e,arguments[1],!0)}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.string.rpad",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.string-pad"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.string-pad");return i(i.P,"String",{rpad:function(e){return o(this,e,arguments[1],!1)}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.regexp.escape",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.replacer"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def");return i(i.S,"RegExp",{escape:require("npm:core-js@0.9.18/modules/$.replacer")(/[\\^$*+?.()|[\]{}]/g,"\\$&",!0)}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.object.get-own-property-descriptors",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.own-keys"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=require("npm:core-js@0.9.18/modules/$.own-keys");return o(o.S,"Object",{getOwnPropertyDescriptors:function(e){var t=i.toObject(e),r={};return i.each.call(s(t),function(e){i.setDesc(r,e,i.desc(0,i.getDesc(t,e)))}),r}}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.object.to-array",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def"],!0,function(require,e,t){function r(e){return function(t){var r,n=o.toObject(t),i=o.getKeys(n),s=i.length,a=0,u=Array(s);if(e)for(;s>a;)u[a]=[r=i[a++],n[r]];else for(;s>a;)u[a]=n[i[a++]];return u}}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.def");return s(s.S,"Object",{values:r(!1),entries:r(!0)}),n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.map.to-json",["npm:core-js@0.9.18/modules/$.collection-to-json"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("npm:core-js@0.9.18/modules/$.collection-to-json")("Map"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/es7.set.to-json",["npm:core-js@0.9.18/modules/$.collection-to-json"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("npm:core-js@0.9.18/modules/$.collection-to-json")("Set"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/js.array.statics",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.ctx"],!0,function(require,e,t){function r(e,t){o.each.call(e.split(","),function(e){void 0==t&&e in a?u[e]=a[e]:e in[]&&(u[e]=require("npm:core-js@0.9.18/modules/$.ctx")(Function.call,[][e],t))})}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.def"),a=o.core.Array||Array,u={};return r("pop,reverse,shift,keys,values,entries",1),r("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),r("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill,turn"),s(s.S,"Array",u),n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/web.timers",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.invoke","npm:core-js@0.9.18/modules/$.partial"],!0,function(require,e,t){function r(e){return l?function(t,r){return e(a(u,[].slice.call(arguments,2),o.isFunction(t)?t:Function(t)),r)}:e}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.def"),a=require("npm:core-js@0.9.18/modules/$.invoke"),u=require("npm:core-js@0.9.18/modules/$.partial"),c=o.g.navigator,l=!!c&&/MSIE .\./.test(c.userAgent);return s(s.G+s.B+s.F*l,{setTimeout:r(o.g.setTimeout),setInterval:r(o.g.setInterval)}),n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/web.immediate",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.task"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.task");return i(i.G+i.B,{setImmediate:o.set,clearImmediate:o.clear}),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/web.dom.iterable",["npm:core-js@0.9.18/modules/es6.array.iterator","npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0,require("npm:core-js@0.9.18/modules/es6.array.iterator");var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.iter").Iterators,s=require("npm:core-js@0.9.18/modules/$.wks")("iterator"),a=o.Array,u=i.g.NodeList,c=i.g.HTMLCollection,l=u&&u.prototype,d=c&&c.prototype;return i.FW&&(!u||s in l||i.hide(l,s,a),!c||s in d||i.hide(d,s,a)),o.NodeList=o.HTMLCollection=a,r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.ctx",["npm:core-js@0.9.18/modules/$.assert"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.assert").fn;return t.exports=function(e,t,r){if(i(e),~r&&void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)}}return function(){return e.apply(t,arguments)}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.def",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.redef"],!0,function(require,e,t){function r(e,t){return function(){return e.apply(t,arguments)}}function n(e,t,o){var l,d,h,p,f=e&n.G,m=e&n.P,g=f?i:e&n.S?i[t]:(i[t]||{}).prototype,v=f?a:a[t]||(a[t]={});f&&(o=t);for(l in o)d=!(e&n.F)&&g&&l in g,h=(d?g:o)[l],p=e&n.B&&d?r(h,i):m&&u(h)?r(Function.call,h):h,g&&!d&&c(g,l,h),v[l]!=h&&s.hide(v,l,p),m&&((v.prototype||(v.prototype={}))[l]=h)}var i=this,o=i.define;i.define=void 0;var s=require("npm:core-js@0.9.18/modules/$"),i=s.g,a=s.core,u=s.isFunction,c=require("npm:core-js@0.9.18/modules/$.redef");return i.core=a,n.F=1,n.G=2,n.S=4,n.P=8,n.B=16,n.W=32,t.exports=n,i.define=o,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.assign",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.enum-keys"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.enum-keys");return t.exports=Object.assign||function(e,t){for(var r=Object(i.assertDefined(e)),n=arguments.length,s=1;n>s;)for(var a,u=i.ES5Object(arguments[s++]),c=o(u),l=c.length,d=0;l>d;)r[a=c[d++]]=u[a];return r},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.keyof",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$");return t.exports=function(e,t){for(var r,n=i.toObject(e),o=i.getKeys(n),s=o.length,a=0;s>a;)if(n[r=o[a++]]===t)return r},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.uid",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){function r(e){return"Symbol(".concat(void 0===e?"":e,")_",(++o+Math.random()).toString(36))}var n=this,i=n.define;n.define=void 0;var o=0;return r.safe=require("npm:core-js@0.9.18/modules/$").g.Symbol||r,t.exports=r,n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.assert",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){function r(e,t,r){if(!e)throw TypeError(r?t+r:t)}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$");return r.def=o.assertDefined,r.fn=function(e){if(!o.isFunction(e))throw TypeError(e+" is not a function!");return e},r.obj=function(e){if(!o.isObject(e))throw TypeError(e+" is not an object!");return e},r.inst=function(e,t,r){if(!(e instanceof t))throw TypeError(r+": use the 'new' operator!");return e},t.exports=r,n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.iter",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.wks","npm:core-js@0.9.18/modules/$.shared"],!0,function(require,e,t){function r(e,t){o.hide(e,l,t),d in[]&&o.hide(e,d,t)}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.cof"),a=s.classof,u=require("npm:core-js@0.9.18/modules/$.assert"),c=u.obj,l=require("npm:core-js@0.9.18/modules/$.wks")("iterator"),d="@@iterator",h=require("npm:core-js@0.9.18/modules/$.shared")("iterators"),p={};return r(p,o.that),t.exports={BUGGY:"keys"in[]&&!("next"in[].keys()),Iterators:h,step:function(e,t){return{value:t,done:!!e}},is:function(e){var t=Object(e),r=o.g.Symbol;return(r&&r.iterator||d)in t||l in t||o.has(h,a(t))},get:function(e){var t,r=o.g.Symbol;return void 0!=e&&(t=e[r&&r.iterator||d]||e[l]||h[a(e)]),u(o.isFunction(t),e," is not iterable!"),c(t.call(e))},set:r,create:function(e,t,r,n){e.prototype=o.create(n||p,{next:o.desc(1,r)}),s.set(e,t+" Iterator")}},n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.for-of",["npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.iter-call"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.ctx"),o=require("npm:core-js@0.9.18/modules/$.iter").get,s=require("npm:core-js@0.9.18/modules/$.iter-call");return t.exports=function(e,t,r,n){for(var a,u=o(e),c=i(r,n,t?2:1);!(a=u.next()).done;)if(s(u,c,a.value,t)===!1)return s.close(u)},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.iter-call",["npm:core-js@0.9.18/modules/$.assert"],!0,function(require,e,t){function r(e){var t=e["return"];void 0!==t&&s(t.call(e))}function n(e,t,n,i){try{return i?t(s(n)[0],n[1]):t(n)}catch(o){throw r(e),o}}var i=this,o=i.define;i.define=void 0;var s=require("npm:core-js@0.9.18/modules/$.assert").obj;return n.close=r,t.exports=n,i.define=o,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.mix",["npm:core-js@0.9.18/modules/$.redef"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.redef");return t.exports=function(e,t){for(var r in t)i(e,r,t[r]);return e},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.partial",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.invoke","npm:core-js@0.9.18/modules/$.assert"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.invoke"),s=require("npm:core-js@0.9.18/modules/$.assert").fn;return t.exports=function(){for(var e=s(this),t=arguments.length,r=Array(t),n=0,a=i.path._,u=!1;t>n;)(r[n]=arguments[n++])===a&&(u=!0);return function(){var n,i=this,s=arguments.length,c=0,l=0;if(!u&&!s)return o(e,r,i);if(n=r.slice(),u)for(;t>c;c++)n[c]===a&&(n[c]=arguments[l++]);for(;s>l;)n.push(arguments[l++]);return o(e,n,i)}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.own-keys",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.assert"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.assert").obj;return t.exports=function(e){o(e);var t=i.getNames(e),r=i.getSymbols;return r?t.concat(r(e)):t},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.cof",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){function r(e){return a.call(e).slice(8,-1)}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.wks")("toStringTag"),a={}.toString;return r.classof=function(e){var t,n;return void 0==e?void 0===e?"Undefined":"Null":"string"==typeof(n=(t=Object(e))[s])?n:r(t)},r.set=function(e,t,r){e&&!o.has(e=r?e:e.prototype,s)&&o.hide(e,s,t)},t.exports=r,n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.unscope",["npm:core-js@0.9.18/modules/$.wks","npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.wks")("unscopables");return i in[]||require("npm:core-js@0.9.18/modules/$").hide(Array.prototype,i,{}),t.exports=function(e){[][i][e]=!0},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.iter-define",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.redef","npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.redef"),s=require("npm:core-js@0.9.18/modules/$"),a=require("npm:core-js@0.9.18/modules/$.cof"),u=require("npm:core-js@0.9.18/modules/$.iter"),c=require("npm:core-js@0.9.18/modules/$.wks")("iterator"),l="@@iterator",d="keys",h="values",p=u.Iterators;return t.exports=function(e,t,r,n,f,m,g){function v(e){function t(t){return new r(t,e)}switch(e){case d:return function(){return t(this)};case h:return function(){return t(this)}}return function(){return t(this)}}u.create(r,t,n);var y,b,j=t+" Iterator",k=e.prototype,w=k[c]||k[l]||f&&k[f],x=w||v(f);if(w){var $=s.getProto(x.call(new e));a.set($,j,!0),s.FW&&s.has(k,l)&&u.set($,s.that)}if((s.FW||g)&&u.set(k,x),p[t]=x,p[j]=s.that,f)if(y={keys:m?x:v(d),values:f==h?x:v(h),entries:f!=h?x:v("entries")},g)for(b in y)b in k||o(k,b,y[b]);else i(i.P+i.F*u.BUGGY,t,y)},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.invoke",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3]);case 5:return n?e(t[0],t[1],t[2],t[3],t[4]):e.call(r,t[0],t[1],t[2],t[3],t[4])}return e.apply(r,t)},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.replacer",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e,t,r){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(r?t:this).replace(e,n)}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.fw",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e){return e.FW=!0,e.path=e.g,e},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es5",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.invoke","github:zloirock/core-js@0.8.4/modules/$.array-methods","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.array-includes","github:zloirock/core-js@0.8.4/modules/$.replacer"],!0,function(require,e,t){function r(e,t){return function(r){var n,i=O(r),o=0,s=[];for(n in i)n!=m&&$(i,n)&&s.push(n);for(;t>o;)$(i,n=e[o++])&&(~k.call(s,n)||s.push(n));return s}}function n(e){return!l.isObject(e)}function i(){}function o(e){return function(){return e.apply(l.ES5Object(this),arguments)}}function s(e){return function(t,r){g.fn(t);var n=O(this),i=E(n.length),o=e?i-1:0,s=e?-1:1;if(arguments.length<2)for(;;){if(o in n){r=n[o],o+=s;break}o+=s,g(e?o>=0:i>o,"Reduce of empty array with no initial value")}for(;e?o>=0:i>o;o+=s)o in n&&(r=t(r,n[o],o,this));return r}}function a(e){return e>9?e:"0"+e}var u=this,c=u.define;u.define=void 0;var l=require("github:zloirock/core-js@0.8.4/modules/$"),d=require("github:zloirock/core-js@0.8.4/modules/$.cof"),h=require("github:zloirock/core-js@0.8.4/modules/$.def"),p=require("github:zloirock/core-js@0.8.4/modules/$.invoke"),f=require("github:zloirock/core-js@0.8.4/modules/$.array-methods"),m=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("__proto__"),g=require("github:zloirock/core-js@0.8.4/modules/$.assert"),v=g.obj,y=Object.prototype,b=[],j=b.slice,k=b.indexOf,w=d.classof,x=Object.defineProperties,$=l.has,S=l.setDesc,z=l.getDesc,C=l.isFunction,O=l.toObject,E=l.toLength,D=!1;
if(!l.DESC){try{D=8==S(document.createElement("div"),"x",{get:function(){return 8}}).x}catch(V){}l.setDesc=function(e,t,r){if(D)try{return S(e,t,r)}catch(n){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(v(e)[t]=r.value),e},l.getDesc=function(e,t){if(D)try{return z(e,t)}catch(r){}return $(e,t)?l.desc(!y.propertyIsEnumerable.call(e,t),e[t]):void 0},x=function(e,t){v(e);for(var r,n=l.getKeys(t),i=n.length,o=0;i>o;)l.setDesc(e,r=n[o++],t[r]);return e}}h(h.S+h.F*!l.DESC,"Object",{getOwnPropertyDescriptor:l.getDesc,defineProperty:l.setDesc,defineProperties:x});var A="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),R=A.concat("length","prototype"),M=A.length,P=function(){var e,t=document.createElement("iframe"),r=M,n=">";for(t.style.display="none",l.html.appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write("<script>document.F=Object</script"+n),e.close(),P=e.F;r--;)delete P.prototype[A[r]];return P()};return h(h.S,"Object",{getPrototypeOf:l.getProto=l.getProto||function(e){return e=Object(g.def(e)),$(e,m)?e[m]:C(e.constructor)&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?y:null},getOwnPropertyNames:l.getNames=l.getNames||r(R,R.length,!0),create:l.create=l.create||function(e,t){var r;return null!==e?(i.prototype=v(e),r=new i,i.prototype=null,r[m]=e):r=P(),void 0===t?r:x(r,t)},keys:l.getKeys=l.getKeys||r(A,M,!1),seal:l.it,freeze:l.it,preventExtensions:l.it,isSealed:n,isFrozen:n,isExtensible:l.isObject}),h(h.P,"Function",{bind:function(e){function t(){var i=n.concat(j.call(arguments));return p(r,i,this instanceof t?l.create(r.prototype):e)}var r=g.fn(this),n=j.call(arguments,1);return r.prototype&&(t.prototype=r.prototype),t}}),0 in Object("z")&&"z"=="z"[0]||(l.ES5Object=function(e){return"String"==d(e)?e.split(""):Object(e)}),h(h.P+h.F*(l.ES5Object!=Object),"Array",{slice:o(j),join:o(b.join)}),h(h.S,"Array",{isArray:function(e){return"Array"==d(e)}}),h(h.P,"Array",{forEach:l.each=l.each||f(0),map:f(1),filter:f(2),some:f(3),every:f(4),reduce:s(!1),reduceRight:s(!0),indexOf:k=k||require("github:zloirock/core-js@0.8.4/modules/$.array-includes")(!1),lastIndexOf:function(e,t){var r=O(this),n=E(r.length),i=n-1;for(arguments.length>1&&(i=Math.min(i,l.toInteger(t))),0>i&&(i=E(n+i));i>=0;i--)if(i in r&&r[i]===e)return i;return-1}}),h(h.P,"String",{trim:require("github:zloirock/core-js@0.8.4/modules/$.replacer")(/^\s*([\s\S]*\S)?\s*$/,"$1")}),h(h.S,"Date",{now:function(){return+new Date}}),h(h.P,"Date",{toISOString:function(){if(!isFinite(this))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),r=e.getUTCMilliseconds(),n=0>t?"-":t>9999?"+":"";return n+("00000"+Math.abs(t)).slice(n?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(r>99?r:"0"+a(r))+"Z"}}),"Object"==w(function(){return arguments}())&&(d.classof=function(e){var t=w(e);return"Object"==t&&C(e.callee)?"Arguments":t}),u.define=c,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.symbol",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.keyof","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){function r(e){var t=b[e]=o.set(o.create(f.prototype),v,e);return o.DESC&&g&&o.setDesc(Object.prototype,e,{configurable:!0,set:function(t){d(this,e,t)}}),t}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.cof").set,a=require("github:zloirock/core-js@0.8.4/modules/$.uid"),u=require("github:zloirock/core-js@0.8.4/modules/$.def"),c=require("github:zloirock/core-js@0.8.4/modules/$.keyof"),l=o.has,d=o.hide,h=o.getNames,p=o.toObject,f=o.g.Symbol,m=f,g=!1,v=a.safe("tag"),y={},b={};o.isFunction(f)||(f=function k(e){if(this instanceof k)throw TypeError("Symbol is not a constructor");return r(a(e))},d(f.prototype,"toString",function(){return this[v]})),u(u.G+u.W,{Symbol:f});var j={"for":function(e){return l(y,e+="")?y[e]:y[e]=f(e)},keyFor:function(e){return c(y,e)},pure:a.safe,set:o.set,useSetter:function(){g=!0},useSimple:function(){g=!1}};return o.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(e){var t=require("github:zloirock/core-js@0.8.4/modules/$.wks")(e);j[e]=f===m?t:r(t)}),g=!0,u(u.S,"Symbol",j),u(u.S+u.F*(f!=m),"Object",{getOwnPropertyNames:function(e){for(var t,r=h(p(e)),n=[],i=0;r.length>i;)l(b,t=r[i++])||n.push(t);return n},getOwnPropertySymbols:function(e){for(var t,r=h(p(e)),n=[],i=0;r.length>i;)l(b,t=r[i++])&&n.push(b[t]);return n}}),s(f,"Symbol"),s(Math,"Math",!0),s(o.g.JSON,"JSON",!0),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.object.assign",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.assign"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.S,"Object",{assign:require("github:zloirock/core-js@0.8.4/modules/$.assign")}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.object.is",["github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.S,"Object",{is:function(e,t){return e===t?0!==e||1/e===1/t:e!=e&&t!=t}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.object.set-prototype-of",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.set-proto"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.S,"Object",{setPrototypeOf:require("github:zloirock/core-js@0.8.4/modules/$.set-proto").set}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.object.to-string",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.cof"),s={};return s[require("github:zloirock/core-js@0.8.4/modules/$.wks")("toStringTag")]="z",i.FW&&"z"!=o(s)&&i.hide(Object.prototype,"toString",function(){return"[object "+o.classof(this)+"]"}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.object.statics-accept-primitives",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){function r(e,t){var r=(o.core.Object||{})[e]||Object[e],n=0,i={};i[e]=1==t?function(e){return a(e)?r(e):e}:2==t?function(e){return a(e)?r(e):!0}:3==t?function(e){return a(e)?r(e):!1}:4==t?function(e,t){return r(u(e),t)}:5==t?function(e){return r(Object(o.assertDefined(e)))}:function(e){return r(u(e))};try{r("z")}catch(c){n=1}s(s.S+s.F*n,"Object",i)}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=o.isObject,u=o.toObject;return r("freeze",1),r("seal",1),r("preventExtensions",1),r("isFrozen",2),r("isSealed",2),r("isExtensible",3),r("getOwnPropertyDescriptor",4),r("getPrototypeOf",5),r("keys"),r("getOwnPropertyNames"),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.function.name",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o="name",s=i.setDesc,a=Function.prototype;return o in a||i.FW&&i.DESC&&s(a,o,{configurable:!0,get:function(){var e=String(this).match(/^\s*function ([^ (]*)/),t=e?e[1]:"";return i.has(this,o)||s(this,o,i.desc(5,t)),t},set:function(e){i.has(this,o)||s(this,o,i.desc(0,e))}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.number.constructor",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){function r(e){var t,r;if(u(t=e.valueOf)&&!a(r=t.call(e)))return r;if(u(t=e.toString)&&!a(r=t.call(e)))return r;throw TypeError("Can't convert object to number")}function n(e){if(a(e)&&(e=r(e)),"string"==typeof e&&e.length>2&&48==e.charCodeAt(0)){var t=!1;switch(e.charCodeAt(1)){case 66:case 98:t=!0;case 79:case 111:return parseInt(e.slice(2),t?2:8)}}return+e}var i=this,o=i.define;i.define=void 0;var s=require("github:zloirock/core-js@0.8.4/modules/$"),a=s.isObject,u=s.isFunction,c="Number",l=s.g[c],d=l,h=l.prototype;return!s.FW||l("0o1")&&l("0b1")||(l=function p(e){return this instanceof p?new d(n(e)):n(e)},s.each.call(s.DESC?s.getNames(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),function(e){s.has(d,e)&&!s.has(l,e)&&s.setDesc(l,e,s.getDesc(d,e))}),l.prototype=h,h.constructor=l,s.hide(s.g,c,l)),i.define=o,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.number.statics",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){function r(e){return!o.isObject(e)&&c(e)&&u(e)===e}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=Math.abs,u=Math.floor,c=o.g.isFinite,l=9007199254740991;return s(s.S,"Number",{EPSILON:Math.pow(2,-52),isFinite:function(e){return"number"==typeof e&&c(e)},isInteger:r,isNaN:function(e){return e!=e},isSafeInteger:function(e){return r(e)&&a(e)<=l},MAX_SAFE_INTEGER:l,MIN_SAFE_INTEGER:-l,parseFloat:parseFloat,parseInt:parseInt}),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.math",["github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){function r(e){return e+1/y-1/y}function n(e){return 0==(e=+e)||e!=e?e:0>e?-1:1}function i(e){return isFinite(e=+e)&&0!=e?0>e?-i(-e):f(e+m(e*e+1)):e}function o(e){return 0==(e=+e)?e:e>-1e-6&&1e-6>e?e+e*e/2:p(e)-1}var s=this,a=s.define;s.define=void 0;var u=1/0,c=require("github:zloirock/core-js@0.8.4/modules/$.def"),l=Math.E,d=Math.pow,h=Math.abs,p=Math.exp,f=Math.log,m=Math.sqrt,g=Math.ceil,v=Math.floor,y=d(2,-52),b=d(2,-23),j=d(2,127)*(2-b),k=d(2,-126);return c(c.S,"Math",{acosh:function(e){return(e=+e)<1?NaN:isFinite(e)?f(e/l+m(e+1)*m(e-1)/l)+1:e},asinh:i,atanh:function(e){return 0==(e=+e)?e:f((1+e)/(1-e))/2},cbrt:function(e){return n(e=+e)*d(h(e),1/3)},clz32:function(e){return(e>>>=0)?31-v(f(e+.5)*Math.LOG2E):32},cosh:function(e){return(p(e=+e)+p(-e))/2},expm1:o,fround:function(e){var t,i,o=h(e),s=n(e);return k>o?s*r(o/k/b)*k*b:(t=(1+b/y)*o,i=t-(t-o),i>j||i!=i?s*u:s*i)},hypot:function(e,t){for(var r,n=0,i=arguments.length,o=i,s=Array(i),a=-u;i--;){if(r=s[i]=+arguments[i],r==u||r==-u)return u;r>a&&(a=r)}for(a=r||1;o--;)n+=d(s[o]/a,2);return a*m(n)},imul:function(e,t){var r=65535,n=+e,i=+t,o=r&n,s=r&i;return 0|o*s+((r&n>>>16)*s+o*(r&i>>>16)<<16>>>0)},log1p:function(e){return(e=+e)>-1e-8&&1e-8>e?e-e*e/2:f(1+e)},log10:function(e){return f(e)/Math.LN10},log2:function(e){return f(e)/Math.LN2},sign:n,sinh:function(e){return h(e=+e)<1?(o(e)-o(-e))/2:(p(e-1)-p(-e-1))*(l/2)},tanh:function(e){var t=o(e=+e),r=o(-e);return t==u?1:r==u?-1:(t-r)/(p(e)+p(-e))},trunc:function(e){return(e>0?v:g)(e)}}),s.define=a,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.from-code-point",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def"),o=require("github:zloirock/core-js@0.8.4/modules/$").toIndex,s=String.fromCharCode;return i(i.S,"String",{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,i=0;n>i;){if(t=+arguments[i++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");r.push(65536>t?s(t):s(((t-=65536)>>10)+55296,t%1024+56320))}return r.join("")}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.raw",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def");return o(o.S,"String",{raw:function(e){for(var t=i.toObject(e.raw),r=i.toLength(t.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(t[s++])),n>s&&o.push(String(arguments[s]));return o.join("")}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.iterator",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.string-at","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$").set,o=require("github:zloirock/core-js@0.8.4/modules/$.string-at")(!0),s=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("iter"),a=require("github:zloirock/core-js@0.8.4/modules/$.iter"),u=a.step;return a.std(String,"String",function(e){i(this,s,{o:String(e),i:0})},function(){var e,t=this[s],r=t.o,n=t.i;return n>=r.length?u(1):(e=o.call(r,n),t.i+=e.length,u(0,e))}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.code-point-at",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.string-at"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.P,"String",{codePointAt:require("github:zloirock/core-js@0.8.4/modules/$.string-at")(!1)}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.ends-with",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.cof"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=i.toLength;return s(s.P,"String",{endsWith:function(e){if("RegExp"==o(e))throw TypeError();var t=String(i.assertDefined(this)),r=arguments[1],n=a(t.length),s=void 0===r?n:Math.min(a(r),n);return e+="",t.slice(s-e.length,s)===e}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.includes",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.cof"),s=require("github:zloirock/core-js@0.8.4/modules/$.def");return s(s.P,"String",{includes:function(e){if("RegExp"==o(e))throw TypeError();return!!~String(i.assertDefined(this)).indexOf(e,arguments[1])}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.repeat",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def");return o(o.P,"String",{repeat:function(e){var t=String(i.assertDefined(this)),r="",n=i.toInteger(e);if(0>n||n==1/0)throw RangeError("Count can't be negative");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.string.starts-with",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.cof"),s=require("github:zloirock/core-js@0.8.4/modules/$.def");return s(s.P,"String",{startsWith:function(e){if("RegExp"==o(e))throw TypeError();var t=String(i.assertDefined(this)),r=i.toLength(Math.min(arguments[1],t.length));return e+="",t.slice(r,r+e.length)===e}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.from",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.iter","github:zloirock/core-js@0.8.4/modules/$.iter-detect"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=require("github:zloirock/core-js@0.8.4/modules/$.iter"),u=a.stepCall;return s(s.S+s.F*!require("github:zloirock/core-js@0.8.4/modules/$.iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e){var t,r,n,s,c=Object(i.assertDefined(e)),l=arguments[1],d=void 0!==l,h=d?o(l,arguments[2],2):void 0,p=0;if(a.is(c))for(s=a.get(c),r=new("function"==typeof this?this:Array);!(n=s.next()).done;p++)r[p]=d?u(s,h,[n.value,p],!0):n.value;else for(r=new("function"==typeof this?this:Array)(t=i.toLength(c.length));t>p;p++)r[p]=d?h(c[p],p):c[p];return r.length=p,r}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.of",["github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.S,"Array",{of:function(){for(var e=0,t=arguments.length,r=new("function"==typeof this?this:Array)(t);t>e;)r[e]=arguments[e++];return r.length=t,r}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.iterator",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.unscope","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.unscope"),s=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("iter"),a=require("github:zloirock/core-js@0.8.4/modules/$.iter"),u=a.step,c=a.Iterators;return a.std(Array,"Array",function(e,t){i.set(this,s,{o:i.toObject(e),i:0,k:t})},function(){var e=this[s],t=e.o,r=e.k,n=e.i++;return!t||n>=t.length?(e.o=void 0,u(1)):"key"==r?u(0,n):"value"==r?u(0,t[n]):u(0,[n,t[n]])},"value"),c.Arguments=c.Array,o("keys"),o("values"),o("entries"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.species",["github:zloirock/core-js@0.8.4/modules/$.species"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,require("github:zloirock/core-js@0.8.4/modules/$.species")(Array),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.copy-within",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=i.toIndex;return o(o.P,"Array",{copyWithin:function(e,t){var r=Object(i.assertDefined(this)),n=i.toLength(r.length),o=s(e,n),a=s(t,n),u=arguments[2],c=void 0===u?n:s(u,n),l=Math.min(c-a,n-o),d=1;for(o>a&&a+l>o&&(d=-1,a=a+l-1,o=o+l-1);l-->0;)a in r?r[o]=r[a]:delete r[o],o+=d,a+=d;return r}}),require("github:zloirock/core-js@0.8.4/modules/$.unscope")("copyWithin"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.fill",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=i.toIndex;return o(o.P,"Array",{fill:function(e){for(var t=Object(i.assertDefined(this)),r=i.toLength(t.length),n=s(arguments[1],r),o=arguments[2],a=void 0===o?r:s(o,r);a>n;)t[n++]=e;return t}}),require("github:zloirock/core-js@0.8.4/modules/$.unscope")("fill"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.find",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.array-methods","github:zloirock/core-js@0.8.4/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.P,"Array",{find:require("github:zloirock/core-js@0.8.4/modules/$.array-methods")(5)}),require("github:zloirock/core-js@0.8.4/modules/$.unscope")("find"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.array.find-index",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.array-methods","github:zloirock/core-js@0.8.4/modules/$.unscope"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.P,"Array",{findIndex:require("github:zloirock/core-js@0.8.4/modules/$.array-methods")(6)}),require("github:zloirock/core-js@0.8.4/modules/$.unscope")("findIndex"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.regexp",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.replacer","github:zloirock/core-js@0.8.4/modules/$.species"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.cof"),s=i.g.RegExp,a=s,u=s.prototype;return i.FW&&i.DESC&&(function(){try{return"/a/i"==s(/a/g,"i")}catch(e){}}()||(s=function(e,t){return new a("RegExp"==o(e)&&void 0!==t?e.source:e,t)},i.each.call(i.getNames(a),function(e){e in s||i.setDesc(s,e,{configurable:!0,get:function(){return a[e]},set:function(t){a[e]=t}})}),u.constructor=s,s.prototype=u,i.hide(i.g,"RegExp",s)),"g"!=/./g.flags&&i.setDesc(u,"flags",{configurable:!0,get:require("github:zloirock/core-js@0.8.4/modules/$.replacer")(/^.*\/(\w*)$/,"$1")})),require("github:zloirock/core-js@0.8.4/modules/$.species")(s),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.promise",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.iter","github:zloirock/core-js@0.8.4/modules/$.wks","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.task","github:zloirock/core-js@0.8.4/modules/$.species","github:zloirock/core-js@0.8.4/modules/$.iter-detect"],!0,function(require,e,t){function r(e){var t=O(e)[v];return void 0!=t?t:e}function n(e){var t;return z(e)&&(t=e.then),S(t)?t:!1}function i(e){var t,r=e[y],n=r.c,o=0;if(r.h)return!1;for(;n.length>o;)if(t=n[o++],t.fail||!i(t.P))return!1;return!0}function o(e,t){var r=e.c;(t||r.length)&&w(function(){var o=e.p,s=e.v,a=1==e.s,c=0;if(t&&i(o))setTimeout(function(){i(o)&&("process"==p(k)?k.emit("unhandledRejection",s,o):u.console&&S(console.error)&&console.error("Unhandled promise rejection",s))},1e3);else for(;r.length>c;)!function(t){var r,i,o=a?t.ok:t.fail;try{o?(a||(e.h=!0),r=o===!0?s:o(s),r===t.P?t.rej(TypeError(j+"-chain cycle")):(i=n(r))?i.call(r,t.res,t.rej):t.res(r)):t.rej(s)}catch(u){t.rej(u)}}(r[c++]);r.length=0})}function s(e){var t=this;t.d||(t.d=!0,t=t.r||t,t.v=e,t.s=2,o(t,!0))}function a(e){var t,r,i=this;if(!i.d){i.d=!0,i=i.r||i;try{(t=n(e))?(r={r:i,d:!1},t.call(e,h(a,r,1),h(s,r,1))):(i.v=e,i.s=1,o(i))}catch(u){s.call(r||{r:i,d:!1},u)}}}var u=this,c=u.define;u.define=void 0;var l,d=require("github:zloirock/core-js@0.8.4/modules/$"),h=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),p=require("github:zloirock/core-js@0.8.4/modules/$.cof"),f=require("github:zloirock/core-js@0.8.4/modules/$.def"),m=require("github:zloirock/core-js@0.8.4/modules/$.assert"),g=require("github:zloirock/core-js@0.8.4/modules/$.iter"),v=require("github:zloirock/core-js@0.8.4/modules/$.wks")("species"),y=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("record"),b=g.forOf,j="Promise",u=d.g,k=u.process,w=k&&k.nextTick||require("github:zloirock/core-js@0.8.4/modules/$.task").set,x=u[j],$=x,S=d.isFunction,z=d.isObject,C=m.fn,O=m.obj;return S(x)&&S(x.resolve)&&x.resolve(l=new x(function(){}))==l||(x=function(e){C(e);var t={p:m.inst(this,x,j),c:[],s:0,d:!1,v:void 0,h:!1};d.hide(this,y,t);try{e(h(a,t,1),h(s,t,1))}catch(r){s.call(t,r)}},d.mix(x.prototype,{then:function(e,t){var r=O(O(this).constructor)[v],n={ok:S(e)?e:!0,fail:S(t)?t:!1},i=n.P=new(void 0!=r?r:x)(function(e,t){n.res=C(e),n.rej=C(t)}),s=this[y];return s.c.push(n),s.s&&o(s),i},"catch":function(e){return this.then(void 0,e)}})),f(f.G+f.W+f.F*(x!=$),{Promise:x}),p.set(x,j),require("github:zloirock/core-js@0.8.4/modules/$.species")(x),f(f.S,j,{reject:function(e){return new(r(this))(function(t,r){r(e)})},resolve:function(e){return z(e)&&y in e&&d.getProto(e)===this.prototype?e:new(r(this))(function(t){t(e)})}}),f(f.S+f.F*!require("github:zloirock/core-js@0.8.4/modules/$.iter-detect")(function(e){x.all(e)["catch"](function(){})}),j,{all:function(e){var t=r(this),n=[];return new t(function(r,i){b(e,!1,n.push,n);var o=n.length,s=Array(o);o?d.each.call(n,function(e,n){t.resolve(e).then(function(e){s[n]=e,--o||r(s)},i)}):r(s)})},race:function(e){var t=r(this);return new t(function(r,n){b(e,!1,function(e){t.resolve(e).then(r,n)})})}}),u.define=c,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.map",["github:zloirock/core-js@0.8.4/modules/$.collection-strong","github:zloirock/core-js@0.8.4/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.collection-strong");return require("github:zloirock/core-js@0.8.4/modules/$.collection")("Map",{get:function(e){var t=i.getEntry(this,e);return t&&t.v},set:function(e,t){return i.def(this,0===e?0:e,t)}},i,!0),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.set",["github:zloirock/core-js@0.8.4/modules/$.collection-strong","github:zloirock/core-js@0.8.4/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.collection-strong");return require("github:zloirock/core-js@0.8.4/modules/$.collection")("Set",{add:function(e){return i.def(this,e=0===e?0:e,e)}},i),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.weak-map",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.collection-weak","github:zloirock/core-js@0.8.4/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.collection-weak"),s=o.leakStore,a=o.ID,u=o.WEAK,c=i.has,l=i.isObject,d=Object.isFrozen||i.core.Object.isFrozen,h={},p=require("github:zloirock/core-js@0.8.4/modules/$.collection")("WeakMap",{get:function(e){if(l(e)){if(d(e))return s(this).get(e);if(c(e,u))return e[u][this[a]]}},set:function(e,t){return o.def(this,e,t)}},o,!0,!0);return i.FW&&7!=(new p).set((Object.freeze||Object)(h),7).get(h)&&i.each.call(["delete","has","get","set"],function(e){var t=p.prototype[e];p.prototype[e]=function(r,n){if(l(r)&&d(r)){var i=s(this)[e](r,n);return"set"==e?this:i}return t.call(this,r,n)}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.weak-set",["github:zloirock/core-js@0.8.4/modules/$.collection-weak","github:zloirock/core-js@0.8.4/modules/$.collection"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.collection-weak");return require("github:zloirock/core-js@0.8.4/modules/$.collection")("WeakSet",{add:function(e){return i.def(this,e,!0)}},i,!1,!0),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es6.reflect",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.set-proto","github:zloirock/core-js@0.8.4/modules/$.iter","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.own-keys"],!0,function(require,e,t){function r(e){var t,r=[];for(t in e)r.push(t);u.set(this,h,{o:e,a:r,i:0})}function n(e){return function(t){j(t);try{return e.apply(void 0,arguments),!0}catch(r){return!1}}}function i(e,t){var r,n=arguments.length<3?e:arguments[2],o=g(j(e),t);return o?u.has(o,"value")?o.value:void 0===o.get?void 0:o.get.call(n):m(r=y(e))?i(r,t,n):void 0}function o(e,t,r){var n,i,s=arguments.length<4?e:arguments[3],a=g(j(e),t);if(!a){if(m(i=y(e)))return o(i,t,r,s);a=u.desc(0)}return u.has(a,"value")?a.writable!==!1&&m(s)?(n=g(s,t)||u.desc(0),n.value=r,v(s,t,n),!0):!1:void 0===a.set?!1:(a.set.call(s,r),!0)}var s=this,a=s.define;s.define=void 0;var u=require("github:zloirock/core-js@0.8.4/modules/$"),c=require("github:zloirock/core-js@0.8.4/modules/$.def"),l=require("github:zloirock/core-js@0.8.4/modules/$.set-proto"),d=require("github:zloirock/core-js@0.8.4/modules/$.iter"),h=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("iter"),p=d.step,f=require("github:zloirock/core-js@0.8.4/modules/$.assert"),m=u.isObject,g=u.getDesc,v=u.setDesc,y=u.getProto,b=Function.apply,j=f.obj,k=Object.isExtensible||u.it;d.create(r,"Object",function(){var e,t=this[h],r=t.a;do if(t.i>=r.length)return p(1);while(!((e=r[t.i++])in t.o));return p(0,e)});var w={apply:require("github:zloirock/core-js@0.8.4/modules/$.ctx")(Function.call,b,3),construct:function(e,t){var r=f.fn(arguments.length<3?e:arguments[2]).prototype,n=u.create(m(r)?r:Object.prototype),i=b.call(e,n,t);return m(i)?i:n},defineProperty:n(v),deleteProperty:function(e,t){var r=g(j(e),t);return r&&!r.configurable?!1:delete e[t]},enumerate:function(e){return new r(j(e))},get:i,getOwnPropertyDescriptor:function(e,t){return g(j(e),t)},getPrototypeOf:function(e){return y(j(e))},has:function(e,t){return t in e},isExtensible:function(e){return!!k(j(e))},ownKeys:require("github:zloirock/core-js@0.8.4/modules/$.own-keys"),preventExtensions:n(Object.preventExtensions||u.it),set:o};return l&&(w.setPrototypeOf=function(e,t){l.check(e,t);try{return l.set(e,t),!0}catch(r){return!1}}),c(c.G,{Reflect:{}}),c(c.S,"Reflect",w),s.define=a,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es7.array.includes",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.array-includes","github:zloirock/core-js@0.8.4/modules/$.unscope"],!0,function(require,e,t){
var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.P,"Array",{includes:require("github:zloirock/core-js@0.8.4/modules/$.array-includes")(!0)}),require("github:zloirock/core-js@0.8.4/modules/$.unscope")("includes"),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es7.string.at",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.string-at"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.P,"String",{at:require("github:zloirock/core-js@0.8.4/modules/$.string-at")(!0)}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es7.regexp.escape",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.replacer"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def");return i(i.S,"RegExp",{escape:require("github:zloirock/core-js@0.8.4/modules/$.replacer")(/([\\\-[\]{}()*+?.,^$|])/g,"\\$1",!0)}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es7.object.get-own-property-descriptors",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.own-keys"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=require("github:zloirock/core-js@0.8.4/modules/$.own-keys");return o(o.S,"Object",{getOwnPropertyDescriptors:function(e){var t=i.toObject(e),r={};return i.each.call(s(t),function(e){i.setDesc(r,e,i.desc(0,i.getDesc(t,e)))}),r}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es7.object.to-array",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def"],!0,function(require,e,t){function r(e){return function(t){var r,n=o.toObject(t),i=o.getKeys(n),s=i.length,a=0,u=Array(s);if(e)for(;s>a;)u[a]=[r=i[a++],n[r]];else for(;s>a;)u[a]=n[i[a++]];return u}}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.def");return s(s.S,"Object",{values:r(!1),entries:r(!0)}),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/es7.set.to-json",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def"),o=require("github:zloirock/core-js@0.8.4/modules/$.iter").forOf;return i(i.P,"Set",{toJSON:function(){var e=[];return o(this,!1,e.push,e),e}}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/js.array.statics",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.ctx"],!0,function(require,e,t){function r(e,t){o.each.call(e.split(","),function(e){void 0==t&&e in a?u[e]=a[e]:e in[]&&(u[e]=require("github:zloirock/core-js@0.8.4/modules/$.ctx")(Function.call,[][e],t))})}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=o.core.Array||Array,u={};return r("pop,reverse,shift,keys,values,entries",1),r("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),r("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill,turn"),s(s.S,"Array",u),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/web.timers",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.invoke","github:zloirock/core-js@0.8.4/modules/$.partial"],!0,function(require,e,t){function r(e){return l?function(t,r){return e(a(u,[].slice.call(arguments,2),o.isFunction(t)?t:Function(t)),r)}:e}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.def"),a=require("github:zloirock/core-js@0.8.4/modules/$.invoke"),u=require("github:zloirock/core-js@0.8.4/modules/$.partial"),c=o.g.navigator,l=!!c&&/MSIE .\./.test(c.userAgent);return s(s.G+s.B+s.F*l,{setTimeout:r(o.g.setTimeout),setInterval:r(o.g.setInterval)}),n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/web.immediate",["github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.task"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.def"),o=require("github:zloirock/core-js@0.8.4/modules/$.task");return i(i.G+i.B,{setImmediate:o.set,clearImmediate:o.clear}),r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/web.dom.iterable",["github:zloirock/core-js@0.8.4/modules/es6.array.iterator","github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.iter","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0,require("github:zloirock/core-js@0.8.4/modules/es6.array.iterator");var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.iter").Iterators,s=require("github:zloirock/core-js@0.8.4/modules/$.wks")("iterator"),a=o.Array,u=i.g.NodeList;return!i.FW||!u||s in u.prototype||i.hide(u.prototype,s,a),o.NodeList=a,r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.ctx",["github:zloirock/core-js@0.8.4/modules/$.assert"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.assert").fn;return t.exports=function(e,t,r){if(i(e),~r&&void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)}}return function(){return e.apply(t,arguments)}},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.def",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){function r(e,t){return function(){return e.apply(t,arguments)}}function n(e,t,o){var c,l,d,h,p=e&n.G,f=p?i:e&n.S?i[t]:(i[t]||{}).prototype,m=p?a:a[t]||(a[t]={});p&&(o=t);for(c in o)l=!(e&n.F)&&f&&c in f,d=(l?f:o)[c],h=e&n.B&&l?r(d,i):e&n.P&&u(d)?r(Function.call,d):d,f&&!l&&(p?f[c]=d:delete f[c]&&s.hide(f,c,d)),m[c]!=d&&s.hide(m,c,h)}var i=this,o=i.define;i.define=void 0;var s=require("github:zloirock/core-js@0.8.4/modules/$"),i=s.g,a=s.core,u=s.isFunction;return i.core=a,n.F=1,n.G=2,n.S=4,n.P=8,n.B=16,n.W=32,t.exports=n,i.define=o,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.assign",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$");return t.exports=Object.assign||function(e,t){for(var r=Object(i.assertDefined(e)),n=arguments.length,o=1;n>o;)for(var s,a=i.ES5Object(arguments[o++]),u=i.getKeys(a),c=u.length,l=0;c>l;)r[s=u[l++]]=a[s];return r},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.keyof",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$");return t.exports=function(e,t){for(var r,n=i.toObject(e),o=i.getKeys(n),s=o.length,a=0;s>a;)if(n[r=o[a++]]===t)return r},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.uid",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){function r(e){return"Symbol("+e+")_"+(++o+Math.random()).toString(36)}var n=this,i=n.define;n.define=void 0;var o=0;return r.safe=require("github:zloirock/core-js@0.8.4/modules/$").g.Symbol||r,t.exports=r,n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.assert",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){function r(e,t,r){if(!e)throw TypeError(r?t+r:t)}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$");return r.def=o.assertDefined,r.fn=function(e){if(!o.isFunction(e))throw TypeError(e+" is not a function!");return e},r.obj=function(e){if(!o.isObject(e))throw TypeError(e+" is not an object!");return e},r.inst=function(e,t,r){if(!(e instanceof t))throw TypeError(r+": use the 'new' operator!");return e},t.exports=r,n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.iter",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){function r(e,t){c.hide(e,f,t),m in[]&&c.hide(e,m,t)}function n(e,t,n,i){var o=e.prototype,s=o[f]||o[m]||i&&o[i]||n;if(c.FW&&r(o,s),s!==n){var a=c.getProto(s.call(new e));d.set(a,t+" Iterator",!0),c.FW&&c.has(o,m)&&r(a,c.that)}return g[t]=s,g[t+" Iterator"]=c.that,s}function i(e){var t=c.g.Symbol,r=e[t&&t.iterator||m],n=r||e[f]||g[d.classof(e)];return p(n.call(e))}function o(e){var t=e["return"];void 0!==t&&p(t.call(e))}function s(e,t,r,n){try{return n?t(p(r)[0],r[1]):t(r)}catch(i){throw o(e),i}}var a=this,u=a.define;a.define=void 0;var c=require("github:zloirock/core-js@0.8.4/modules/$"),l=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),d=require("github:zloirock/core-js@0.8.4/modules/$.cof"),h=require("github:zloirock/core-js@0.8.4/modules/$.def"),p=require("github:zloirock/core-js@0.8.4/modules/$.assert").obj,f=require("github:zloirock/core-js@0.8.4/modules/$.wks")("iterator"),m="@@iterator",g={},v={},y="keys"in[]&&!("next"in[].keys());r(v,c.that);var b=t.exports={BUGGY:y,Iterators:g,prototype:v,step:function(e,t){return{value:t,done:!!e}},stepCall:s,close:o,is:function(e){var t=Object(e),r=c.g.Symbol,n=r&&r.iterator||m;return n in t||f in t||c.has(g,d.classof(t))},get:i,set:r,create:function(e,t,r,n){e.prototype=c.create(n||b.prototype,{next:c.desc(1,r)}),d.set(e,t+" Iterator")},define:n,std:function(e,t,r,i,o,s,a){function u(e){return function(){return new r(this,e)}}b.create(r,t,i);var l,d,p=u("key+value"),f=u("value"),m=e.prototype;if("value"==o?f=n(e,t,f,"values"):p=n(e,t,p,"entries"),o&&(l={entries:p,keys:s?f:u("key"),values:f},h(h.P+h.F*y,t,l),a))for(d in l)d in m||c.hide(m,d,l[d])},forOf:function(e,t,r,n){for(var a,u=i(e),c=l(r,n,t?2:1);!(a=u.next()).done;)if(s(u,c,a.value,t)===!1)return o(u)}};return a.define=u,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.partial",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.invoke","github:zloirock/core-js@0.8.4/modules/$.assert"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.invoke"),s=require("github:zloirock/core-js@0.8.4/modules/$.assert").fn;return t.exports=function(){for(var e=s(this),t=arguments.length,r=Array(t),n=0,a=i.path._,u=!1;t>n;)(r[n]=arguments[n++])===a&&(u=!0);return function(){var n,i=this,s=arguments.length,c=0,l=0;if(!u&&!s)return o(e,r,i);if(n=r.slice(),u)for(;t>c;c++)n[c]===a&&(n[c]=arguments[l++]);for(;s>l;)n.push(arguments[l++]);return o(e,n,i)}},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.invoke",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3]);case 5:return n?e(t[0],t[1],t[2],t[3],t[4]):e.call(r,t[0],t[1],t[2],t[3],t[4])}return e.apply(r,t)},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.own-keys",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.assert"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.assert").obj;return t.exports=function(e){return o(e),i.getSymbols?i.getNames(e).concat(i.getSymbols(e)):i.getNames(e)},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.cof",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){function r(e){return a.call(e).slice(8,-1)}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.wks")("toStringTag"),a={}.toString;return r.classof=function(e){var t,n;return void 0==e?void 0===e?"Undefined":"Null":"string"==typeof(n=(t=Object(e))[s])?n:r(t)},r.set=function(e,t,r){e&&!o.has(e=r?e:e.prototype,s)&&o.hide(e,s,t)},t.exports=r,n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.unscope",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.wks")("unscopables");return!i.FW||o in[]||i.hide(Array.prototype,o,{}),t.exports=function(e){i.FW&&([][o][e]=!0)},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.replacer",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e,t,r){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(r?t:this).replace(e,n)}},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.fw",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e){return e.FW=!0,e.path=e.g,e},r.define=n,t.exports}),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/path-observer",["exports","github:aurelia/binding@0.9.1"],function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var n=function(){function e(t,n,i){r(this,e),this.observerLocator=t,this.path=i.split("."),this.subject=n,this.observers=[],this.callbacks=[],this.path.length>1&&this.observeParts()}return e.prototype.observeParts=function(e){var t=this;if(void 0!==e&&null!==e)for(var r=this.observers.length-1;r>=0;r--){var n=this.observers[r];if(n.propertyName===e)break;var i=this.observers.pop();i&&i.subscription&&i.subscription()}for(var o=this.subject,s=this.observers.length===this.path.length,a=function(e){var r=t.observers[e];if(!r){var n=t.path[e];r=t.observerLocator.getObserver(o,n),t.observers.push(r);var i=r.subscribe(function(e,n){t.observeParts(r.propertyName)});r.subscription=i}var s=r.getValue();return void 0===s||null===s?"break":void(o=s)},r=0;r<this.path.length;r++){var u=a(r);if("break"===u)break}if(!s&&this.observers.length===this.path.length)for(var c=this.observers[this.observers.length-1],r=0;r<this.callbacks.length;r++)c.subscribe(this.callbacks[r])},e.prototype.observePart=function(e){e!==this.path[this.path.length-1]&&this.observeParts()},e.prototype.getObserver=function(){if(1==this.path.length){this.subject[this.path[0]];return this.observerLocator.getObserver(this.subject,this.path[0])}return this},e.prototype.getValue=function(){for(var e=this.subject,t=0;this.path.length;t++){var r=this.observers[t];if((null===r||void 0===r)&&(this.observeParts(this.path[t]),r=this.observers[t],null===r||void 0===r))break;if(r.obj!==e){this.observeParts(this.path[t-1]);break}e=r.getValue()}if(this.observers.length!==this.path.length)return void 0;var n=this.observers[this.observers.length-1].getValue();return n},e.prototype.subscribe=function(e){var t=this;return this.callbacks.unshift(e),this.observers.length===this.path.length?(this.subscription=this.observers[this.observers.length-1].subscribe(e),function(){return t.unsubscribe()}):void 0},e.prototype.unsubscribe=function(){this.callbacks=[],this.subscription&&this.subscription();for(var e=this.observers.length-1;e>=0;e--){var t=this.observers.pop();t&&t.subscription&&t.subscription()}},e}();e.PathObserver=n}),e()}(),function(){var e=System.get("@@amd-helpers").createDefine();define("github:aurelia/validation@0.3.0/validation/debouncer",["exports"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var r=function(){function e(r){t(this,e),this.currentFunction=null,this.debounceTimeout=r}return e.prototype.debounce=function(e){var t=this;this.currentFunction=e,setTimeout(function(){null!==e&&void 0!==e&&e===t.currentFunction&&(t.currentFunction=null,e())},this.debounceTimeout)},e}();e.Debouncer=r}),e()}(),System.registerDynamic("github:jspm/nodelibs-process@0.1.1",["github:jspm/nodelibs-process@0.1.1/index"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=require("github:jspm/nodelibs-process@0.1.1/index"),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.dom-create",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=i.g.document,s=i.isObject,a=s(o)&&s(o.createElement);return t.exports=function(e){return a?o.createElement(e):{}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.array-methods",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.ctx");return t.exports=function(e){var t=1==e,r=2==e,n=3==e,s=4==e,a=6==e,u=5==e||a;return function(c,l,d){for(var h,p,f=Object(i.assertDefined(c)),m=i.ES5Object(f),g=o(l,d,3),v=i.toLength(m.length),y=0,b=t?Array(v):r?[]:void 0;v>y;y++)if((u||y in m)&&(h=m[y],p=g(h,y,f),e))if(t)b[y]=p;else if(p)switch(e){case 3:return!0;case 5:return h;case 6:return y;case 2:b.push(h)}else if(s)return!1;return a?-1:n||s?s:b}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.array-includes",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$");return t.exports=function(e){return function(t,r,n){var o,s=i.toObject(t),a=i.toLength(s.length),u=i.toIndex(n,a);if(e&&r!=r){for(;a>u;)if(o=s[u++],o!=o)return!0}else for(;a>u;u++)if((e||u in s)&&s[u]===r)return e||u;return!e&&-1}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.throws",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=function(e){try{return e(),!1}catch(t){return!0}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.shared",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o="__core-js_shared__",s=i.g[o]||(i.g[o]={});return t.exports=function(e){return s[e]||(s[e]={})},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.redef",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.uid"],!0,function(require,e,t){function r(e,t,r,n){if(o.isFunction(r)){var i=e[t];o.hide(r,a,i?String(i):s.replace(/hasOwnProperty/,String(t))),"name"in r||(r.name=t)}e===o.g?e[t]=r:(n||delete e[t],o.hide(e,t,r))}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=String({}.hasOwnProperty),a=require("npm:core-js@0.9.18/modules/$.uid").safe("src"),u=Function.toString;return r(Function.prototype,"toString",function(){return o.has(this,a)?this[a]:u.call(this)}),o.core.inspectSource=function(e){return u.call(e)},t.exports=r,n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.enum-keys",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$");return t.exports=function(e){var t=i.getKeys(e),r=i.getDesc,n=i.getSymbols;return n&&i.each.call(n(e),function(n){r(e,n).enumerable&&t.push(n)}),t},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.get-names",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){function r(e){try{return a(e)}catch(t){return u.slice()}}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s={}.toString,a=o.getNames,u="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];return t.exports.get=function(e){return u&&"[object Window]"==s.call(e)?r(e):a(o.toObject(e))},n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.wks",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.shared","npm:core-js@0.9.18/modules/$.uid"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var r=require("npm:core-js@0.9.18/modules/$").g,i=require("npm:core-js@0.9.18/modules/$.shared")("wks");return t.exports=function(e){return i[e]||(i[e]=r.Symbol&&r.Symbol[e]||require("npm:core-js@0.9.18/modules/$.uid").safe("Symbol."+e))},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.same",[],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=Object.is||function(e,t){return e===t?0!==e||1/e===1/t:e!=e&&t!=t},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.set-proto",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.ctx"],!0,function(require,e,t){function r(e,t){s.obj(e),s(null===t||o.isObject(t),t,": can't set as prototype!")}var n=this,i=n.define;n.define=void 0;var o=require("npm:core-js@0.9.18/modules/$"),s=require("npm:core-js@0.9.18/modules/$.assert");return t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t){try{t=require("npm:core-js@0.9.18/modules/$.ctx")(Function.call,o.getDesc(Object.prototype,"__proto__").set,2),t({},[])}catch(n){e=!0}return function(n,i){return r(n,i),e?n.__proto__=i:t(n,i),n}}():void 0),check:r},n.define=i,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.string-at",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$");return t.exports=function(e){return function(t,r){var n,o,s=String(i.assertDefined(t)),a=i.toInteger(r),u=s.length;return 0>a||a>=u?e?"":void 0:(n=s.charCodeAt(a),55296>n||n>56319||a+1===u||(o=s.charCodeAt(a+1))<56320||o>57343?e?s.charAt(a):n:e?s.slice(a,a+2):(n-55296<<10)+(o-56320)+65536)}},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.string-repeat",["npm:core-js@0.9.18/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$");return t.exports=function(e){var t=String(i.assertDefined(this)),r="",n=i.toInteger(e);if(0>n||n==1/0)throw RangeError("Count can't be negative");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.iter-detect",["npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.wks")("iterator"),o=!1;try{var s=[7][i]();s["return"]=function(){o=!0},Array.from(s,function(){throw 2})}catch(a){}return t.exports=function(e){if(!o)return!1;var t=!1;try{var r=[7],n=r[i]();n.next=function(){t=!0},r[i]=function(){return n},e(r)}catch(s){}return t},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.species",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.wks")("species");return t.exports=function(e){!i.DESC||o in e||i.setDesc(e,o,{configurable:!0,get:i.that})},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.task",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.cof","npm:core-js@0.9.18/modules/$.invoke","npm:core-js@0.9.18/modules/$.dom-create","github:jspm/nodelibs-process@0.1.1"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,function(e){"use strict";function r(){var e=+this;if(a.has(b,e)){var t=b[e];delete b[e],t()}}function n(e){r.call(e.data)}var i,o,s,a=require("npm:core-js@0.9.18/modules/$"),u=require("npm:core-js@0.9.18/modules/$.ctx"),c=require("npm:core-js@0.9.18/modules/$.cof"),l=require("npm:core-js@0.9.18/modules/$.invoke"),d=require("npm:core-js@0.9.18/modules/$.dom-create"),h=a.g,p=a.isFunction,f=a.html,e=h.process,m=h.setImmediate,g=h.clearImmediate,v=h.MessageChannel,y=0,b={},j="onreadystatechange";p(m)&&p(g)||(m=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return b[++y]=function(){l(p(e)?e:Function(e),t)},i(y),y},g=function(e){delete b[e]},"process"==c(e)?i=function(t){e.nextTick(u(r,t,1))}:h.addEventListener&&p(h.postMessage)&&!h.importScripts?(i=function(e){h.postMessage(e,"*")},h.addEventListener("message",n,!1)):p(v)?(o=new v,s=o.port2,o.port1.onmessage=n,i=u(s.postMessage,s,1)):i=j in d("script")?function(e){f.appendChild(d("script"))[j]=function(){f.removeChild(this),r.call(e)}}:function(e){setTimeout(u(r,e,1),0)}),t.exports={set:m,clear:g}}(require("github:jspm/nodelibs-process@0.1.1")),r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.collection-strong",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.ctx","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.for-of","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.mix","npm:core-js@0.9.18/modules/$.iter-define"],!0,function(require,e,t){function r(e,t){if(!f(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!h(e,v)){if(!g(e))return"F";if(!t)return"E";m(e,v,++x)}return"O"+e[v]}function n(e,t){var n,i=r(t);if("F"!==i)return e[y][i];for(n=e[j];n;n=n.n)if(n.k==t)return n}var i=this,o=i.define;i.define=void 0;var s=require("npm:core-js@0.9.18/modules/$"),a=require("npm:core-js@0.9.18/modules/$.ctx"),u=require("npm:core-js@0.9.18/modules/$.uid").safe,c=require("npm:core-js@0.9.18/modules/$.assert"),l=require("npm:core-js@0.9.18/modules/$.for-of"),d=require("npm:core-js@0.9.18/modules/$.iter").step,h=s.has,p=s.set,f=s.isObject,m=s.hide,g=Object.isExtensible||f,v=u("id"),y=u("O1"),b=u("last"),j=u("first"),k=u("iter"),w=s.DESC?u("size"):"size",x=0;return t.exports={getConstructor:function(e,t,r,i){var o=e(function(e,n){c.inst(e,o,t),p(e,y,s.create(null)),p(e,w,0),p(e,b,void 0),p(e,j,void 0),void 0!=n&&l(n,r,e[i],e)});return require("npm:core-js@0.9.18/modules/$.mix")(o.prototype,{clear:function(){for(var e=this,t=e[y],r=e[j];r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete t[r.i];e[j]=e[b]=void 0,e[w]=0},"delete":function(e){var t=this,r=n(t,e);if(r){var i=r.n,o=r.p;delete t[y][r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),t[j]==r&&(t[j]=i),t[b]==r&&(t[b]=o),t[w]--}return!!r},forEach:function(e){for(var t,r=a(e,arguments[1],3);t=t?t.n:this[j];)for(r(t.v,t.k,this);t&&t.r;)t=t.p},has:function(e){return!!n(this,e)}}),s.DESC&&s.setDesc(o.prototype,"size",{get:function(){return c.def(this[w])}}),o},def:function(e,t,i){var o,s,a=n(e,t);return a?a.v=i:(e[b]=a={i:s=r(t,!0),k:t,v:i,p:o=e[b],n:void 0,r:!1},e[j]||(e[j]=a),o&&(o.n=a),e[w]++,"F"!==s&&(e[y][s]=a)),e},getEntry:n,setIter:function(e,t,r){require("npm:core-js@0.9.18/modules/$.iter-define")(e,t,function(e,t){p(this,k,{o:e,k:t})},function(){for(var e=this[k],t=e.k,r=e.l;r&&r.r;)r=r.p;return e.o&&(e.l=r=r?r.n:e.o[j])?"keys"==t?d(0,r.k):"values"==t?d(0,r.v):d(0,[r.k,r.v]):(e.o=void 0,d(1))},r?"entries":"values",!r,!0)}},i.define=o,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.collection",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.iter","npm:core-js@0.9.18/modules/$.for-of","npm:core-js@0.9.18/modules/$.species","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.redef","npm:core-js@0.9.18/modules/$.mix","npm:core-js@0.9.18/modules/$.iter-detect","npm:core-js@0.9.18/modules/$.cof"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.def"),s=require("npm:core-js@0.9.18/modules/$.iter").BUGGY,a=require("npm:core-js@0.9.18/modules/$.for-of"),u=require("npm:core-js@0.9.18/modules/$.species"),c=require("npm:core-js@0.9.18/modules/$.assert").inst;return t.exports=function(e,t,r,n,l,d){function h(e){var t=g[e];require("npm:core-js@0.9.18/modules/$.redef")(g,e,"delete"==e?function(e){return t.call(this,0===e?0:e)}:"has"==e?function(e){return t.call(this,0===e?0:e)}:"get"==e?function(e){return t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,r){return t.call(this,0===e?0:e,r),this})}var p=i.g[e],f=p,m=l?"set":"add",g=f&&f.prototype,v={};if(i.isFunction(f)&&(d||!s&&g.forEach&&g.entries)){var y,b=new f,j=b[m](d?{}:-0,1);require("npm:core-js@0.9.18/modules/$.iter-detect")(function(e){new f(e)})||(f=t(function(t,r){c(t,f,e);var n=new p;return void 0!=r&&a(r,l,n[m],n),n}),f.prototype=g,g.constructor=f),d||b.forEach(function(e,t){y=1/t===-(1/0)}),y&&(h("delete"),h("has"),l&&h("get")),(y||j!==b)&&h(m)}else f=n.getConstructor(t,e,l,m),require("npm:core-js@0.9.18/modules/$.mix")(f.prototype,r);return require("npm:core-js@0.9.18/modules/$.cof").set(f,e),v[e]=f,o(o.G+o.W+o.F*(f!=p),v),u(f),u(i.core[e]),d||n.setIter(f,e,l),f},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.collection-weak",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.uid","npm:core-js@0.9.18/modules/$.assert","npm:core-js@0.9.18/modules/$.for-of","npm:core-js@0.9.18/modules/$.array-methods","npm:core-js@0.9.18/modules/$.mix"],!0,function(require,e,t){function r(e,t){return b(e.array,function(e){return e[0]===t})}function n(e){return e[v]||h(e,v,{array:[],get:function(e){var t=r(this,e);return t?t[1]:void 0},has:function(e){return!!r(this,e)},set:function(e,t){var n=r(this,e);n?n[1]=t:this.array.push([e,t])},"delete":function(e){var t=j(this.array,function(t){return t[0]===e});return~t&&this.array.splice(t,1),!!~t}})[v]}var i=this,o=i.define;i.define=void 0;var s=require("npm:core-js@0.9.18/modules/$"),a=require("npm:core-js@0.9.18/modules/$.uid").safe,u=require("npm:core-js@0.9.18/modules/$.assert"),c=require("npm:core-js@0.9.18/modules/$.for-of"),l=s.has,d=s.isObject,h=s.hide,p=Object.isExtensible||d,f=0,m=a("id"),g=a("weak"),v=a("leak"),y=require("npm:core-js@0.9.18/modules/$.array-methods"),b=y(5),j=y(6);return t.exports={getConstructor:function(e,t,r,i){var o=e(function(e,n){s.set(u.inst(e,o,t),m,f++),void 0!=n&&c(n,r,e[i],e)});return require("npm:core-js@0.9.18/modules/$.mix")(o.prototype,{"delete":function(e){return d(e)?p(e)?l(e,g)&&l(e[g],this[m])&&delete e[g][this[m]]:n(this)["delete"](e):!1},has:function(e){return d(e)?p(e)?l(e,g)&&l(e[g],this[m]):n(this).has(e):!1}}),o},def:function(e,t,r){return p(u.obj(t))?(l(t,g)||h(t,g,{}),t[g][e[m]]=r):n(e).set(t,r),e},leakStore:n,WEAK:g,ID:m},i.define=o,t.exports;
}),System.registerDynamic("npm:core-js@0.9.18/modules/$.string-pad",["npm:core-js@0.9.18/modules/$","npm:core-js@0.9.18/modules/$.string-repeat"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$"),o=require("npm:core-js@0.9.18/modules/$.string-repeat");return t.exports=function(e,t,r,n){var s=String(i.assertDefined(e));if(void 0===t)return s;var a=i.toInteger(t),u=a-s.length;if(0>u||u===1/0)throw new RangeError("Cannot satisfy string length "+t+" for string: "+s);var c=void 0===r?" ":String(r),l=o.call(c,Math.ceil(u/c.length));return l.length>u&&(l=n?l.slice(l.length-u):l.slice(0,u)),n?l.concat(s):s.concat(l)},r.define=n,t.exports}),System.registerDynamic("npm:core-js@0.9.18/modules/$.collection-to-json",["npm:core-js@0.9.18/modules/$.def","npm:core-js@0.9.18/modules/$.for-of"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("npm:core-js@0.9.18/modules/$.def"),o=require("npm:core-js@0.9.18/modules/$.for-of");return t.exports=function(e){i(i.P,e,{toJSON:function(){var e=[];return o(this,!1,e.push,e),e}})},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.array-methods",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.ctx");return t.exports=function(e){var t=1==e,r=2==e,n=3==e,s=4==e,a=6==e,u=5==e||a;return function(c){for(var l,d,h=Object(i.assertDefined(this)),p=i.ES5Object(h),f=o(c,arguments[1],3),m=i.toLength(p.length),g=0,v=t?Array(m):r?[]:void 0;m>g;g++)if((u||g in p)&&(l=p[g],d=f(l,g,h),e))if(t)v[g]=d;else if(d)switch(e){case 3:return!0;case 5:return l;case 6:return g;case 2:v.push(l)}else if(s)return!1;return a?-1:n||s?s:v}},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.array-includes",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$");return t.exports=function(e){return function(t){var r,n=i.toObject(this),o=i.toLength(n.length),s=i.toIndex(arguments[1],o);if(e&&t!=t){for(;o>s;)if(r=n[s++],r!=r)return!0}else for(;o>s;s++)if((e||s in n)&&n[s]===t)return e||s;return!e&&-1}},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.wks",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.uid"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var r=require("github:zloirock/core-js@0.8.4/modules/$").g,i={};return t.exports=function(e){return i[e]||(i[e]=r.Symbol&&r.Symbol[e]||require("github:zloirock/core-js@0.8.4/modules/$.uid").safe("Symbol."+e))},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.set-proto",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.ctx"],!0,function(require,e,t){function r(e,t){s.obj(e),s(null===t||o.isObject(t),t,": can't set as prototype!")}var n=this,i=n.define;n.define=void 0;var o=require("github:zloirock/core-js@0.8.4/modules/$"),s=require("github:zloirock/core-js@0.8.4/modules/$.assert");return t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t){try{t=require("github:zloirock/core-js@0.8.4/modules/$.ctx")(Function.call,o.getDesc(Object.prototype,"__proto__").set,2),t({},[])}catch(n){e=!0}return function(n,i){return r(n,i),e?n.__proto__=i:t(n,i),n}}():void 0),check:r},n.define=i,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.string-at",["github:zloirock/core-js@0.8.4/modules/$"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$");return t.exports=function(e){return function(t){var r,n,o=String(i.assertDefined(this)),s=i.toInteger(t),a=o.length;return 0>s||s>=a?e?"":void 0:(r=o.charCodeAt(s),55296>r||r>56319||s+1===a||(n=o.charCodeAt(s+1))<56320||n>57343?e?o.charAt(s):r:e?o.slice(s,s+2):(r-55296<<10)+(n-56320)+65536)}},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.iter-detect",["github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$.wks")("iterator"),o=!1;try{var s=[7][i]();s["return"]=function(){o=!0},Array.from(s,function(){throw 2})}catch(a){}return t.exports=function(e){if(!o)return!1;var t=!1;try{var r=[7],n=r[i]();n.next=function(){t=!0},r[i]=function(){return n},e(r)}catch(s){}return t},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.species",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.wks"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$");return t.exports=function(e){i.DESC&&i.FW&&i.setDesc(e,require("github:zloirock/core-js@0.8.4/modules/$.wks")("species"),{configurable:!0,get:i.that})},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.task",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.invoke"],!0,function(require,e,t){function r(){var e=+this;if(c.has(x,e)){var t=x[e];delete x[e],t()}}function n(e){r.call(e.data)}var i=this,o=i.define;i.define=void 0;var s,a,u,c=require("github:zloirock/core-js@0.8.4/modules/$"),l=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),d=require("github:zloirock/core-js@0.8.4/modules/$.cof"),h=require("github:zloirock/core-js@0.8.4/modules/$.invoke"),i=c.g,p=c.isFunction,f=c.html,m=i.document,g=i.process,v=i.setImmediate,y=i.clearImmediate,b=i.postMessage,j=i.addEventListener,k=i.MessageChannel,w=0,x={},$="onreadystatechange";return p(v)&&p(y)||(v=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return x[++w]=function(){h(p(e)?e:Function(e),t)},s(w),w},y=function(e){delete x[e]},"process"==d(g)?s=function(e){g.nextTick(l(r,e,1))}:j&&p(b)&&!i.importScripts?(s=function(e){b(e,"*")},j("message",n,!1)):p(k)?(a=new k,u=a.port2,a.port1.onmessage=n,s=l(u.postMessage,u,1)):s=m&&$ in m.createElement("script")?function(e){f.appendChild(m.createElement("script"))[$]=function(){f.removeChild(this),r.call(e)}}:function(e){setTimeout(l(r,e,1),0)}),t.exports={set:v,clear:y},i.define=o,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.collection-strong",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.ctx","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.iter"],!0,function(require,e,t){function r(e,t){if(!p(e))return("string"==typeof e?"S":"P")+e;if(g(e))return"F";if(!d(e,v)){if(!t)return"E";f(e,v,++x)}return"O"+e[v]}function n(e,t){var n,i=r(t);if("F"!=i)return e[y][i];for(n=e[j];n;n=n.n)if(n.k==t)return n}var i=this,o=i.define;i.define=void 0;var s=require("github:zloirock/core-js@0.8.4/modules/$"),a=require("github:zloirock/core-js@0.8.4/modules/$.ctx"),u=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe,c=require("github:zloirock/core-js@0.8.4/modules/$.assert"),l=require("github:zloirock/core-js@0.8.4/modules/$.iter"),d=s.has,h=s.set,p=s.isObject,f=s.hide,m=l.step,g=Object.isFrozen||s.core.Object.isFrozen,v=u("id"),y=u("O1"),b=u("last"),j=u("first"),k=u("iter"),w=s.DESC?u("size"):"size",x=0;return t.exports={getConstructor:function(e,t,r){function i(n){var o=c.inst(this,i,e);h(o,y,s.create(null)),h(o,w,0),h(o,b,void 0),h(o,j,void 0),void 0!=n&&l.forOf(n,t,o[r],o)}return s.mix(i.prototype,{clear:function(){for(var e=this,t=e[y],r=e[j];r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete t[r.i];e[j]=e[b]=void 0,e[w]=0},"delete":function(e){var t=this,r=n(t,e);if(r){var i=r.n,o=r.p;delete t[y][r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),t[j]==r&&(t[j]=i),t[b]==r&&(t[b]=o),t[w]--}return!!r},forEach:function(e){for(var t,r=a(e,arguments[1],3);t=t?t.n:this[j];)for(r(t.v,t.k,this);t&&t.r;)t=t.p},has:function(e){return!!n(this,e)}}),s.DESC&&s.setDesc(i.prototype,"size",{get:function(){return c.def(this[w])}}),i},def:function(e,t,i){var o,s,a=n(e,t);return a?a.v=i:(e[b]=a={i:s=r(t,!0),k:t,v:i,p:o=e[b],n:void 0,r:!1},e[j]||(e[j]=a),o&&(o.n=a),e[w]++,"F"!=s&&(e[y][s]=a)),e},getEntry:n,getIterConstructor:function(){return function(e,t){h(this,k,{o:e,k:t})}},next:function(){for(var e=this[k],t=e.k,r=e.l;r&&r.r;)r=r.p;return e.o&&(e.l=r=r?r.n:e.o[j])?"key"==t?m(0,r.k):"value"==t?m(0,r.v):m(0,[r.k,r.v]):(e.o=void 0,m(1))}},i.define=o,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.collection",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.def","github:zloirock/core-js@0.8.4/modules/$.iter","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.iter-detect","github:zloirock/core-js@0.8.4/modules/$.cof","github:zloirock/core-js@0.8.4/modules/$.species"],!0,function(require,e,t){var r=this,n=r.define;r.define=void 0;var i=require("github:zloirock/core-js@0.8.4/modules/$"),o=require("github:zloirock/core-js@0.8.4/modules/$.def"),s=require("github:zloirock/core-js@0.8.4/modules/$.iter"),a=require("github:zloirock/core-js@0.8.4/modules/$.assert").inst;return t.exports=function(e,t,r,n,u){function c(e,t){var r=p[e];i.FW&&(p[e]=function(e,n){var i=r.call(this,0===e?0:e,n);return t?this:i})}var l=i.g[e],d=l,h=n?"set":"add",p=d&&d.prototype,f={};if(i.isFunction(d)&&(u||!s.BUGGY&&p.forEach&&p.entries)){var m,g=new d,v=g[h](u?{}:-0,1);require("github:zloirock/core-js@0.8.4/modules/$.iter-detect")(function(e){new d(e)})||(d=function(t){a(this,d,e);var r=new l;return void 0!=t&&s.forOf(t,n,r[h],r),r},d.prototype=p,i.FW&&(p.constructor=d)),u||g.forEach(function(e,t){m=1/t===-(1/0)}),m&&(c("delete"),c("has"),n&&c("get")),(m||v!==g)&&c(h,!0)}else d=r.getConstructor(e,n,h),i.mix(d.prototype,t);return require("github:zloirock/core-js@0.8.4/modules/$.cof").set(d,e),require("github:zloirock/core-js@0.8.4/modules/$.species")(d),f[e]=d,o(o.G+o.W+o.F*(d!=l),f),u||s.std(d,e,r.getIterConstructor(),r.next,n?"key+value":"value",!n,!0),d},r.define=n,t.exports}),System.registerDynamic("github:zloirock/core-js@0.8.4/modules/$.collection-weak",["github:zloirock/core-js@0.8.4/modules/$","github:zloirock/core-js@0.8.4/modules/$.uid","github:zloirock/core-js@0.8.4/modules/$.assert","github:zloirock/core-js@0.8.4/modules/$.iter","github:zloirock/core-js@0.8.4/modules/$.array-methods"],!0,function(require,e,t){function r(e,t){return b.call(e.array,function(e){return e[0]===t})}function n(e){return e[v]||h(e,v,{array:[],get:function(e){var t=r(this,e);return t?t[1]:void 0},has:function(e){return!!r(this,e)},set:function(e,t){var n=r(this,e);n?n[1]=t:this.array.push([e,t])},"delete":function(e){var t=j.call(this.array,function(t){return t[0]===e});return~t&&this.array.splice(t,1),!!~t}})[v]}var i=this,o=i.define;i.define=void 0;var s=require("github:zloirock/core-js@0.8.4/modules/$"),a=require("github:zloirock/core-js@0.8.4/modules/$.uid").safe,u=require("github:zloirock/core-js@0.8.4/modules/$.assert"),c=require("github:zloirock/core-js@0.8.4/modules/$.iter").forOf,l=s.has,d=s.isObject,h=s.hide,p=Object.isFrozen||s.core.Object.isFrozen,f=0,m=a("id"),g=a("weak"),v=a("leak"),y=require("github:zloirock/core-js@0.8.4/modules/$.array-methods"),b=y(5),j=y(6);return t.exports={getConstructor:function(e,t,r){function i(n){s.set(u.inst(this,i,e),m,f++),void 0!=n&&c(n,t,this[r],this)}return s.mix(i.prototype,{"delete":function(e){return d(e)?p(e)?n(this)["delete"](e):l(e,g)&&l(e[g],this[m])&&delete e[g][this[m]]:!1},has:function(e){return d(e)?p(e)?n(this).has(e):l(e,g)&&l(e[g],this[m]):!1}}),i},def:function(e,t,r){return p(u.obj(t))?n(e).set(t,r):(l(t,g)||h(t,g,{}),t[g][e[m]]=r),e},leakStore:n,WEAK:g,ID:m},i.define=o,t.exports}),System.registerDynamic("github:jspm/nodelibs-process@0.1.1/index",["npm:process@0.10.1"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=System._nodeRequire?process:require("npm:process@0.10.1"),r.define=n,t.exports}),System.registerDynamic("npm:process@0.10.1",["npm:process@0.10.1/browser"],!0,function(require,e,t){var r=this,n=r.define;return r.define=void 0,t.exports=require("npm:process@0.10.1/browser"),r.define=n,t.exports}),System.registerDynamic("npm:process@0.10.1/browser",[],!0,function(require,e,t){function r(){if(!u){u=!0;for(var e,t=a.length;t;){e=a,a=[];for(var r=-1;++r<t;)e[r]();t=a.length}u=!1}}function n(){}var i=this,o=i.define;i.define=void 0;var s=t.exports={},a=[],u=!1;return s.nextTick=function(e){a.push(e),u||setTimeout(r,0)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=n,s.addListener=n,s.once=n,s.off=n,s.removeListener=n,s.removeAllListeners=n,s.emit=n,s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0},i.define=o,t.exports}),System.register("src/views/home/wizard-step-3",["github:aurelia/framework@0.16.0","src/views/home/wizard"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n,i;return{setters:[function(e){r=e.inject},function(e){n=e.Wizard}],execute:function(){i=function(){function e(e){t(this,i),this.wizard=e}var i=e;return e=r(n)(e)||e}(),e("WizardStep3",i)}}}),System.register("src/views/home/wizard-step-2",["github:aurelia/framework@0.16.0","src/views/home/wizard"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t,r){var n=r[t];if(n){var i={};for(var o in n)i[o]=n[o];i.value=i.initializer?i.initializer.call(e):void 0,Object.defineProperty(e,t,i)}}var n,i,o,s,a=function(){function e(e,t,r){for(var n=0;n<t.length;n++){var i=t[n],o=i.decorators,s=i.key;if(delete i.key,delete i.decorators,i.enumerable=i.enumerable||!1,i.configurable=!0,("value"in i||i.initializer)&&(i.writable=!0),o){for(var a=0;a<o.length;a++){var u=o[a];if("function"!=typeof u)throw new TypeError("The decorator for method "+i.key+" is of the invalid type "+typeof u);i=u(e,s,i)||i}if(void 0!==i.initializer){r[s]=i;continue}}Object.defineProperty(e,s,i)}}return function(t,r,n,i,o){return r&&e(t.prototype,r,i),n&&e(t,n,o),t}}();return{setters:[function(e){n=e.inject,i=e.bindable},function(e){o=e.Wizard}],execute:function(){s=function(){function e(e){t(this,u),r(this,"houseName",s),r(this,"houseNumber",s),this.wizard=e,this.houseName=this.wizard.address.houseName,this.houseNumber=this.wizard.address.houseNumber}var s={},s={};a(e,[{key:"houseName",decorators:[i],initializer:null,enumerable:!0},{key:"houseNumber",decorators:[i],initializer:null,enumerable:!0}],null,s),a(e,[{key:"houseNameChanged",value:function(e){this.wizard.address.houseName=e,this.wizard.validationStep2.result.properties["address.houseName"].isDirty&&this.checkHouseIsValid()}},{key:"houseNumberChanged",value:function(e){this.wizard.address.houseNumber=e,this.wizard.validationStep2.result.properties["address.houseNumber"].isDirty&&this.checkHouseIsValid()}},{key:"checkHouseIsValid",value:function(){return this.wizard.validationStep2.validate().then(function(){return!0},function(){return!1})}},{key:"attached",value:function(){var e=this.wizard.validationStep2.result.properties["person.favouriteVertebrateType"];e.isValid=!1,e.isDirty=!1}}],null,s);var u=e;return e=n(o)(e)||e}(),e("WizardStep2",s)}}}),System.register("src/views/home/wizard-step-1",["github:aurelia/framework@0.16.0","src/views/home/wizard"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n,i,o,s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();return{setters:[function(e){r=e.inject,n=e.ObserverLocator},function(e){i=e.Wizard}],execute:function(){o=function(){function e(e,r){var n=this;t(this,o),this.wizard=e,this.observerLocator=r,this.disposeSubscription=this.observerLocator.getObserver(this.wizard.person,"favouriteVertebrateClass").subscribe(function(){return n.onFavouriteVertebrateClassChange()})}s(e,[{key:"onFavouriteVertebrateClassChange",value:function(){this.wizard.person.favouriteVertebrateType="";var e=this.wizard.validationStep2.result.properties["person.favouriteVertebrateType"];e.isValid=!1,e.isDirty=!1}},{key:"detached",value:function(){this.disposeSubscription()}}]);var o=e;return e=r(i,n)(e)||e}(),e("WizardStep1",o)}}}),System.register("src/views/home/home",["github:aurelia/framework@0.16.0","src/views/home/wizard"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n,i,o,s,a=function(){function e(e,t,r){for(var n=0;n<t.length;n++){var i=t[n],o=i.decorators,s=i.key;if(delete i.key,delete i.decorators,i.enumerable=i.enumerable||!1,i.configurable=!0,("value"in i||i.initializer)&&(i.writable=!0),o){for(var a=0;a<o.length;a++){var u=o[a];if("function"!=typeof u)throw new TypeError("The decorator for method "+i.key+" is of the invalid type "+typeof u);i=u(e,s,i)||i}if(void 0!==i.initializer){r[s]=i;continue}}Object.defineProperty(e,s,i)}}return function(t,r,n,i,o){return r&&e(t.prototype,r,i),n&&e(t,n,o),t}}();return{setters:[function(e){r=e.inject,n=e.computedFrom},function(e){i=e.Wizard}],execute:function(){o=function(){function e(e){t(this,o),this.wizard=e,this.steps=[new s(1,"Personal details","wizard-step-1"),new s(2,"Favourite animals","wizard-step-2"),new s(3,"Terms and conditions","wizard-step-3")],this.restart()}a(e,[{key:"nextStep",value:function(){var e=this;this.validateStep(this.activeStep).then(function(t){t&&(e.activeStep.id!==e.steps.length?e.activeStep=e.steps[e.activeStep.id]:e.isComplete=!0)})}},{key:"previousStep",value:function(){1!==this.activeStep.id&&(this.wizard["validationStep"+this.activeStep.id].clear(),this.activeStep=this.steps[this.activeStep.id-2])}},{key:"finish",value:function(){this.nextStep()}},{key:"restart",value:function(){this.isComplete=!1,this.activeStep=this.steps[0]}},{key:"validateStep",value:function(e){var t="validationStep"+e.id;return this.wizard[t].validate().then(function(){return!0},function(){return!1})}},{key:"isLastPage",decorators:[n("activeStep")],get:function(){return 3===this.activeStep.id}},{key:"isFirstPage",decorators:[n("activeStep")],get:function(){return 1===this.activeStep.id}}]);var o=e;return e=r(i)(e)||e}(),e("Home",o),s=function u(e,r,n){t(this,u),this.id=0,this.title="",this.path="",this.id=e,this.title=r,this.path="src/views/home/"+n}}}}),System.register("src/validation/custom-validation-rules",[],function(e){"use strict";function t(e){return this.passes(function(e){return!e}).withMessage(function(){return e}),this}return e("mustBeEmpty",t),{setters:[],execute:function(){}}}),System.register("src/main",[],function(e){"use strict";function t(e){e.use.standardConfiguration().developmentLogging().plugin("aurelia-validation"),e.start().then(function(e){return e.setRoot("src/app")})}return e("configure",t),{setters:[],execute:function(){}}}),System.register("src/app",["github:aurelia/validation@0.3.0","src/validation/custom-validation-rules"],function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r,n,i,o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();return{setters:[function(e){r=e.ValidationGroup},function(e){n=e.mustBeEmpty}],execute:function(){i=function(){function e(){t(this,e),r.prototype.mustBeEmpty=n}return o(e,[{key:"configureRouter",value:function(e,t){this.router=t,e.map([{route:["","home"],moduleId:"./views/home/home",title:"Form Wizard",nav:!0}])}}]),e}(),e("App",i)}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZDpcXFdlYnN0b3JtUHJvamVjdHNcXGF1cmVsaWEtd2l6YXJkLWZvcm0tdmFsaWRhdGlvbi1leGFtcGxlXFx0bXBcXGFwcFxcYXBwLWJ1bmRsZS5qcyIsInNvdXJjZXMiOlsic3JjL3ZpZXdzL2hvbWUvd2l6YXJkLXN0ZXAtMy5odG1sIiwic3JjL3ZpZXdzL2hvbWUvd2l6YXJkLXN0ZXAtMi5odG1sIiwic3JjL3ZpZXdzL2hvbWUvd2l6YXJkLXN0ZXAtMS5odG1sIiwic3JjL3ZpZXdzL2hvbWUvaG9tZS5odG1sIiwic3JjL2FwcC5odG1sIiwic3JjL3ZpZXdzL2hvbWUvd2l6YXJkLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS9mcmFtZXdvcmtAMC4xNi4wLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS92YWxpZGF0aW9uQDAuMy4wLmpzIiwic3JjL3ZpZXdzL2hvbWUvcGVyc29uLmpzIiwic3JjL3ZpZXdzL2hvbWUvYWRkcmVzcy5qcyIsInNyYy92aWV3cy9ob21lL2RhdGEuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL2ZyYW1ld29ya0AwLjE2LjAvYXVyZWxpYS1mcmFtZXdvcmsuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3ZhbGlkYXRpb25AMC4zLjAvaW5kZXguanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvbG9nZ2luZ0AwLjcuMC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdGVtcGxhdGluZ0AwLjE1LjMuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3BhdGhAMC45LjAuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL2RlcGVuZGVuY3ktaW5qZWN0aW9uQDAuMTAuMS5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvbG9hZGVyQDAuOS4wLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS9iaW5kaW5nQDAuOS4xLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS9tZXRhZGF0YUAwLjguMC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdGFzay1xdWV1ZUAwLjcuMC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdmFsaWRhdGlvbkAwLjMuMC92YWxpZGF0aW9uL3ZhbGlkYXRpb24tY29uZmlnLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS92YWxpZGF0aW9uQDAuMy4wL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdmFsaWRhdGlvbkAwLjMuMC92YWxpZGF0aW9uL3V0aWxpdGllcy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdmFsaWRhdGlvbkAwLjMuMC92YWxpZGF0aW9uL3ZhbGlkYXRpb24tbG9jYWxlLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS92YWxpZGF0aW9uQDAuMy4wL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1yZXN1bHQuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3ZhbGlkYXRpb25AMC4zLjAvdmFsaWRhdGlvbi92YWxpZGF0aW9uLXJ1bGVzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS92YWxpZGF0aW9uQDAuMy4wL3ZhbGlkYXRpb24vdmFsaWRhdGUtY3VzdG9tLWF0dHJpYnV0ZS5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdmFsaWRhdGlvbkAwLjMuMC92YWxpZGF0aW9uL3ZhbGlkYXRlLWN1c3RvbS1hdHRyaWJ1dGUtdmlldy1zdHJhdGVneS5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdmFsaWRhdGlvbkAwLjMuMC92YWxpZGF0aW9uL2RlY29yYXRvcnMuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3ZhbGlkYXRpb25AMC4zLjAvdmFsaWRhdGlvbi92YWxpZGF0aW9uLWdyb3VwLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS9sb2dnaW5nQDAuNy4wL2F1cmVsaWEtbG9nZ2luZy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvcGF0aEAwLjkuMC9hdXJlbGlhLXBhdGguanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3Rhc2stcXVldWVAMC43LjAvYXVyZWxpYS10YXNrLXF1ZXVlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvaW5kZXguanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3RlbXBsYXRpbmdAMC4xNS4zL2F1cmVsaWEtdGVtcGxhdGluZy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvZGVwZW5kZW5jeS1pbmplY3Rpb25AMC4xMC4xL2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24uanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL2xvYWRlckAwLjkuMC9hdXJlbGlhLWxvYWRlci5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvYmluZGluZ0AwLjkuMS9hdXJlbGlhLWJpbmRpbmcuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL21ldGFkYXRhQDAuOC4wL2F1cmVsaWEtbWV0YWRhdGEuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3ZhbGlkYXRpb25AMC4zLjAvdmFsaWRhdGlvbi92YWxpZGF0aW9uLXJ1bGVzLWNvbGxlY3Rpb24uanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3ZhbGlkYXRpb25AMC4zLjAvdmFsaWRhdGlvbi92YWxpZGF0aW9uLWdyb3VwLWJ1aWxkZXIuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvc2hpbS5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvY29yZS5kaWN0LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLml0ZXItaGVscGVycy5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvY29yZS4kZm9yLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLmRlbGF5LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLmZ1bmN0aW9uLnBhcnQuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2NvcmUub2JqZWN0LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLmFycmF5LnR1cm4uanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2NvcmUubnVtYmVyLml0ZXJhdG9yLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLm51bWJlci5tYXRoLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLnN0cmluZy5lc2NhcGUtaHRtbC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvY29yZS5kYXRlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9jb3JlLmdsb2JhbC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvY29yZS5sb2cuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L2luZGV4LmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvYXVyZWxpYS92YWxpZGF0aW9uQDAuMy4wL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1wcm9wZXJ0eS5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvc2hpbS5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9jb3JlLmRpY3QuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvY29yZS5pdGVyLWhlbHBlcnMuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvY29yZS4kZm9yLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2NvcmUuZGVsYXkuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvY29yZS5iaW5kaW5nLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2NvcmUub2JqZWN0LmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2NvcmUuYXJyYXkudHVybi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9jb3JlLm51bWJlci5pdGVyYXRvci5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9jb3JlLm51bWJlci5tYXRoLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2NvcmUuc3RyaW5nLmVzY2FwZS1odG1sLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2NvcmUuZGF0ZS5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9jb3JlLmdsb2JhbC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9jb3JlLmxvZy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczUuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXMuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYubnVtYmVyLnN0YXRpY3MuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5tYXRoLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5yZWdleHAuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYubWFwLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYuc2V0LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM2LnJlZmxlY3QuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM3LnN0cmluZy5scGFkLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczcuc3RyaW5nLnJwYWQuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNy5yZWdleHAuZXNjYXBlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNy5vYmplY3QudG8tYXJyYXkuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy9qcy5hcnJheS5zdGF0aWNzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmN0eC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5kZWYuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuYXNzaWduLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmtleW9mLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLnVpZC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5hc3NlcnQuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuaXRlci5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5mb3Itb2YuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuaXRlci1jYWxsLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLm1peC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5wYXJ0aWFsLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLm93bi1rZXlzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmNvZi5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC51bnNjb3BlLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLml0ZXItZGVmaW5lLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmludm9rZS5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5yZXBsYWNlci5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5mdy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczUuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXMuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYubnVtYmVyLnN0YXRpY3MuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2Lm1hdGguanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi5yZWdleHAuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2Lm1hcC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYuc2V0LmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM2LnJlZmxlY3QuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM3LnJlZ2V4cC5lc2NhcGUuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2VzNy5vYmplY3QudG8tYXJyYXkuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL2pzLmFycmF5LnN0YXRpY3MuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvd2ViLnRpbWVycy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5jdHguanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5kZWYuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5hc3NpZ24uanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5rZXlvZi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLnVpZC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLmFzc2VydC5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLml0ZXIuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5wYXJ0aWFsLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQuaW52b2tlLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQub3duLWtleXMuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5jb2YuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC51bnNjb3BlLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQucmVwbGFjZXIuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5mdy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2F1cmVsaWEvdmFsaWRhdGlvbkAwLjMuMC92YWxpZGF0aW9uL3BhdGgtb2JzZXJ2ZXIuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9hdXJlbGlhL3ZhbGlkYXRpb25AMC4zLjAvdmFsaWRhdGlvbi9kZWJvdW5jZXIuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi9qc3BtL25vZGVsaWJzLXByb2Nlc3NAMC4xLjEuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuZG9tLWNyZWF0ZS5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5hcnJheS1tZXRob2RzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmFycmF5LWluY2x1ZGVzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLnRocm93cy5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5zaGFyZWQuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQucmVkZWYuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuZW51bS1rZXlzLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmdldC1uYW1lcy5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC53a3MuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuc2FtZS5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC5zZXQtcHJvdG8uanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuc3RyaW5nLWF0LmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLnN0cmluZy1yZXBlYXQuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuaXRlci1kZXRlY3QuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuc3BlY2llcy5qcyIsImpzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMC45LjE4L21vZHVsZXMvJC50YXNrLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmNvbGxlY3Rpb24tc3Ryb25nLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLmNvbGxlY3Rpb24uanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuY29sbGVjdGlvbi13ZWFrLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AwLjkuMTgvbW9kdWxlcy8kLnN0cmluZy1wYWQuanMiLCJqc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDAuOS4xOC9tb2R1bGVzLyQuY29sbGVjdGlvbi10by1qc29uLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQuYXJyYXktbWV0aG9kcy5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLmFycmF5LWluY2x1ZGVzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQud2tzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQuc2V0LXByb3RvLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQuc3RyaW5nLWF0LmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQuaXRlci1kZXRlY3QuanMiLCJqc3BtX3BhY2thZ2VzL2dpdGh1Yi96bG9pcm9jay9jb3JlLWpzQDAuOC40L21vZHVsZXMvJC5zcGVjaWVzLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQudGFzay5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLmNvbGxlY3Rpb24tc3Ryb25nLmpzIiwianNwbV9wYWNrYWdlcy9naXRodWIvemxvaXJvY2svY29yZS1qc0AwLjguNC9tb2R1bGVzLyQuY29sbGVjdGlvbi5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL3psb2lyb2NrL2NvcmUtanNAMC44LjQvbW9kdWxlcy8kLmNvbGxlY3Rpb24td2Vhay5qcyIsImpzcG1fcGFja2FnZXMvZ2l0aHViL2pzcG0vbm9kZWxpYnMtcHJvY2Vzc0AwLjEuMS9pbmRleC5qcyIsImpzcG1fcGFja2FnZXMvbnBtL3Byb2Nlc3NAMC4xMC4xLmpzIiwianNwbV9wYWNrYWdlcy9ucG0vcHJvY2Vzc0AwLjEwLjEvYnJvd3Nlci5qcyIsInNyYy92aWV3cy9ob21lL3dpemFyZC1zdGVwLTMuanMiLCJzcmMvdmlld3MvaG9tZS93aXphcmQtc3RlcC0yLmpzIiwic3JjL3ZpZXdzL2hvbWUvd2l6YXJkLXN0ZXAtMS5qcyIsInNyYy92aWV3cy9ob21lL2hvbWUuanMiLCJzcmMvdmFsaWRhdGlvbi9jdXN0b20tdmFsaWRhdGlvbi1ydWxlcy5qcyIsInNyYy9tYWluLmpzIiwic3JjL2FwcC5qcyJdLCJuYW1lcyI6WyJTeXN0ZW0iLCJyZWdpc3RlckR5bmFtaWMiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImdsb2JhbCIsInRoaXMiLCJfX2RlZmluZSIsImRlZmluZSIsInVuZGVmaW5lZCIsInJlZ2lzdGVyIiwiX2V4cG9ydCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJpbmplY3QiLCJWYWxpZGF0aW9uIiwiUGVyc29uIiwiQWRkcmVzcyIsInZlcnRlYnJhdGVzIiwiY291bnRyaWVzIiwiV2l6YXJkIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsInNldHRlcnMiLCJfYXVyZWxpYUZyYW1ld29yayIsIl9hdXJlbGlhVmFsaWRhdGlvbiIsIl9zcmNWaWV3c0hvbWVQZXJzb24iLCJfc3JjVmlld3NIb21lQWRkcmVzcyIsIl9zcmNWaWV3c0hvbWVEYXRhIiwiZXhlY3V0ZSIsInZhbGlkYXRpb24iLCJfV2l6YXJkIiwicGVyc29uIiwiYWRkcmVzcyIsInZhbGlkYXRpb25TdGVwMSIsInNldHVwVmFsaWRhdG9uU3RlcDEiLCJ2YWxpZGF0aW9uU3RlcDIiLCJzZXR1cFZhbGlkYXRvblN0ZXAyIiwidmFsaWRhdGlvblN0ZXAzIiwic2V0dXBWYWxpZGF0b25TdGVwMyIsInZhbHVlIiwib24iLCJlbnN1cmUiLCJpc05vdEVtcHR5IiwiX3RoaXMiLCJjb25maWciLCJjb21wdXRlZEZyb20iLCJob3VzZU51bWJlciIsIndpdGhNZXNzYWdlIiwiZW5kSWYiLCJtdXN0QmVFbXB0eSIsImhvdXNlTmFtZSIsImlzTm90RXF1YWxUbyIsIm1haW4iLCJfY3JlYXRlRGVjb3JhdGVkQ2xhc3MiLCJkZXNjcmlwdG9ycyIsImluaXRpYWxpemVycyIsImRlY29yYXRvcnMiLCJpbml0aWFsaXplciIsImYiLCJkZWNvcmF0b3IiLCJwcm90b0luaXRpYWxpemVycyIsInN0YXRpY0luaXRpYWxpemVycyIsImZvcmVuYW1lIiwic3VybmFtZSIsImZhdm91cml0ZVZlcnRlYnJhdGVDbGFzcyIsImZhdm91cml0ZVZlcnRlYnJhdGVUeXBlIiwiYWdyZWVUb1Rlcm1zIiwiYWdyZWVUb1NlbGxLaWRuZXkiLCJnZXQiLCJzdHJlZXQiLCJ0b3duIiwiY291bnRyeSIsInBvc3Rjb2RlIiwidHlwZSIsImxhYmVsIiwiZXhhbXBsZXMiLCJfY29yZUpzIiwiX2F1cmVsaWFMb2dnaW5nIiwiX2F1cmVsaWFUZW1wbGF0aW5nIiwiX2F1cmVsaWFQYXRoIiwiX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uIiwiX2F1cmVsaWFMb2FkZXIiLCJfYXVyZWxpYUJpbmRpbmciLCJfYXVyZWxpYU1ldGFkYXRhIiwiX2F1cmVsaWFUYXNrUXVldWUiLCJfaW50ZXJvcEV4cG9ydFdpbGRjYXJkIiwib2JqIiwiZGVmYXVsdHMiLCJuZXdPYmoiLCJfZGVmYXVsdHMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJ1blRhc2tzIiwidGFza3MiLCJjdXJyZW50IiwibmV4dCIsInNoaWZ0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwibG9hZFBsdWdpbiIsImxvYWRlciIsImluZm8iLCJsb2dnZXIiLCJkZWJ1ZyIsIm1vZHVsZUlkIiwicmVzb3VyY2VzUmVsYXRpdmVUbyIsImxvYWRNb2R1bGUiLCJtIiwiY29uZmlndXJlIiwibG9hZFJlc291cmNlcyIsImNvbnRhaW5lciIsInJlc291cmNlc1RvTG9hZCIsImFwcFJlc291cmNlcyIsInZpZXdFbmdpbmUiLCJWaWV3RW5naW5lIiwiaW1wb3J0SWRzIiwibmFtZXMiLCJBcnJheSIsImlpIiwiaW1wb3J0Vmlld1Jlc291cmNlcyIsImFzc2VydFByb2Nlc3NlZCIsInBsdWdpbnMiLCJwcm9jZXNzZWQiLCJFcnJvciIsInByZXZlbnRBY3Rpb25sZXNzRm9ybVN1Ym1pdCIsImRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJhY3Rpb24iLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJwcmV2ZW50RGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJnZXRMb2dnZXIiLCJGcmFtZXdvcmtDb25maWd1cmF0aW9uIiwiYXVyZWxpYSIsInByZVRhc2tzIiwicG9zdFRhc2tzIiwicHJlVGFzayIsIm5vcm1hbGl6ZSIsImJvb3RzdHJhcHBlck5hbWUiLCJwb3N0VGFzayIsInJlc291cmNlcyIsIl9pbnN0YW5jZSIsInJlZ2lzdGVySW5zdGFuY2UiLCJzaW5nbGV0b24iLCJpbXBsZW1lbnRhdGlvbiIsInJlZ2lzdGVyU2luZ2xldG9uIiwicmVnaXN0ZXJUcmFuc2llbnQiLCJ0YXNrIiwicHVzaCIsImZlYXR1cmUiLCJwbHVnaW4iLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsImdsb2JhbFJlc291cmNlcyIsInRvQWRkIiwiaXNBcnJheSIsImFyZ3VtZW50cyIsInJlc291cmNlIiwicGF0aCIsImpvaW4iLCJnbG9iYWxOYW1lIiwicmVzb3VyY2VQYXRoIiwibmV3TmFtZSIsIl9wbHVnaW4iLCJfYWRkTm9ybWFsaXplZFBsdWdpbiIsIm5hbWUiLCJfdGhpczIiLCJub3JtYWxpemVkTmFtZSIsIm1hcCIsImRlZmF1bHRCaW5kaW5nTGFuZ3VhZ2UiLCJyb3V0ZXIiLCJoaXN0b3J5IiwiZGVmYXVsdFJlc291cmNlcyIsImV2ZW50QWdncmVnYXRvciIsInN0YW5kYXJkQ29uZmlndXJhdGlvbiIsImRldmVsb3BtZW50TG9nZ2luZyIsIl90aGlzMyIsImFkZEFwcGVuZGVyIiwiQ29uc29sZUFwcGVuZGVyIiwic2V0TGV2ZWwiLCJsb2dMZXZlbCIsImFwcGx5IiwiX3RoaXM0Iiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJfQ3VzdG9tRXZlbnQiLCJldmVudCIsInBhcmFtcyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJFdmVudCIsIkF1cmVsaWEiLCJBdXJlbGlhTG9hZGVyIiwiQ29udGFpbmVyIiwiVmlld1Jlc291cmNlcyIsInVzZSIsImhvc3RDb25maWd1cmVkIiwiaG9zdCIsIkxvYWRlciIsIm1ha2VHbG9iYWwiLCJzdGFydCIsIl90aGlzNSIsInN0YXJ0ZWQiLCJoYXNIYW5kbGVyIiwiQmluZGluZ0xhbmd1YWdlIiwibWVzc2FnZSIsImVycm9yIiwiQW5pbWF0b3IiLCJjb25maWd1cmVEZWZhdWx0IiwiZGlzcGF0Y2hFdmVudCIsImVuaGFuY2UiLCJfdGhpczYiLCJiaW5kaW5nQ29udGV4dCIsImFwcGxpY2F0aW9uSG9zdCIsIl9jb25maWd1cmVIb3N0Iiwicm9vdCIsImF0dGFjaGVkIiwiX29uQXVyZWxpYUNvbXBvc2VkIiwic2V0Um9vdCIsIl90aGlzNyIsImNvbXBvc2l0aW9uRW5naW5lIiwiaW5zdHJ1Y3Rpb24iLCJDb21wb3NpdGlvbkVuZ2luZSIsInZpZXdNb2RlbCIsImNoaWxkQ29udGFpbmVyIiwidmlld1Nsb3QiLCJob3N0U2xvdCIsImNvbXBvc2UiLCJyIiwiZ2V0RWxlbWVudEJ5SWQiLCJWaWV3U2xvdCIsInRyYW5zZm9ybUNoaWxkTm9kZXNJbnRvVmlldyIsIkRPTUJvdW5kYXJ5Iiwic2V0VGltZW91dCIsIkxvZ01hbmFnZXIiLCJfdmFsaWRhdGlvblZhbGlkYXRpb25Db25maWciLCJfdmFsaWRhdGlvblZhbGlkYXRpb24iLCJfdmFsaWRhdGlvblV0aWxpdGllcyIsIl92YWxpZGF0aW9uVmFsaWRhdGlvbkxvY2FsZSIsIl92YWxpZGF0aW9uVmFsaWRhdGlvblJlc3VsdCIsIl92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzIiwiX3ZhbGlkYXRpb25WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZSIsIl92YWxpZGF0aW9uVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3kiLCJfdmFsaWRhdGlvbkRlY29yYXRvcnMiLCJfdmFsaWRhdGlvbkdyb3VwIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25maWdDYWxsYmFjayIsIlZhbGlkYXRpb25Db25maWciLCJsb2NhbGUiLCJVdGlsaXRpZXMiLCJWYWxpZGF0aW9uTG9jYWxlIiwiVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUiLCJWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneSIsIlZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5QmFzZSIsIlZhbGlkYXRpb25Hcm91cCIsIlZhbGlkYXRpb25Db25maWdEZWZhdWx0cyIsImRlYm91bmNlVGltZW91dCIsImRlcGVuZGVuY2llcyIsImxvY2FsZVJlc291cmNlcyIsInZpZXdTdHJhdGVneSIsIlRXQm9vdHN0cmFwQXBwZW5kVG9NZXNzYWdlIiwiYWxsUHJvcGVydGllc0FyZU1hbmRhdG9yeSIsImFzc2lnbiIsImlubmVyQ29uZmlnIiwidmFsdWVzIiwiY2hhbmdlZEhhbmRsZXJzIiwiTWFwIiwiZ2V0VmFsdWUiLCJpZGVudGlmaWVyIiwic2V0VmFsdWUiLCJvbkxvY2FsZUNoYW5nZWQiLCJjYWxsYmFjayIsIl9yZXQiLCJpZCIsInVuaXF1ZUxpc3RlbmVySWQiLCJzZXQiLCJ2IiwiZ2V0RGVib3VuY2VUaW1lb3V0IiwidXNlRGVib3VuY2VUaW1lb3V0IiwiZ2V0RGVwZW5kZW5jaWVzIiwiZGVwcyIsInVzZUxvY2FsZSIsImxvY2FsZUlkZW50aWZpZXIiLCJjYWxsYmFja3MiLCJmcm9tIiwiUmVwb3NpdG9yeSIsImxvYWQiLCJ1c2VWaWV3U3RyYXRlZ3kiLCJnZXRWaWV3U3RyYXRlZ3kiLCJ0cmVhdEFsbFByb3BlcnRpZXNBc01hbmRhdG9yeSIsInRyZWF0QWxsUHJvcGVydGllc0FzT3B0aW9uYWwiLCJfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24iLCJfdmFsaWRhdGlvblZhbGlkYXRpb25Hcm91cCIsIm9ic2VydmVyTG9jYXRvciIsInZhbGlkYXRpb25Db25maWciLCJfVmFsaWRhdGlvbiIsInN1YmplY3QiLCJjb25mIiwib25CcmVlemVFbnRpdHkiLCJicmVlemVFbnRpdHkiLCJPYnNlcnZlckxvY2F0b3IiLCJ2YWwiLCJpc0VtcHR5VmFsdWUiLCJTdHJpbmciLCJ0cmltIiwicmVwbGFjZSIsImRhdGEiLCJjdXJyZW50TG9jYWxlIiwiZ2V0VmFsdWVGb3IiLCJjYXRlZ29yeSIsImN1cnJlbnRMb2NhbGVTZXR0aW5nIiwiZGVmYXVsdFNldHRpbmciLCJzZXR0aW5nIiwic2V0dGluZ0lkZW50aWZpZXIiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGlvbklkZW50aWZpZXIiLCJuZXdWYWx1ZSIsInRocmVzaG9sZCIsInRyYW5zbGF0aW9uIiwiVmFsaWRhdGlvbkxvY2FsZVJlcG9zaXRvcnkiLCJpbnN0YW5jZXMiLCJzZXR0aW5ncyIsIm51bWVyaWNSZWdleCIsIm1lc3NhZ2VzIiwiYmFzZVBhdGgiLCJyZWplY3QiLCJoYXMiLCJhZGRMb2NhbGUiLCJWYWxpZGF0aW9uUmVzdWx0IiwiaXNWYWxpZCIsInByb3BlcnRpZXMiLCJhZGRQcm9wZXJ0eSIsIlZhbGlkYXRpb25SZXN1bHRQcm9wZXJ0eSIsImNoZWNrVmFsaWRpdHkiLCJwcm9wZXJ0eU5hbWUiLCJjbGVhciIsImdyb3VwIiwib25WYWxpZGF0ZUNhbGxiYWNrcyIsImlzRGlydHkiLCJmYWlsaW5nUnVsZSIsImxhdGVzdFZhbHVlIiwibm90aWZ5T2JzZXJ2ZXJzT2ZDaGFuZ2UiLCJvblZhbGlkYXRlIiwib25WYWxpZGF0ZUNhbGxiYWNrIiwic2V0VmFsaWRpdHkiLCJ2YWxpZGF0aW9uUmVzcG9uc2UiLCJzaG91bGRCZURpcnR5Iiwibm90aWZ5T2JzZXJ2ZXJzIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJWYWxpZGF0aW9uUnVsZSIsInJ1bGVOYW1lIiwiZXJyb3JNZXNzYWdlIiwiZXhwbGFpbiIsInNldFJlc3VsdCIsInJlc3VsdCIsImN1cnJlbnRWYWx1ZSIsInZhbGlkYXRlIiwicHJvbWlzZSIsIm5leHRQcm9taXNlIiwicHJvbWlzZVJlc3VsdCIsInByb21pc2VGYWlsdXJlIiwiVVJMVmFsaWRhdGlvblJ1bGUiLCJfVmFsaWRhdGlvblJ1bGUiLCJkZWZhdWx0X3VybF9vcHRpb25zIiwicHJvdG9jb2xzIiwicmVxdWlyZV90bGQiLCJyZXF1aXJlX3Byb3RvY29sIiwiYWxsb3dfdW5kZXJzY29yZXMiLCJhbGxvd190cmFpbGluZ19kb3QiLCJhbGxvd19wcm90b2NvbF9yZWxhdGl2ZV91cmxzIiwidXJsIiwidGVzdCIsImluZGV4T2YiLCJwcm90b2NvbCIsImF1dGgiLCJob3N0bmFtZSIsInBvcnQiLCJwb3J0X3N0ciIsInNwbGl0Iiwic3Vic3RyIiwicGFyc2VJbnQiLCJpc0lQIiwiaXNGUUROIiwiaG9zdF93aGl0ZWxpc3QiLCJob3N0X2JsYWNrbGlzdCIsInN0ciIsInZlcnNpb24iLCJpcHY0TWF5YmUiLCJpcHY2QmxvY2siLCJwYXJ0cyIsInNvcnQiLCJhIiwiYiIsImJsb2NrcyIsImZvdW5kT21pc3Npb25CbG9jayIsInBvcCIsIm9wdGlvbnMiLCJ0bGQiLCJwYXJ0IiwiRW1haWxWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTIiLCJkb21haW4iLCJ1c2VyIiwidGVzdEVtYWlsVXNlclV0ZjhSZWdleCIsImVtYWlsVXNlclV0ZjhSZWdleCIsIk1pbmltdW1MZW5ndGhWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTMiLCJtaW5pbXVtTGVuZ3RoIiwiTWF4aW11bUxlbmd0aFZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlNCIsIm1heGltdW1MZW5ndGgiLCJCZXR3ZWVuTGVuZ3RoVmFsaWRhdGlvblJ1bGUiLCJfVmFsaWRhdGlvblJ1bGU1IiwiQ3VzdG9tRnVuY3Rpb25WYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTYiLCJjdXN0b21GdW5jdGlvbiIsIk51bWVyaWNWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTciLCJmbG9hdFZhbHVlIiwicGFyc2VGbG9hdCIsIk51bWJlciIsImlzTmFOIiwiaXNGaW5pdGUiLCJSZWdleFZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlOCIsInJlZ2V4IiwiQ29udGFpbnNPbmx5VmFsaWRhdGlvblJ1bGUiLCJfUmVnZXhWYWxpZGF0aW9uUnVsZSIsIk1pbmltdW1WYWx1ZVZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlOSIsIm1pbmltdW1WYWx1ZSIsIk1pbmltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlMTAiLCJNYXhpbXVtVmFsdWVWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTExIiwibWF4aW11bVZhbHVlIiwiTWF4aW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGUiLCJfVmFsaWRhdGlvblJ1bGUxMiIsIkJldHdlZW5WYWx1ZVZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlMTMiLCJEaWdpdFZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlMTQiLCJOb1NwYWNlc1ZhbGlkYXRpb25SdWxlIiwiX1ZhbGlkYXRpb25SdWxlMTUiLCJBbHBoYU51bWVyaWNWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTE2IiwiQWxwaGFWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTE3IiwiQWxwaGFPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTE4IiwiQWxwaGFOdW1lcmljT3JXaGl0ZXNwYWNlVmFsaWRhdGlvblJ1bGUiLCJfVmFsaWRhdGlvblJ1bGUxOSIsIk1lZGl1bVBhc3N3b3JkVmFsaWRhdGlvblJ1bGUiLCJfVmFsaWRhdGlvblJ1bGUyMCIsIm1pbmltdW1Db21wbGV4aXR5TGV2ZWwiLCJzdHJlbmd0aCIsIlN0cm9uZ1Bhc3N3b3JkVmFsaWRhdGlvblJ1bGUiLCJfTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSIsIkVxdWFsaXR5VmFsaWRhdGlvblJ1bGVCYXNlIiwiX1ZhbGlkYXRpb25SdWxlMjEiLCJvdGhlclZhbHVlIiwiZXF1YWxpdHkiLCJvdGhlclZhbHVlTGFiZWwiLCJEYXRlIiwiZ2V0VGltZSIsIkVxdWFsaXR5VmFsaWRhdGlvblJ1bGUiLCJfRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UiLCJFcXVhbGl0eVdpdGhPdGhlckxhYmVsVmFsaWRhdGlvblJ1bGUiLCJfRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UyIiwib3RoZXJMYWJlbCIsIkluRXF1YWxpdHlWYWxpZGF0aW9uUnVsZSIsIl9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTMiLCJJbkVxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZSIsIl9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTQiLCJJbkNvbGxlY3Rpb25WYWxpZGF0aW9uUnVsZSIsIl9WYWxpZGF0aW9uUnVsZTIyIiwiY29sbGVjdGlvbiIsImVsZW1lbnQiLCJfVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUiLCJwcm9jZXNzZWRWYWxpZGF0aW9uIiwidmFsdWVDaGFuZ2VkIiwic3Vic2NyaWJlQ2hhbmdlZEhhbmRsZXJzIiwiY3VycmVudEVsZW1lbnQiLCJ2YWxpZGF0aW9uUHJvcGVydHkiLCJnZXRWYWxpZGF0aW9uUHJvcGVydHkiLCJwcmVwYXJlRWxlbWVudCIsInZwIiwidXBkYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiZGV0YWNoZWQiLCJFbGVtZW50IiwiY3VzdG9tQXR0cmlidXRlIiwiYmluZGluZ1BhdGhBdHRyaWJ1dGVzIiwiYXR0cyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVOYW1lIiwiYmluZGluZ1BhdGgiLCJUV0Jvb3RzdHJhcFZpZXdTdHJhdGVneSIsIl9WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2UiLCJhcHBlbmRNZXNzYWdlVG9JbnB1dCIsImFwcGVuZE1lc3NhZ2VUb0xhYmVsIiwiaGVscEJsb2NrQ2xhc3MiLCJzZWFyY2hGb3JtR3JvdXAiLCJjdXJyZW50RGVwdGgiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInBhcmVudE5vZGUiLCJmaW5kTGFiZWxzIiwiZm9ybUdyb3VwIiwiaW5wdXRJZCIsImxhYmVscyIsImZpbmRMYWJlbHNSZWN1cnNpdmVseSIsImN1cnJlbnRMYWJlbHMiLCJub2RlTmFtZSIsImFwcGVuZE1lc3NhZ2VUb0VsZW1lbnQiLCJoZWxwQmxvY2siLCJuZXh0U2libGluZyIsImNyZWF0ZUVsZW1lbnQiLCJhZGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsInRleHRDb250ZW50IiwiYXBwZW5kVUlWaXN1YWxzIiwicmVtb3ZlIiwiVFdCb290c3RyYXBBcHBlbmRUb0lucHV0Iiwic2V0dXBTdGVwIiwidmFsaWRhdGlvbk1ldGFkYXRhIiwiTWV0YWRhdGEiLCJnZXRPckNyZWF0ZU93biIsIlZhbGlkYXRpb25NZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwicHJvcGVydHkiLCJnZXRPckNyZWF0ZVByb3BlcnR5IiwiYWRkU2V0dXBTdGVwIiwiZmluZCIsIngiLCJWYWxpZGF0aW9uUHJvcGVydHlNZXRhZGF0YSIsInNldHVwIiwiZm9yRWFjaCIsInNldHVwU3RlcHMiLCJfdmFsaWRhdGlvblZhbGlkYXRpb25Hcm91cEJ1aWxkZXIiLCJ2YWxpZGF0aW9uUHJvcGVydGllcyIsImJ1aWxkZXIiLCJWYWxpZGF0aW9uR3JvdXBCdWlsZGVyIiwib25Qcm9wZXJ0eVZhbGlkYXRpb25DYWxsYmFja3MiLCJpc1ZhbGlkYXRpbmciLCJvbkRlc3Ryb3kiLCJnZXRPd24iLCJkZXN0cm95IiwicHJvcCIsIm1lIiwib25Qcm9wZXJ0eVZhbGlkYXRlIiwicHJvcGVydHlCaW5kaW5nUGF0aCIsInBhc3NlcyIsImVudGl0eUFzcGVjdCIsInZhbGlkYXRlUHJvcGVydHkiLCJlcnJvcnMiLCJnZXRWYWxpZGF0aW9uRXJyb3JzIiwidmFsaWRhdGVFbnRpdHkiLCJ2YWxpZGF0aW9uRXJyb3JzQ2hhbmdlZCIsInN1YnNjcmliZSIsInZhbGlkYXRpb25FcnJvciIsImN1cnJlbnRSZXN1bHRQcm9wIiwiZm9yY2VEaXJ0eSIsImZvcmNlRXhlY3V0aW9uIiwiX2xvb3AiLCJ2YWxpZGF0b3JQcm9wZXJ0eSIsInZhbGlkYXRlQ3VycmVudFZhbHVlIiwiY29uc29sZSIsImxvZyIsInZhbGlkYXRpb25GdW5jdGlvbiIsImNhbGxiYWNrUmVzdWx0IiwicmVzdWx0UHJvcCIsIm5ld1Byb3BSZXN1bHQiLCJjIiwiZCIsImUiLCJ2YWxpZGF0aW9uRnVuY3Rpb25GYWlsZWRDYWxsYmFjayIsImNhbkJlRW1wdHkiLCJpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvIiwiaXNHcmVhdGVyVGhhbiIsImlzQmV0d2VlbiIsImlzTGVzc1RoYW5PckVxdWFsVG8iLCJpc0xlc3NUaGFuIiwiaXNFcXVhbFRvIiwiaXNFbWFpbCIsImlzVVJMIiwiaXNJbiIsImhhc01pbkxlbmd0aCIsImhhc01heExlbmd0aCIsImhhc0xlbmd0aEJldHdlZW4iLCJpc051bWJlciIsImNvbnRhaW5zTm9TcGFjZXMiLCJjb250YWluc09ubHlEaWdpdHMiLCJjb250YWluc09ubHkiLCJjb250YWluc09ubHlBbHBoYSIsImNvbnRhaW5zT25seUFscGhhT3JXaGl0ZXNwYWNlIiwiY29udGFpbnNPbmx5TGV0dGVycyIsImNvbnRhaW5zT25seUxldHRlcnNPcldoaXRlc3BhY2UiLCJjb250YWluc09ubHlBbHBoYW51bWVyaWNzIiwiY29udGFpbnNPbmx5QWxwaGFudW1lcmljc09yV2hpdGVzcGFjZSIsImlzU3Ryb25nUGFzc3dvcmQiLCJtYXRjaGVzIiwicGFzc2VzUnVsZSIsInZhbGlkYXRpb25SdWxlIiwiY29uZGl0aW9uRXhwcmVzc2lvbiIsImNhc2VMYWJlbCIsImVuZFN3aXRjaCIsIkFnZ3JlZ2F0ZUVycm9yIiwiaW5uZXJFcnJvciIsInNraXBJZkFscmVhZHlBZ2dyZWdhdGUiLCJzdGFjayIsImxldmVsIiwiYXJncyIsImFwcGVuZGVycyIsInNsaWNlIiwidW5zaGlmdCIsImN1cnJlbnRMZXZlbCIsIndhcm4iLCJjb25uZWN0TG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiTG9nZ2VyIiwibG9nZ2VyQ29uc3RydWN0aW9uS2V5IiwibG9nZ2VycyIsImFwcGVuZGVyIiwibm9uZSIsInRyaW1Eb3RzIiwiYXJ5Iiwic3BsaWNlIiwicmVsYXRpdmVUb0ZpbGUiLCJmaWxlIiwiZmlsZVBhcnRzIiwibmFtZVBhcnRzIiwiY2hhckF0Iiwibm9ybWFsaXplZEJhc2VQYXJ0cyIsInBhdGgxIiwicGF0aDIiLCJzY2hlbWVNYXRjaCIsIm1hdGNoIiwic2NoZW1lIiwidXJsUHJlZml4IiwidHJhaWxpbmdTbGFzaCIsInVybDEiLCJ1cmwyIiwidXJsMyIsImJ1aWxkUXVlcnlTdHJpbmciLCJwYWlycyIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImVuY29kZUtleSIsImsiLCJsZW4iLCJhcnJheUtleSIsImoiLCJsIiwicGFyc2VRdWVyeVN0cmluZyIsInF1ZXJ5U3RyaW5nIiwicXVlcnlQYXJhbXMiLCJxdWVyeSIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJrZXlMZW5ndGgiLCJtYWtlUmVxdWVzdEZsdXNoRnJvbU11dGF0aW9uT2JzZXJ2ZXIiLCJmbHVzaCIsInRvZ2dsZSIsIm9ic2VydmVyIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIm1ha2VSZXF1ZXN0Rmx1c2hGcm9tVGltZXIiLCJoYW5kbGVGbHVzaFRpbWVyIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dEhhbmRsZSIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbEhhbmRsZSIsInNldEludGVydmFsIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJoYXNTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJUYXNrUXVldWUiLCJtaWNyb1Rhc2tRdWV1ZSIsIm1pY3JvVGFza1F1ZXVlQ2FwYWNpdHkiLCJ0YXNrUXVldWUiLCJyZXF1ZXN0Rmx1c2hNaWNyb1Rhc2tRdWV1ZSIsImZsdXNoTWljcm9UYXNrUXVldWUiLCJyZXF1ZXN0Rmx1c2hUYXNrUXVldWUiLCJmbHVzaFRhc2tRdWV1ZSIsInF1ZXVlTWljcm9UYXNrIiwicXVldWVUYXNrIiwicXVldWUiLCJpbmRleCIsIm9uRXJyb3IiLCJjYXBhY2l0eSIsInNjYW4iLCJjb3JlIiwic2V0UHJvdG90eXBlT2YiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJub2RlVHlwZSIsImNyZWF0ZVRlbXBsYXRlRnJvbU1hcmt1cCIsIm1hcmt1cCIsInBhcnNlciIsImlubmVySFRNTCIsInRlbXAiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIm5lZWRzVGVtcGxhdGVGaXh1cCIsImNvbnRlbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZmlyc3RDaGlsZCIsInJlcGxhY2VOb2RlIiwibmV3Tm9kZSIsInJlcGxhY2VDaGlsZCIsInNoYWRvd1BvbHkiLCJ1bndyYXAiLCJyZW1vdmVOb2RlIiwicmVtb3ZlQ2hpbGQiLCJpbmplY3RTdHlsZXMiLCJzdHlsZXMiLCJkZXN0aW5hdGlvbiIsInByZXBlbmQiLCJoZWFkIiwiY2hpbGROb2RlcyIsImFkZEh5cGhlbkFuZExvd2VyIiwiY2hhciIsImh5cGhlbmF0ZSIsImNhcGl0YWxNYXRjaGVyIiwibG9va3VwIiwiZXhpc3RpbmciLCJmaW5kSW5zZXJ0aW9uUG9pbnQiLCJncm91cHMiLCJpbnNlcnRpb25Qb2ludCIsImdldEFuaW1hdGFibGVFbGVtZW50IiwidmlldyIsImVsZW1lbnRDb250YWluZXJHZXQiLCJCb3VuZFZpZXdGYWN0b3J5IiwiYm91bmRWaWV3RmFjdG9yeSIsImZhY3RvcnkiLCJ2aWV3RmFjdG9yeSIsInBhcnRSZXBsYWNlbWVudHMiLCJhbmNob3JJc0NvbnRhaW5lciIsInZpZXdSZXNvdXJjZXMiLCJUYXJnZXRJbnN0cnVjdGlvbiIsInN1cGVyR2V0IiwiY3JlYXRlRWxlbWVudENvbnRhaW5lciIsInBhcmVudCIsInByb3ZpZGVycyIsImNyZWF0ZUNoaWxkIiwibWFrZUVsZW1lbnRJbnRvQW5jaG9yIiwiZWxlbWVudEluc3RydWN0aW9uIiwiYW5jaG9yIiwiY3JlYXRlQ29tbWVudCIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImFwcGx5SW5zdHJ1Y3Rpb25zIiwiY29udGFpbmVycyIsImJlaGF2aW9ycyIsImJpbmRpbmdzIiwiY29udGVudFNlbGVjdG9ycyIsImVsZW1lbnRDb250YWluZXIiLCJiZWhhdmlvckluc3RydWN0aW9ucyIsImV4cHJlc3Npb25zIiwiY29udGVudEV4cHJlc3Npb24iLCJjcmVhdGVCaW5kaW5nIiwiY29udGVudFNlbGVjdG9yIiwiY29tbWVudEFuY2hvciIsIkNvbnRlbnRTZWxlY3RvciIsInNlbGVjdG9yIiwiaW5qZWN0b3JJZCIsInBhcmVudEluamVjdG9ySWQiLCJjb250ZW50VmlldyIsInN0eWxlU3RyaW5nVG9PYmplY3QiLCJzdHlsZSIsImZpcnN0SW5kZXhPZkNvbG9uIiwic3R5bGVPYmplY3RUb1N0cmluZyIsImFwcGx5U3Vycm9nYXRlSW5zdHJ1Y3Rpb24iLCJjdXJyZW50QXR0cmlidXRlVmFsdWUiLCJzdHlsZU9iamVjdCIsImdldE5leHRJbmplY3RvcklkIiwibmV4dEluamVjdG9ySWQiLCJjb25maWd1cmVQcm9wZXJ0aWVzIiwiYXR0ck5hbWUiLCJrbm93bkF0dHJpYnV0ZSIsIm1hcEF0dHJpYnV0ZSIsInRhcmdldFByb3BlcnR5IiwiZ2V0TmV4dEFVVGFyZ2V0SUQiLCJsYXN0QVVUYXJnZXRJRCIsInRvU3RyaW5nIiwibWFrZUludG9JbnN0cnVjdGlvblRhcmdldCIsImF1VGFyZ2V0SUQiLCJlbnN1cmVSZWdpc3RyeUVudHJ5IiwidXJsT3JSZWdpc3RyeUVudHJ5IiwiVGVtcGxhdGVSZWdpc3RyeUVudHJ5IiwibG9hZFRlbXBsYXRlIiwiZ2V0T2JzZXJ2ZXIiLCJiZWhhdmlvciIsIl9fb2JzZXJ2ZXJzX18iLCJnZXRPckNyZWF0ZU9ic2VydmVyc0xvb2t1cCIsImVuc3VyZVByb3BlcnRpZXNEZWZpbmVkIiwiZG9Qcm9jZXNzQ29udGVudCIsInZhbGlkYXRlQmVoYXZpb3JOYW1lIiwib3ZlcnJpZGUiLCJIdG1sQmVoYXZpb3JSZXNvdXJjZSIsImN1c3RvbUVsZW1lbnQiLCJlbGVtZW50TmFtZSIsImRlZmF1bHRCaW5kaW5nTW9kZSIsImF0dHJpYnV0ZURlZmF1bHRCaW5kaW5nTW9kZSIsInRlbXBsYXRlQ29udHJvbGxlciIsImRlY28iLCJsaWZ0c0NvbnRlbnQiLCJiaW5kYWJsZSIsIm5hbWVPckNvbmZpZ09yVGFyZ2V0IiwiYWN0dWFsVGFyZ2V0IiwiQmluZGFibGVQcm9wZXJ0eSIsInJlZ2lzdGVyV2l0aCIsImR5bmFtaWNPcHRpb25zIiwiaGFzRHluYW1pY09wdGlvbnMiLCJzeW5jIiwic2VsZWN0b3JPckNvbmZpZyIsImFkZENoaWxkQmluZGluZyIsIkNoaWxkT2JzZXJ2ZXIiLCJ1c2VTaGFkb3dET00iLCJ0YXJnZXRTaGFkb3dET00iLCJkb05vdFByb2Nlc3NDb250ZW50Iiwic2tpcENvbnRlbnRQcm9jZXNzaW5nIiwicHJvY2Vzc0NvbnRlbnQiLCJwcm9jZXNzb3IiLCJjb250YWluZXJsZXNzIiwic3RyYXRlZ3kiLCJWaWV3U3RyYXRlZ3kiLCJ1c2VWaWV3IiwiVXNlVmlld1N0cmF0ZWd5IiwiaW5saW5lVmlldyIsImRlcGVuZGVuY3lCYXNlVXJsIiwiSW5saW5lVmlld1N0cmF0ZWd5Iiwibm9WaWV3IiwiTm9WaWV3U3RyYXRlZ3kiLCJlbGVtZW50Q29uZmlnIiwiRWxlbWVudENvbmZpZ1Jlc291cmNlIiwiU2hhZG93RE9NUG9seWZpbGwiLCJoYXNTaGFkb3dET00iLCJIVE1MRWxlbWVudCIsImNyZWF0ZVNoYWRvd1Jvb3QiLCJhbmltYXRpb25FdmVudCIsImVudGVyQmVnaW4iLCJlbnRlckFjdGl2ZSIsImVudGVyRG9uZSIsImVudGVyVGltZW91dCIsImxlYXZlQmVnaW4iLCJsZWF2ZUFjdGl2ZSIsImxlYXZlRG9uZSIsImxlYXZlVGltZW91dCIsInN0YWdnZXJOZXh0IiwicmVtb3ZlQ2xhc3NCZWdpbiIsInJlbW92ZUNsYXNzQWN0aXZlIiwicmVtb3ZlQ2xhc3NEb25lIiwicmVtb3ZlQ2xhc3NUaW1lb3V0IiwiYWRkQ2xhc3NCZWdpbiIsImFkZENsYXNzQWN0aXZlIiwiYWRkQ2xhc3NEb25lIiwiYWRkQ2xhc3NUaW1lb3V0IiwiYW5pbWF0ZUJlZ2luIiwiYW5pbWF0ZUFjdGl2ZSIsImFuaW1hdGVEb25lIiwiYW5pbWF0ZVRpbWVvdXQiLCJzZXF1ZW5jZUJlZ2luIiwic2VxdWVuY2VEb25lIiwiYW5pbWF0b3JJbnN0YW5jZSIsIm1vdmUiLCJlbnRlciIsImxlYXZlIiwicmVtb3ZlQ2xhc3MiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImFuaW1hdGUiLCJydW5TZXF1ZW5jZSIsInNlcXVlbmNlIiwicmVnaXN0ZXJFZmZlY3QiLCJlZmZlY3ROYW1lIiwidW5yZWdpc3RlckVmZmVjdCIsIlJlc291cmNlTG9hZENvbnRleHQiLCJhZGREZXBlbmRlbmN5IiwiZG9lc05vdEhhdmVEZXBlbmRlbmN5IiwiVmlld0NvbXBpbGVJbnN0cnVjdGlvbiIsImNvbXBpbGVTdXJyb2dhdGUiLCJhc3NvY2lhdGVkTW9kdWxlSWQiLCJCZWhhdmlvckluc3RydWN0aW9uIiwic3VwcHJlc3NCaW5kIiwiaW5pdGlhdGVkQnlCZWhhdmlvciIsInN5c3RlbUNvbnRyb2xsZWQiLCJvcmlnaW5hbEF0dHJOYW1lIiwiY29udGVudEZhY3RvcnkiLCJhdHRyaWJ1dGUiLCJkeW5hbWljIiwiZXhwcmVzc2lvbiIsImxpZnRpbmciLCJsaWZ0aW5nSW5zdHJ1Y3Rpb24iLCJub0V4cHJlc3Npb25zIiwibm9ybWFsIiwic3Vycm9nYXRlIiwiZnJlZXplIiwibWFrZVJlbGF0aXZlVG8iLCJiYXNlVXJsIiwiZ2V0RGVmYXVsdCIsImFubm90YXRpb24iLCJPcmlnaW4iLCJDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3kiLCJfVmlld1N0cmF0ZWd5IiwibG9hZFZpZXdGYWN0b3J5IiwiY29tcGlsZUluc3RydWN0aW9uIiwibG9hZENvbnRleHQiLCJhYnNvbHV0ZVBhdGgiLCJfVmlld1N0cmF0ZWd5MiIsInZpZXdVcmwiLCJjb252ZXJ0TW9kdWxlSWRUb1ZpZXdVcmwiLCJfVmlld1N0cmF0ZWd5MyIsIlRlbXBsYXRlUmVnaXN0cnlWaWV3U3RyYXRlZ3kiLCJfVmlld1N0cmF0ZWd5NCIsImVudHJ5IiwiaXNSZWFkeSIsIl9WaWV3U3RyYXRlZ3k1Iiwic2V0VGVtcGxhdGUiLCJhcyIsImluc3BlY3RBdHRyaWJ1dGUiLCJhdHRyVmFsdWUiLCJjcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbiIsImV4aXN0aW5nSW5zdHJ1Y3Rpb24iLCJwYXJzZVRleHQiLCJoYXNQYXJlbnQiLCJ2YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uIiwiZ2V0VmFsdWVDb252ZXJ0ZXIiLCJiaW5kIiwiZWxlbWVudHMiLCJ2YWx1ZUNvbnZlcnRlcnMiLCJhdHRyaWJ1dGVNYXAiLCJiaW5kaW5nTGFuZ3VhZ2UiLCJob29rMSIsImhvb2syIiwiaG9vazMiLCJhZGRpdGlvbmFsSG9va3MiLCJvbkJlZm9yZUNvbXBpbGUiLCJiZWZvcmVDb21waWxlIiwiaG9va3MiLCJfbGVuZ3RoIiwib25BZnRlckNvbXBpbGUiLCJhZnRlckNvbXBpbGUiLCJfbGVuZ3RoMiIsIm9uQmVmb3JlQ3JlYXRlIiwiYmVmb3JlQ3JlYXRlIiwiX2xlbmd0aDMiLCJvbkFmdGVyQ3JlYXRlIiwiYWZ0ZXJDcmVhdGUiLCJfbGVuZ3RoNCIsInJlZ2lzdGVyVmlld0VuZ2luZUhvb2tzIiwibm9vcCIsImdldEJpbmRpbmdMYW5ndWFnZSIsImJpbmRpbmdMYW5ndWFnZUZhbGxiYWNrIiwicGF0Y2hJblBhcmVudCIsIm5ld1BhcmVudCIsIm9yaWdpbmFsUGFyZW50IiwicmVsYXRpdmVUb1ZpZXciLCJyZWdpc3RlckVsZW1lbnQiLCJnZXRFbGVtZW50IiwicmVnaXN0ZXJBdHRyaWJ1dGUiLCJyZWdpc3RlclZhbHVlQ29udmVydGVyIiwidmFsdWVDb252ZXJ0ZXIiLCJWaWV3IiwiZnJhZ21lbnQiLCJsYXN0Q2hpbGQiLCJpc0JvdW5kIiwiaXNBdHRhY2hlZCIsImZyb21DYWNoZSIsInJldHVyblRvQ2FjaGUiLCJyZXR1cm5WaWV3VG9DYWNoZSIsImNyZWF0ZWQiLCJzeXN0ZW1VcGRhdGUiLCJjb250ZXh0IiwidW5iaW5kIiwib3duZXIiLCJhZGRCaW5kaW5nIiwiYmluZGluZyIsImluc2VydE5vZGVzQmVmb3JlIiwicmVmTm9kZSIsImFwcGVuZE5vZGVzVG8iLCJyZW1vdmVOb2RlcyIsImVuZCIsImxvb3AiLCJwcm90byIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsInBsYWNlaG9sZGVyIiwiYWxsIiwiYXBwbHlTZWxlY3RvcnMiLCJjdXJyZW50Q2hpbGQiLCJjb250ZW50TWFwIiwidmlld1Nsb3RTZWxlY3RvcnMiLCJjb3B5Rm9yVmlld1Nsb3QiLCJpbnN0YWxsQ29udGVudFNlbGVjdG9ycyIsImluc2VydCIsInJlbW92ZUF0IiwiYW5pbWF0b3IiLCJ2aWV3QWRkTWV0aG9kIiwibGFzdCIsImFuaW1hdGFibGVFbGVtZW50Iiwic2tpcEFuaW1hdGlvbiIsInJlbW92ZUFjdGlvbiIsInJlbW92ZUFsbCIsInJtUHJvbWlzZXMiLCJjaGlsZCIsInN3YXAiLCJyZW1vdmVSZXNwb25zZSIsIl9jb250ZW50U2VsZWN0b3JBZGQiLCJfY29udGVudFNlbGVjdG9ySW5zZXJ0IiwiX2NvbnRlbnRTZWxlY3RvclJlbW92ZSIsIl9jb250ZW50U2VsZWN0b3JSZW1vdmVBdCIsIl9jb250ZW50U2VsZWN0b3JSZW1vdmVBbGwiLCJqaiIsInBhcmVudENvbnRhaW5lciIsImZhY3RvcnlDcmVhdGVJbnN0cnVjdGlvbiIsInNldENhY2hlU2l6ZSIsInNpemUiLCJkb05vdE92ZXJyaWRlSWZBbHJlYWR5U2V0IiwiZ2V0Q2FjaGVkVmlldyIsImlzQ2FjaGluZyIsIlZpZXdGYWN0b3J5IiwidGVtcGxhdGUiLCJpbnN0cnVjdGlvbnMiLCJjYWNoZVNpemUiLCJjYWNoZSIsIk1BWF9WQUxVRSIsImNyZWF0ZUluc3RydWN0aW9uIiwiY2FjaGVkVmlldyIsImNsb25lTm9kZSIsImluc3RydWN0YWJsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5zdHJ1Y3RhYmxlIiwic3Vycm9nYXRlSW5zdHJ1Y3Rpb24iLCJWaWV3Q29tcGlsZXIiLCJfVmlld0NvbXBpbGVyIiwiY29tcGlsZSIsInNvdXJjZSIsImFkb3B0Tm9kZSIsImNvbXBpbGVOb2RlIiwidGFyZ2V0TGlnaHRET00iLCJjb21waWxlRWxlbWVudCIsIndob2xlVGV4dCIsIm1hcmtlciIsImF0dHIiLCJoYXNWYWx1ZXMiLCJjb21tYW5kIiwiaGFzT3B0aW9ucyIsImFsdGVyZWRBdHRyIiwiZGlzY3JldGUiLCJhdHRyVG9SZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlbGVtZW50UHJvcGVydHkiLCJQcm94eVZpZXdGYWN0b3J5IiwiYWJzb3JiIiwidmlld0NvbXBpbGVyIiwibW9kdWxlQW5hbHl6ZXIiLCJfcGx1Z2luTWFwIiwiTW9kdWxlQW5hbHl6ZXIiLCJhZGRSZXNvdXJjZVBsdWdpbiIsImV4dGVuc2lvbiIsImFkZFBsdWdpbiIsInZpZXdSZWdpc3RyeUVudHJ5Iiwib25SZWFkeSIsImxvYWRUZW1wbGF0ZVJlc291cmNlcyIsInNldFJlc291cmNlcyIsInNldEZhY3RvcnkiLCJzcmMiLCJpbXBvcnRWaWV3TW9kZWxSZXNvdXJjZSIsIm1vZHVsZUltcG9ydCIsIm1vZHVsZU1lbWJlciIsInZpZXdNb2RlbE1vZHVsZSIsIm5vcm1hbGl6ZWRJZCIsInJlc291cmNlTW9kdWxlIiwiYW5hbHl6ZSIsIm1haW5SZXNvdXJjZSIsIm1vZHVsZUlkcyIsIl9hcHBseUxvYWRlclBsdWdpbiIsImxvYWRBbGxNb2R1bGVzIiwiaW1wb3J0cyIsImFuYWx5c2lzIiwiYXNzb2NpYXRlZE1vZHVsZSIsImFsbEFuYWx5c2lzIiwiZ2V0QW5hbHlzaXMiLCJsYXN0SW5kZXhPZiIsImV4dCIsInBsdWdpbk5hbWUiLCJhcHBseVBsdWdpblRvVXJsIiwiQmVoYXZpb3JJbnN0YW5jZSIsIm9ic2VydmVyTG9va3VwIiwiaGFuZGxlc0JpbmQiLCJib3VuZFByb3BlcnRpZXMiLCJpbml0aWFsaXplIiwiY3JlYXRlRm9yVW5pdFRlc3QiLCJkZXNjcmlwdGlvbiIsIlJlc291cmNlRGVzY3JpcHRpb24iLCJiZWhhdmlvckNvbnRleHQiLCJiZWhhdmlvckluc3RhbmNlIiwibWV0YWRhdGEiLCJoYW5kbGVzQ3JlYXRlZCIsInNlbGZTdWJzY3JpYmVyIiwic2tpcFNlbGZTdWJzY3JpYmVyIiwicHVibGlzaGluZyIsImhhbmRsZXNVbmJpbmQiLCJoYW5kbGVzQXR0YWNoZWQiLCJoYW5kbGVzRGV0YWNoZWQiLCJuYW1lT3JDb25maWciLCJiaW5kaW5nTW9kZSIsIm9uZVdheSIsImNoYW5nZUhhbmRsZXIiLCJjb25maWd1cmVEZXNjcmlwdG9yIiwiZGVmYXVsdFZhbHVlIiwiZGVmaW5lT24iLCJoYW5kbGVyTmFtZSIsImNyZWF0ZU9ic2VydmVyIiwiaW5pdGlhbFZhbHVlIiwiY2hhbmdlSGFuZGxlck5hbWUiLCJvbGRWYWx1ZSIsInByb3BlcnR5Q2hhbmdlZCIsIkJlaGF2aW9yUHJvcGVydHlPYnNlcnZlciIsImJlaGF2aW9ySGFuZGxlc0JpbmQiLCJpc0R5bmFtaWMiLCJjcmVhdGVEeW5hbWljUHJvcGVydHkiLCJub3RxdWV1ZWQiLCJjb250ZW50U2VsZWN0b3JWaWV3Q3JlYXRlSW5zdHJ1Y3Rpb24iLCJ1c2VzU2hhZG93RE9NIiwiY2hpbGRCaW5kaW5ncyIsImNvbnZlbnRpb24iLCJodG1sTmFtZSIsImFwaU5hbWUiLCJ3IiwidG9VcHBlckNhc2UiLCJ0cmFuc2llbnRWaWV3IiwiX3RoaXM4IiwicmVnaXN0cnkiLCJjb21waWxlciIsImhhc0NoaWxkTm9kZXMiLCJ0b1JlcGxhY2UiLCJwcmltYXJ5QmVoYXZpb3IiLCJfX3Byb3BlcnRpZXNEZWZpbmVkX18iLCJSZXNvdXJjZU1vZHVsZSIsIm1vZHVsZUluc3RhbmNlIiwiaXNBbmFseXplZCIsIm9uTG9hZGVkIiwibG9hZHMiLCJleHBvcnRlZFZhbHVlIiwicmVzb3VyY2VUeXBlTWV0YSIsInJlc291cmNlRGVzY3JpcHRpb24iLCJWYWx1ZUNvbnZlcnRlclJlc291cmNlIiwidmlld01vZGVsTWVtYmVyIiwiZmFsbGJhY2tWYWx1ZSIsImZhbGxiYWNrS2V5IiwiY29udmVudGlvbmFsIiwiZGVmYXVsdCIsIm5vTXV0YXRpb25zIiwiQ2hpbGRPYnNlcnZlckJpbmRlciIsIm9uQ2hhbmdlIiwiaXRlbXMiLCJyZXN1bHRzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJtdXRhdGlvbnMiLCJyZWNvcmQiLCJwcmltYXJ5IiwiYWRkZWQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZCIsInJlbW92ZWROb2RlcyIsInByZXYiLCJwcmV2aW91c1NpYmxpbmciLCJhY3RpdmF0ZSIsInNraXBBY3RpdmF0aW9uIiwibW9kZWwiLCJjcmVhdGVCZWhhdmlvckFuZFN3YXAiLCJfdGhpczkiLCJjcmVhdGVCZWhhdmlvciIsImN1cnJlbnRCZWhhdmlvciIsInZpZXdNb2RlbFJlc291cmNlIiwiZG9uZUxvYWRpbmciLCJ2aWV3U3RyYXRlZ3lGcm9tVmlld01vZGVsIiwib3JpZ2luIiwiY3JlYXRlVmlld01vZGVsIiwiYXV0b1JlZ2lzdGVyIiwiX3RoaXMxMCIsImV2ZW50TWFuYWdlciIsIkV2ZW50TWFuYWdlciIsInJlZ2lzdGVyRWxlbWVudENvbmZpZyIsIkRlY29yYXRvcnMiLCJwYXJhbWV0ZXJpemVkRGVjb3JhdG9yIiwic2ltcGxlRGVjb3JhdG9yIiwiYXV0b2luamVjdCIsInBvdGVudGlhbFRhcmdldCIsInBhcmFtVHlwZXMiLCJlbXB0eVBhcmFtZXRlcnMiLCJfbGVuIiwicmVzdCIsIl9rZXkiLCJyZWdpc3RyYXRpb24iLCJ0cmFuc2llbnQiLCJUcmFuc2llbnRSZWdpc3RyYXRpb24iLCJrZXlPclJlZ2lzdGVySW5DaGlsZCIsInJlZ2lzdGVySW5DaGlsZCIsIlNpbmdsZXRvblJlZ2lzdHJhdGlvbiIsImluc3RhbmNlQWN0aXZhdG9yIiwiRmFjdG9yeUFjdGl2YXRvciIsImZuIiwiUmVzb2x2ZXIiLCJMYXp5IiwiX1Jlc29sdmVyIiwib2YiLCJBbGwiLCJfUmVzb2x2ZXIyIiwiZ2V0QWxsIiwiT3B0aW9uYWwiLCJfUmVzb2x2ZXIzIiwiY2hlY2tQYXJlbnQiLCJQYXJlbnQiLCJfUmVzb2x2ZXI0IiwiQ2xhc3NBY3RpdmF0b3IiLCJpbnZva2UiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYmFkS2V5RXJyb3IiLCJGdW5jdGlvbiIsImNvbnN0cnVjdGlvbkluZm8iLCJlbnRyaWVzIiwicmVnaXN0ZXJIYW5kbGVyIiwiYXV0b1JlZ2lzdGVyQWxsIiwiZm5zIiwiaGFuZGxlciIsIl9nZXRPckNyZWF0ZUVudHJ5IiwidW5yZWdpc3RlciIsIl9nZXRPckNyZWF0ZUNvbnN0cnVjdGlvbkluZm8iLCJjb25jYXQiLCJhY3RpdmF0b3IiLCJhY3RpdmF0aW5nVGV4dCIsIl9jcmVhdGVDb25zdHJ1Y3Rpb25JbmZvIiwiVGVtcGxhdGVEZXBlbmRlbmN5IiwidXNlUmVzb3VyY2VzIiwidGVtcGxhdGVSZWdpc3RyeSIsImlkcyIsImxvYWRUZXh0IiwiZ2V0T3JDcmVhdGVUZW1wbGF0ZVJlZ2lzdHJ5RW50cnkiLCJpc0luZGV4IiwicyIsInRvTnVtYmVyIiwibmV3U3BsaWNlIiwiYWRkZWRDb3VudCIsIkFycmF5U3BsaWNlIiwiY2FsY1NwbGljZXMiLCJjdXJyZW50U3RhcnQiLCJjdXJyZW50RW5kIiwib2xkIiwib2xkU3RhcnQiLCJvbGRFbmQiLCJhcnJheVNwbGljZSIsImludGVyc2VjdCIsInN0YXJ0MSIsImVuZDEiLCJzdGFydDIiLCJlbmQyIiwibWVyZ2VTcGxpY2UiLCJzcGxpY2VzIiwiaW5zZXJ0ZWQiLCJpbnNlcnRpb25PZmZzZXQiLCJpbnRlcnNlY3RDb3VudCIsImRlbGV0ZUNvdW50IiwiYXBwZW5kIiwib2Zmc2V0IiwiY3JlYXRlSW5pdGlhbFNwbGljZXMiLCJhcnJheSIsImNoYW5nZVJlY29yZHMiLCJKU09OIiwic3RyaW5naWZ5IiwicHJvamVjdEFycmF5U3BsaWNlcyIsIm5ld1JlY29yZCIsIm9iamVjdCIsImdldENoYW5nZVJlY29yZHMiLCJfaXRlcmF0b3IiLCJfaXNBcnJheSIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcmVmIiwiZG9uZSIsIl9nZXRBcnJheU9ic2VydmVyIiwiaGFzQXJyYXlPYnNlcnZlIiwiQXJyYXlPYnNlcnZlT2JzZXJ2ZXIiLCJNb2RpZnlBcnJheU9ic2VydmVyIiwiZXZhbExpc3QiLCJzY29wZSIsImxpc3QiLCJjYWNoZUxlbmd0aCIsImV2YWxMaXN0Q2FjaGUiLCJldmFsdWF0ZSIsImF1dG9Db252ZXJ0QWRkIiwiZW5zdXJlRnVuY3Rpb25Gcm9tTWFwIiwiZnVuYyIsImdldEtleWVkIiwic2V0S2V5ZWQiLCJpc1doaXRlc3BhY2UiLCJjb2RlIiwiJFRBQiIsIiRTUEFDRSIsIiROQlNQIiwiaXNJZGVudGlmaWVyU3RhcnQiLCIkYSIsIiR6IiwiJEEiLCIkWiIsIiRfIiwiJCQiLCJpc0lkZW50aWZpZXJQYXJ0IiwiJDAiLCIkOSIsImlzRGlnaXQiLCJpc0V4cG9uZW50U3RhcnQiLCIkZSIsIiRFIiwiaXNFeHBvbmVudFNpZ24iLCIkTUlOVVMiLCIkUExVUyIsImFzc2VydCIsImNvbmRpdGlvbiIsIl9nZXRNYXBPYnNlcnZlciIsIk1vZGlmeU1hcE9ic2VydmVyIiwiZmluZE9yaWdpbmFsRXZlbnRUYXJnZXQiLCJvcmlnaW5hbFRhcmdldCIsImRlZXBQYXRoIiwic3JjRWxlbWVudCIsImhhbmRsZURlbGVnYXRlZEV2ZW50IiwiZGVsZWdhdGVkQ2FsbGJhY2tzIiwiaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMiLCJkZWNsYXJlUHJvcGVydHlEZXBlbmRlbmNpZXMiLCJjdG9yIiwiaXNTdGFuZGFyZFN2Z0F0dHJpYnV0ZSIsInByZXNlbnRhdGlvbkVsZW1lbnRzIiwicHJlc2VudGF0aW9uQXR0cmlidXRlcyIsImh0bWwiLCJkaXYiLCJjcmVhdGVPYnNlcnZlckxvb2t1cCIsIk9vT2JqZWN0T2JzZXJ2ZXIiLCJfIiwiY2FtZWxDYXNlIiwibmFtZU9yVGFyZ2V0IiwiZ2V0QXJyYXlPYnNlcnZlciIsImdldE1hcE9ic2VydmVyIiwiQWNjZXNzS2V5ZWRPYnNlcnZlciIsIm9iamVjdEluZm8iLCJrZXlJbmZvIiwiZGlzcG9zZUtleSIsIm9iamVjdE9yS2V5Q2hhbmdlZCIsImRpc3Bvc2VPYmplY3QiLCJ1cGRhdGVQcm9wZXJ0eVN1YnNjcmlwdGlvbiIsImRpc3Bvc2VQcm9wZXJ0eSIsIm5vdGlmeSIsIm9vIiwia28iLCJ0aGF0IiwiZGlzcG9zZSIsIkVESVRfTEVBVkUiLCJFRElUX1VQREFURSIsIkVESVRfQUREIiwiRURJVF9ERUxFVEUiLCJjYWxjRWRpdERpc3RhbmNlcyIsIm5vcnRoIiwid2VzdCIsInJvd0NvdW50IiwiY29sdW1uQ291bnQiLCJkaXN0YW5jZXMiLCJlcXVhbHMiLCJzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMiLCJlZGl0cyIsIm1pbiIsIm5vcnRoV2VzdCIsInJldmVyc2UiLCJwcmVmaXhDb3VudCIsInN1ZmZpeENvdW50IiwibWluTGVuZ3RoIiwiTWF0aCIsInNoYXJlZFByZWZpeCIsInNoYXJlZFN1ZmZpeCIsIm9wcyIsIm9sZEluZGV4Iiwic2VhcmNoTGVuZ3RoIiwiaW5kZXgxIiwiaW5kZXgyIiwiY291bnQiLCJjYWxjdWxhdGVTcGxpY2VzIiwicHJldmlvdXMiLCJwcmV2aW91c1ZhbHVlIiwiaGFzT2JqZWN0T2JzZXJ2ZSIsInJlY3MiLCJyZWNvcmRzIiwiZGVsaXZlckNoYW5nZVJlY29yZHMiLCJ1bm9ic2VydmUiLCJhcnIiLCJNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIiLCJxdWV1ZWQiLCJvbGRDb2xsZWN0aW9uIiwibGVuZ3RoUHJvcGVydHlOYW1lIiwiYWRkQ2hhbmdlUmVjb3JkIiwiY2hhbmdlUmVjb3JkIiwibGVuZ3RoT2JzZXJ2ZXIiLCJyZXNldCIsImdldExlbmd0aE9ic2VydmVyIiwiQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyIiwiYXJyYXlQcm90byIsIl9Nb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIiLCJtZXRob2RDYWxsUmVzdWx0Iiwib2xkQXJyYXkiLCJoYW5kbGVDaGFuZ2VzIiwiUGF0aE9ic2VydmVyIiwibGVmdE9ic2VydmVyIiwiZ2V0UmlnaHRPYnNlcnZlciIsImRpc3Bvc2VMZWZ0IiwibmV3UmlnaHRWYWx1ZSIsInVwZGF0ZVJpZ2h0IiwicmlnaHRPYnNlcnZlciIsImRpc3Bvc2VSaWdodCIsIkNvbXBvc2l0ZU9ic2VydmVyIiwib2JzZXJ2ZXJzIiwic3Vic2NyaXB0aW9ucyIsIkV4cHJlc3Npb24iLCJpc0NoYWluIiwiaXNBc3NpZ25hYmxlIiwiVW5wYXJzZXIiLCJ1bnBhcnNlIiwiQ2hhaW4iLCJfRXhwcmVzc2lvbiIsImFjY2VwdCIsInZpc2l0b3IiLCJ2aXNpdENoYWluIiwiVmFsdWVDb252ZXJ0ZXIiLCJfRXhwcmVzc2lvbjIiLCJhbGxBcmdzIiwiY29udmVydGVyIiwidG9WaWV3IiwiZnJvbVZpZXciLCJ2aXNpdFZhbHVlQ29udmVydGVyIiwiY29ubmVjdCIsImV4cCIsImV4cEluZm8iLCJjaGlsZE9ic2VydmVycyIsIkFzc2lnbiIsIl9FeHByZXNzaW9uMyIsInZpc3RvciIsInZpc2l0QXNzaWduIiwiQ29uZGl0aW9uYWwiLCJfRXhwcmVzc2lvbjQiLCJ5ZXMiLCJubyIsInZpc2l0Q29uZGl0aW9uYWwiLCJjb25kaXRpb25JbmZvIiwieWVzSW5mbyIsIm5vSW5mbyIsIkFjY2Vzc1Njb3BlIiwiX0V4cHJlc3Npb241IiwidmlzaXRBY2Nlc3NTY29wZSIsIkFjY2Vzc01lbWJlciIsIl9FeHByZXNzaW9uNiIsInZpc2l0QWNjZXNzTWVtYmVyIiwib2JqZWN0SW5zdGFuY2UiLCJvYmplY3RPYnNlcnZlciIsIkFjY2Vzc0tleWVkIiwiX0V4cHJlc3Npb243IiwidmlzaXRBY2Nlc3NLZXllZCIsIkNhbGxTY29wZSIsIl9FeHByZXNzaW9uOCIsInZpc2l0Q2FsbFNjb3BlIiwiX3RoaXMxMSIsIkNhbGxNZW1iZXIiLCJfRXhwcmVzc2lvbjkiLCJ2aXNpdENhbGxNZW1iZXIiLCJfdGhpczEyIiwiQ2FsbEZ1bmN0aW9uIiwiX0V4cHJlc3Npb24xMCIsInZpc2l0Q2FsbEZ1bmN0aW9uIiwiX3RoaXMxMyIsImZ1bmNJbmZvIiwiQmluYXJ5IiwiX0V4cHJlc3Npb24xMSIsIm9wZXJhdGlvbiIsImxlZnQiLCJyaWdodCIsInZpc2l0QmluYXJ5IiwiX3RoaXMxNCIsImxlZnRJbmZvIiwicmlnaHRJbmZvIiwiUHJlZml4Tm90IiwiX0V4cHJlc3Npb24xMiIsInZpc2l0UHJlZml4IiwiX3RoaXMxNSIsIkxpdGVyYWxQcmltaXRpdmUiLCJfRXhwcmVzc2lvbjEzIiwidmlzaXRMaXRlcmFsUHJpbWl0aXZlIiwiTGl0ZXJhbFN0cmluZyIsIl9FeHByZXNzaW9uMTQiLCJ2aXNpdExpdGVyYWxTdHJpbmciLCJMaXRlcmFsQXJyYXkiLCJfRXhwcmVzc2lvbjE1IiwidmlzaXRMaXRlcmFsQXJyYXkiLCJfdGhpczE2IiwiTGl0ZXJhbE9iamVjdCIsIl9FeHByZXNzaW9uMTYiLCJ2aXNpdExpdGVyYWxPYmplY3QiLCJ2YWx1ZUluZm8iLCJfdGhpczE3IiwiYnVmZmVyIiwid3JpdGUiLCJ0ZXh0Iiwid3JpdGVBcmdzIiwiY2hhaW4iLCJjb25kaXRpb25hbCIsImFjY2VzcyIsInByZWZpeCIsImJpbmFyeSIsImxpdGVyYWwiLCJlc2NhcGVkIiwib25lVGltZSIsInR3b1dheSIsIlRva2VuIiwid2l0aE9wIiwib3AiLCJvcEtleSIsIndpdGhHZXR0ZXJTZXR0ZXIiLCJ3aXRoVmFsdWUiLCJMZXhlciIsImxleCIsInNjYW5uZXIiLCJTY2FubmVyIiwidG9rZW5zIiwidG9rZW4iLCJzY2FuVG9rZW4iLCJpbnB1dCIsInBlZWsiLCJhZHZhbmNlIiwiJEVPRiIsImNoYXJDb2RlQXQiLCJzY2FuSWRlbnRpZmllciIsInNjYW5OdW1iZXIiLCIkUEVSSU9EIiwiJExQQVJFTiIsIiRSUEFSRU4iLCIkTEJSQUNFIiwiJFJCUkFDRSIsIiRMQlJBQ0tFVCIsIiRSQlJBQ0tFVCIsIiRDT01NQSIsIiRDT0xPTiIsIiRTRU1JQ09MT04iLCJzY2FuQ2hhcmFjdGVyIiwiZnJvbUNoYXJDb2RlIiwiJFNRIiwiJERRIiwic2NhblN0cmluZyIsIiRTVEFSIiwiJFNMQVNIIiwiJFBFUkNFTlQiLCIkQ0FSRVQiLCIkUVVFU1RJT04iLCJzY2FuT3BlcmF0b3IiLCIkTFQiLCIkR1QiLCIkQkFORyIsIiRFUSIsInNjYW5Db21wbGV4T3BlcmF0b3IiLCIkQU1QRVJTQU5EIiwiJEJBUiIsImNoYXJhY3RlciIsIk9QRVJBVE9SUyIsIm9uZSIsInR3byIsInNpbXBsZSIsInF1b3RlIiwiJEJBQ0tTTEFTSCIsInVuZXNjYXBlZCIsIiR1IiwiaGV4IiwicG9zaXRpb24iLCJFT0YiLCJQYXJzZXIiLCJsZXhlciIsInBhcnNlIiwiUGFyc2VySW1wbGVtZW50YXRpb24iLCJwYXJzZUNoYWluIiwib3B0aW9uYWwiLCJleHByIiwicGFyc2VWYWx1ZUNvbnZlcnRlciIsInBhcnNlRXhwcmVzc2lvbiIsInBhcnNlQ29uZGl0aW9uYWwiLCJleHBlY3QiLCJwYXJzZUxvZ2ljYWxPciIsInBhcnNlTG9naWNhbEFuZCIsInBhcnNlRXF1YWxpdHkiLCJwYXJzZVJlbGF0aW9uYWwiLCJwYXJzZUFkZGl0aXZlIiwicGFyc2VNdWx0aXBsaWNhdGl2ZSIsInBhcnNlUHJlZml4IiwicGFyc2VBY2Nlc3NPckNhbGxNZW1iZXIiLCJwYXJzZVByaW1hcnkiLCJwYXJzZUV4cHJlc3Npb25MaXN0IiwicGFyc2VPYmplY3QiLCJwYXJzZUFjY2Vzc09yQ2FsbFNjb3BlIiwidGVybWluYXRvciIsImxvY2F0aW9uIiwibWFwUHJvdG8iLCJfTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyMiIsIkRlbGVnYXRlSGFuZGxlckVudHJ5IiwiZXZlbnROYW1lIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkRlZmF1bHRFdmVudFN0cmF0ZWd5IiwidGFyZ2V0RXZlbnQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlZEhhbmRsZXJzIiwiaGFuZGxlckVudHJ5IiwiZWxlbWVudEhhbmRsZXJMb29rdXAiLCJldmVudFN0cmF0ZWd5TG9va3VwIiwiY2hlY2tlZCIsImZpbGVzIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImRlZmF1bHRFdmVudFN0cmF0ZWd5IiwicmVnaXN0ZXJFbGVtZW50UHJvcGVydHlDb25maWciLCJldmVudHMiLCJjaGFuZ2VFdmVudCIsInJlZ2lzdGVyRWxlbWVudEhhbmRsZXIiLCJyZWdpc3RlckV2ZW50U3RyYXRlZ3kiLCJnZXRFbGVtZW50SGFuZGxlciIsIkRpcnR5Q2hlY2tlciIsInRyYWNrZWQiLCJjaGVja0RlbGF5Iiwic2NoZWR1bGVEaXJ0eUNoZWNrIiwicmVtb3ZlUHJvcGVydHkiLCJfdGhpczE4IiwiY2hlY2siLCJEaXJ0eUNoZWNrUHJvcGVydHkiLCJkaXJ0eUNoZWNrZXIiLCJpc1NWRyIsIlNWR0VsZW1lbnQiLCJzZXRBdHRyaWJ1dGVOUyIsImJlZ2luVHJhY2tpbmciLCJ0cmFja2luZyIsImVuZFRyYWNraW5nIiwiU2V0dGVyT2JzZXJ2ZXIiLCJvYnNlcnZpbmciLCJnZXR0ZXJWYWx1ZSIsInNldHRlclZhbHVlIiwiY29udmVydFByb3BlcnR5IiwiT29Qcm9wZXJ0eU9ic2VydmVyIiwiY2FsbGJhY2tDb3VudCIsInVuc3Vic2NyaWJlIiwicHJvcGVydHlPYnNlcnZlciIsIlVuZGVmaW5lZFByb3BlcnR5T2JzZXJ2ZXIiLCJjaGFuZ2VzIiwiY2hhbmdlIiwiY2FsbGJhY2tNYXAiLCJhY3R1YWwiLCJ0cmlnZ2VyIiwic3Vic2NyaXB0aW9uIiwiX2l0ZXJhdG9yMiIsIl9pc0FycmF5MiIsIl9pMiIsIl9pdGVyYXRvcjMiLCJfaXNBcnJheTMiLCJfaTMiLCJfdGhpczE5IiwiYWN0dWFsRGlzcG9zZSIsIlhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIiLCJnZXRBdHRyaWJ1dGVOUyIsIkRhdGFBdHRyaWJ1dGVPYnNlcnZlciIsIlN0eWxlT2JzZXJ2ZXIiLCJjc3NUZXh0IiwiZmxhdHRlbkNzcyIsIlZhbHVlQXR0cmlidXRlT2JzZXJ2ZXIiLCJkaXNwb3NlSGFuZGxlciIsIlNlbGVjdFZhbHVlT2JzZXJ2ZXIiLCJfdGhpczIwIiwibXVsdGlwbGUiLCJhcnJheVN1YnNjcmlwdGlvbiIsInN5bmNocm9uaXplT3B0aW9ucyIsImluaXRpYWxTeW5jIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJpdGVtIiwic2VsZWN0ZWQiLCJzeW5jaHJvbml6ZVZhbHVlIiwiX3RoaXMyMSIsImRvbU9ic2VydmVyIiwiQ2hlY2tlZE9ic2VydmVyIiwiX3RoaXMyMiIsInN5bmNocm9uaXplRWxlbWVudCIsImVsZW1lbnRWYWx1ZSIsImlzUmFkaW8iLCJDbGFzc09ic2VydmVyIiwiZG9Ob3RDYWNoZSIsIm5hbWVJbmRleCIsIkNvbXB1dGVkUHJvcGVydHlPYnNlcnZlciIsIl90aGlzMjMiLCJhbHRHbHlwaCIsImFsdEdseXBoRGVmIiwiYWx0R2x5cGhJdGVtIiwiYW5pbWF0ZUNvbG9yIiwiYW5pbWF0ZU1vdGlvbiIsImFuaW1hdGVUcmFuc2Zvcm0iLCJjaXJjbGUiLCJjbGlwUGF0aCIsImNvbG9yLXByb2ZpbGUiLCJjdXJzb3IiLCJkZWZzIiwiZGVzYyIsImVsbGlwc2UiLCJmZUJsZW5kIiwiZmVDb2xvck1hdHJpeCIsImZlQ29tcG9uZW50VHJhbnNmZXIiLCJmZUNvbXBvc2l0ZSIsImZlQ29udm9sdmVNYXRyaXgiLCJmZURpZmZ1c2VMaWdodGluZyIsImZlRGlzcGxhY2VtZW50TWFwIiwiZmVEaXN0YW50TGlnaHQiLCJmZUZsb29kIiwiZmVGdW5jQSIsImZlRnVuY0IiLCJmZUZ1bmNHIiwiZmVGdW5jUiIsImZlR2F1c3NpYW5CbHVyIiwiZmVJbWFnZSIsImZlTWVyZ2UiLCJmZU1lcmdlTm9kZSIsImZlTW9ycGhvbG9neSIsImZlT2Zmc2V0IiwiZmVQb2ludExpZ2h0IiwiZmVTcGVjdWxhckxpZ2h0aW5nIiwiZmVTcG90TGlnaHQiLCJmZVRpbGUiLCJmZVR1cmJ1bGVuY2UiLCJmaWx0ZXIiLCJmb250IiwiZm9udC1mYWNlIiwiZm9udC1mYWNlLWZvcm1hdCIsImZvbnQtZmFjZS1uYW1lIiwiZm9udC1mYWNlLXNyYyIsImZvbnQtZmFjZS11cmkiLCJmb3JlaWduT2JqZWN0IiwiZyIsImdseXBoIiwiZ2x5cGhSZWYiLCJoa2VybiIsImltYWdlIiwibGluZSIsImxpbmVhckdyYWRpZW50IiwibWFzayIsIm1pc3NpbmctZ2x5cGgiLCJtcGF0aCIsInBhdHRlcm4iLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzY3JpcHQiLCJzdG9wIiwic3ZnIiwic3dpdGNoIiwic3ltYm9sIiwidGV4dFBhdGgiLCJ0aXRsZSIsInRyZWYiLCJ0c3BhbiIsInZrZXJuIiwiYWxpZ25tZW50LWJhc2VsaW5lIiwiYmFzZWxpbmUtc2hpZnQiLCJjbGlwLXBhdGgiLCJjbGlwLXJ1bGUiLCJjbGlwIiwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIiwiY29sb3ItaW50ZXJwb2xhdGlvbiIsImNvbG9yLXJlbmRlcmluZyIsImNvbG9yIiwiZGlyZWN0aW9uIiwiZGlzcGxheSIsImRvbWluYW50LWJhc2VsaW5lIiwiZW5hYmxlLWJhY2tncm91bmQiLCJmaWxsLW9wYWNpdHkiLCJmaWxsLXJ1bGUiLCJmaWxsIiwiZmxvb2QtY29sb3IiLCJmbG9vZC1vcGFjaXR5IiwiZm9udC1mYW1pbHkiLCJmb250LXNpemUtYWRqdXN0IiwiZm9udC1zaXplIiwiZm9udC1zdHJldGNoIiwiZm9udC1zdHlsZSIsImZvbnQtdmFyaWFudCIsImZvbnQtd2VpZ2h0IiwiZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCIsImdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIiwiaW1hZ2UtcmVuZGVyaW5nIiwia2VybmluZyIsImxldHRlci1zcGFjaW5nIiwibGlnaHRpbmctY29sb3IiLCJtYXJrZXItZW5kIiwibWFya2VyLW1pZCIsIm1hcmtlci1zdGFydCIsIm9wYWNpdHkiLCJvdmVyZmxvdyIsInBvaW50ZXItZXZlbnRzIiwic2hhcGUtcmVuZGVyaW5nIiwic3RvcC1jb2xvciIsInN0b3Atb3BhY2l0eSIsInN0cm9rZS1kYXNoYXJyYXkiLCJzdHJva2UtZGFzaG9mZnNldCIsInN0cm9rZS1saW5lY2FwIiwic3Ryb2tlLWxpbmVqb2luIiwic3Ryb2tlLW1pdGVybGltaXQiLCJzdHJva2Utb3BhY2l0eSIsInN0cm9rZS13aWR0aCIsInN0cm9rZSIsInRleHQtYW5jaG9yIiwidGV4dC1kZWNvcmF0aW9uIiwidGV4dC1yZW5kZXJpbmciLCJ1bmljb2RlLWJpZGkiLCJ2aXNpYmlsaXR5Iiwid29yZC1zcGFjaW5nIiwid3JpdGluZy1tb2RlIiwiYWx0Z2x5cGgiLCJhbHRnbHlwaGRlZiIsImFsdGdseXBoaXRlbSIsImdseXBocmVmIiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwicGQiLCJnZXRQcm90b3R5cGVPZiIsIm9ic2VydmF0aW9uQWRhcHRlcnMiLCJPYmplY3RPYnNlcnZhdGlvbkFkYXB0ZXIiLCJvYnNlcnZlcnNMb29rdXAiLCJjcmVhdGVQcm9wZXJ0eU9ic2VydmVyIiwiY3JlYXRlT2JzZXJ2ZXJzTG9va3VwIiwiZ2V0T2JzZXJ2YXRpb25BZGFwdGVyIiwib2JzZXJ2YXRpb25BZGFwdGVyIiwiaGFuZGxlc1Byb3BlcnR5IiwieGxpbmtSZXN1bHQiLCJleGVjIiwiZXhpc3RpbmdHZXR0ZXJPclNldHRlciIsIl9fb2JzZXJ2ZXJfXyIsIl9fYXJyYXlfb2JzZXJ2ZXJfXyIsIl9fbWFwX29ic2VydmVyX18iLCJCaW5kaW5nRXhwcmVzc2lvbiIsInNvdXJjZUV4cHJlc3Npb24iLCJtb2RlIiwiQmluZGluZyIsIl90aGlzMjQiLCJfZGlzcG9zZU9ic2VydmVyIiwiX2Rpc3Bvc2VMaXN0ZW5lciIsIkNhbGxFeHByZXNzaW9uIiwiQ2FsbCIsIl90aGlzMjUiLCIkZXZlbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJ0ZXN0RWxlbWVudCIsImNyZWF0ZU1ldGhvZCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiRE9NVG9rZW5MaXN0IiwiX3RvZ2dsZSIsImZvcmNlIiwiY2xhc3NMaXN0UHJvcCIsInByb3RvUHJvcCIsImVsZW1DdHJQcm90byIsIm9iakN0ciIsInN0clRyaW0iLCJhcnJJbmRleE9mIiwiRE9NRXgiLCJET01FeGNlcHRpb24iLCJjaGVja1Rva2VuQW5kR2V0SW5kZXgiLCJDbGFzc0xpc3QiLCJlbGVtIiwidHJpbW1lZENsYXNzZXMiLCJjbGFzc2VzIiwiX3VwZGF0ZUNsYXNzTmFtZSIsImNsYXNzTGlzdFByb3RvIiwiY2xhc3NMaXN0R2V0dGVyIiwidXBkYXRlZCIsImNsYXNzTGlzdFByb3BEZXNjIiwiZXgiLCJudW1iZXIiLCJfX2RlZmluZUdldHRlcl9fIiwic2VsZiIsIkxpc3RlbmVyRXhwcmVzc2lvbiIsIkxpc3RlbmVyIiwiX3RoaXMyNiIsInByZXZFdmVudCIsIk5hbWVFeHByZXNzaW9uIiwiTmFtZUJpbmRlciIsImVuc3VyZURlY29yYXRvcnMiLCJhcHBsaWNhdG9yIiwiX2RlY29yYXRlIiwidGhlR2xvYmFsIiwiZW1wdHlNZXRhZGF0YSIsIm1ldGFkYXRhQ29udGFpbmVyS2V5IiwiaXNGYWtlIiwiZm9yRWFjaE1vZHVsZSIsImdldE93bk1ldGFkYXRhIiwidGFyZ2V0S2V5IiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGFDb250YWluZXIiLCJ0YXJnZXRDb250YWluZXIiLCJUeXBlIiwib3JpZ2luU3RvcmFnZSIsInVua25vd25PcmlnaW4iLCJfbmFtZSIsIkRlY29yYXRvckFwcGxpY2F0b3IiLCJfZmlyc3QiLCJfc2Vjb25kIiwiX3RoaXJkIiwiX3Jlc3QiLCJfZGVjb3JhdG9yIiwiX3giLCJWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uIiwiaXNSZXF1aXJlZCIsInZhbGlkYXRpb25SdWxlcyIsInZhbGlkYXRpb25Db2xsZWN0aW9ucyIsImlzUmVxdWlyZWRNZXNzYWdlIiwiZXhlY3V0ZVJ1bGVzIiwiY2hlY2tzIiwicnVsZSIsInByZXZpb3VzUnVsZVJlc3VsdCIsInRoaXNSdWxlUmVzdWx0IiwiX2xvb3AyIiwidmFsaWRhdGlvbkNvbGxlY3Rpb24iLCJwcmV2aW91c1ZhbGlkYXRpb25SZXN1bHQiLCJhZGRWYWxpZGF0aW9uUnVsZSIsImFkZFZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbiIsInZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24iLCJTd2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbiIsImlubmVyQ29sbGVjdGlvbnMiLCJkZWZhdWx0Q29sbGVjdGlvbiIsImRlZmF1bHRDYXNlTGFiZWwiLCJnZXRDdXJyZW50Q29sbGVjdGlvbiIsImNyZWF0ZUlmTm90RXhpc3RzIiwiY3VycmVudENvbGxlY3Rpb24iLCJfdmFsaWRhdGlvblZhbGlkYXRpb25Qcm9wZXJ0eSIsInZhbGlkYXRpb25Hcm91cCIsInZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnMiLCJjb25maWd1cmF0aW9uQ2FsbGJhY2siLCJuZXdWYWxpZGF0aW9uUHJvcGVydHkiLCJwcm9wZXJ0eVJlc3VsdCIsIlZhbGlkYXRpb25Qcm9wZXJ0eSIsImNvbGxlY3Rpb25PZlZhbGlkYXRpb25SdWxlcyIsImNoZWNrTGFzdCIsImNvbmRpdGlvbmFsQ29sbGVjdGlvbiIsIkRpY3QiLCJpdGVyYWJsZSIsImRpY3QiLCIkIiwiJGl0ZXIiLCJpcyIsImZvck9mIiwiRGljdEl0ZXJhdG9yIiwiaXRlcmF0ZWQiLCJraW5kIiwiSVRFUiIsIm8iLCJ0b09iamVjdCIsImdldEtleXMiLCJjcmVhdGVEaWN0SXRlciIsIml0IiwiZ2VuZXJpYyIsIkEiLCJCIiwiY3JlYXRlRGljdE1ldGhvZCIsIlRZUEUiLCJJU19NQVAiLCJJU19FVkVSWSIsImNhbGxiYWNrZm4iLCJyZXMiLCJjdHgiLCJPIiwiY3JlYXRlRGljdFJlZHVjZSIsIklTX1RVUk4iLCJtYXBmbiIsImluaXQiLCJtZW1vIiwiJGRlZiIsImtleU9mIiwic2FmZSIsInN0ZXAiLCJpdGVyIiwiZmluZEtleSIsIkciLCJGIiwiUyIsInNvbWUiLCJldmVyeSIsIm1hcFBhaXJzIiwicmVkdWNlIiwidHVybiIsImluY2x1ZGVzIiwiZWwiLCJkZWYiLCJpc0RpY3QiLCJpc09iamVjdCIsImdldFByb3RvIiwiaXNJdGVyYWJsZSIsImdldEl0ZXJhdG9yIiwiJGZvciIsIkVOVFJJRVMiLCJjcmVhdGVDaGFpbkl0ZXJhdG9yIiwiSXRlcmF0b3IiLCJGTiIsImNyZWF0ZUl0ZXJhdG9yIiwiJGZvclByb3RvIiwic2V0SXRlcmF0b3IiLCJNYXBJdGVyIiwiRmlsdGVySXRlciIsInBhcnRpYWwiLCJkZWxheSIsInRpbWUiLCJQIiwibWl4aW4iLCJvd25LZXlzIiwic2V0RGVzYyIsImdldERlc2MiLCJjbGFzc29mIiwibWFrZSIsImFzc2VydEZ1bmN0aW9uIiwiRVM1T2JqZWN0IiwidG9MZW5ndGgiLCJtZXRob2RzIiwicmFuZG9tIiwibGltIiwibWF4IiwiRlciLCJlYWNoIiwicmVwbGFjZXIiLCJlc2NhcGVIVE1MRGljdCIsIiYiLCI8IiwiPiIsIlwiIiwiJyIsInVuZXNjYXBlSFRNTERpY3QiLCJlc2NhcGVIVE1MIiwidW5lc2NhcGVIVE1MIiwibHoiLCJudW0iLCJjcmVhdGVGb3JtYXQiLCJ1bml0IiwibG9jYWxlcyIsImZvcm1hdFJlZ0V4cCIsIlNFQ09ORFMiLCJNSU5VVEVTIiwiSE9VUlMiLCJEQVRFIiwiTU9OVEgiLCJZRUFSIiwibGFuZyIsIm1vbnRocyIsImZsZXhpb1JlZ0V4cCIsIndlZWtkYXlzIiwiZm9ybWF0IiwiZm9ybWF0VVRDIiwiZW5hYmxlZCIsImlzRnVuY3Rpb24iLCJlbmFibGUiLCJkaXNhYmxlIiwidG9JbnRlZ2VyIiwiZmxvb3IiLCJjZWlsIiwiYml0bWFwIiwic2ltcGxlU2V0IiwiY3JlYXRlRGVmaW5lciIsIkRFU0MiLCJhc3NlcnREZWZpbmVkIiwiaGlkZSIsImRvY3VtZW50RWxlbWVudCIsInRvSW5kZXgiLCJzZXREZXNjcyIsImdldE5hbWVzIiwiZ2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIl9fZSIsIl9fZyIsIl92YWxpZGF0aW9uUGF0aE9ic2VydmVyIiwiX3ZhbGlkYXRpb25EZWJvdW5jZXIiLCJkZWJvdW5jZXIiLCJEZWJvdW5jZXIiLCJkZWJvdW5jZSIsImRlcGVuZGVuY3lPYnNlcnZlcnMiLCJkZXBlbmRlbmN5T2JzZXJ2ZXIiLCJlcnIiLCJtaXgiLCJzdGVwQ2FsbCIsInRpZSIsImJvdW5kIiwidG9Mb2NhbGVTdHJpbmciLCJvbmx5IiwibnVtYmVyQXJndW1lbnRzIiwibiIsImlzVGhhdCIsIk51bWJlckl0ZXJhdG9yIiwiTlVNQkVSIiwiY3JlYXRlR2V0S2V5cyIsIklFX1BST1RPIiwiJGluZGV4T2YiLCJFbXB0eSIsImNyZWF0ZUFycmF5UmVkdWNlIiwiaXNSaWdodCIsImNlbCIsImNvZiIsImFycmF5TWV0aG9kIiwiYXNzZXJ0T2JqZWN0IiwiT2JqZWN0UHJvdG8iLCJfc2xpY2UiLCJfam9pbiIsImdldE93bkRlc2NyaXB0b3IiLCJJRThfRE9NX0RFRklORSIsIiRmb3JFYWNoIiwiJG1hcCIsIiRmaWx0ZXIiLCIkc29tZSIsIiRldmVyeSIsIkF0dHJpYnV0ZXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlByb3BlcnRpZXMiLCJrZXlzMSIsImtleXMyIiwia2V5c0xlbjEiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJndCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiY2xvc2UiLCJzZWFsIiwicHJldmVudEV4dGVuc2lvbnMiLCJpc1NlYWxlZCIsImlzRnJvemVuIiwiaXNFeHRlbnNpYmxlIiwicGFydEFyZ3MiLCJjb25zdHIiLCJidWdneVNsaWNlIiwiYmVnaW4iLCJrbGFzcyIsInVwVG8iLCJjbG9uZWQiLCJhcmciLCJyZWR1Y2VSaWdodCIsImZyb21JbmRleCIsIm5vdyIsImRhdGUiLCJicm9rZW5EYXRlIiwidG9JU09TdHJpbmciLCJOYU4iLCJSYW5nZUVycm9yIiwieSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiYWJzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsInRhZyIsImNhbGxlZSIsIndyYXAiLCJzeW0iLCJBbGxTeW1ib2xzIiwiJGNyZWF0ZSIsIiRTeW1ib2wiLCJUQUciLCJzZXR0ZXIiLCJzZXRTeW1ib2xEZXNjIiwiSElEREVOIiwiRCIsImVudW1LZXlzIiwiRSIsIl9wcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNldFRhZyIsInVpZCIsInNoYXJlZCIsIiRyZWRlZiIsIiRuYW1lcyIsIlN5bWJvbFJlZ2lzdHJ5IiwidXNlTmF0aXZlIiwicHJvdG9EZXNjIiwic3ltYm9sU3RhdGljcyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIlciLCJ0bXAiLCJLRVkiLCJJRCIsImZvcmNlZCIsIk5BTUUiLCJGdW5jdGlvblByb3RvIiwiSEFTX0lOU1RBTkNFIiwidG9QcmltaXRpdmUiLCJ2YWx1ZU9mIiwiJE51bWJlciIsIkJhc2UiLCJpc0ludGVnZXIiLCJfaXNGaW5pdGUiLCJNQVhfU0FGRV9JTlRFR0VSIiwiRVBTSUxPTiIsInBvdyIsImlzU2FmZUludGVnZXIiLCJNSU5fU0FGRV9JTlRFR0VSIiwicm91bmRUaWVzVG9FdmVuIiwic2lnbiIsImFzaW5oIiwic3FydCIsImV4cG0xIiwiSW5maW5pdHkiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiYWNvc2giLCJhdGFuaCIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwic3VtIiwibGFyZyIsImltdWwiLCJVSW50MTYiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzFwIiwibG9nMTAiLCJMTjEwIiwibG9nMiIsIkxOMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsInNsbiIsIiRhdCIsInBvaW50IiwiY29kZVBvaW50QXQiLCJwb3MiLCJzZWFyY2hTdHJpbmciLCJlbmRQb3NpdGlvbiIsInJlcGVhdCIsInN0YXJ0c1dpdGgiLCJhcnJheUxpa2UiLCJtYXBwaW5nIiwic2V0VW5zY29wZSIsIkl0ZXJhdG9ycyIsIkFyZ3VtZW50cyIsImNvcHlXaXRoaW4iLCJ0byIsImZpbiIsImluYyIsImVuZFBvcyIsIiRmaW5kIiwiZmluZEluZGV4IiwiJFJlZ0V4cCIsIlJlZ0V4cCIsInJlIiwiQ09SUkVDVF9ORVciLCJBTExPV1NfUkVfV0lUSF9GTEFHUyIsImZsYWdzIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NJc1VuZGVmaW5lZCIsInByb2Nlc3MiLCJ0ZXN0UmVzb2x2ZSIsInN1YiIsImlzUHJvbWlzZSIsIlJFQ09SRCIsInNhbWVDb25zdHJ1Y3RvciIsIldyYXBwZXIiLCJzYW1lIiwiZ2V0Q29uc3RydWN0b3IiLCJDIiwiU1BFQ0lFUyIsImlzVGhlbmFibGUiLCJhc2FwIiwicnVuIiwicmVhY3QiLCJyZXQiLCJjYiIsIm9rIiwiZmFpbCIsImgiLCJyZWoiLCJpc1VuaGFuZGxlZCIsIiRyZWplY3QiLCJwIiwiaXNOb2RlIiwiZW1pdCIsIiRyZXNvbHZlIiwid3JhcHBlciIsInNldFByb3RvIiwic3BlY2llcyIsIlBST01JU0UiLCJuZXh0VGljayIsIlAyIiwid29ya3MiLCJ0aGVuYWJsZVRoZW5Hb3R0ZW4iLCJleGVjdXRvciIsImluc3QiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsInJlbWFpbmluZyIsInJhY2UiLCJzdHJvbmciLCJnZXRFbnRyeSIsIndlYWsiLCJsZWFrU3RvcmUiLCJXRUFLIiwiJFdlYWtNYXAiLCJFbnVtZXJhdGUiLCJJVEVSQVRPUiIsIiRSZWZsZWN0IiwiX2FwcGx5IiwiX2lzRXh0ZW5zaWJsZSIsIl9wcmV2ZW50RXh0ZW5zaW9ucyIsImJ1Z2d5RW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVmbGVjdCIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJwcm9wZXJ0eUtleSIsImRlbGV0ZVByb3BlcnR5IiwicmVjZWl2ZXIiLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsIiRpbmNsdWRlcyIsImF0IiwiJHBhZCIsImxwYWQiLCJycGFkIiwiZXNjYXBlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImNyZWF0ZU9iamVjdFRvQXJyYXkiLCJpc0VudHJpZXMiLCJzZXRTdGF0aWNzIiwiJEFycmF5Iiwic3RhdGljcyIsIk1TSUUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCIkdGFzayIsImNsZWFySW1tZWRpYXRlIiwiQXJyYXlWYWx1ZXMiLCJOTCIsIk5vZGVMaXN0IiwiSFRDIiwiSFRNTENvbGxlY3Rpb24iLCJOTFByb3RvIiwiSFRDUHJvdG8iLCJvd24iLCJvdXQiLCJpc0dsb2JhbCIsImlzUHJvdG8iLCJUIiwic2lkIiwibXNnMSIsIm1zZzIiLCJTWU1CT0xfSVRFUkFUT1IiLCJGRl9JVEVSQVRPUiIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiQlVHR1kiLCJnZXRJdGVyIiwicGFyZ3MiLCJob2xkZXIiLCJzdGF0IiwiVU5TQ09QQUJMRVMiLCJLRVlTIiwiVkFMVUVTIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFIiwiX25hdGl2ZSIsIl9kZWZhdWx0IiwidW4iLCJyZWdFeHAiLCJpc1N0YXRpYyIsImlzUHJpbWl0aXZlIiwiYXJyYXlNZXRob2RGaXgiLCJwdXJlIiwid3JhcE9iamVjdE1ldGhvZCIsIk1FVEhPRCIsIk1PREUiLCJsZW4xIiwibGVuMiIsInN0ZCIsImlzUmVqZWN0IiwiV2Vha01hcCIsInRvSlNPTiIsImRlZmluZUl0ZXJhdG9yIiwiaXRlclByb3RvIiwiY2xvc2VJdGVyYXRvciIsIlNZTSIsImNyZWF0ZUl0ZXIiLCJvYnNlcnZlUGFydHMiLCJjdXJyZW50T2JzZXJ2ZXIiLCJjdXJyZW50U3ViamVjdCIsIm9ic2VydmVyc0FyZUNvbXBsZXRlIiwiY3VycmVudFBhdGgiLCJhY3R1YWxPYnNlcnZlciIsIm9ic2VydmVQYXJ0IiwiZXhwZWN0ZWRTdWJqZWN0IiwiY3VycmVudEZ1bmN0aW9uIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiSVNfSU5DTFVERVMiLCJTSEFSRUQiLCJzdG9yZSIsImJhc2UiLCJTUkMiLCJfdG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwiZ2V0V2luZG93TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImJ1Z2d5IiwiVE9fU1RSSU5HIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJsaXN0bmVyIiwiZGVmZXIiLCJjaGFubmVsIiwic2V0VGFzayIsImNsZWFyVGFzayIsIk1lc3NhZ2VDaGFubmVsIiwiY291bnRlciIsIk9OUkVBRFlTVEFURUNIQU5HRSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJmYXN0S2V5IiwiJGhhcyIsIk8xIiwiRklSU1QiLCJMQVNUIiwiU0laRSIsIkFEREVSIiwiZGVsZXRlIiwic2V0SXRlciIsImFzc2VydEluc3RhbmNlIiwiY29tbW9uIiwiSVNfV0VBSyIsImZpeE1ldGhvZCIsImJ1Z2d5WmVybyIsImZpbmRGcm96ZW4iLCJMRUFLIiwiZmlsbENoYXIiLCJpbnRNaW5MZW5ndGgiLCJmaWxsTGVuIiwic0ZpbGxTdHIiLCJzRmlsbFZhbCIsImdldEl0ZXJDb25zdHJ1Y3RvciIsImlzV2VhayIsIkNIQUlOIiwiX2hhcyIsIl9ub2RlUmVxdWlyZSIsImRyYWluUXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsImZ1biIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJXaXphcmRTdGVwMyIsIl9zcmNWaWV3c0hvbWVXaXphcmQiLCJ3aXphcmQiLCJfV2l6YXJkU3RlcDMiLCJfZGVmaW5lRGVjb3JhdGVkUHJvcGVydHlEZXNjcmlwdG9yIiwiX2Rlc2NyaXB0b3IiLCJXaXphcmRTdGVwMiIsIl9XaXphcmRTdGVwMiIsIl9pbnN0YW5jZUluaXRpYWxpemVycyIsImNoZWNrSG91c2VJc1ZhbGlkIiwiZmF2VHlwZSIsIldpemFyZFN0ZXAxIiwiX1dpemFyZFN0ZXAxIiwiZGlzcG9zZVN1YnNjcmlwdGlvbiIsIm9uRmF2b3VyaXRlVmVydGVicmF0ZUNsYXNzQ2hhbmdlIiwidCIsIkhvbWUiLCJTdGVwIiwiX0hvbWUiLCJzdGVwcyIsInJlc3RhcnQiLCJ2YWxpZGF0ZVN0ZXAiLCJhY3RpdmVTdGVwIiwiaXNDb21wbGV0ZSIsIm5leHRTdGVwIiwibXNnIiwiQXBwIiwiX3ZhbGlkYXRpb25DdXN0b21WYWxpZGF0aW9uUnVsZXMiLCJyb3V0ZSIsIm5hdiJdLCJtYXBwaW5ncyI6IlFBQUFBLFFBQUFDLGdCQUFBLDBFQUFBLEVBQUEsU0FBQUMsUUFBQUMsRUFBQUMsR0FDSSxHQUFBQyxHQUFBQyxLQUFtQkMsRUFBQUYsRUFBQUcsTUFBbkIsT0FDQUgsR0FBQUcsT0FBQUMsT0FGSkwsRUFBQUQsUUFBQSwwNkNBQUFFLEVBQUFHLE9BQUFELEVBQ0lILEVBQUFELFVDREpILE9BQUFD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QUFBLGFBQUEsV0FBQSxXQUFBLGFBQ0FDLFFBQUEsNEJBQUEsS0FBQSxxQkFBQSxtQkFBQSxpQkFBQSxJQUFBLGdCQUFBLGdCQUFBLGFBQUEsYUFBQSxhQUFBLGNBQUEsYUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxNQUFBLFFBQUEsNEJBQUEsS0FBQSxhQUFBLFVBQUEsWUFBQSxhQUFBLFNBQUEsY0FBQSxjQUFBLGFBQUEsY0FBQSxZQUFBLHFCQUFBLG1CQUFBLFFBQUEsaUJBQUEsWUFBQSxXQUFBLFdBQUEsYUFDQUMsTUFBQSxRQUFBLEtBQUEsUUFBQSxXQUFBLFdBQUEsYUFDQUMsU0FBQSxRQUFBLEtBQUEsS0FBQSw0QkFBQSxLQUFBLGFBQUEsVUFBQSxZQUFBLGFBQUEsU0FBQSxjQUFBLGNBQUEsYUFBQSxjQUFBLFlBQUEscUJBQUEsbUJBQUEsS0FBQSxLQUFBLFFBQUEsaUJBQUEsWUFBQSxXQUFBLFdBQUEsYUFDQUMsU0FBQSxRQUFBLFNBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQSxTQUFBLFFBQUEsUUFBQSxJQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FDLGVBQUEsUUFBQSxTQUFBLEtBQUEsS0FBQSxTQUFBLFFBQUEsT0FBQSxTQUFBLFFBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxxQkFBQSxRQUFBLFNBQUEsS0FBQSxLQUFBLFNBQUEsUUFBQSxRQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsS0FDQUMsYUFBQSxRQUFBLFNBQUEsS0FBQSxLQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxXQUFBLFNBQUEsUUFBQSxRQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsS0FDQUMsa0JBQUEsT0FBQSxRQUFBLFVBQUEsV0FBQSxTQUFBLEtBQUEsS0FBQSxlQUFBLG1CQUFBLFFBQUEsZ0JBQUEsU0FBQSxRQUFBLFVBQUEsVUFBQSxRQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsS0FDQUMsbUJBQUEsUUFBQSxrQkFBQSxTQUFBLEtBQUEsS0FBQSxtQkFBQSxTQUFBLFFBQUEsZUFBQSxRQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsS0FDQUMsbUJBQUEsUUFBQSxTQUFBLEtBQUEsS0FBQSxNQUFBLFNBQUEsUUFBQSxRQUFBLFFBQUEsSUFBQSxtQkFBQSxXQUFBLFdBQUEsWUFBQSxJQUFBLG9CQUNBQyxnQkFBQSxVQUFBLFlBQUEsS0FBQSxXQUFBLFdBQUEsYUFDQUMsU0FBQSxRQUFBLFNBQUEsS0FBQSxTQUFBLFFBQUEsUUFBQSxJQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FDLFNBQUEsWUFBQSxXQUFBLEtBQUEsWUFBQSxTQUFBLFFBQUEsY0FBQSxPQUFBLFdBQUEsV0FBQSxhQUNBQyxTQUFBLFlBQUEsV0FBQSxLQUFBLFlBQUEsU0FBQSxRQUFBLGNBQUEsT0FBQSxXQUFBLFdBQUEsYUFDQUMsU0FBQSxZQUFBLFdBQUEsS0FBQSxZQUFBLFNBQUEsUUFBQSxjQUFBLE9BQUEsV0FBQSxXQUFBLGFBQ0FDLFNBQUEsWUFBQSxXQUFBLEtBQUEsWUFBQSxTQUFBLFFBQUEsY0FBQSxPQUFBLFdBQUEsV0FBQSxhQUNBQyxnQkFBQSxRQUFBLFNBQUEsS0FBQSxLQUFBLFNBQUEsZUFBQSxRQUFBLFFBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxTQUFBLFFBQUEsNEJBQUEsU0FBQSxLQUFBLHNCQUFBLFNBQUEsUUFBQSxRQUFBLElBQUEsZ0JBQUEsZ0JBQUEsYUFBQSxhQUFBLGFBQUEsY0FBQSxhQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FDLFNBQUEsUUFBQSxTQUFBLEtBQUEsU0FBQSxRQUFBLFFBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxhQUFBLEtBQUEsV0FBQSxXQUFBLGFBQ0FDLGNBQUEsUUFBQSxTQUFBLEtBQUEsS0FBQSxXQUFBLFNBQUEsU0FBQSxRQUFBLFFBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxVQUFBLFFBQUEsS0FBQSxLQUFBLFNBQUEsS0FBQSxLQUFBLFNBQUEsUUFBQSxRQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsS0FDQUMsY0FBQSxLQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsSUFBQSxLQUNBQyxvQkFBQSxRQUFBLFNBQUEsS0FBQSxLQUFBLG1CQUFBLFNBQUEsbUJBQUEsbUJBQUEsUUFBQSxlQUFBLFFBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxhQUFBLEtBQUEsb0JBQUEsWUFBQSxZQUFBLFlBQUEsbUJBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxJQUFBLEtBQ0FDLFFBQUEsUUFBQSxTQUFBLEtBQUEsS0FBQSxTQUFBLFFBQUEsUUFBQSxJQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FDLGNBQUEsZ0JBQUEsUUFBQSxTQUFBLEtBQUEsYUFBQSxTQUFBLE9BQUEsY0FBQSxRQUFBLE9BQUEsUUFBQSxJQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FDLFFBQUEsUUFBQSw0QkFBQSxZQUFBLGNBQUEsU0FBQSxLQUFBLGlCQUFBLFFBQUEsUUFBQSxJQUFBLGdCQUFBLGdCQUFBLGFBQUEsYUFBQSxhQUFBLGNBQUEsYUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBQyxNQUFBLFFBQUEsNEJBQUEsY0FBQSxpQkFBQSxpQkFBQSxLQUFBLFFBQUEsYUFBQSxnQkFBQSxnQkFBQSxXQUFBLFdBQUEsYUFDQUMsYUFBQSxnQkFBQSxhQUFBLFNBQUEsT0FBQSxhQUFBLFVBQUEsY0FBQSxZQUFBLGVBQUEsYUFBQSxlQUFBLGNBQUEsVUFBQSxLQUFBLGNBQUEsZUFBQSxvQkFBQSxxQkFBQSxXQUFBLFFBQUEsUUFBQSxRQUFBLHlCQUFBLDBCQUFBLHFCQUFBLHNCQUFBLGdCQUFBLGVBQUEsZUFBQSxZQUFBLGdCQUFBLGlCQUFBLFNBQUEsV0FBQSxXQUFBLFdBQUEsYUFDQUMsb0JBQUEsS0FBQSxTQUFBLFdBQUEsV0FBQSxhQUNBQyxrQkFBQSxLQUFBLE9BQUEsV0FBQSxXQUFBLGFBQ0FDLGlCQUFBLEtBQUEsV0FBQSxXQUFBLGFBQ0FDLGlCQUFBLEtBQUEsZ0JBQUEsZ0JBQUEsYUFBQSxhQUFBLGFBQUEsY0FBQSxhQUFBLFdBQUEsV0FBQSxhQUNBQyxlQUFBLFFBQUEsNEJBQUEsU0FBQSxLQUFBLGFB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QSxjQUFBLGFBQUEsY0FBQSxZQUFBLHNCQUFBLFFBQUEsVUFBQSxXQUFBLFdBQUEsYUFDQS9QLE1BQUEsUUFBQSxLQUFBLEtBQUEsNEJBQUEsS0FBQSxlQUFBLGFBQUEsVUFBQSxZQUFBLGFBQUEsU0FBQSxjQUFBLGNBQUEsYUFBQSxjQUFBLFlBQUEscUJBQUEsbUJBQUEsU0FBQSxRQUFBLGlCQUFBLGFBQUEsWUFBQSxJQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FnUSxVQUFBLFFBQUEsNEJBQUEsS0FBQSxlQUFBLFNBQUEsYUFBQSxVQUFBLFlBQUEsYUFBQSxTQUFBLGNBQUEsY0FBQSxhQUFBLGNBQUEsWUFBQSxxQkFBQSxtQkFBQSxVQUFBLGNBQUEsUUFBQSxpQkFBQSxhQUFBLGdCQUFBLGFBQUEsYUFBQSxjQUFBLGFBQUEsV0FBQSxXQUFBLGFBQ0FDLE9BQUEsUUFBQSxLQUFBLFFBQUEsV0FBQSxXQUFBLGFBQ0FDLE1BQUEsUUFBQSxLQUFBLEtBQUEsNEJBQUEsS0FBQSxlQUFBLGFBQUEsVUFBQSxZQUFBLGFBQUEsU0FBQSxjQUFBLGNBQUEsYUFBQSxjQUFBLFlBQUEscUJBQUEsbUJBQUEsU0FBQSxRQUFBLGlCQUFBLGFBQUEsSUFBQSxnQkFBQSxhQUFBLGFBQUEsY0FBQSxhQUFBLFdBQUEsV0FBQSxZQUFBLEtBQ0FDLE9BQUEsUUFBQSxLQUFBLEtBQUEsNEJBQUEsS0FBQSxlQUFBLGFBQUEsVUFBQSxZQUFBLGFBQUEsU0FBQSxjQUFBLGNBQUEsYUFBQSxjQUFBLFlBQUEscUJBQUEsbUJBQUEsU0FBQSxRQUFBLGlCQUFBLGFBQUEsSUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBdGpELEtBQUEsUUFBQSw0QkFBQSxTQUFBLEtBQUEsYUFBQSxVQUFBLFlBQUEsYUFBQSxTQUFBLGNBQUEsY0FBQSxhQUFBLGNBQUEsWUFBQSxxQkFBQSxtQkFBQSxRQUFBLGlCQUFBLFlBQUEsUUFBQSxJQUFBLGdCQUFBLGdCQUFBLGFBQUEsYUFBQSxhQUFBLGNBQUEsYUFBQSxXQUFBLFdBQUEsWUFBQSxLQUNBa2lCLE1BQUEs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QW1CO0FBQTREO0FBQTZEO01BQXdDO0FBQUE7QUFBRTtFQUFjO0FBQUE7QUFFL1E7QUFBMEM7SUFBMEQ7QUFBQTtBQUFFO0FBSXhKO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtFQUNGO0FBQUE7QUFHRTtBQUNBO0FBRUE7QUFDRTtBQUNFO0FBQ0U7QUFDQTtRQUNGO01BQ0Y7QUFBQTtBQUdBO0lBQ0Y7RUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBRUE7QUFBZ0I7QUFDZDtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBR0U7QUFDRTtJQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO1FBQ0Y7TUFDRjtBQUNBO0FBQ0U7TUFDRjtJQUNGO0FBQUE7QUFHRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFBcUI7QUFBNkI7QUFBNkI7QUFBbUI7SUFDcEc7QUFFQTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFnQjtBQUNkO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFHQTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUNBO0FBQXFCO0FBQW1CO0FBQThCO0FBQW1CO01BQzNGO0FBQUE7QUFHQTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQWU7QUFBZ0I7QUFBMkI7QUFBbUI7QUFFN0U7QUFDQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7UUFDRjtNQUNGO0FBRUE7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0U7QUFDRTtBQUNBO1VBQ0Y7UUFDRjtNQUNGO0FBRUE7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7QUFDRTtVQUNGO0FBQUE7QUFHQTtRQUNGO0FBRUE7QUFDRTtRQUNGO01BQ0Y7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUFnQjtBQUdsQjtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0E7RUFDRjtBQUFBO0FBR0U7QUFDRTtBQUNBO0FBRUE7QUFDRTtNQUNGO0FBQUE7RUFFSjtBQUFBO0FBR0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDQTtBQUNBO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7QUFBQTtBQUdBO0FBQXNEO0FBQWU7QUFBZTtBQUNwRjtBQUNBO01BQ0Y7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtNQUNGO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFBdUQ7QUFBZTtBQUFlO0FBQ3JGO0FBQ0U7TUFDRjtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0Y7QUFBRTs7Ozs7QUM1WkY7QUFRRTtBQUVBO0FBQ0E7QUFFQTtBQUF3QztBQUE2QjtJQUFZO0FBQVM7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RTtBQUNFO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBaUM7QUFFbkM7QUFDRTtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0U7UUFDRjtBQUFBO0FBRUU7UUFDRjtBQUFBO0FBQ2M7QUFBTTtBQUFNO0FBQVU7QUFBTTtBQUFVO0FBQ3BEO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7VUFDRjtBQUFBO0FBRUE7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7VUFDRjtBQUFBO0FBQ0Y7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRTtVQUNGO0FBQUE7QUFDRjtBQUVFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtNQUVGO0lBQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDSTtBQUVKO0FBQ0U7TUFDRjtBQUNFO0FBQ0U7UUFDRjtBQUFBO0FBRUU7UUFDRjtBQUNBO01BQ0Y7QUFDRTtBQUNBO0FBRUE7QUFBdUI7QUFBWTtBQUdqQztRQUNGO0FBQ0U7QUFDQTtBQUNBO1FBQ0Y7QUFDRTtBQUNBO0FBQ0E7UUFDRjtBQUFBO0FBR0U7QUFDRTtBQUF3QjtBQUFZO1VBRXRDO0FBQ0U7VUFDRjtBQUFBO0FBQ0Y7QUFHRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7SUFFRjtBQUVBO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFFQTtBQUNFO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUNlO0FBQ2I7QUFDQTtBQUNFO0FBQ0U7VUFDRjtBQUFBO1FBRUY7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUNGO0lBRUY7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO01BRUY7SUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFBZTtBQUNiO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUNGO0lBRUY7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtNQUNGO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQThCO0FBQThCO0FBQTJCO0FBQ3JGO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtBQUNBO0FBQ0E7TUFDRjtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtNQUNGO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0U7TUFDRjtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtNQUNGO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQStCO0FBQTRCO0FBQXlCO0FBQ2xGO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtNQUNGO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0U7TUFDRjtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtNQUNGO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0U7TUFDRjtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUFBO0FBSUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtBQUFrQztBQUFZO0FBRzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7TUFDRjtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUErQjtBQUUvQjtBQUNBO0FBQTREO0FBQTJFO01BRXpJO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0U7QUFDQTtBQUNFO0FBQWdDO0FBQVc7QUFDN0M7TUFFRjtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBRUE7QUFDRjtBQUFFOzs7OztBQ2pzQkY7QUFFRTtBQUVBO0FBRUE7QUFBa0Q7QUFBMEM7SUFBMEQ7QUFBQTtBQUFFO0FBR3RKO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBSUE7QUFDRTtBQUFxRDtBQUFNO0FBRTNEO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7UUFDRjtNQUNGO0FB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O01BQ0Y7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO2NBQ0Y7QUFBQTtBQUVBO0FBQ0E7QUFHQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7Z0JBQ0Y7QUFBQTtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7a0JBQ0Y7QUFDRTtrQkFDRjtBQUFBO2dCQUVGO0FBQUE7QUFDRjtBQUNGO1VBRUY7QUFDRTtBQUNBO0FBQ0U7WUFDRjtBQUFBO1FBRUo7TUFDRjtBQUNBO0FBQ0U7QUFDQTtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQUE7QUFFRjtJQUNGO0FBRUE7QUFDRTtBQUFnQztBQUF3QztBQUFpRTtBQUN6STtJQUNGO0FBRUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDRTtNQUNGO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUNGO0FBQUU7Ozs7O0FDNVVGO0FBRUU7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBa0Q7QUFBMEM7SUFBMEQ7QUFBQTtBQUFFO0FBR3RKO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFDRjtBQUdBO0FBQ0U7SUFDRjtBQUFBO0VBR0Y7QUFBQTtBQUdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBTztBQUdUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7SUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUNFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUNFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUNFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUNBO0FBQ0E7QUFDQTtFQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7SUFDRjtBQUFBO0VBR0Y7QUFBQTtBQUdFO0VBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUNGO0FBQ0Y7QUFHRTtFQUNGO0FBQUE7QUFHRTtBQUNFO0FBRUE7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUFBO0FBSUE7QUFFQTtBQUVBO0FBRUE7RUFDRjtBQUVBO0FBQ0Y7QUFBRTs7Ozs7QUNySkY7QUFFRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7TUFDRjtBQUNFO0FBQ0U7UUFDRjtBQUNFO0FBQ0E7UUFDRjtBQUFBO0FBQ0Y7QUFDRjtBQUNGO0FBR0U7QUFDQTtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBQUE7QUFJQTtFQUNGO0FBQUE7QUFHRTtBQUNFO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFBQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFDRTtJQUNGO0FBQ0U7SUFDRjtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFBZ0I7QUFDZDtBQUNFO01BQ0Y7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBQ0Y7QUFFZ0I7QUFDZDtBQUNFO01BQ0Y7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBQ0Y7RUFHRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBQ0E7QUFDRTtJQUNGO0FBRUE7QUFBZ0I7QUFDZDtBQUNBO0FBQ0E7QUFDRTtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQWdCO0FBQ2Q7UUFDRjtBQUFBO0FBRUE7TUFDRjtBQUFBO0FBQ0Y7QUFHRTtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBR0U7QUFDQTtBQUNFO0lBQ0Y7QUFBQTtBQUdBO0FBQ0U7SUFDRjtBQUFBO0FBR0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7VUFDRjtBQUFBO0FBQ0Y7TUFHRjtBQUFBO0FBR0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUNGO0VBR0Y7QUFBQTtBQUNBOzs7OztBQ3pLRjtBQUVFO0FBRUE7QUFFQTtBQUFrRDtBQUEwQztJQUEwRDtBQUFBO0FBQUU7QUFHeEo7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0lBQ0Y7RUFDRjtBQUFBO0FBR0U7QUFDRTtBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7TUFDRjtBQUFBO0VBRUo7QUFBQTtBQUdFO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7QUFDRTtRQUNGO01BQ0Y7QUFDRTtBQUNFO1FBQ0Y7TUFDRjtBQUFBO0FBR0U7TUFDRjtJQUNGO0FBQUE7QUFHRTtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7UUFDRjtBQUFBO0FBRUE7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQ0U7WUFDRjtBQUFBO0FBR0E7VUFDRjtBQUFBO0FBQ0Y7QUFFQTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDRTtNQUNGO0FBQ0U7QUFDRTtRQUNGO01BQ0Y7QUFDRTtBQUNFO1FBQ0Y7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBQ0Y7QUFBRTs7O0FDNUlGO0FBQUE7QUFDSTtBQUFtQjtBQUNuQjtBQURKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBQ0k7QUFBYTtBQWVqQjs7O0FDaEJBO0FBRUU7QUFFQTtBQUVBO0FBQWtDO0FBQTJDO0FBQXlDO0FBQTJCO0FBQXdEO0FBQWdDO0FBQTJCO0FBQTBCO01BQTZEO0FBQUE7QUFBRTtBQUEyRDtBQUFnQjtBQUFtRDtBQUFtQjtBQUEwQztJQUFzQjtFQUFHO0FBRWpqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBMkM7QUFBK0Q7SUFBcUc7QUFBQTtBQUEwRjtBQUFpQjtBQUFtQjtBQUFnQjtBQUFpQjtBQUFRO0FBQWdCO0FBQXFHO0FBQUU7QUFFM2I7QUFBMEM7SUFBMEQ7QUFBQTtBQUFFO0FBR3hKO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBRUU7SUFDRjtBQUNBO0VBQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFFQTtBQUVBO0FBQ0U7QUFDQTtBQUNFO01BQ0Y7QUFBQTtBQUNGO0VBR0Y7QUFBQTtBQUdFO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFDRTtJQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFDRTtJQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDRTtJQUNGO0FBQ0U7SUFDRjtBQUFBO0VBR0Y7QUFBQTtBQUdFO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBc0M7QUFHeEM7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBRUE7QUFFQTtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBRUE7QUFDRTtFQUNGO0FBQUE7QUFHRTtFQUNGO0FBQUE7QUFHRTtBQUNFO0FBRUE7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFBZTtBQUdqQjtBQUNFO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7RUFHRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQWU7QUFFZjtBQUNBO0FBQ0E7QUFBZTtBQUdqQjtBQUNFO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0VBR0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQWU7QUFHakI7QUFDRTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0lBQ0Y7QUFBQTtFQUdGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUFjO0FBRWQ7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUVBO0FBQ0U7QUFDRTtRQUNGO0FBQUE7TUFHRjtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFBZTtBQUdqQjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDRTtNQUNGO0FBQUE7QUFHQTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0E7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDSTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0E7QUFFQTtBQUNFO0FBQWdCO0FBQ2Q7QUFFQTtBQUNFO1VBQ0Y7QUFDRTtVQUNGO0FBQUE7QUFDRjtBQUNGO0FBR0E7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0lBQ0Y7QUFBQTtBQUdBO0FBQ0U7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUFBO0VBR0Y7QUFBQTtBQUdFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7QUFBZ0I7QUFDZDtjQUNGO0FBQUE7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQUdGO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUNBO0FBQWdCO0FBQ2Q7Y0FDRjtBQUFBO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7QUFHRjtBQUNFO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDQTtBQUFnQjtBQUNkO2NBQ0Y7QUFBQTtBQUNGO0FBQ0Y7QUFDRjtBQUNGO0FBR0Y7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7QUFBZ0I7QUFDZDtjQUNGO0FBQUE7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQUdGO0FBQ0U7QUFBdUM7QUFBb0Q7QUFDckQ7QUFBbUQ7QUFDbkQ7QUFBbUQ7QUFDcEQ7QUFBa0Q7QUFFOUQ7U0FBd0I7QUFBeUI7U0FBd0I7QUFBeUI7U0FBd0I7QUFDako7QUFDRTtRQUNGO0FBQUE7TUFHRjtBQUFBO0FBR0Y7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDSjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFBYTtBQUFXO0FBQVU7QUFBVTtBQUFHO0FBRS9DO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtBQUdBO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBQ0U7TUFDRjtBQUFBO0FBR0E7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQWU7QUFBVTtBQUFVO0FBQUc7QUFFdEM7QUFDRTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBR0E7QUFDRTtRQUNGO0FBQUE7QUFHQTtBQUNFO1FBQ0Y7QUFBQTtBQUdBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtBQUNFO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUNJO0FBQ0E7QUFFSjtBQUNFO0FBQ0U7UUFDRjtBQUFBO0FBR0E7QUFDQTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQWU7QUFBVTtBQUFHO0FBRTVCO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUFlO0FBQVU7QUFBRztBQUU1QjtBQUNFO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFHQTtBQUNFO1FBQ0Y7QUFBQTtBQUdBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0E7RUFDRjtBQUFBO0FBSUE7QUFDRTtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBR0U7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBRUE7QUFDRTtBQUNFO1VBQ0Y7QUFDQTtRQUNGO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7Y0FDRjtBQUFBO0FBR0E7WUFDRjtBQUFBO0FBQ0Y7QUFDRjtNQUdGO0FBQUE7QUFHRTtBQUNBO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0lBR0Y7QUFFQTtBQUNFO0FBQ0k7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBQ0Y7RUFHRjtBQUFBO0FBR0U7QUFDRTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFFQTtBQUNFO1VBQ0Y7QUFBQTtBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBK0I7SUFFbkM7QUFFQTtBQUNFO0FBQU87QUFBSTtBQUVYO0FBQ0U7QUFDRTtRQUNGO0FBQUE7TUFHRjtBQUFBO0FBR0E7QUFFQTtBQUNBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNJO0FBQ0E7QUFDSjtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNBO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFDSTtBQUVKO0FBQ0U7TUFDRjtBQUNFO0FBQ0E7QUFFQTtBQUNFO0FBRUE7QUFDQTtBQUNFO1VBQ0Y7QUFBQTtBQUNGO0FBQ0Y7QUFHRjtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7QUFBQTtNQUdGO0FBRUE7QUFDRTtBQUNBO0FBQ0U7QUFDRTtVQUNGO1FBQ0Y7QUFBQTtBQUNGO0lBR0Y7QUFFQTtBQUNFO0FBRUE7QUFDSTtBQUNBO0FBRUo7QUFFQTtBQUNFO0FBQ0U7QUFDQTtRQUNGO0FBQUE7QUFHQTtBQUNFO0FBQ0U7VUFDRjtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNFO0FBQ0U7VUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNFO1VBQ0Y7QUFBQTtBQUNGO01BR0Y7QUFFQTtBQUNFO0FBQ0U7UUFDRjtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUVBO0FBRUE7QUFDRTtBQUNFO1FBQ0Y7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFBTztBQUFJO0FBQVU7QUFFckI7QUFDRTtNQUNGO0FBQUE7QUFJQTtBQUNBO0FBQ0U7QUFDQTtBQUVBO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFBTztBQUFJO0FBRVg7QUFDRTtBQUNBO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUVBO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0U7TUFDRjtBQUNFO0FBQ0U7UUFDRjtBQUVBO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFBQTtBQUlBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7SUFHRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtJQUNGO0FBQUE7QUFHRTtBQUNFO01BQ0Y7QUFBQTtBQUdJO0FBRUo7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUFBO0FBR0U7QUFDRTtBQUNBO01BQ0Y7QUFBQTtJQUdGO0FBQUE7QUFHRTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBR0U7QUFDSTtBQUNBO0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0U7SUFDRjtBQUFBO0FBR0E7QUFFQTtFQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7QUFDRTtNQUNGO0FBQ0E7QUFDRTtNQUNGO0FBQ0E7QUFDRTtNQUNGO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFBQTtBQUdFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFDRTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDRTtNQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0E7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtNQUdGO0FBQUE7QUFDRjtBQUdFO0lBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0VBR0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBR0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNBO0FBQ0U7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUNFO0FBQ0E7QUFDQTtRQUNGO0FBQUE7QUFFRTtNQUNGO0FBQUE7QUFDSjtBQUdFO0FBQ0U7QUFDQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtBQUNGO0FBR0U7SUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDSTtBQUVKO0FBRUE7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNFO01BQ0Y7QUFBQTtBQUdGO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNFO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0FBR0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNBO0FBRUE7QUFDQTtBQUNFO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtBQUdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFDQTtBQUVBO01BQ0Y7QUFBQTtBQUlBO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0E7QUFDRTtFQUNGO0FBQUE7QUFHRTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNBO0FBQ0U7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7QUFFQTtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUNGO0FBQ0Y7QUFHQTtBQUNFO0VBQ0Y7QUFBQTtBQUdFO0FBQ0k7QUFFSjtBQUNBO0FBRUE7RUFDRjtBQUFBO0FBR0U7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBRUE7QUFDSTtBQUNBO0FBRUo7QUFDRTtBQUNBO0FBQ0E7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUlBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7QUFDRTtBQUF1RztBQUV2RztBQUNBO0FBQ0U7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7WUFDRjtBQUFBO0FBRUE7QUFDRTtZQUNGO0FBQUE7QUFDRjtBQUN1QjtBQUV2QjtBQUNBO0FBQ0U7VUFDRjtBQUFBO0FBQ0s7QUFHVDtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUNFO2NBQ0Y7QUFBQTtBQUNGO0FBQ0Y7QUFDRjtBQUlBO0FBQ0U7QUFDRTtVQUNGO0FBQUE7QUFHRTtVQUNGO0FBQ0U7QUFDRTtBQUNBO0FBRUE7QUFDRTtjQUNGO0FBQ0U7Y0FDRjtBQUFBO0FBRUE7WUFDRjtBQUFBO0FBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUNFO1lBQ0Y7QUFDRTtZQUNGO0FBQUE7QUFFQTtBQUNBO1VBQ0Y7QUFBQTtBQUNGO0FBQ0Y7QUFHRTtBQUNFO0FBQ0E7QUFDQTtRQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0U7VUFDRjtBQUFBO0FBQ0Y7TUFHRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0U7QUFDQTtRQUNGO0FBQUE7TUFFRjtBQUNFO0FBQ0E7TUFDRjtBQUNFO0FBQ0E7QUFDRTtBQUNBO1FBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDRTtBQUNBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFDRTtjQUNGO0FBQUE7QUFDRjtBQUNGO0FBRUU7QUFDQTtBQUNFO1VBQ0Y7QUFBQTtBQUNGO0FBR0E7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUdFO0FBQ0U7VUFDRjtBQUFBO0FBR0U7VUFDRjtBQUNFO0FBQ0U7QUFDQTtBQUVBO0FBQ0U7QUFDQTtBQUNBO2NBQ0Y7QUFDRTtjQUNGO0FBQUE7QUFFQTtZQUNGO0FBQ0U7WUFDRjtBQUFBO0FBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7QUFDQTtZQUNGO0FBQ0U7WUFDRjtBQUFBO0FBRUE7VUFDRjtBQUFBO0FBQ0Y7QUFDRjtBQUdFO0FBQ0E7QUFDQTtBQUNBO01BQ0Y7QUFDRTtBQUNFO0FBRUE7QUFDRTtBQUNBO0FBQ0E7VUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNFO1lBQ0Y7QUFBQTtBQUNGO0FBR0E7UUFDRjtBQUFBO0FBR0U7UUFDRjtBQUFBO0FBR0E7QUFDRTtRQUNGO0FBQUE7QUFDRjtJQUdGO0FBRUE7QUFDQTtBQUNBO0VBQ0Y7QUFFQTtBQUVBO0FBRUE7QUFDRTtBQUNFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUNFO0FBRUE7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFDRTtBQUNBO1VBQ0Y7QUFBQTtRQUdGO0FBQUE7QUFJQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO1FBQ0Y7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQ0E7QUFDRTtNQUNGO0FBQ0E7QUFFQTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDSTtBQUVKO0FBQ0U7UUFDRjtBQUFBO0FBSUE7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFFQTtBQUNFO01BQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO1FBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtVQUNGO0FBQUE7QUFDRjtBQUdFO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtJQUdGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7SUFDRjtBQUVBO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBR0E7QUFFQTtBQUNBO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBRUo7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0U7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7QUFBQTtBQUNGO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBR0U7QUFDRTtBQUVBO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUVBO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7QUFDQTtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0E7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUVBO0FBQ0U7TUFDRjtBQUVBO0FBQ0U7TUFDRjtBQUVBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFFSjtBQUNFO0FBQ0E7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFDRTtBQUNFO0FBQ0E7VUFDRjtRQUNGO0FBQ0U7QUFDRTtVQUNGO1FBQ0Y7QUFBQTtBQUVBO0FBQ0U7UUFDRjtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBRUo7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtBQUVBO0FBRUE7QUFDRTtBQUNBO0FBRUE7QUFDRTtVQUNGO0FBQUE7QUFHRTtBQUNBO1VBQ0Y7QUFDRTtBQUF1QjtBQUFvQjtBQUErQztVQUM1RjtBQUNFO1VBQ0Y7QUFBQTtRQUdGO0FBQUE7TUFHRjtBQUFBO0FBR0Y7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7QUFDRTtBQUNFO0FBQ0E7VUFDRjtRQUNGO0FBQ0U7QUFDRTtVQUNGO1FBQ0Y7QUFBQTtBQUVBO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQW9DO0FBR3RDO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFDQTtNQUNGO0FBQ0U7QUFBUztBQUFvQjtBQUErQztBQUM1RTtNQUNGO0FBQUE7QUFHQTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDRTtBQUNBO1FBQ0Y7QUFBQTtBQUdBO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUVBO0FBQ0U7QUFDRTtRQUNGO0FBQUE7QUFHRTtRQUNGO0FBQUE7TUFHRjtBQUFBO0FBR0Y7QUFDRTtBQUNBO0FBQ0E7QUFDRTtNQUNGO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFBNkM7QUFBb0I7QUFBYTtBQUU5RTtBQUNFO0VBQ0Y7QUFBQTtBQUdFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0U7QUFDQTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7TUFDRjtBQUVBO0FBQ0U7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQThDO1FBRWxEO0FBQUE7QUFJQTtBQUNFO0FBQ0E7UUFDRjtBQUNFO0FBQ0U7VUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBQ0E7QUFBOEM7QUFHaEQ7QUFDQTtRQUNGO0FBQUE7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0FBR0Y7QUFDRTtBQUVBO0FBRUE7QUFDRTtBQUNBO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFHRTtBQUNFO1VBQ0Y7QUFBQTtRQUdGO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDRTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7VUFDRjtBQUFBO0FBR0U7QUFDQTtVQUNGO0FBQUE7UUFHRjtBQUFBO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFDSTtBQUNBO0FBRUo7QUFDRTtBQUVBO0FBQ0U7QUFDQTtjQUNGO0FBQUE7WUFHRjtBQUFBO1VBR0Y7QUFDRTtBQUNJO0FBQ0E7QUFFSjtBQUNFO0FBRUE7QUFDRTtBQUNBO2NBQ0Y7QUFDRTtjQUNGO0FBQUE7WUFHRjtBQUFBO0FBR0E7VUFDRjtBQUFBO0FBRUE7UUFDRjtBQUFBO0FBQ0Y7SUFHRjtBQUVBO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQ0U7QUFDQTtRQUNGO0FBQ0U7QUFFQTtBQUNFO1VBQ0Y7QUFBQTtBQUNGO0FBQ0Y7QUFHSTtBQUNBO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFDRTtBQUNBO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7QUFDRTtBQUNFO0FBRUE7QUFDRTtnQkFDRjtBQUVBO2NBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDRTtBQUFnQjtBQUNkO2dCQUNGO0FBQUE7QUFDRjtZQUdGO0FBQ0U7WUFDRjtBQUFBO0FBRUE7QUFBZ0I7QUFDZDtZQUNGO0FBQUE7QUFDRjtBQUVBO0FBRUE7QUFDRTtBQUFnQjtBQUNkO1lBQ0Y7QUFBQTtBQUNGO0FBRUE7QUFBZ0I7QUFDZDtVQUNGO0FBQUE7QUFDRjtBQUVBO0FBQWdCO0FBQ2Q7UUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNFO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7QUFBQTtBQUNGO0FBR0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQWdCO0FBQUc7QUFBSTtBQUV2QjtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNBO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFDQTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0k7QUFDQTtBQUVKO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRTtBQUNBO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHSTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBR0E7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7QUFDQTtRQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQUE7QUFFQTtNQUNGO0FBQUE7QUFHQTtJQUNGO0FBQUE7QUFHRTtBQUNJO0FBRUo7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFFSjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFFQTtBQUNJO0FBRUo7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7QUFBQTtNQUdGO0FBQ0U7QUFDRTtBQUNBO1FBQ0Y7QUFDRTtBQUNBO1FBQ0Y7QUFBQTtBQUNGO0lBR0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0E7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDRTtVQUNGO0FBQUE7QUFHRTtVQUNGO0FBQUE7QUFHRTtVQUNGO0FBQ0U7VUFDRjtBQUFBO0FBRUE7UUFDRjtBQUNFO1FBQ0Y7QUFDRTtBQUNFO0FBQ0U7WUFDRjtBQUNFO1lBQ0Y7QUFBQTtVQUdGO0FBQ0U7QUFDQTtVQUNGO0FBQ0U7QUFDQTtVQUNGO0FBQUE7QUFDRjtBQUNGO0FBR0U7TUFDRjtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBRUE7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFBcUM7QUFBaUI7QUFBWTtBQUVsRTtBQUNBO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFFSjtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRTtZQUNGO0FBQUE7QUFDRjtBQUNGO0FBR0U7QUFDQTtBQUNFO0FBQ0E7QUFFQTtBQUNFO0FBQ0U7Y0FDRjtBQUFBO1lBR0Y7QUFBQTtVQUdGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7SUFDRjtBQUFBO0FBR0U7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7WUFDRjtBQUFBO0FBR0E7QUFFQTtVQUNGO1FBQ0Y7TUFDRjtBQUNFO0FBQ0U7QUFDRTtVQUNGO0FBQUE7QUFHQTtBQUVBO1FBQ0Y7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7QUFBaUI7QUFBMkI7QUFFNUM7QUFDRTtBQUNBO1FBQ0Y7QUFBQTtBQUdFO0FBQ0U7QUFDQTtBQUNFO1lBQ0Y7QUFBQTtBQUVBO1VBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDQTtRQUNGO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDRTtVQUNGO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBR0E7QUFDQTtNQUNGO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDQTtBQUVBO0FBQ0U7QUFDRTtBQUNFO1VBQ0Y7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO1lBQ0Y7VUFDRjtBQUNFO0FBQ0E7QUFDQTtVQUNGO0FBQUE7TUFFSjtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0lBQ0Y7QUFBQTtBQUdFO0FBQ0k7QUFFSjtBQUNBO0lBQ0Y7QUFFQTtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtJQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7SUFDRjtFQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0U7QUFDRTtNQUNGO0FBQ0U7QUFDQTtNQUNGO0FBQUE7RUFFSjtBQUFBO0FBSUE7QUFDRTtBQUNBO0FBQ0U7QUFDQTtJQUNGO0VBQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDQTtJQUNGO0VBQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtFQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0U7QUFDSTtBQUNBO0FBRUo7QUFDRTtBQUNBO01BQ0Y7QUFBQTtBQUdBO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFDQTtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBSUE7QUFDRTtBQUNFO0FBQ0E7SUFDRjtBQUVBO0VBQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDRTtBQUNJO0FBRUo7QUFDRTtBQUNFO0FBQ0E7QUFBUTtNQUVaO0FBQUE7SUFHRjtFQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0U7QUFDQTtJQUNGO0FBRUE7RUFDRjtBQUFBO0FBSUE7QUFDRTtFQUNGO0FBQUE7QUFHRTtBQUNFO0FBQ0E7QUFDQTtJQUNGO0FBRUE7RUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNFO0FBQ0E7SUFDRjtFQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0U7QUFDQTtJQUNGO0FBRUE7RUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNFO0lBQ0Y7RUFDRjtBQUFBO0FBSUE7QUFDRTtFQUNGO0FBQUE7QUFJQTtBQUNFO0VBQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBQUE7QUFHRjtBQUFFOzs7OztBQ3QzSEY7QUFFRTtBQUVBO0FBRUE7QUFBa0M7QUFBMkM7QUFBeUM7QUFBMkI7QUFBd0Q7QUFBZ0M7QUFBMkI7QUFBMEI7TUFBNkQ7QUFBQTtBQUFFO0FBQTJEO0FBQWdCO0FBQW1EO0FBQW1CO0FBQTBDO0lBQXNCO0VBQUc7QUFFampCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBMkM7QUFBK0Q7SUFBcUc7QUFBQTtBQUEwRjtBQUFpQjtBQUFtQjtBQUFnQjtBQUFpQjtBQUFRO0FBQWdCO0FBQXFHO0FBQUU7QUFFM2I7QUFBMEM7SUFBMEQ7QUFBQTtBQUFFO0FBR3RKO0FBQ0U7QUFFQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFFQTtBQUNFO01BQ0Y7QUFDRTtBQUNBO01BQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDQTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO01BQ0Y7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUVBO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFBZTtBQUdqQjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQWU7QUFHakI7RUFDRjtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFBaUI7QUFFZjtBQUVJO0FBRUE7QUFDQTtNQUNGO0VBRUo7QUFBQTtBQUlBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDRTtNQUNGO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDRTtNQUNGO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNFO01BQ0Y7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBRUE7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHQTtBQUVBO0lBQ0Y7QUFFQTtB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O0FBQ0U7SUFDRjtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUEwQjtBQUFZO0FBR3BDO0lBQ0Y7QUFBQTtBQUlBO0VBQ0Y7QUFFQTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUFpQjtFQUVyQjtBQUFBO0FBR0U7QUFDQTtBQUFpQztBQUFxQztBQUFRO0FBQzVFO0FBRUE7QUFDRTtBQUE0QjtBQUFLO01BRW5DO0FBQ0U7QUFDQTtBQUFhO0FBQUs7TUFFcEI7QUFBQTtBQUlBO0lBQ0Y7QUFBQTtFQUVGO0FBQUE7QUFHRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBQ0U7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0U7TUFDRjtBQUFBO0FBSUE7QUFDRTtBQUNBO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0E7QUFDQTtBQUVBO0FBQ0U7QUFDRTtBQUNFO1VBQ0Y7QUFDRTtVQUNGO0FBQUE7QUFFQTtBQUNFO1VBQ0Y7QUFDRTtVQUNGO0FBQUE7QUFDRjtBQUdFO1FBQ0Y7QUFBQTtBQUNGO0FBR0U7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFFQTtBQUNFO0FBRUE7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUF5QjtBQUUzQjtNQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUEyQjtBQUU3QjtNQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtNQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFBeUI7QUFFM0I7TUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7TUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBMEQ7QUFFNUQ7TUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBMkI7QUFFN0I7TUFDRjtBQUVBO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUVBO0FBRUE7QUFDRTtBQUNBO01BQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDQTtBQUNFO1FBQ0Y7QUFBQTtJQUVKO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFFSjtBQUNFO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdFO01BQ0Y7QUFBQTtBQUdGO0VBQ0Y7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUVBO0FBRUE7QUFDRTtBQUNBO01BQ0Y7QUFFQTtJQUNGO0FBQUE7QUFHRTtBQUVBO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdGO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQWdCO0FBQ2Q7QUFDRTtRQUNGO01BQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDQTtBQUNBO0FBQ0U7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUVBO0FBQ0E7QUFDRTtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBRUE7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFDRTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7SUFHRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0E7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0E7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDRTtRQUNGO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFBaUI7SUFFckI7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBRUE7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdFO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQWlCO0lBRXJCO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7QUFBaUI7SUFFckI7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBRUE7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0U7QUFDRTtVQUNGO0FBQUE7UUFHRjtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFDQTtBQUFpQjtJQUVyQjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFFQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0k7QUFDQTtBQUNGO1VBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFBaUI7SUFFckI7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBRUE7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFDRTtBQUNBO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQWlCO0lBRXJCO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFDQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNFO1FBQ0Y7TUFDRjtBQUFBO0FBR0U7QUFDQTtBQUFpQjtJQUVyQjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUo7QUFDRTtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQWlCO0lBRXJCO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7QUFDRTtBQUF5QztBQUV6QztBQUF5QztBQUc3QztBQUVBO0FBQ0U7QUFDRTtBQUFvQjtBQUVwQjtBQUFxQjtBQUVyQjtBQUFvQjtBQUVwQjtBQUFxQjtBQUd6QjtBQUNFO0FBQ0U7QUFDRTtBQUFrQjtBQUFXO0FBQ1Y7QUFBWTtBQUN2QjtBQUVSO0FBQWtCO0FBQVc7QUFDVjtBQUFnQjtBQUMzQjtBQUdaO01BQ0Y7QUFBQTtBQUdFO0FBQ0U7QUFBa0M7QUFFbEM7QUFBbUI7QUFFbkI7QUFBbUI7QUFFbkI7QUFBbUI7QUFFbkI7QUFBbUI7QUFFbkI7QUFBbUI7QUFFbkI7QUFBbUI7QUFFbkI7QUFBb0I7QUFFcEI7QUFBb0I7QUFFcEI7QUFBbUI7QUFFbkI7QUFBbUI7QUFHdkI7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBR0U7QUFDRTtRQUNGO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFBaUI7SUFFckI7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBRUE7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0k7QUFFSjtBQUNFO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQWlCO0lBRXJCO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFFQTtBQUVBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUVBO0FBRUE7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFFQTtJQUNGO0FBQUE7QUFHRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0E7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtNQUdGO0FBQUE7QUFHRTtBQUNFO1FBQ0Y7TUFDRjtBQUFBO0FBR0U7QUFDQTtBQUFpQjtJQUVyQjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBRUE7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBRUE7QUFDRTtRQUNGO0FBQUE7TUFHRjtBQUFBO0FBR0U7QUFDRTtRQUNGO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFBaUI7SUFFckI7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtJQUNGO0FBQUE7QUFHRTtBQUNJO0FBRUo7QUFFQTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUFPO0FBRVA7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFFSjtBQUNFO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBRUo7QUFDQTtBQUNBO0FBRUE7QUFDRTtBQUNBO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBRUo7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBRUE7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtBQUdBO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBRUo7QUFDRTtJQUNGO0FBQUE7QUFJQTtBQUNFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUNFO0FBQ0U7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0lBR0Y7QUFBQTtBQUdFO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFBQTtFQUdGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUNFO0lBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDRTtJQUNGO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFDRTtJQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBQ0U7SUFDRjtBQUFBO0VBR0Y7QUFBQTtBQUdFO0FBQ0E7QUFDQTtBQUFRO0FBR1Y7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBRUE7QUFDRTtBQUNBO01BQ0Y7QUFBQTtJQUdGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtJQUNGO0FBQUE7QUFHRTtBQUNFO0FBQ0U7QUFDQTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0U7QUFDQTtBQUEwRTtBQUU1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFBZ0U7QUFFbEU7QUFDRTtBQUF3QjtBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUErRDtBQUVqRTtBQUNBO0FBQ0E7QUFDRTtBQUFnRjtBQUVoRjtBQUE0RDtBQUU1RDtBQUFzRDtBQUV0RDtBQUNFO1VBQ0Y7QUFBQTtBQUV1QjtBQUczQjtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUVBO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRTtBQUNBO01BQ0Y7QUFBQTtBQUlBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0E7QUFFQTtBQUNFO01BQ0Y7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBRUE7QUFDRTtBQUNJO1FBQ0Y7QUFDRTtBQUVBO0FBQ0U7VUFDRjtBQUFBO0FBR0U7VUFDRjtBQUFBO1FBR0Y7QUFDRTtRQUNGO0FBQUE7TUFHSjtBQUFBO0FBR0E7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNFO0FBQ0U7QUFDRTtVQUNGO0FBQUE7QUFHQTtBQUVBO0FBRUE7QUFDRTtBQUVBO0FBQ0U7WUFDRjtBQUFBO0FBSUE7QUFDRTtZQUNGO0FBQUE7QUFFQTtBQUNBO1VBQ0Y7QUFBQTtBQUdBO1FBQ0Y7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFFQTtBQUNBO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0VBQ0Y7QUFBQTtBQUdFO0VBQ0Y7QUFBQTtBQUdFO0VBQ0Y7QUFBQTtBQUdFO0VBQ0Y7QUFBQTtBQUdFO0VBQ0Y7QUFBQTtBQUdFO0VBQ0Y7QUFBQTtBQUdFO0FBQ0U7QUFDRTtBQUFVO0FBRVY7QUFBVTtBQUVWO0FBQVU7QUFFVjtBQUFXO0FBRVg7QUFBWTtBQUVaO0FBREs7RUFHWDtBQUFBO0FBR0U7QUFDRTtJQUNGO0FBQUE7QUFDRjtBQUlBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFFQTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0k7QUFFSjtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBQ0U7UUFDRjtBQUFBO0FBR0E7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtBQUdFO1FBQ0Y7QUFBQTtBQUNGO0lBR0Y7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUNJO0FBRUo7QUFFQTtBQUNFO1FBQ0Y7QUFBQTtNQUdGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFDSTtBQUVKO0FBQ0U7QUFDRTtBQUNBO0FBRUE7UUFDRjtBQUFBO0FBR0E7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0k7QUFFSjtBQUNFO0FBRUE7QUFDRTtBQUNBO0FBRUE7UUFDRjtBQUFBO0FBR0E7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBRUE7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtBQUNFO0FBRUE7QUFDRTtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFFQTtBQUNFO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtBQUNFO0FBQ0U7TUFDRjtBQUNJO01BQ0Y7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUFBO0FBR0o7QUFDRTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBRUE7QUFDRTtBQUNBO0FBQ0E7VUFDRjtBQUNFO1VBQ0Y7QUFBQTtBQUVBO0FBQ0E7QUFDQTtRQUNGO0FBQ0U7QUFDQTtBQUNBO1FBQ0Y7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7TUFDRjtBQUNFO01BQ0Y7QUFDRTtNQUNGO0FBQ0U7TUFDRjtBQUNFO0FBQ0E7QUFDQTtNQUNGO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFDRTtBQUNBO0FBQ0E7TUFDRjtBQUNFO01BQ0Y7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBRUE7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUVKO0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFFQTtBQUNBO0FBRUE7UUFDRjtNQUNGO0FBQUE7QUFJQTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDRTtRQUNGO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFFQTtBQUNFO0VBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQWlCO0FBRW5CO01BQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQWlCO0FBRW5CO01BQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQVU7QUFFWjtNQUNGO0FBRUE7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUNFO0VBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDSTtBQUVKO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFDRjtBQUdFO0lBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdGO0VBQ0Y7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBR0U7QUFDRTtBQUNFO0FBQ0k7QUFDQTtBQUVKO0FBQ0E7QUFFQTtBQUVJO0FBQ0E7WUFDRjtRQUVKO0FBRUE7QUFBOEI7QUFBYTtBQUUzQztBQUVBO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUVBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUF5QjtBQUMzQjtBQUdGO0FBQ0U7QUFDQTtBQUVBO0FBR0Y7QUFDRTtBQUNBO0FBRUE7QUFHRjtBQUNFO0FBQ0E7QUFFQTtBQUdGO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFBcUI7QUFDdkI7QUFHRjtJQUNGO0FBQUE7QUFHRTtBQUNJO0FBQ0E7QUFDSjtBQUNBO0FBQ0U7QUFDRTtRQUNGO0FBQUE7QUFDRjtBQUdGO0FBQ0U7QUFFSTtBQUNFO1VBQ0Y7QUFFQTtBQUNFO0FBQ0U7WUFDRjtVQUNGO1FBQ0Y7SUFFSjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUNKO0FBQ0U7QUFDQTtBQUNFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUNGO0lBR0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7TUFDRjtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBRUo7QUFDRTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRTtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFBQTtJQUdGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBRUo7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFDRTtRQUNGO0FBQUE7SUFFSjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7UUFDRjtBQUFBO01BR0Y7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNBO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQTRCO01BRWhDO0FBQWE7QUFHZjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDRTtNQUNGO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0U7UUFDRjtBQUFhO0FBQ2Y7QUFJQTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0o7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0E7QUFDRTtBQUNFO1FBQ0Y7QUFBYTtBQUNmO0FBR0Y7QUFDRTtBQUNBO0FBQ0U7QUFDRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7SUFFRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0U7UUFDRjtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtBQUNFO01BQ0Y7QUFBQTtJQUVGO0FBRUE7QUFDRTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0E7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUlBO0FBQStDO0FBQXVDO0FBQVM7QUFDN0Y7QUFDRTtBQUE4QjtBQUFLO1FBRXJDO0FBQ0U7QUFDQTtBQUFjO0FBQUs7UUFFckI7QUFBQTtNQUdGO0FBQUE7QUFHRjtBQUNFO0FBQWM7QUFFZDtBQUNFO01BQ0Y7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQStDO0FBQXVDO0FBQVM7QUFDN0Y7QUFDRTtBQUE4QjtBQUFLO1FBRXJDO0FBQ0U7QUFDQTtBQUFjO0FBQUs7UUFFckI7QUFBQTtNQUdGO0FBQUE7QUFHRjtBQUNFO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFJQTtBQUNFO0FBQ0E7QUFBbUI7QUFBZTtNQUVwQztJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUFBO0lBRUY7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBQ0E7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0lBRUY7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBRUo7QUFDRTtNQUNGO0FBQUE7SUFHRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBSUE7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7QUFFQTtBQUNFO01BQ0Y7QUFBQTtBQUVFO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBR0E7QUFFQTtBQUNFO0FBQ0E7QUFDSTtVQUNGO01BQ0o7QUFBQTtBQUdGO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSjtBQUNFO01BQ0Y7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7UUFDRjtBQUFBO0FBRUE7QUFDRTtBQUNBO1FBQ0Y7QUFBQTtNQUVGO0FBQUE7QUFHRjtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7QUFDQTtBQUNFO1FBQ0Y7QUFBQTtBQUVBO01BQ0Y7QUFBQTtBQUdFO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0FBR0E7QUFDQTtJQUNGO0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0E7SUFDRjtBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUNBO0FBQXlDO0FBQWlCO0FBQVk7SUFDeEU7QUFFQTtBQUNFO0FBQ0E7QUFFQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDRTtNQUNGO0FBQUE7QUFHRTtBQUNBO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtBQUdBO0FBRUE7QUFDRTtBQUNBO0FBQ0k7VUFDRjtNQUNKO0FBQUE7QUFHRjtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBRUo7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFFSjtBQUNFO0FBQ0U7QUFDQTtBQUNFO1VBQ0Y7QUFDRTtVQUNGO0FBQUE7UUFHRjtBQUNFO1FBQ0Y7QUFBQTtBQUVBO01BQ0Y7QUFDRTtNQUNGO0FBQUE7QUFHQTtBQUNBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBRUo7QUFDRTtNQUNGO0FBQUE7QUFHRjtBQUNFO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHQTtJQUNGO0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUVKO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO1VBQ0Y7QUFBQTtBQUVBO1FBQ0Y7QUFBQTtBQUNGO0FBR0E7QUFDQTtBQUVBO0FBQ0U7TUFDRjtBQUFBO0FBR0E7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtNQUVGO0FBQUE7QUFHRjtBQUNFO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBQ0k7QUFFSjtBQUNFO01BQ0Y7QUFBQTtBQUdGO0FBQ0U7QUFDQTtBQUFnQztBQUFNO0FBRXRDO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFBa0I7QUFBRztBQUVyQjtBQUVBO0FBQ0U7QUFDQTtBQUVBO0FBQ0E7QUFDRTtBQUNFO1VBQ0Y7UUFDRjtBQUFBO0FBQ0Y7QUFHRTtBQUNBO0FBQWtDO0FBQU07QUFFdEM7UUFDRjtBQUFBO01BRUY7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7RUFDRjtBQUFBO0FBR0U7QUFDQTtFQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQThFO0FBR2hGO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBVTtBQUdaO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQW1CO0FBR3JCO0FBRUE7QUFDRTtFQUNGO0FBQUE7QUFHRTtBQUNBO0FBQ0E7RUFDRjtBQUFBO0FBR0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNGO0FBQUE7QUFHRTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0lBRUY7RUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFBVztJQUVmO0FBQWE7RUFHZjtBQUFBO0FBR0U7QUFDRTtJQUNGO0FBRUE7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0k7QUFFSjtBQUNFO01BQ0Y7QUFBQTtBQUlBO0FBQ0U7QUFDRTtRQUNGO0FBQUE7TUFHRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQVc7TUFFZjtBQUFhO0lBR2Y7QUFFQTtBQUNFO0FBQU87QUFBSTtBQUNYO0FBQ0U7QUFDQTtBQUF1RTtBQUF5QjtBQUNsRztJQUVGO0FBRUE7QUFDRTtBQUFvQjtBQUFZO0FBQVM7QUFBb0I7QUFFN0Q7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtBQUVFO1FBQ0Y7QUFBQTtBQUVBO0FBQ0U7UUFDRjtBQUFBO0FBRUU7UUFDRjtBQUFBO0FBRUU7UUFDRjtBQUFBO0FBRUE7QUFDRTtRQUNGO0FBQUE7QUFFRTtRQUNGO0FBQUE7QUFDRjtBQUlBO0FBQ0U7TUFDRjtBQUFBO0FBR0E7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtBQUdBO0FBQXdCO0FBQW9FO01BRTlGO0FBQUE7QUFHRTtBQUNBO01BQ0Y7QUFBQTtBQUdFO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUVBO0FBQ0U7UUFDRjtBQUNFO1FBQ0Y7QUFBQTtBQUNGO0lBR0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtBQUNFO0FBQ0U7TUFDRjtBQUFBO0lBR0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0FBQ0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDSTtBQUVKO0lBQ0Y7QUFFQTtFQUNGO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFFQTtBQUNFO0FBRUE7QUFDSTtBQUVKO0FBQ0U7TUFDRjtBQUFBO0FBR0U7QUFDRTtBQUNFO1VBQ0Y7QUFBQTtRQUdGO0FBQUE7QUFJQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO1lBQ0Y7QUFBQTtRQUVKO0FBQUE7QUFJQTtBQUNFO0FBQ0U7VUFDRjtRQUNGO0FBQUE7TUFHRjtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUVFO0FBQ0E7TUFDRjtBQUFBO0FBR0U7QUFDQTtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7SUFDRjtBQUVBO0VBQ0Y7QUFFQTtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtNQUdGO0FBQUE7QUFHQTtBQUNFO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtNQUNGO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBRUE7QUFFRTtBQUVFO0FBRUE7QUFBMEI7QUFBTTtBQUc1QjtBQUNBO0FBQ0E7QUFDQTtBQUNGO1VBQ0Y7QUFDSTtBQUNGO0FBQ0k7QUFDSjtBQUNFO0FBQ0U7Y0FDRjtBQUFBO0FBQ0Y7VUFFRjtBQUNJO0FBQ0Y7QUFDQTtBQUNBO1VBQ0Y7QUFDSTtBQUNGO0FBQ0U7WUFDRjtBQUFBO0FBRUU7WUFDRjtBQUFBO1VBRUY7QUFDSTtBQUNGO0FBQ0k7QUFDQTtBQUNBO0FBQ0o7QUFDRTtZQUNGO0FBQUE7QUFFRTtZQUNGO1VBQ0Y7QUFDSTtBQUNBO0FBQ0Y7VUFDRjtBQUVBO0FBQ0E7QUFDRTtNQUNGO0FBQ0E7QUFDRTtBQUNBO01BQ0Y7QUFDQTtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNFO0FBQ0E7QUFDRTtBQUNBO1VBQ0Y7QUFBQTtBQUdGO0FBQ0U7UUFDRjtBQUFBO0FBRUY7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtVQUNGO0FBQUE7QUFHRjtBQUNFO1FBQ0Y7QUFBQTtBQUVGO0FBQ0U7QUFFQTtBQUNJO0FBRUo7QUFDRTtRQUNGO0FBQUE7QUFHRTtRQUNGO0FBQ0U7UUFDRjtBQUFBO0FBRUY7QUFDRTtNQUNGO0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUFpQjtBQUVuQjtBQUNFO1FBQ0Y7QUFDRTtBQUNFO0FBQ0E7VUFDRjtBQUFBO0FBQ0Y7QUFFQTtNQUNGO0FBQUE7RUFFSjtBQUVFO0FBQ0U7QUFFQTtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDRTtBQUNJO0FBRUo7QUFDRTtBQUNBO1lBQ0Y7QUFBQTtRQUVKO0FBQ0E7QUFDQTtNQUNGO0FBQUE7QUFJQTtBQUNFO0FBRUE7QUFDRTtBQUNFO1VBQ0Y7QUFDRTtVQUNGO0FBQUE7TUFFSjtBQUFBO0lBR0Y7RUFDRjtBQUFBO0FBR0U7RUFDRjtBQUFBO0FBR0U7QUFDRTtBQUVBO0lBQ0Y7QUFBQTtBQUdFO0FBQ0U7TUFDRjtBQUFBO0FBR0Y7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBQ0U7TUFDRjtJQUNGO0FBQUE7RUFHRjtBQUFBO0FBSUE7QUFDRTtBQUFrQztBQUFvQjtBQUNwRDtJQUNGO0FBQUE7QUFHRTtBQUNBO0lBQ0Y7RUFDRjtBQUFBO0FBR0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0Y7QUFBQTtBQUdFO0FBRUE7QUFDRTtBQUNFO1FBQ0Y7QUFBQTtNQUdGO0FBQUE7QUFHQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtRQUNGO0FBQUE7TUFFRjtJQUNGO0FBRUE7QUFDRTtBQUNFO0FBQ0E7TUFDRjtBQUFBO0FBR0Y7RUFDRjtBQUVBO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7QUFDQTtJQUNGO0FBQUE7QUFHRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUFLO0FBRUw7QUFDQTtBQUFLO0FBRUw7QUFFQTtBQUNFO1VBQ0Y7QUFDRTtVQUNGO0FBQUE7QUFQSztJQVdYO0FBQUE7QUFHRTtBQUNFO0FBQ0U7UUFDRjtBQUFBO01BR0Y7QUFBQTtBQUdBO0lBQ0Y7QUFFQTtBQUNFO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRjtFQUNGO0FBQ0Y7QUFBRTs7Ozs7QUN2L0pGO0FBRUU7QUFFQTtBQUVBO0FBQWtEO0FBQTBDO0lBQTBEO0FBQUE7QUFBRTtBQUd0SjtBQUNFO0lBQ0Y7QUFBQTtBQUdFO0lBQ0Y7QUFBQTtFQUdGO0FBRUE7QUFDQTtBQUVBO0FBQ0U7RUFDRjtBQUFBO0FBR0U7RUFDRjtBQUFBO0FBR0U7RUFDRjtBQUFBO0FBR0U7QUFDRTtJQUNGO0VBQ0Y7QUFBQTtBQUdFO0FBQ0U7QUFDQTtBQUNBO0lBQ0Y7RUFDRjtBQUFBO0FBR0U7QUFDRTtBQUNFO01BQ0Y7SUFDRjtFQUNGO0FBQUE7QUFHRTtBQUVBO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFBQTtBQUdFO0FBQ0E7SUFDRjtBQUNFO0lBQ0Y7QUFBQTtBQUNGO0FBR0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHQTtJQUNGO0FBQ0E7QUFDRTtBQUNFO01BQ0Y7QUFBQTtBQUdFO01BQ0Y7QUFBQTtJQUdGO0FBQ0E7QUFDRTtJQUNGO0FBQ0E7QUFDRTtBQUVBO0FBQ0U7QUFDQTtNQUNGO0FBQUE7SUFHRjtBQUFBO0FBR0Y7QUFDQTtBQUNBO0FBQW9DO0FBQXFCO0FBQXNCO0FBRS9FO0FBQ0U7QUFDRTtBQUVBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFFQTtBQUNFO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFDQTtZQUNGO0FBQUE7QUFDRjtBQUdFO0FBQ0E7VUFDRjtBQUFBO01BRUo7QUFBQTtJQUdGO0FBRUE7QUFDRTtJQUNGO0FBRUE7RUFDRjtBQUVBO0FBRUE7QUFDRTtBQUNFO0FBRUE7QUFDQTtBQUNBO0FBQ0E7SUFDRjtBQUFBO0FBR0U7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBRUE7SUFDRjtBQUNFO0FBQ0U7QUFDQTtNQUNGO0FBQUE7QUFHRTtBQUNBO01BQ0Y7QUFBQTtBQUdFO0FBQ0E7TUFDRjtBQUFBO0FBR0U7TUFDRjtBQUFBO0FBSUE7SUFDRjtBQUVBO0FBQ0U7QUFDRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHRTtNQUNGO0FBQUE7QUFHQTtBQUNFO0FBQWdCO0FBQ2Q7UUFDRjtBQUFBO0FBQ0Y7QUFHRjtFQUNG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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7TUFDRjtBQUFBO0FBQ0Y7QUFFRTtJQUNGO0FBQUE7QUFFRTtBQUNFO0FBQ0k7QUFDSjtBQUNFO0FBQXlCO0FBRXpCO1FBQ0Y7QUFDQTtBQUNBO01BQ0Y7QUFDQTtBQUNFO01BQ0Y7QUFDQTtBQUNFO0FBQ0U7UUFDRjtNQUNGO0FBQ0U7QUFDRTtRQUNGO0FBQ0E7TUFDRjtBQUNFO0FBQ0E7QUFDQTtBQUNBO01BQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDQTtVQUNGO1FBQ0Y7TUFDRjtBQUNFO0FBQ0U7UUFDRjtNQUNGO0FBQUE7QUFDRjtBQUVFO0FBQ0E7QUFBZTtFQUVuQjtBQTlFQTtBQUNJO0FBQWE7QUE4RWpCO0FDL0VBO0FBQUE7QUFDSTtBQUFtQjtBQUNuQjtBQURKO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0o7QUFDRTtBQUNFO0FBQTRFO0FBRTVFO0FBQ0U7QUFBVTtBQUVWO0FBQVU7SUFFZDtBQUFBO0VBRUY7QUFBQTtBQUVFO0FBQ0k7QUFDSjtBQUNFO0FBQXNCO0FBRXRCO0FBQ0U7QUFBWTtBQUNoQjtBQUNGO0FBRUU7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQTBDO0FBRTlDO0FBQ0U7QUFDRTtBQUNJO0FBQ0E7QUFDRjtBQUNBO0FBQ0U7QUFBK0I7VUFFbkM7QUFBQTtBQUVBO1FBQ0Y7QUFDQTtBQUNFO0FBQ0k7QUFDSjtBQUNFO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDRTtBQUFhO0FBRWI7QUFBYTtBQUViO0FBQWtCO0FBRWxCO0FBQWlCO1VBRXJCO0FBQUE7UUFFRjtBQUNBO0FBQ0U7QUFDSTtBQUNKO0FBQ0U7QUFDQTtBQUNFO0FBQWU7QUFDbkI7QUFFRjtBQUNFO1FBQ0Y7QUFBQTtBQUVGO0FBQ0U7QUFDSTtVQUNGO0FBQUc7SUFFVDtB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O0FBQ0U7QUFFQTtBQUVBO0FBQ0U7QUFFQTtBQUNFO0lBQ0Y7RUFDRjtBQUFBO0FBR0U7QUFDQTtBQUFzQjtBQUUxQjtBQUN5ekI7QUNsQnp6QjtBQUNFO0FBRUE7QUFBcUI7QUFBYTtBQUVsQztBQUFrQztBQUEyQztBQUF5QztBQUEyQjtBQUF3RDtBQUFnQztBQUEyQjtBQUEwQjtNQUE2RDtBQUFBO0FBQUU7QUFBMkQ7QUFBZ0I7QUFBbUQ7QUFBbUI7QUFBMEM7SUFBc0I7RUFBRztBQUVqakI7QUFBa0Q7QUFBMEM7SUFBMEQ7QUFBQTtBQUFFO0FBR3RKO0FBQ0U7SUFDRjtBQUNFO0lBQ0Y7QUFDQTtBQUNFO0FBQ0U7QUFDRTtBQUVBO1FBQ0Y7QUFBQTtBQUdFO0FBQ0E7QUFDRTtBQUNBO0FBQWM7QUFBcUI7QUFBK0I7QUFBc0I7QUFBUTtVQUNsRztBQUFBO0FBR0Y7TUFDRjtBQUVBO0lBQ0Y7QUFBQTtBQUVKO0FBQ2kwQyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGU+XFxyXFxuXFxyXFxuICA8c2VjdGlvbiB2YWxpZGF0ZS5iaW5kPVxcXCJ3aXphcmQudmFsaWRhdGlvblN0ZXAzXFxcIj5cXHJcXG5cXHJcXG4gICAgPGZpZWxkc2V0PlxcclxcbiAgICAgIDxsZWdlbmQ+VGhlIHNtYWxsIHByaW50PC9sZWdlbmQ+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJhZ3JlZS10ZXJtc1xcXCI+XFxyXFxuICAgICAgICAgIDxpbnB1dCBpZD1cXFwiYWdyZWUtdGVybXNcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiBjaGVja2VkLmJpbmQ9XFxcIndpemFyZC5wZXJzb24uYWdyZWVUb1Rlcm1zXFxcIiB2YWxpZGF0ZT1cXFwicGVyc29uLmFncmVlVG9UZXJtc1xcXCI+XFxyXFxuICAgICAgICAgIEkgaGF2ZSByZWFkIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9uc1xcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcInNlbGwta2lkbmV5LXllc1xcXCI+XFxyXFxuICAgICAgICAgIDxpbnB1dCBpZD1cXFwic2VsbC1raWRuZXkteWVzXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgY2hlY2tlZC5iaW5kPVxcXCJ3aXphcmQucGVyc29uLmFncmVlVG9TZWxsS2lkbmV5XFxcIiBtb2RlbC5iaW5kPVxcXCJ0cnVlXFxcIiBuYW1lPVxcXCJraWRuZXktcmFkaW9cXFwiPlxcclxcbiAgICAgICAgICBJIGFncmVlIHRvIHNlbGwgYSBraWRuZXlcXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuXFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJzZWxsLWtpZG5leS1ub1xcXCI+XFxyXFxuICAgICAgICAgIDxpbnB1dCBpZD1cXFwic2VsbC1raWRuZXktbm9cXFwiIHR5cGU9XFxcInJhZGlvXFxcIiBjaGVja2VkLmJpbmQ9XFxcIndpemFyZC5wZXJzb24uYWdyZWVUb1NlbGxLaWRuZXlcXFwiIG1vZGVsLmJpbmQ9XFxcImZhbHNlXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgdmFsaWRhdGU9XFxcInBlcnNvbi5hZ3JlZVRvU2VsbEtpZG5leVxcXCIgbmFtZT1cXFwia2lkbmV5LXJhZGlvXFxcIj5cXHJcXG4gICAgICAgICAgTm8hIFlvdSBjYW4ndCBoYXZlIG15IGtpZG5leTwvbGFiZWw+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgPHAgc2hvdy5iaW5kPVxcXCIhd2l6YXJkLnZhbGlkYXRpb25TdGVwMy5yZXN1bHQuaXNWYWxpZCAmJlxcclxcbiAgICAgICAgd2l6YXJkLnZhbGlkYXRpb25TdGVwMy5yZXN1bHQucHJvcGVydGllc1sncGVyc29uLmFncmVlVG9UZXJtcyddLmlzRGlydHkgJiYgd2l6YXJkLnZhbGlkYXRpb25TdGVwMy5yZXN1bHQucHJvcGVydGllc1sncGVyc29uLmFncmVlVG9TZWxsS2lkbmV5J10uaXNEaXJ0eVxcXCJcXHJcXG4gICAgICAgICBjbGFzcz1cXFwiJHshd2l6YXJkLnZhbGlkYXRpb25TdGVwMy5yZXN1bHQuaXNWYWxpZCA/ICdoYXMtd2FybmluZycgOiAnJ31cXFwiPiogWW91IG11c3QgYWdyZWUgdG8gYWxsIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9uczwvcD5cXHJcXG5cXHJcXG4gICAgPC9maWVsZHNldD5cXHJcXG5cXHJcXG4gIDwvc2VjdGlvbj5cXHJcXG5cXHJcXG48L3RlbXBsYXRlPlxcclxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGU+XFxyXFxuXFxyXFxuICA8c2VjdGlvbiB2YWxpZGF0ZS5iaW5kPVxcXCJ3aXphcmQudmFsaWRhdGlvblN0ZXAyXFxcIj5cXHJcXG5cXHJcXG4gICAgPGZpZWxkc2V0PlxcclxcbiAgICAgIDxsZWdlbmQ+RmF2b3VyaXRlczwvbGVnZW5kPlxcclxcblxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwidHlwZVxcXCI+RmF2b3VyaXRlIHR5cGUgb2YgJHt3aXphcmQucGVyc29uLmZhdm91cml0ZVZlcnRlYnJhdGVDbGFzcy5sYWJlbH08L2xhYmVsPlxcclxcbiAgICAgICAgPHNlbGVjdCBpZD1cXFwidHlwZVxcXCIgdmFsdWUuYmluZD1cXFwid2l6YXJkLnBlcnNvbi5mYXZvdXJpdGVWZXJ0ZWJyYXRlVHlwZVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU9XFxcInBlcnNvbi5mYXZvdXJpdGVWZXJ0ZWJyYXRlVHlwZVxcXCI+XFxyXFxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIlxcXCI+U2VsZWN0Li4uPC9vcHRpb24+XFxyXFxuICAgICAgICAgIDxvcHRpb24gcmVwZWF0LmZvcj1cXFwidHlwZSBvZiB3aXphcmQucGVyc29uLmZhdm91cml0ZVZlcnRlYnJhdGVDbGFzcy5leGFtcGxlc1xcXCI+JHt0eXBlfTwvb3B0aW9uPlxcclxcbiAgICAgICAgPC9zZWxlY3Q+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgIDwvZmllbGRzZXQ+XFxyXFxuXFxyXFxuICAgIDxmaWVsZHNldD5cXHJcXG4gICAgICA8bGVnZW5kPkFkZHJlc3M8L2xlZ2VuZD5cXHJcXG5cXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcImhvdXNlTmFtZVxcXCI+SG91c2UgbmFtZTwvbGFiZWw+XFxyXFxuICAgICAgICA8aW5wdXQgaWQ9XFxcImhvdXNlTmFtZVxcXCIgcGxhY2Vob2xkZXI9XFxcImhvdXNlIG5hbWVcXFwiIHZhbHVlLmJpbmQ9XFxcImhvdXNlTmFtZVxcXCIgdmFsaWRhdGU9XFxcImFkZHJlc3MuaG91c2VOYW1lXFxcIj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcImhvdXNlTnVtYmVyXFxcIj5Ib3VzZSBudW1iZXI8L2xhYmVsPlxcclxcbiAgICAgICAgPGlucHV0IGlkPVxcXCJob3VzZU51bWJlclxcXCIgcGxhY2Vob2xkZXI9XFxcImhvdXNlIG51bWJlclxcXCIgdmFsdWUuYmluZD1cXFwiaG91c2VOdW1iZXJcXFwiIHZhbGlkYXRlPVxcXCJhZGRyZXNzLmhvdXNlTnVtYmVyXFxcIj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcInN0cmVldFxcXCI+U3RyZWV0PC9sYWJlbD5cXHJcXG4gICAgICAgIDxpbnB1dCBpZD1cXFwic3RyZWV0XFxcIiBwbGFjZWhvbGRlcj1cXFwic3RyZWV0XFxcIiB2YWx1ZS5iaW5kPVxcXCJ3aXphcmQuYWRkcmVzcy5zdHJlZXRcXFwiIHZhbGlkYXRlPVxcXCJhZGRyZXNzLnN0cmVldFxcXCI+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJ0b3duXFxcIj5Ub3duPC9sYWJlbD5cXHJcXG4gICAgICAgIDxpbnB1dCBpZD1cXFwidG93blxcXCIgcGxhY2Vob2xkZXI9XFxcInRvd25cXFwiIHZhbHVlLmJpbmQ9XFxcIndpemFyZC5hZGRyZXNzLnRvd25cXFwiIHZhbGlkYXRlPVxcXCJhZGRyZXNzLnRvd25cXFwiPlxcclxcbiAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwiY291bnRyeVxcXCI+Q291bnRyeTwvbGFiZWw+XFxyXFxuICAgICAgICA8c2VsZWN0IGlkPVxcXCJjb3VudHJ5XFxcIiB2YWx1ZS5iaW5kPVxcXCJ3aXphcmQuYWRkcmVzcy5jb3VudHJ5XFxcIiB2YWxpZGF0ZT1cXFwiYWRkcmVzcy5jb3VudHJ5XFxcIj5cXHJcXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiXFxcIj5TZWxlY3QuLi48L29wdGlvbj5cXHJcXG4gICAgICAgICAgPG9wdGlvbiByZXBlYXQuZm9yPVxcXCJjb3VudHJ5IG9mIHdpemFyZC5jb3VudHJpZXNcXFwiPiR7Y291bnRyeX08L29wdGlvbj5cXHJcXG4gICAgICAgIDwvc2VsZWN0PlxcclxcbiAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwicG9zdGNvZGVcXFwiPlBvc3Rjb2RlPC9sYWJlbD5cXHJcXG4gICAgICAgIDxpbnB1dCBpZD1cXFwicG9zdGNvZGVcXFwiIHBsYWNlaG9sZGVyPVxcXCJwb3N0Y29kZVxcXCIgdmFsdWUuYmluZD1cXFwid2l6YXJkLmFkZHJlc3MucG9zdGNvZGVcXFwiIHZhbGlkYXRlPVxcXCJhZGRyZXNzLnBvc3Rjb2RlXFxcIj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgPC9maWVsZHNldD5cXHJcXG5cXHJcXG4gIDwvc2VjdGlvbj5cXHJcXG5cXHJcXG48L3RlbXBsYXRlPlxcclxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGU+XFxyXFxuXFxyXFxuICA8c2VjdGlvbiB2YWxpZGF0ZS5iaW5kPVxcXCJ3aXphcmQudmFsaWRhdGlvblN0ZXAxXFxcIj5cXHJcXG5cXHJcXG4gICAgPGZpZWxkc2V0PlxcclxcbiAgICAgIDxsZWdlbmQ+UGVyc29uYWwgZGV0YWlsczwvbGVnZW5kPlxcclxcblxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwiZm9yZW5hbWVcXFwiPkZvcmVuYW1lPC9sYWJlbD5cXHJcXG4gICAgICAgIDxpbnB1dCBpZD1cXFwiZm9yZW5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJmb3JlbmFtZVxcXCIgdmFsdWUuYmluZD1cXFwid2l6YXJkLnBlcnNvbi5mb3JlbmFtZVxcXCIgdmFsaWRhdGU9XFxcInBlcnNvbi5mb3JlbmFtZVxcXCI+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJzdXJuYW1lXFxcIj5TdXJuYW1lPC9sYWJlbD5cXHJcXG4gICAgICAgIDxpbnB1dCBpZD1cXFwic3VybmFtZVxcXCIgcGxhY2Vob2xkZXI9XFxcInN1cm5hbWVcXFwiIHZhbHVlLmJpbmQ9XFxcIndpemFyZC5wZXJzb24uc3VybmFtZVxcXCIgdmFsaWRhdGU9XFxcInBlcnNvbi5zdXJuYW1lXFxcIj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcInZlcnRlYnJhdGUtY2xhc3NcXFwiPkZhdm91cml0ZSBjbGFzcyBvZiB2ZXJ0ZWJyYXRlPC9sYWJlbD5cXHJcXG4gICAgICAgIDxzZWxlY3QgaWQ9XFxcInZlcnRlYnJhdGUtY2xhc3NcXFwiIHZhbHVlLmJpbmQ9XFxcIndpemFyZC5wZXJzb24uZmF2b3VyaXRlVmVydGVicmF0ZUNsYXNzXFxcIlxcclxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZT1cXFwicGVyc29uLmZhdm91cml0ZVZlcnRlYnJhdGVDbGFzc1xcXCI+XFxyXFxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIlxcXCI+U2VsZWN0Li4uPC9vcHRpb24+XFxyXFxuICAgICAgICAgIDxvcHRpb24gcmVwZWF0LmZvcj1cXFwidmVydGVicmF0ZSBvZiB3aXphcmQudmVydGVicmF0ZXNcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgbW9kZWwuYmluZD1cXFwidmVydGVicmF0ZVxcXCI+JHt2ZXJ0ZWJyYXRlLnR5cGV9PC9vcHRpb24+XFxyXFxuICAgICAgICA8L3NlbGVjdD5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgPC9maWVsZHNldD5cXHJcXG5cXHJcXG4gIDwvc2VjdGlvbj5cXHJcXG5cXHJcXG48L3RlbXBsYXRlPlxcclxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGU+XFxyXFxuXFxyXFxuICA8c2VjdGlvbiBzaG93LmJpbmQ9XFxcIiFpc0NvbXBsZXRlXFxcIj5cXHJcXG5cXHJcXG4gICAgPGZvcm0gY2xhc3M9XFxcInB1cmUtZm9ybSBwdXJlLWZvcm0tc3RhY2tlZFxcXCI+XFxyXFxuXFxyXFxuICAgICAgPGNvbXBvc2Ugdmlldy1tb2RlbD1cXFwiJHthY3RpdmVTdGVwLnBhdGh9XFxcIj48L2NvbXBvc2U+XFxyXFxuXFxyXFxuICAgICAgPGRpdj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xpY2sudHJpZ2dlcj1cXFwicHJldmlvdXNTdGVwKClcXFwiIGRpc2FibGVkLmJpbmQ9XFxcImlzRmlyc3RQYWdlXFxcIj5QcmV2aW91czwvYnV0dG9uPlxcclxcbiAgICAgICAgPGJ1dHRvbiBjbGljay50cmlnZ2VyPVxcXCJuZXh0U3RlcCgpXFxcIiBkaXNhYmxlZC5iaW5kPVxcXCJpc0xhc3RQYWdlXFxcIj5OZXh0PC9idXR0b24+XFxyXFxuICAgICAgICA8YnI+PGJyPlxcclxcbiAgICAgICAgPGJ1dHRvbiBjbGljay50cmlnZ2VyPVxcXCJmaW5pc2goKVxcXCIgc2hvdy5iaW5kPVxcXCJpc0xhc3RQYWdlXFxcIj5TdWJtaXQ8L2J1dHRvbj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgPC9mb3JtPlxcclxcblxcclxcbiAgPC9zZWN0aW9uPlxcclxcblxcclxcbiAgPHNlY3Rpb24gc2hvdy5iaW5kPVxcXCJpc0NvbXBsZXRlXFxcIj5cXHJcXG5cXHJcXG4gICAgPGgyIGNsYXNzPVxcXCJzdWItaGVhZGluZ1xcXCI+Rm9ybSBjb250ZW50czwvaDI+XFxyXFxuXFxyXFxuICAgIDx1bD5cXHJcXG4gICAgICA8bGk+XFxyXFxuICAgICAgICA8c3Ryb25nPk5hbWU6PC9zdHJvbmc+ICR7d2l6YXJkLnBlcnNvbi5mdWxsbmFtZX1cXHJcXG4gICAgICA8L2xpPlxcclxcblxcclxcbiAgICAgIDxsaT5cXHJcXG4gICAgICAgIDxzdHJvbmc+QWRkcmVzczo8L3N0cm9uZz4gJHt3aXphcmQuYWRkcmVzcy5mb3JtYXR0ZWR9XFxyXFxuICAgICAgPC9saT5cXHJcXG5cXHJcXG4gICAgICA8bGk+XFxyXFxuICAgICAgICA8c3Ryb25nPkZhdm91cml0ZSBjbGFzcyBvZiB2ZXJ0ZWJyYXRlOjwvc3Ryb25nPiAke3dpemFyZC5wZXJzb24uZmF2b3VyaXRlVmVydGVicmF0ZUNsYXNzLnR5cGV9XFxyXFxuICAgICAgPC9saT5cXHJcXG5cXHJcXG4gICAgICA8bGk+XFxyXFxuICAgICAgICA8c3Ryb25nPkZhdm91cml0ZSB0eXBlIG9mICR7d2l6YXJkLnBlcnNvbi5mYXZvdXJpdGVWZXJ0ZWJyYXRlQ2xhc3MubGFiZWx9Ojwvc3Ryb25nPlxcclxcbiAgICAgICAgJHt3aXphcmQucGVyc29uLmZhdm91cml0ZVZlcnRlYnJhdGVUeXBlfVxcclxcbiAgICAgIDwvbGk+XFxyXFxuXFxyXFxuICAgICAgPGxpPlxcclxcbiAgICAgICAgPHN0cm9uZz5BZ3JlZWQgdG8gdGVybXMgYW5kIGNvbmRpdGlvbnM6PC9zdHJvbmc+ICR7d2l6YXJkLnBlcnNvbi5hZ3JlZVRvVGVybXN9XFxyXFxuICAgICAgPC9saT5cXHJcXG5cXHJcXG4gICAgICA8bGk+XFxyXFxuICAgICAgICA8c3Ryb25nPkFncmVlZCB0byBzZWxsIGtpZG5leTo8L3N0cm9uZz4gJHt3aXphcmQucGVyc29uLmFncmVlVG9TZWxsS2lkbmV5fVxcclxcbiAgICAgIDwvbGk+XFxyXFxuICAgIDwvdWw+XFxyXFxuXFxyXFxuICAgIDxidXR0b24gY2xpY2sudHJpZ2dlcj1cXFwicmVzdGFydCgpXFxcIj5TdGFydCBhZ2FpbjwvYnV0dG9uPlxcclxcblxcclxcbiAgPC9zZWN0aW9uPlxcclxcblxcclxcbjwvdGVtcGxhdGU+XFxyXFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZT5cXHJcXG5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcInBhZ2UtY29udGVudFxcXCI+XFxyXFxuXFxyXFxuICAgIDxoMT4ke3JvdXRlci5jdXJyZW50SW5zdHJ1Y3Rpb24uY29uZmlnLnRpdGxlfTwvaDE+XFxyXFxuXFxyXFxuICAgIDxyb3V0ZXItdmlldz48L3JvdXRlci12aWV3PlxcclxcblxcclxcbiAgPC9kaXY+XFxyXFxuXFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cIjsiLCJTeXN0ZW0ucmVnaXN0ZXIoWydhdXJlbGlhLWZyYW1ld29yaycsICdhdXJlbGlhLXZhbGlkYXRpb24nLCAnc3JjL3ZpZXdzL2hvbWUvcGVyc29uJywgJ3NyYy92aWV3cy9ob21lL2FkZHJlc3MnLCAnc3JjL3ZpZXdzL2hvbWUvZGF0YSddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGluamVjdCwgVmFsaWRhdGlvbiwgUGVyc29uLCBBZGRyZXNzLCB2ZXJ0ZWJyYXRlcywgY291bnRyaWVzLCBXaXphcmQ7XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2F1cmVsaWFGcmFtZXdvcmspIHtcbiAgICAgIGluamVjdCA9IF9hdXJlbGlhRnJhbWV3b3JrLmluamVjdDtcbiAgICB9LCBmdW5jdGlvbiAoX2F1cmVsaWFWYWxpZGF0aW9uKSB7XG4gICAgICBWYWxpZGF0aW9uID0gX2F1cmVsaWFWYWxpZGF0aW9uLlZhbGlkYXRpb247XG4gICAgfSwgZnVuY3Rpb24gKF9zcmNWaWV3c0hvbWVQZXJzb24pIHtcbiAgICAgIFBlcnNvbiA9IF9zcmNWaWV3c0hvbWVQZXJzb24uUGVyc29uO1xuICAgIH0sIGZ1bmN0aW9uIChfc3JjVmlld3NIb21lQWRkcmVzcykge1xuICAgICAgQWRkcmVzcyA9IF9zcmNWaWV3c0hvbWVBZGRyZXNzLkFkZHJlc3M7XG4gICAgfSwgZnVuY3Rpb24gKF9zcmNWaWV3c0hvbWVEYXRhKSB7XG4gICAgICB2ZXJ0ZWJyYXRlcyA9IF9zcmNWaWV3c0hvbWVEYXRhLnZlcnRlYnJhdGVzO1xuICAgICAgY291bnRyaWVzID0gX3NyY1ZpZXdzSG9tZURhdGEuY291bnRyaWVzO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFdpemFyZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFdpemFyZCh2YWxpZGF0aW9uKSB7XG4gICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9XaXphcmQpO1xuXG4gICAgICAgICAgdGhpcy52YWxpZGF0aW9uID0gdmFsaWRhdGlvbjtcbiAgICAgICAgICB0aGlzLnZlcnRlYnJhdGVzID0gdmVydGVicmF0ZXM7XG4gICAgICAgICAgdGhpcy5jb3VudHJpZXMgPSBjb3VudHJpZXM7XG4gICAgICAgICAgdGhpcy5wZXJzb24gPSBuZXcgUGVyc29uKCk7XG4gICAgICAgICAgdGhpcy5hZGRyZXNzID0gbmV3IEFkZHJlc3MoKTtcblxuICAgICAgICAgIHRoaXMudmFsaWRhdGlvblN0ZXAxID0gdGhpcy5zZXR1cFZhbGlkYXRvblN0ZXAxKCk7XG4gICAgICAgICAgdGhpcy52YWxpZGF0aW9uU3RlcDIgPSB0aGlzLnNldHVwVmFsaWRhdG9uU3RlcDIoKTtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRpb25TdGVwMyA9IHRoaXMuc2V0dXBWYWxpZGF0b25TdGVwMygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFdpemFyZCwgW3tcbiAgICAgICAgICBrZXk6ICdzZXR1cFZhbGlkYXRvblN0ZXAxJyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBWYWxpZGF0b25TdGVwMSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb24ub24odGhpcykuZW5zdXJlKCdwZXJzb24uZm9yZW5hbWUnKS5pc05vdEVtcHR5KCkuZW5zdXJlKCdwZXJzb24uc3VybmFtZScpLmlzTm90RW1wdHkoKS5lbnN1cmUoJ3BlcnNvbi5mYXZvdXJpdGVWZXJ0ZWJyYXRlQ2xhc3MnKS5pc05vdEVtcHR5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnc2V0dXBWYWxpZGF0b25TdGVwMicsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwVmFsaWRhdG9uU3RlcDIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uLm9uKHRoaXMpLmVuc3VyZSgncGVyc29uLmZhdm91cml0ZVZlcnRlYnJhdGVUeXBlJykuaXNOb3RFbXB0eSgpLmVuc3VyZSgnYWRkcmVzcy5ob3VzZU5hbWUnLCBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgIGNvbmZpZy5jb21wdXRlZEZyb20oWydhZGRyZXNzLmhvdXNlTnVtYmVyJ10pO1xuICAgICAgICAgICAgfSlbJ2lmJ10oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gIV90aGlzLmFkZHJlc3MuaG91c2VOdW1iZXI7XG4gICAgICAgICAgICB9KS5pc05vdEVtcHR5KCkud2l0aE1lc3NhZ2UoJyBpcyByZXF1aXJlZCBpZiBubyBob3VzZSBudW1iZXIgaXMgZW50ZXJlZCcpLmVuZElmKClbJ2lmJ10oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gISFfdGhpcy5hZGRyZXNzLmhvdXNlTnVtYmVyO1xuICAgICAgICAgICAgfSkubXVzdEJlRW1wdHkoKS53aXRoTWVzc2FnZSgnIGNhbm5vdCBiZSBlbnRlcmVkIGlmIHlvdSBoYXZlIGEgaG91c2UgbnVtYmVyJykuZW5kSWYoKS5lbnN1cmUoJ2FkZHJlc3MuaG91c2VOdW1iZXInLCBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgIGNvbmZpZy5jb21wdXRlZEZyb20oWydhZGRyZXNzLmhvdXNlTmFtZSddKTtcbiAgICAgICAgICAgIH0pWydpZiddKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICFfdGhpcy5hZGRyZXNzLmhvdXNlTmFtZTtcbiAgICAgICAgICAgIH0pLmlzTm90RW1wdHkoKS53aXRoTWVzc2FnZSgnIGlzIHJlcXVpcmVkIGlmIG5vIGhvdXNlIG5hbWUgaXMgZW50ZXJlZCcpLmVuZElmKClbJ2lmJ10oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gISFfdGhpcy5hZGRyZXNzLmhvdXNlTmFtZTtcbiAgICAgICAgICAgIH0pLm11c3RCZUVtcHR5KCkud2l0aE1lc3NhZ2UoJyBjYW5ub3QgYmUgZW50ZXJlZCBpZiB5b3UgaGF2ZSBhIGhvdXNlIG5hbWUnKS5lbmRJZigpLmVuc3VyZSgnYWRkcmVzcy5zdHJlZXQnKS5pc05vdEVtcHR5KCkuZW5zdXJlKCdhZGRyZXNzLnRvd24nKS5pc05vdEVtcHR5KCkuZW5zdXJlKCdhZGRyZXNzLmNvdW50cnknKS5pc05vdEVtcHR5KCkuZW5zdXJlKCdhZGRyZXNzLnBvc3Rjb2RlJykuaXNOb3RFbXB0eSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ3NldHVwVmFsaWRhdG9uU3RlcDMnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cFZhbGlkYXRvblN0ZXAzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbi5vbih0aGlzKS5lbnN1cmUoJ3BlcnNvbi5hZ3JlZVRvVGVybXMnKS5pc05vdEVxdWFsVG8oZmFsc2UpLndpdGhNZXNzYWdlKCcqJykuZW5zdXJlKCdwZXJzb24uYWdyZWVUb1NlbGxLaWRuZXknKS5pc05vdEVxdWFsVG8oZmFsc2UpLndpdGhNZXNzYWdlKCcqJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgdmFyIF9XaXphcmQgPSBXaXphcmQ7XG4gICAgICAgIFdpemFyZCA9IGluamVjdChWYWxpZGF0aW9uKShXaXphcmQpIHx8IFdpemFyZDtcbiAgICAgICAgcmV0dXJuIFdpemFyZDtcbiAgICAgIH0pKCk7XG5cbiAgICAgIF9leHBvcnQoJ1dpemFyZCcsIFdpemFyZCk7XG4gICAgfVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OTJhV1YzY3k5b2IyMWxMM2RwZW1GeVpDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3YlVWQlQyRXNUVUZCVFRzN096czdPenM3YVVOQlVGZ3NUVUZCVFRzN2MwTkJRMDRzVlVGQlZUczdiVU5CUTFZc1RVRkJUVHM3Y1VOQlEwNHNUMEZCVHpzN2MwTkJRMUFzVjBGQlZ6dHZRMEZCUlN4VFFVRlRPenM3UVVGSGFrSXNXVUZCVFR0QlFVVk9MR2xDUVVaQkxFMUJRVTBzUTBGRlRDeFZRVUZWTEVWQlFVVTdPenRCUVVOMFFpeGpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJRenRCUVVNM1FpeGpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRmRCUVZjc1EwRkJRenRCUVVNdlFpeGpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRenRCUVVNelFpeGpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGRE0wSXNZMEZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFOUJRVThzUlVGQlJTeERRVUZET3p0QlFVVTNRaXhqUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzBGQlEyeEVMR05CUVVrc1EwRkJReXhsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFTkJRVU03UVVGRGJFUXNZMEZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1EwRkJRenRUUVVOdVJEczdjVUpCV2xVc1RVRkJUVHM3YVVKQlkwVXNLMEpCUVVjN1FVRkRjRUlzYlVKQlFVOHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlF6VkNMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVTjZRaXhWUVVGVkxFVkJRVVVzUTBGRldpeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGRGVFSXNWVUZCVlN4RlFVRkZMRU5CUlZvc1RVRkJUU3hEUVVGRExHbERRVUZwUXl4RFFVRkRMRU5CUTNwRExGVkJRVlVzUlVGQlJTeERRVUZETzFkQlEycENPenM3YVVKQlJXdENMQ3RDUVVGSE96czdRVUZEY0VJc2JVSkJRVThzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRelZDTEUxQlFVMHNRMEZCUXl4blEwRkJaME1zUTBGQlF5eERRVU40UXl4VlFVRlZMRVZCUVVVc1EwRkZXaXhOUVVGTkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1ZVRkJReXhOUVVGTkxFVkJRVXM3UVVGRGRrTXNiMEpCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRE9VTXNRMEZCUXl4TlFVTkRMRU5CUVVNc1dVRkJUVHRCUVVOU0xIRkNRVUZQTEVOQlFVTXNUVUZCU3l4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRE8yRkJRMnhETEVOQlFVTXNRMEZEUkN4VlFVRlZMRVZCUVVVc1EwRkRXaXhYUVVGWExFTkJRVU1zTkVOQlFUUkRMRU5CUVVNc1EwRkRla1FzUzBGQlN5eEZRVUZGTEUxQlEwd3NRMEZCUXl4WlFVRk5PMEZCUTFJc2NVSkJRVThzUTBGQlF5eERRVUZETEUxQlFVc3NUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJRenRoUVVOdVF5eERRVUZETEVOQlEwUXNWMEZCVnl4RlFVRkZMRU5CUTJJc1YwRkJWeXhEUVVGRExDdERRVUVyUXl4RFFVRkRMRU5CUXpWRUxFdEJRVXNzUlVGQlJTeERRVVZRTEUxQlFVMHNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeFZRVUZETEUxQlFVMHNSVUZCU3p0QlFVTjZReXh2UWtGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTTFReXhEUVVGRExFMUJRME1zUTBGQlF5eFpRVUZOTzBGQlExSXNjVUpCUVU4c1EwRkJReXhOUVVGTExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTTdZVUZEYUVNc1EwRkJReXhEUVVORUxGVkJRVlVzUlVGQlJTeERRVU5hTEZkQlFWY3NRMEZCUXl3d1EwRkJNRU1zUTBGQlF5eERRVU4yUkN4TFFVRkxMRVZCUVVVc1RVRkRUQ3hEUVVGRExGbEJRVTA3UVVGRFVpeHhRa0ZCVHl4RFFVRkRMRU5CUVVNc1RVRkJTeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETzJGQlEycERMRU5CUVVNc1EwRkRSQ3hYUVVGWExFVkJRVVVzUTBGRFlpeFhRVUZYTEVOQlFVTXNOa05CUVRaRExFTkJRVU1zUTBGRE1VUXNTMEZCU3l4RlFVRkZMRU5CUlZBc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUTNoQ0xGVkJRVlVzUlVGQlJTeERRVVZhTEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkRkRUlzVlVGQlZTeEZRVUZGTEVOQlJWb3NUVUZCVFN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlEzcENMRlZCUVZVc1JVRkJSU3hEUVVWYUxFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVNeFFpeFZRVUZWTEVWQlFVVXNRMEZCUXp0WFFVTnFRanM3TzJsQ1FVVnJRaXdyUWtGQlJ6dEJRVU53UWl4dFFrRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkROVUlzVFVGQlRTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRemRDTEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkRia0lzVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVVm9RaXhOUVVGTkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkRiRU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVTnVRaXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdWMEZEY2tJN096dHpRa0Z5UmxVc1RVRkJUVHRCUVVGT0xHTkJRVTBzUjBGRWJFSXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVOT0xFMUJRVTBzUzBGQlRpeE5RVUZOTzJWQlFVNHNUVUZCVFNJc0ltWnBiR1VpT2lKemNtTXZkbWxsZDNNdmFHOXRaUzkzYVhwaGNtUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZTJsdWFtVmpkSDBnWm5KdmJTQW5ZWFZ5Wld4cFlTMW1jbUZ0WlhkdmNtc25PMXh5WEc1cGJYQnZjblFnZTFaaGJHbGtZWFJwYjI1OUlHWnliMjBnSjJGMWNtVnNhV0V0ZG1Gc2FXUmhkR2x2YmljN1hISmNibWx0Y0c5eWRDQjdVR1Z5YzI5dWZTQm1jbTl0SUNkemNtTXZkbWxsZDNNdmFHOXRaUzl3WlhKemIyNG5PMXh5WEc1cGJYQnZjblFnZTBGa1pISmxjM045SUdaeWIyMGdKM055WXk5MmFXVjNjeTlvYjIxbEwyRmtaSEpsYzNNbk8xeHlYRzVwYlhCdmNuUWdlM1psY25SbFluSmhkR1Z6TENCamIzVnVkSEpwWlhOOUlHWnliMjBnSjNOeVl5OTJhV1YzY3k5b2IyMWxMMlJoZEdFbk8xeHlYRzVjY2x4dVFHbHVhbVZqZENoV1lXeHBaR0YwYVc5dUtWeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1YybDZZWEprSUh0Y2NseHVYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9kbUZzYVdSaGRHbHZiaWtnZTF4eVhHNGdJQ0FnZEdocGN5NTJZV3hwWkdGMGFXOXVJRDBnZG1Gc2FXUmhkR2x2Ymp0Y2NseHVJQ0FnSUhSb2FYTXVkbVZ5ZEdWaWNtRjBaWE1nUFNCMlpYSjBaV0p5WVhSbGN6dGNjbHh1SUNBZ0lIUm9hWE11WTI5MWJuUnlhV1Z6SUQwZ1kyOTFiblJ5YVdWek8xeHlYRzRnSUNBZ2RHaHBjeTV3WlhKemIyNGdQU0J1WlhjZ1VHVnljMjl1S0NrN1hISmNiaUFnSUNCMGFHbHpMbUZrWkhKbGMzTWdQU0J1WlhjZ1FXUmtjbVZ6Y3lncE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdWRtRnNhV1JoZEdsdmJsTjBaWEF4SUQwZ2RHaHBjeTV6WlhSMWNGWmhiR2xrWVhSdmJsTjBaWEF4S0NrN1hISmNiaUFnSUNCMGFHbHpMblpoYkdsa1lYUnBiMjVUZEdWd01pQTlJSFJvYVhNdWMyVjBkWEJXWVd4cFpHRjBiMjVUZEdWd01pZ3BPMXh5WEc0Z0lDQWdkR2hwY3k1MllXeHBaR0YwYVc5dVUzUmxjRE1nUFNCMGFHbHpMbk5sZEhWd1ZtRnNhV1JoZEc5dVUzUmxjRE1vS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhObGRIVndWbUZzYVdSaGRHOXVVM1JsY0RFb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBhVzl1TG05dUtIUm9hWE1wWEhKY2JpQWdJQ0FnSUM1bGJuTjFjbVVvSjNCbGNuTnZiaTVtYjNKbGJtRnRaU2NwWEhKY2JpQWdJQ0FnSUM1cGMwNXZkRVZ0Y0hSNUtDbGNjbHh1WEhKY2JpQWdJQ0FnSUM1bGJuTjFjbVVvSjNCbGNuTnZiaTV6ZFhKdVlXMWxKeWxjY2x4dUlDQWdJQ0FnTG1selRtOTBSVzF3ZEhrb0tWeHlYRzVjY2x4dUlDQWdJQ0FnTG1WdWMzVnlaU2duY0dWeWMyOXVMbVpoZG05MWNtbDBaVlpsY25SbFluSmhkR1ZEYkdGemN5Y3BYSEpjYmlBZ0lDQWdJQzVwYzA1dmRFVnRjSFI1S0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCelpYUjFjRlpoYkdsa1lYUnZibE4wWlhBeUtDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1Gc2FXUmhkR2x2Ymk1dmJpaDBhR2x6S1Z4eVhHNGdJQ0FnSUNBdVpXNXpkWEpsS0Nkd1pYSnpiMjR1Wm1GMmIzVnlhWFJsVm1WeWRHVmljbUYwWlZSNWNHVW5LVnh5WEc0Z0lDQWdJQ0F1YVhOT2IzUkZiWEIwZVNncFhISmNibHh5WEc0Z0lDQWdJQ0F1Wlc1emRYSmxLQ2RoWkdSeVpYTnpMbWh2ZFhObFRtRnRaU2NzSUNoamIyNW1hV2NwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1bWFXY3VZMjl0Y0hWMFpXUkdjbTl0S0ZzbllXUmtjbVZ6Y3k1b2IzVnpaVTUxYldKbGNpZGRLVHRjY2x4dUlDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0xtbG1LQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJWFJvYVhNdVlXUmtjbVZ6Y3k1b2IzVnpaVTUxYldKbGNqdGNjbHh1SUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnTG1selRtOTBSVzF3ZEhrb0tWeHlYRzRnSUNBZ0lDQXVkMmwwYUUxbGMzTmhaMlVvSnlCcGN5QnlaWEYxYVhKbFpDQnBaaUJ1YnlCb2IzVnpaU0J1ZFcxaVpYSWdhWE1nWlc1MFpYSmxaQ2NwWEhKY2JpQWdJQ0FnSUM1bGJtUkpaaWdwWEhKY2JpQWdJQ0FnSUM1cFppZ29LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhkR2hwY3k1aFpHUnlaWE56TG1odmRYTmxUblZ0WW1WeU8xeHlYRzRnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0F1YlhWemRFSmxSVzF3ZEhrb0tWeHlYRzRnSUNBZ0lDQXVkMmwwYUUxbGMzTmhaMlVvSnlCallXNXViM1FnWW1VZ1pXNTBaWEpsWkNCcFppQjViM1VnYUdGMlpTQmhJR2h2ZFhObElHNTFiV0psY2ljcFhISmNiaUFnSUNBZ0lDNWxibVJKWmlncFhISmNibHh5WEc0Z0lDQWdJQ0F1Wlc1emRYSmxLQ2RoWkdSeVpYTnpMbWh2ZFhObFRuVnRZbVZ5Snl3Z0tHTnZibVpwWnlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJtWnBaeTVqYjIxd2RYUmxaRVp5YjIwb1d5ZGhaR1J5WlhOekxtaHZkWE5sVG1GdFpTZGRLVHRjY2x4dUlDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0xtbG1LQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJWFJvYVhNdVlXUmtjbVZ6Y3k1b2IzVnpaVTVoYldVN1hISmNiaUFnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQzVwYzA1dmRFVnRjSFI1S0NsY2NseHVJQ0FnSUNBZ0xuZHBkR2hOWlhOellXZGxLQ2NnYVhNZ2NtVnhkV2x5WldRZ2FXWWdibThnYUc5MWMyVWdibUZ0WlNCcGN5QmxiblJsY21Wa0p5bGNjbHh1SUNBZ0lDQWdMbVZ1WkVsbUtDbGNjbHh1SUNBZ0lDQWdMbWxtS0NncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSVNGMGFHbHpMbUZrWkhKbGMzTXVhRzkxYzJWT1lXMWxPMXh5WEc0Z0lDQWdJQ0I5S1Z4eVhHNGdJQ0FnSUNBdWJYVnpkRUpsUlcxd2RIa29LVnh5WEc0Z0lDQWdJQ0F1ZDJsMGFFMWxjM05oWjJVb0p5QmpZVzV1YjNRZ1ltVWdaVzUwWlhKbFpDQnBaaUI1YjNVZ2FHRjJaU0JoSUdodmRYTmxJRzVoYldVbktWeHlYRzRnSUNBZ0lDQXVaVzVrU1dZb0tWeHlYRzVjY2x4dUlDQWdJQ0FnTG1WdWMzVnlaU2duWVdSa2NtVnpjeTV6ZEhKbFpYUW5LVnh5WEc0Z0lDQWdJQ0F1YVhOT2IzUkZiWEIwZVNncFhISmNibHh5WEc0Z0lDQWdJQ0F1Wlc1emRYSmxLQ2RoWkdSeVpYTnpMblJ2ZDI0bktWeHlYRzRnSUNBZ0lDQXVhWE5PYjNSRmJYQjBlU2dwWEhKY2JseHlYRzRnSUNBZ0lDQXVaVzV6ZFhKbEtDZGhaR1J5WlhOekxtTnZkVzUwY25rbktWeHlYRzRnSUNBZ0lDQXVhWE5PYjNSRmJYQjBlU2dwWEhKY2JseHlYRzRnSUNBZ0lDQXVaVzV6ZFhKbEtDZGhaR1J5WlhOekxuQnZjM1JqYjJSbEp5bGNjbHh1SUNBZ0lDQWdMbWx6VG05MFJXMXdkSGtvS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhObGRIVndWbUZzYVdSaGRHOXVVM1JsY0RNb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBhVzl1TG05dUtIUm9hWE1wWEhKY2JpQWdJQ0FnSUM1bGJuTjFjbVVvSjNCbGNuTnZiaTVoWjNKbFpWUnZWR1Z5YlhNbktWeHlYRzRnSUNBZ0lDQXVhWE5PYjNSRmNYVmhiRlJ2S0daaGJITmxLVnh5WEc0Z0lDQWdJQ0F1ZDJsMGFFMWxjM05oWjJVb0p5b25LVnh5WEc1Y2NseHVJQ0FnSUNBZ0xtVnVjM1Z5WlNnbmNHVnljMjl1TG1GbmNtVmxWRzlUWld4c1MybGtibVY1SnlsY2NseHVJQ0FnSUNBZ0xtbHpUbTkwUlhGMVlXeFVieWhtWVd4elpTbGNjbHh1SUNBZ0lDQWdMbmRwZEdoTlpYTnpZV2RsS0NjcUp5azdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JpSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUwzTnZkWEpqWlM4aWZRPT0iLCJkZWZpbmUoW1wiZ2l0aHViOmF1cmVsaWEvZnJhbWV3b3JrQDAuMTYuMC9hdXJlbGlhLWZyYW1ld29ya1wiXSwgZnVuY3Rpb24obWFpbikge1xuICByZXR1cm4gbWFpbjtcbn0pOyIsImRlZmluZShbXCJnaXRodWI6YXVyZWxpYS92YWxpZGF0aW9uQDAuMy4wL2luZGV4XCJdLCBmdW5jdGlvbihtYWluKSB7XG4gIHJldHVybiBtYWluO1xufSk7IiwiU3lzdGVtLnJlZ2lzdGVyKFsnYXVyZWxpYS1mcmFtZXdvcmsnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBjb21wdXRlZEZyb20sIFBlcnNvbjtcblxuICB2YXIgX2NyZWF0ZURlY29yYXRlZENsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIGRlc2NyaXB0b3JzLCBpbml0aWFsaXplcnMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXNjcmlwdG9ycy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JzW2ldOyB2YXIgZGVjb3JhdG9ycyA9IGRlc2NyaXB0b3IuZGVjb3JhdG9yczsgdmFyIGtleSA9IGRlc2NyaXB0b3Iua2V5OyBkZWxldGUgZGVzY3JpcHRvci5rZXk7IGRlbGV0ZSBkZXNjcmlwdG9yLmRlY29yYXRvcnM7IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yIHx8IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBpZiAoZGVjb3JhdG9ycykgeyBmb3IgKHZhciBmID0gMDsgZiA8IGRlY29yYXRvcnMubGVuZ3RoOyBmKyspIHsgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbZl07IGlmICh0eXBlb2YgZGVjb3JhdG9yID09PSAnZnVuY3Rpb24nKSB7IGRlc2NyaXB0b3IgPSBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHx8IGRlc2NyaXB0b3I7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkZWNvcmF0b3IgZm9yIG1ldGhvZCAnICsgZGVzY3JpcHRvci5rZXkgKyAnIGlzIG9mIHRoZSBpbnZhbGlkIHR5cGUgJyArIHR5cGVvZiBkZWNvcmF0b3IpOyB9IH0gaWYgKGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgIT09IHVuZGVmaW5lZCkgeyBpbml0aWFsaXplcnNba2V5XSA9IGRlc2NyaXB0b3I7IGNvbnRpbnVlOyB9IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzLCBwcm90b0luaXRpYWxpemVycywgc3RhdGljSW5pdGlhbGl6ZXJzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcywgcHJvdG9Jbml0aWFsaXplcnMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzLCBzdGF0aWNJbml0aWFsaXplcnMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF9hdXJlbGlhRnJhbWV3b3JrKSB7XG4gICAgICBjb21wdXRlZEZyb20gPSBfYXVyZWxpYUZyYW1ld29yay5jb21wdXRlZEZyb207XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgUGVyc29uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUGVyc29uKCkge1xuICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQZXJzb24pO1xuXG4gICAgICAgICAgdGhpcy5mb3JlbmFtZSA9ICcnO1xuICAgICAgICAgIHRoaXMuc3VybmFtZSA9ICcnO1xuICAgICAgICAgIHRoaXMuZmF2b3VyaXRlVmVydGVicmF0ZUNsYXNzID0gJyc7XG4gICAgICAgICAgdGhpcy5mYXZvdXJpdGVWZXJ0ZWJyYXRlVHlwZSA9ICcnO1xuICAgICAgICAgIHRoaXMuYWdyZWVUb1Rlcm1zID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5hZ3JlZVRvU2VsbEtpZG5leSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NyZWF0ZURlY29yYXRlZENsYXNzKFBlcnNvbiwgW3tcbiAgICAgICAgICBrZXk6ICdmdWxsbmFtZScsXG4gICAgICAgICAgZGVjb3JhdG9yczogW2NvbXB1dGVkRnJvbSgnZm9yZW5hbWUnLCAnc3VybmFtZScpXSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmVuYW1lICsgJyAnICsgdGhpcy5zdXJuYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBQZXJzb247XG4gICAgICB9KSgpO1xuXG4gICAgICBfZXhwb3J0KCdQZXJzb24nLCBQZXJzb24pO1xuICAgIH1cbiAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTkyYVdWM2N5OW9iMjFsTDNCbGNuTnZiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN2IwSkJSV0VzVFVGQlRUczdPenM3T3pzN2RVTkJSbGdzV1VGQldUczdPMEZCUlZBc1dVRkJUVHRwUWtGQlRpeE5RVUZOTzJkRFFVRk9MRTFCUVUwN08yVkJRMnBDTEZGQlFWRXNSMEZCUnl4RlFVRkZPMlZCUTJJc1QwRkJUeXhIUVVGSExFVkJRVVU3WlVGRFdpeDNRa0ZCZDBJc1IwRkJSeXhGUVVGRk8yVkJRemRDTEhWQ1FVRjFRaXhIUVVGSExFVkJRVVU3WlVGRE5VSXNXVUZCV1N4SFFVRkhMRXRCUVVzN1pVRkRjRUlzYVVKQlFXbENMRWRCUVVjc1MwRkJTenM3T3poQ1FVNWtMRTFCUVUwN08zVkNRVkZvUWl4WlFVRlpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGTkJRVk1zUTBGQlF6dGxRVU40UWl4bFFVRkhPMEZCUTJJc2JVSkJRVlVzU1VGQlNTeERRVUZETEZGQlFWRXNVMEZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGSE8xZEJRek5ET3pzN1pVRllWU3hOUVVGTklpd2labWxzWlNJNkluTnlZeTkyYVdWM2N5OW9iMjFsTDNCbGNuTnZiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN1kyOXRjSFYwWldSR2NtOXRmU0JtY205dElDZGhkWEpsYkdsaExXWnlZVzFsZDI5eWF5YzdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVUdWeWMyOXVJSHRjY2x4dUlDQm1iM0psYm1GdFpTQTlJQ2NuTzF4eVhHNGdJSE4xY201aGJXVWdQU0FuSnp0Y2NseHVJQ0JtWVhadmRYSnBkR1ZXWlhKMFpXSnlZWFJsUTJ4aGMzTWdQU0FuSnp0Y2NseHVJQ0JtWVhadmRYSnBkR1ZXWlhKMFpXSnlZWFJsVkhsd1pTQTlJQ2NuTzF4eVhHNGdJR0ZuY21WbFZHOVVaWEp0Y3lBOUlHWmhiSE5sTzF4eVhHNGdJR0ZuY21WbFZHOVRaV3hzUzJsa2JtVjVJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJRUJqYjIxd2RYUmxaRVp5YjIwb0oyWnZjbVZ1WVcxbEp5d2dKM04xY201aGJXVW5LVnh5WEc0Z0lHZGxkQ0JtZFd4c2JtRnRaU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJnSkh0MGFHbHpMbVp2Y21WdVlXMWxmU0FrZTNSb2FYTXVjM1Z5Ym1GdFpYMWdPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpOXpiM1Z5WTJVdkluMD0iLCJTeXN0ZW0ucmVnaXN0ZXIoW10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgQWRkcmVzcztcblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW10sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgQWRkcmVzcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEFkZHJlc3MoKSB7XG4gICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFkZHJlc3MpO1xuXG4gICAgICAgICAgdGhpcy5ob3VzZU5hbWUgPSAnJztcbiAgICAgICAgICB0aGlzLmhvdXNlTnVtYmVyID0gJyc7XG4gICAgICAgICAgdGhpcy5zdHJlZXQgPSAnJztcbiAgICAgICAgICB0aGlzLnRvd24gPSAnJztcbiAgICAgICAgICB0aGlzLmNvdW50cnkgPSAnJztcbiAgICAgICAgICB0aGlzLnBvc3Rjb2RlID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoQWRkcmVzcywgW3tcbiAgICAgICAgICBrZXk6ICdmb3JtYXR0ZWQnLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG91c2VOYW1lICsgJyAnICsgdGhpcy5ob3VzZU51bWJlciArICcsICcgKyB0aGlzLnN0cmVldCArICcsICcgKyB0aGlzLnRvd24gKyAnLCAnICsgdGhpcy5wb3N0Y29kZSArICcsICcgKyB0aGlzLmNvdW50cnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIEFkZHJlc3M7XG4gICAgICB9KSgpO1xuXG4gICAgICBfZXhwb3J0KCdBZGRyZXNzJywgQWRkcmVzcyk7XG4gICAgfVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OTJhV1YzY3k5b2IyMWxMMkZrWkhKbGMzTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzAxQlFXRXNUMEZCVHpzN096czdPenM3TzBGQlFWQXNZVUZCVHp0cFFrRkJVQ3hQUVVGUE8yZERRVUZRTEU5QlFVODdPMlZCUTJ4Q0xGTkJRVk1zUjBGQlJ5eEZRVUZGTzJWQlEyUXNWMEZCVnl4SFFVRkhMRVZCUVVVN1pVRkRhRUlzVFVGQlRTeEhRVUZITEVWQlFVVTdaVUZEV0N4SlFVRkpMRWRCUVVjc1JVRkJSVHRsUVVOVUxFOUJRVThzUjBGQlJ5eEZRVUZGTzJWQlExb3NVVUZCVVN4SFFVRkhMRVZCUVVVN096dHhRa0ZPUml4UFFVRlBPenRsUVZGTUxHVkJRVWM3UVVGRFpDeHRRa0ZCVlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhUUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZYTEZWQlFVc3NTVUZCU1N4RFFVRkRMRTFCUVUwc1ZVRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlNTeFZRVUZMTEVsQlFVa3NRMEZCUXl4UlFVRlJMRlZCUVVzc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlJ6dFhRVU5xU0RzN08yVkJWbFVzVDBGQlR5SXNJbVpwYkdVaU9pSnpjbU12ZG1sbGQzTXZhRzl0WlM5aFpHUnlaWE56TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHTnNZWE56SUVGa1pISmxjM01nZTF4eVhHNGdJR2h2ZFhObFRtRnRaU0E5SUNjbk8xeHlYRzRnSUdodmRYTmxUblZ0WW1WeUlEMGdKeWM3WEhKY2JpQWdjM1J5WldWMElEMGdKeWM3WEhKY2JpQWdkRzkzYmlBOUlDY25PMXh5WEc0Z0lHTnZkVzUwY25rZ1BTQW5KenRjY2x4dUlDQndiM04wWTI5a1pTQTlJQ2NuTzF4eVhHNWNjbHh1SUNCblpYUWdabTl5YldGMGRHVmtLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJR0FrZTNSb2FYTXVhRzkxYzJWT1lXMWxmU0FrZTNSb2FYTXVhRzkxYzJWT2RXMWlaWEo5TENBa2UzUm9hWE11YzNSeVpXVjBmU3dnSkh0MGFHbHpMblJ2ZDI1OUxDQWtlM1JvYVhNdWNHOXpkR052WkdWOUxDQWtlM1JvYVhNdVkyOTFiblJ5ZVgxZ08xeHlYRzRnSUgxY2NseHVmVnh5WEc0aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWk5emIzVnlZMlV2SW4wPSIsIlN5c3RlbS5yZWdpc3RlcihbXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB2ZXJ0ZWJyYXRlcywgY291bnRyaWVzO1xuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtdLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZlcnRlYnJhdGVzID0gW3tcbiAgICAgICAgdHlwZTogJ21hbW1hbHMnLFxuICAgICAgICBsYWJlbDogJ21hbW1hbCcsXG4gICAgICAgIGV4YW1wbGVzOiBbJ2FwZScsICdjYXQnLCAnZG9nJ11cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogJ2JvbnkgZmlzaCcsXG4gICAgICAgIGxhYmVsOiAnYm9ueSBmaXNoJyxcbiAgICAgICAgZXhhbXBsZXM6IFsnY29kJywgJ2hhZGRvY2snLCAnc2FsbW9uJywgJ2NvZWxhY2FudGgnXVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiAnY2FydGlsYWdpbm91cyBmaXNoJyxcbiAgICAgICAgbGFiZWw6ICdjYXJ0aWxhZ2lub3VzIGZpc2gnLFxuICAgICAgICBleGFtcGxlczogWydzaGFyaycsICdyYXknLCAnc2thdGUnLCAnc2F3ZmlzaCddXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6ICdiaXJkcycsXG4gICAgICAgIGxhYmVsOiAnYmlyZCcsXG4gICAgICAgIGV4YW1wbGVzOiBbJ3N3YW4nLCAnZWFnbGUnLCAndnVsdHVyZScsICdjYXNzb3dhcnknXVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiAnYW1waGliaWFucycsXG4gICAgICAgIGxhYmVsOiAnYW1waGliaWFuJyxcbiAgICAgICAgZXhhbXBsZXM6IFsnZnJvZycsICd0b2FkJywgJ25ld3QnLCAnYXhvbG90bCddXG4gICAgICB9XTtcblxuICAgICAgX2V4cG9ydCgndmVydGVicmF0ZXMnLCB2ZXJ0ZWJyYXRlcyk7XG5cbiAgICAgIGNvdW50cmllcyA9IFsnVUsnLCAnVVNBJywgJ090aGVyJ107XG5cbiAgICAgIF9leHBvcnQoJ2NvdW50cmllcycsIGNvdW50cmllcyk7XG4gICAgfVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OTJhV1YzY3k5b2IyMWxMMlJoZEdFdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMDFCUVdFc1YwRkJWeXhGUVRSQ1dDeFRRVUZUT3pzN08wRkJOVUpVTEdsQ1FVRlhMRWRCUVVjc1EwRkRla0k3UVVGRFJTeFpRVUZKTEVWQlFVVXNVMEZCVXp0QlFVTm1MR0ZCUVVzc1JVRkJSU3hSUVVGUk8wRkJRMllzWjBKQlFWRXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETzA5QlEyaERMRVZCUTBRN1FVRkRSU3haUVVGSkxFVkJRVVVzVjBGQlZ6dEJRVU5xUWl4aFFVRkxMRVZCUVVVc1YwRkJWenRCUVVOc1FpeG5Ra0ZCVVN4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUlVGQlJTeFJRVUZSTEVWQlFVVXNXVUZCV1N4RFFVRkRPMDlCUTNKRUxFVkJRMFE3UVVGRFJTeFpRVUZKTEVWQlFVVXNiMEpCUVc5Q08wRkJRekZDTEdGQlFVc3NSVUZCUlN4dlFrRkJiMEk3UVVGRE0wSXNaMEpCUVZFc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRk5CUVZNc1EwRkJRenRQUVVNdlF5eEZRVU5FTzBGQlEwVXNXVUZCU1N4RlFVRkZMRTlCUVU4N1FVRkRZaXhoUVVGTExFVkJRVVVzVFVGQlRUdEJRVU5pTEdkQ1FVRlJMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4WFFVRlhMRU5CUVVNN1QwRkRjRVFzUlVGRFJEdEJRVU5GTEZsQlFVa3NSVUZCUlN4WlFVRlpPMEZCUTJ4Q0xHRkJRVXNzUlVGQlJTeFhRVUZYTzBGQlEyeENMR2RDUVVGUkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hUUVVGVExFTkJRVU03VDBGRE9VTXNRMEZEUmpzN096dEJRVVZaTEdWQlFWTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eERRVUZESWl3aVptbHNaU0k2SW5OeVl5OTJhV1YzY3k5b2IyMWxMMlJoZEdFdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdZMjl1YzNRZ2RtVnlkR1ZpY21GMFpYTWdQU0JiWEhKY2JpQWdlMXh5WEc0Z0lDQWdkSGx3WlRvZ0oyMWhiVzFoYkhNbkxGeHlYRzRnSUNBZ2JHRmlaV3c2SUNkdFlXMXRZV3duTEZ4eVhHNGdJQ0FnWlhoaGJYQnNaWE02SUZzbllYQmxKeXdnSjJOaGRDY3NJQ2RrYjJjblhWeHlYRzRnSUgwc1hISmNiaUFnZTF4eVhHNGdJQ0FnZEhsd1pUb2dKMkp2Ym5rZ1ptbHphQ2NzWEhKY2JpQWdJQ0JzWVdKbGJEb2dKMkp2Ym5rZ1ptbHphQ2NzWEhKY2JpQWdJQ0JsZUdGdGNHeGxjem9nV3lkamIyUW5MQ0FuYUdGa1pHOWpheWNzSUNkellXeHRiMjRuTENBblkyOWxiR0ZqWVc1MGFDZGRYSEpjYmlBZ2ZTeGNjbHh1SUNCN1hISmNiaUFnSUNCMGVYQmxPaUFuWTJGeWRHbHNZV2RwYm05MWN5Qm1hWE5vSnl4Y2NseHVJQ0FnSUd4aFltVnNPaUFuWTJGeWRHbHNZV2RwYm05MWN5Qm1hWE5vSnl4Y2NseHVJQ0FnSUdWNFlXMXdiR1Z6T2lCYkozTm9ZWEpySnl3Z0ozSmhlU2NzSUNkemEyRjBaU2NzSUNkellYZG1hWE5vSjExY2NseHVJQ0I5TEZ4eVhHNGdJSHRjY2x4dUlDQWdJSFI1Y0dVNklDZGlhWEprY3ljc1hISmNiaUFnSUNCc1lXSmxiRG9nSjJKcGNtUW5MRnh5WEc0Z0lDQWdaWGhoYlhCc1pYTTZJRnNuYzNkaGJpY3NJQ2RsWVdkc1pTY3NJQ2QyZFd4MGRYSmxKeXdnSjJOaGMzTnZkMkZ5ZVNkZFhISmNiaUFnZlN4Y2NseHVJQ0I3WEhKY2JpQWdJQ0IwZVhCbE9pQW5ZVzF3YUdsaWFXRnVjeWNzWEhKY2JpQWdJQ0JzWVdKbGJEb2dKMkZ0Y0docFltbGhiaWNzWEhKY2JpQWdJQ0JsZUdGdGNHeGxjem9nV3lkbWNtOW5KeXdnSjNSdllXUW5MQ0FuYm1WM2RDY3NJQ2RoZUc5c2IzUnNKMTFjY2x4dUlDQjlYSEpjYmwwN1hISmNibHh5WEc1bGVIQnZjblFnWTI5dWMzUWdZMjkxYm5SeWFXVnpJRDBnV3lkVlN5Y3NJQ2RWVTBFbkxDQW5UM1JvWlhJblhUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdmJtVXRkbUZ5WEhKY2JpSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUwzTnZkWEpqWlM4aWZRPT0iLCIvKiAqLyBcbmRlZmluZShbJ2V4cG9ydHMnLCAnY29yZS1qcycsICdhdXJlbGlhLWxvZ2dpbmcnLCAnYXVyZWxpYS10ZW1wbGF0aW5nJywgJ2F1cmVsaWEtcGF0aCcsICdhdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uJywgJ2F1cmVsaWEtbG9hZGVyJywgJ2F1cmVsaWEtYmluZGluZycsICdhdXJlbGlhLW1ldGFkYXRhJywgJ2F1cmVsaWEtdGFzay1xdWV1ZSddLCBmdW5jdGlvbiAoZXhwb3J0cywgX2NvcmVKcywgX2F1cmVsaWFMb2dnaW5nLCBfYXVyZWxpYVRlbXBsYXRpbmcsIF9hdXJlbGlhUGF0aCwgX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uLCBfYXVyZWxpYUxvYWRlciwgX2F1cmVsaWFCaW5kaW5nLCBfYXVyZWxpYU1ldGFkYXRhLCBfYXVyZWxpYVRhc2tRdWV1ZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcEV4cG9ydFdpbGRjYXJkKG9iaiwgZGVmYXVsdHMpIHsgdmFyIG5ld09iaiA9IGRlZmF1bHRzKHt9LCBvYmopOyBkZWxldGUgbmV3T2JqWydkZWZhdWx0J107IHJldHVybiBuZXdPYmo7IH1cblxuICBmdW5jdGlvbiBfZGVmYXVsdHMob2JqLCBkZWZhdWx0cykgeyB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlZmF1bHRzKTsgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7IHZhciBrZXkgPSBrZXlzW2ldOyB2YXIgdmFsdWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZmF1bHRzLCBrZXkpOyBpZiAodmFsdWUgJiYgdmFsdWUuY29uZmlndXJhYmxlICYmIG9ialtrZXldID09PSB1bmRlZmluZWQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSk7IH0gfSByZXR1cm4gb2JqOyB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIGxvZ2dlciA9IF9hdXJlbGlhTG9nZ2luZy5nZXRMb2dnZXIoJ2F1cmVsaWEnKTtcblxuICBmdW5jdGlvbiBydW5UYXNrcyhjb25maWcsIHRhc2tzKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKGN1cnJlbnQgPSB0YXNrcy5zaGlmdCgpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3VycmVudChjb25maWcpKS50aGVuKG5leHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcblxuICAgIHJldHVybiBuZXh0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkUGx1Z2luKGNvbmZpZywgbG9hZGVyLCBpbmZvKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdMb2FkaW5nIHBsdWdpbiAnICsgaW5mby5tb2R1bGVJZCArICcuJyk7XG4gICAgY29uZmlnLnJlc291cmNlc1JlbGF0aXZlVG8gPSBpbmZvLnJlc291cmNlc1JlbGF0aXZlVG87XG5cbiAgICByZXR1cm4gbG9hZGVyLmxvYWRNb2R1bGUoaW5mby5tb2R1bGVJZCkudGhlbihmdW5jdGlvbiAobSkge1xuICAgICAgaWYgKCdjb25maWd1cmUnIGluIG0pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtLmNvbmZpZ3VyZShjb25maWcsIGluZm8uY29uZmlnIHx8IHt9KSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uZmlnLnJlc291cmNlc1JlbGF0aXZlVG8gPSBudWxsO1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnQ29uZmlndXJlZCBwbHVnaW4gJyArIGluZm8ubW9kdWxlSWQgKyAnLicpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uZmlnLnJlc291cmNlc1JlbGF0aXZlVG8gPSBudWxsO1xuICAgICAgbG9nZ2VyLmRlYnVnKCdMb2FkZWQgcGx1Z2luICcgKyBpbmZvLm1vZHVsZUlkICsgJy4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRSZXNvdXJjZXMoY29udGFpbmVyLCByZXNvdXJjZXNUb0xvYWQsIGFwcFJlc291cmNlcykge1xuICAgIHZhciB2aWV3RW5naW5lID0gY29udGFpbmVyLmdldChfYXVyZWxpYVRlbXBsYXRpbmcuVmlld0VuZ2luZSk7XG4gICAgdmFyIGltcG9ydElkcyA9IE9iamVjdC5rZXlzKHJlc291cmNlc1RvTG9hZCk7XG4gICAgdmFyIG5hbWVzID0gbmV3IEFycmF5KGltcG9ydElkcy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW1wb3J0SWRzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIG5hbWVzW2ldID0gcmVzb3VyY2VzVG9Mb2FkW2ltcG9ydElkc1tpXV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZXdFbmdpbmUuaW1wb3J0Vmlld1Jlc291cmNlcyhpbXBvcnRJZHMsIG5hbWVzLCBhcHBSZXNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0UHJvY2Vzc2VkKHBsdWdpbnMpIHtcbiAgICBpZiAocGx1Z2lucy5wcm9jZXNzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBjb25maWcgaW5zdGFuY2UgaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkLiBUbyBsb2FkIG1vcmUgcGx1Z2lucyBvciBnbG9iYWwgcmVzb3VyY2VzLCBjcmVhdGUgYSBuZXcgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiBpbnN0YW5jZS4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJhbWV3b3JrQ29uZmlndXJhdGlvbihhdXJlbGlhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnJhbWV3b3JrQ29uZmlndXJhdGlvbik7XG5cbiAgICAgIHRoaXMuYXVyZWxpYSA9IGF1cmVsaWE7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGF1cmVsaWEuY29udGFpbmVyO1xuICAgICAgdGhpcy5pbmZvID0gW107XG4gICAgICB0aGlzLnByb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wcmVUYXNrcyA9IFtdO1xuICAgICAgdGhpcy5wb3N0VGFza3MgPSBbXTtcbiAgICAgIHRoaXMucmVzb3VyY2VzVG9Mb2FkID0ge307XG4gICAgICB0aGlzLnByZVRhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gU3lzdGVtLm5vcm1hbGl6ZSgnYXVyZWxpYS1ib290c3RyYXBwZXInKS50aGVuKGZ1bmN0aW9uIChib290c3RyYXBwZXJOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmJvb3RzdHJhcHBlck5hbWUgPSBib290c3RyYXBwZXJOYW1lO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wb3N0VGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBsb2FkUmVzb3VyY2VzKGF1cmVsaWEuY29udGFpbmVyLCBfdGhpcy5yZXNvdXJjZXNUb0xvYWQsIGF1cmVsaWEucmVzb3VyY2VzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmluc3RhbmNlID0gZnVuY3Rpb24gaW5zdGFuY2UodHlwZSwgX2luc3RhbmNlKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKHR5cGUsIF9pbnN0YW5jZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuc2luZ2xldG9uID0gZnVuY3Rpb24gc2luZ2xldG9uKHR5cGUsIGltcGxlbWVudGF0aW9uKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbih0eXBlLCBpbXBsZW1lbnRhdGlvbik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUudHJhbnNpZW50ID0gZnVuY3Rpb24gdHJhbnNpZW50KHR5cGUsIGltcGxlbWVudGF0aW9uKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5yZWdpc3RlclRyYW5zaWVudCh0eXBlLCBpbXBsZW1lbnRhdGlvbik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUucHJlVGFzayA9IGZ1bmN0aW9uIHByZVRhc2sodGFzaykge1xuICAgICAgYXNzZXJ0UHJvY2Vzc2VkKHRoaXMpO1xuICAgICAgdGhpcy5wcmVUYXNrcy5wdXNoKHRhc2spO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLnBvc3RUYXNrID0gZnVuY3Rpb24gcG9zdFRhc2sodGFzaykge1xuICAgICAgYXNzZXJ0UHJvY2Vzc2VkKHRoaXMpO1xuICAgICAgdGhpcy5wb3N0VGFza3MucHVzaCh0YXNrKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5mZWF0dXJlID0gZnVuY3Rpb24gZmVhdHVyZShwbHVnaW4sIGNvbmZpZykge1xuICAgICAgcGx1Z2luID0gcGx1Z2luLmVuZHNXaXRoKCcuanMnKSB8fCBwbHVnaW4uZW5kc1dpdGgoJy50cycpID8gcGx1Z2luLnN1YnN0cmluZygwLCBwbHVnaW4ubGVuZ3RoIC0gMykgOiBwbHVnaW47XG4gICAgICByZXR1cm4gdGhpcy5wbHVnaW4oeyBtb2R1bGVJZDogcGx1Z2luICsgJy9pbmRleCcsIHJlc291cmNlc1JlbGF0aXZlVG86IHBsdWdpbiwgY29uZmlnOiBjb25maWcgfHwge30gfSk7XG4gICAgfTtcblxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdsb2JhbFJlc291cmNlcyA9IGZ1bmN0aW9uIGdsb2JhbFJlc291cmNlcyhyZXNvdXJjZXMpIHtcbiAgICAgIGFzc2VydFByb2Nlc3NlZCh0aGlzKTtcblxuICAgICAgdmFyIHRvQWRkID0gQXJyYXkuaXNBcnJheShyZXNvdXJjZXMpID8gcmVzb3VyY2VzIDogYXJndW1lbnRzO1xuICAgICAgdmFyIHJlc291cmNlID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIHBhdGggPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzb3VyY2VzUmVsYXRpdmVUbyA9IHRoaXMucmVzb3VyY2VzUmVsYXRpdmVUbyB8fCAnJztcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdG9BZGQubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICByZXNvdXJjZSA9IHRvQWRkW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHJlc291cmNlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXNvdXJjZSBwYXRoIFsnICsgcmVzb3VyY2UgKyAnXS4gUmVzb3VyY2VzIG11c3QgYmUgc3BlY2lmaWVkIGFzIHJlbGF0aXZlIG1vZHVsZSBJRHMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXRoID0gX2F1cmVsaWFQYXRoLmpvaW4ocmVzb3VyY2VzUmVsYXRpdmVUbywgcmVzb3VyY2UpO1xuICAgICAgICB0aGlzLnJlc291cmNlc1RvTG9hZFtwYXRoXSA9IHRoaXMucmVzb3VyY2VzVG9Mb2FkW3BhdGhdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuZ2xvYmFsTmFtZSA9IGZ1bmN0aW9uIGdsb2JhbE5hbWUocmVzb3VyY2VQYXRoLCBuZXdOYW1lKSB7XG4gICAgICBhc3NlcnRQcm9jZXNzZWQodGhpcyk7XG4gICAgICB0aGlzLnJlc291cmNlc1RvTG9hZFtyZXNvdXJjZVBhdGhdID0gbmV3TmFtZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5wbHVnaW4gPSBmdW5jdGlvbiBwbHVnaW4oX3BsdWdpbiwgY29uZmlnKSB7XG4gICAgICBhc3NlcnRQcm9jZXNzZWQodGhpcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgX3BsdWdpbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgX3BsdWdpbiA9IF9wbHVnaW4uZW5kc1dpdGgoJy5qcycpIHx8IF9wbHVnaW4uZW5kc1dpdGgoJy50cycpID8gX3BsdWdpbi5zdWJzdHJpbmcoMCwgX3BsdWdpbi5sZW5ndGggLSAzKSA6IF9wbHVnaW47XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbih7IG1vZHVsZUlkOiBfcGx1Z2luLCByZXNvdXJjZXNSZWxhdGl2ZVRvOiBfcGx1Z2luLCBjb25maWc6IGNvbmZpZyB8fCB7fSB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbmZvLnB1c2goX3BsdWdpbik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuX2FkZE5vcm1hbGl6ZWRQbHVnaW4gPSBmdW5jdGlvbiBfYWRkTm9ybWFsaXplZFBsdWdpbihuYW1lLCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgcGx1Z2luID0geyBtb2R1bGVJZDogbmFtZSwgcmVzb3VyY2VzUmVsYXRpdmVUbzogbmFtZSwgY29uZmlnOiBjb25maWcgfHwge30gfTtcblxuICAgICAgdGhpcy5wbHVnaW4ocGx1Z2luKTtcbiAgICAgIHRoaXMucHJlVGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW0ubm9ybWFsaXplKG5hbWUsIF90aGlzMi5ib290c3RyYXBwZXJOYW1lKS50aGVuKGZ1bmN0aW9uIChub3JtYWxpemVkTmFtZSkge1xuICAgICAgICAgIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplZE5hbWUuZW5kc1dpdGgoJy5qcycpIHx8IG5vcm1hbGl6ZWROYW1lLmVuZHNXaXRoKCcudHMnKSA/IG5vcm1hbGl6ZWROYW1lLnN1YnN0cmluZygwLCBub3JtYWxpemVkTmFtZS5sZW5ndGggLSAzKSA6IG5vcm1hbGl6ZWROYW1lO1xuXG4gICAgICAgICAgcGx1Z2luLm1vZHVsZUlkID0gbm9ybWFsaXplZE5hbWU7XG4gICAgICAgICAgcGx1Z2luLnJlc291cmNlc1JlbGF0aXZlVG8gPSBub3JtYWxpemVkTmFtZTtcbiAgICAgICAgICBTeXN0ZW0ubWFwW25hbWVdID0gbm9ybWFsaXplZE5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5kZWZhdWx0QmluZGluZ0xhbmd1YWdlID0gZnVuY3Rpb24gZGVmYXVsdEJpbmRpbmdMYW5ndWFnZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLXRlbXBsYXRpbmctYmluZGluZycpO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5yb3V0ZXIgPSBmdW5jdGlvbiByb3V0ZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYWRkTm9ybWFsaXplZFBsdWdpbignYXVyZWxpYS10ZW1wbGF0aW5nLXJvdXRlcicpO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5oaXN0b3J5ID0gZnVuY3Rpb24gaGlzdG9yeSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLWhpc3RvcnktYnJvd3NlcicpO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5kZWZhdWx0UmVzb3VyY2VzID0gZnVuY3Rpb24gZGVmYXVsdFJlc291cmNlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLXRlbXBsYXRpbmctcmVzb3VyY2VzJyk7XG4gICAgfTtcblxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmV2ZW50QWdncmVnYXRvciA9IGZ1bmN0aW9uIGV2ZW50QWdncmVnYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLWV2ZW50LWFnZ3JlZ2F0b3InKTtcbiAgICB9O1xuXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuc3RhbmRhcmRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gc3RhbmRhcmRDb25maWd1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdEJpbmRpbmdMYW5ndWFnZSgpLmRlZmF1bHRSZXNvdXJjZXMoKS5oaXN0b3J5KCkucm91dGVyKCkuZXZlbnRBZ2dyZWdhdG9yKCk7XG4gICAgfTtcblxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmRldmVsb3BtZW50TG9nZ2luZyA9IGZ1bmN0aW9uIGRldmVsb3BtZW50TG9nZ2luZygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLnByZVRhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gU3lzdGVtLm5vcm1hbGl6ZSgnYXVyZWxpYS1sb2dnaW5nLWNvbnNvbGUnLCBfdGhpczMuYm9vdHN0cmFwcGVyTmFtZSkudGhlbihmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuYXVyZWxpYS5sb2FkZXIubG9hZE1vZHVsZShuYW1lKS50aGVuKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBfYXVyZWxpYUxvZ2dpbmcuYWRkQXBwZW5kZXIobmV3IG0uQ29uc29sZUFwcGVuZGVyKCkpO1xuICAgICAgICAgICAgX2F1cmVsaWFMb2dnaW5nLnNldExldmVsKF9hdXJlbGlhTG9nZ2luZy5sb2dMZXZlbC5kZWJ1Zyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5KCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnByb2Nlc3NlZCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBydW5UYXNrcyh0aGlzLCB0aGlzLnByZVRhc2tzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvYWRlciA9IF90aGlzNC5hdXJlbGlhLmxvYWRlcjtcbiAgICAgICAgdmFyIGluZm8gPSBfdGhpczQuaW5mbztcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIGlmIChjdXJyZW50ID0gaW5mby5zaGlmdCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9hZFBsdWdpbihfdGhpczQsIGxvYWRlciwgY3VycmVudCkudGhlbihuZXh0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczQucHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gcnVuVGFza3MoX3RoaXM0LCBfdGhpczQucG9zdFRhc2tzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEZyYW1ld29ya0NvbmZpZ3VyYXRpb247XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5GcmFtZXdvcmtDb25maWd1cmF0aW9uID0gRnJhbWV3b3JrQ29uZmlndXJhdGlvbjtcblxuICBpZiAoIXdpbmRvdy5DdXN0b21FdmVudCB8fCB0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIF9DdXN0b21FdmVudCA9IGZ1bmN0aW9uIF9DdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge1xuICAgICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgIGRldGFpbDogdW5kZWZpbmVkXG4gICAgICB9O1xuXG4gICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgcmV0dXJuIGV2dDtcbiAgICB9O1xuXG4gICAgX0N1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gX0N1c3RvbUV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJldmVudEFjdGlvbmxlc3NGb3JtU3VibWl0KCkge1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQ7XG4gICAgICB2YXIgYWN0aW9uID0gdGFyZ2V0LmFjdGlvbjtcblxuICAgICAgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdmb3JtJyAmJiAhYWN0aW9uKSB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIEF1cmVsaWEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1cmVsaWEobG9hZGVyLCBjb250YWluZXIsIHJlc291cmNlcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1cmVsaWEpO1xuXG4gICAgICB0aGlzLmxvYWRlciA9IGxvYWRlciB8fCBuZXcgd2luZG93LkF1cmVsaWFMb2FkZXIoKTtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyIHx8IG5ldyBfYXVyZWxpYURlcGVuZGVuY3lJbmplY3Rpb24uQ29udGFpbmVyKCk7XG4gICAgICB0aGlzLnJlc291cmNlcyA9IHJlc291cmNlcyB8fCBuZXcgX2F1cmVsaWFUZW1wbGF0aW5nLlZpZXdSZXNvdXJjZXMoKTtcbiAgICAgIHRoaXMudXNlID0gbmV3IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24odGhpcyk7XG4gICAgICB0aGlzLmxvZ2dlciA9IF9hdXJlbGlhTG9nZ2luZy5nZXRMb2dnZXIoJ2F1cmVsaWEnKTtcbiAgICAgIHRoaXMuaG9zdENvbmZpZ3VyZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaG9zdCA9IG51bGw7XG5cbiAgICAgIHRoaXMudXNlLmluc3RhbmNlKEF1cmVsaWEsIHRoaXMpO1xuICAgICAgdGhpcy51c2UuaW5zdGFuY2UoX2F1cmVsaWFMb2FkZXIuTG9hZGVyLCB0aGlzLmxvYWRlcik7XG4gICAgICB0aGlzLnVzZS5pbnN0YW5jZShfYXVyZWxpYVRlbXBsYXRpbmcuVmlld1Jlc291cmNlcywgdGhpcy5yZXNvdXJjZXMpO1xuICAgICAgdGhpcy5jb250YWluZXIubWFrZUdsb2JhbCgpO1xuICAgIH1cblxuICAgIEF1cmVsaWEucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5sb2dnZXIuaW5mbygnQXVyZWxpYSBTdGFydGluZycpO1xuXG4gICAgICByZXR1cm4gdGhpcy51c2UuYXBwbHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJldmVudEFjdGlvbmxlc3NGb3JtU3VibWl0KCk7XG5cbiAgICAgICAgaWYgKCFfdGhpczUuY29udGFpbmVyLmhhc0hhbmRsZXIoX2F1cmVsaWFUZW1wbGF0aW5nLkJpbmRpbmdMYW5ndWFnZSkpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9ICdZb3UgbXVzdCBjb25maWd1cmUgQXVyZWxpYSB3aXRoIGEgQmluZGluZ0xhbmd1YWdlIGltcGxlbWVudGF0aW9uLic7XG4gICAgICAgICAgX3RoaXM1LmxvZ2dlci5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIV90aGlzNS5jb250YWluZXIuaGFzSGFuZGxlcihfYXVyZWxpYVRlbXBsYXRpbmcuQW5pbWF0b3IpKSB7XG4gICAgICAgICAgX2F1cmVsaWFUZW1wbGF0aW5nLkFuaW1hdG9yLmNvbmZpZ3VyZURlZmF1bHQoX3RoaXM1LmNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczUubG9nZ2VyLmluZm8oJ0F1cmVsaWEgU3RhcnRlZCcpO1xuICAgICAgICB2YXIgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgnYXVyZWxpYS1zdGFydGVkJywgeyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIHJldHVybiBfdGhpczU7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQXVyZWxpYS5wcm90b3R5cGUuZW5oYW5jZSA9IGZ1bmN0aW9uIGVuaGFuY2UoKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIGJpbmRpbmdDb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG4gICAgICB2YXIgYXBwbGljYXRpb25Ib3N0ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgdGhpcy5fY29uZmlndXJlSG9zdChhcHBsaWNhdGlvbkhvc3QpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIHZpZXdFbmdpbmUgPSBfdGhpczYuY29udGFpbmVyLmdldChfYXVyZWxpYVRlbXBsYXRpbmcuVmlld0VuZ2luZSk7XG4gICAgICAgIF90aGlzNi5yb290ID0gdmlld0VuZ2luZS5lbmhhbmNlKF90aGlzNi5jb250YWluZXIsIF90aGlzNi5ob3N0LCBfdGhpczYucmVzb3VyY2VzLCBiaW5kaW5nQ29udGV4dCk7XG4gICAgICAgIF90aGlzNi5yb290LmF0dGFjaGVkKCk7XG4gICAgICAgIF90aGlzNi5fb25BdXJlbGlhQ29tcG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzNjtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBBdXJlbGlhLnByb3RvdHlwZS5zZXRSb290ID0gZnVuY3Rpb24gc2V0Um9vdCgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgcm9vdCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICdhcHAnIDogYXJndW1lbnRzWzBdO1xuICAgICAgdmFyIGFwcGxpY2F0aW9uSG9zdCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbMV07XG5cbiAgICAgIHZhciBjb21wb3NpdGlvbkVuZ2luZSA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBpbnN0cnVjdGlvbiA9IHt9O1xuXG4gICAgICB0aGlzLl9jb25maWd1cmVIb3N0KGFwcGxpY2F0aW9uSG9zdCk7XG5cbiAgICAgIGNvbXBvc2l0aW9uRW5naW5lID0gdGhpcy5jb250YWluZXIuZ2V0KF9hdXJlbGlhVGVtcGxhdGluZy5Db21wb3NpdGlvbkVuZ2luZSk7XG4gICAgICBpbnN0cnVjdGlvbi52aWV3TW9kZWwgPSByb290O1xuICAgICAgaW5zdHJ1Y3Rpb24uY29udGFpbmVyID0gaW5zdHJ1Y3Rpb24uY2hpbGRDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgIGluc3RydWN0aW9uLnZpZXdTbG90ID0gdGhpcy5ob3N0U2xvdDtcbiAgICAgIGluc3RydWN0aW9uLmhvc3QgPSB0aGlzLmhvc3Q7XG5cbiAgICAgIHJldHVybiBjb21wb3NpdGlvbkVuZ2luZS5jb21wb3NlKGluc3RydWN0aW9uKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIF90aGlzNy5yb290ID0gcjtcbiAgICAgICAgaW5zdHJ1Y3Rpb24udmlld1Nsb3QuYXR0YWNoZWQoKTtcbiAgICAgICAgX3RoaXM3Ll9vbkF1cmVsaWFDb21wb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM3O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEF1cmVsaWEucHJvdG90eXBlLl9jb25maWd1cmVIb3N0ID0gZnVuY3Rpb24gX2NvbmZpZ3VyZUhvc3QoYXBwbGljYXRpb25Ib3N0KSB7XG4gICAgICBpZiAodGhpcy5ob3N0Q29uZmlndXJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwcGxpY2F0aW9uSG9zdCA9IGFwcGxpY2F0aW9uSG9zdCB8fCB0aGlzLmhvc3Q7XG5cbiAgICAgIGlmICghYXBwbGljYXRpb25Ib3N0IHx8IHR5cGVvZiBhcHBsaWNhdGlvbkhvc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFwcGxpY2F0aW9uSG9zdCB8fCAnYXBwbGljYXRpb25Ib3N0JykgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGFwcGxpY2F0aW9uSG9zdDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ob3N0Q29uZmlndXJlZCA9IHRydWU7XG4gICAgICB0aGlzLmhvc3QuYXVyZWxpYSA9IHRoaXM7XG4gICAgICB0aGlzLmhvc3RTbG90ID0gbmV3IF9hdXJlbGlhVGVtcGxhdGluZy5WaWV3U2xvdCh0aGlzLmhvc3QsIHRydWUpO1xuICAgICAgdGhpcy5ob3N0U2xvdC50cmFuc2Zvcm1DaGlsZE5vZGVzSW50b1ZpZXcoKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoX2F1cmVsaWFUZW1wbGF0aW5nLkRPTUJvdW5kYXJ5LCB0aGlzLmhvc3QpO1xuICAgIH07XG5cbiAgICBBdXJlbGlhLnByb3RvdHlwZS5fb25BdXJlbGlhQ29tcG9zZWQgPSBmdW5jdGlvbiBfb25BdXJlbGlhQ29tcG9zZWQoKSB7XG4gICAgICB2YXIgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgnYXVyZWxpYS1jb21wb3NlZCcsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfSwgMSk7XG4gICAgfTtcblxuICAgIHJldHVybiBBdXJlbGlhO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQXVyZWxpYSA9IEF1cmVsaWE7XG5cbiAgX2RlZmF1bHRzKGV4cG9ydHMsIF9pbnRlcm9wRXhwb3J0V2lsZGNhcmQoX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uLCBfZGVmYXVsdHMpKTtcblxuICBfZGVmYXVsdHMoZXhwb3J0cywgX2ludGVyb3BFeHBvcnRXaWxkY2FyZChfYXVyZWxpYUJpbmRpbmcsIF9kZWZhdWx0cykpO1xuXG4gIF9kZWZhdWx0cyhleHBvcnRzLCBfaW50ZXJvcEV4cG9ydFdpbGRjYXJkKF9hdXJlbGlhTWV0YWRhdGEsIF9kZWZhdWx0cykpO1xuXG4gIF9kZWZhdWx0cyhleHBvcnRzLCBfaW50ZXJvcEV4cG9ydFdpbGRjYXJkKF9hdXJlbGlhVGVtcGxhdGluZywgX2RlZmF1bHRzKSk7XG5cbiAgX2RlZmF1bHRzKGV4cG9ydHMsIF9pbnRlcm9wRXhwb3J0V2lsZGNhcmQoX2F1cmVsaWFMb2FkZXIsIF9kZWZhdWx0cykpO1xuXG4gIF9kZWZhdWx0cyhleHBvcnRzLCBfaW50ZXJvcEV4cG9ydFdpbGRjYXJkKF9hdXJlbGlhVGFza1F1ZXVlLCBfZGVmYXVsdHMpKTtcblxuICBfZGVmYXVsdHMoZXhwb3J0cywgX2ludGVyb3BFeHBvcnRXaWxkY2FyZChfYXVyZWxpYVBhdGgsIF9kZWZhdWx0cykpO1xuXG4gIHZhciBMb2dNYW5hZ2VyID0gX2F1cmVsaWFMb2dnaW5nO1xuICBleHBvcnRzLkxvZ01hbmFnZXIgPSBMb2dNYW5hZ2VyO1xufSk7IiwiLyogKi9cbmRlZmluZShbJ2V4cG9ydHMnLCAnLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tY29uZmlnJywgJy4vdmFsaWRhdGlvbi92YWxpZGF0aW9uJywgJy4vdmFsaWRhdGlvbi91dGlsaXRpZXMnLFxuICAnLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tbG9jYWxlJywgJy4vdmFsaWRhdGlvbi92YWxpZGF0aW9uLXJlc3VsdCcsICcuL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1ydWxlcycsXG4gICcuL3ZhbGlkYXRpb24vdmFsaWRhdGUtY3VzdG9tLWF0dHJpYnV0ZScsICcuL3ZhbGlkYXRpb24vdmFsaWRhdGUtY3VzdG9tLWF0dHJpYnV0ZS12aWV3LXN0cmF0ZWd5JyxcbiAgJy4vdmFsaWRhdGlvbi9kZWNvcmF0b3JzJywnLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tZ3JvdXAnXSwgZnVuY3Rpb24gKGV4cG9ydHMsIF92YWxpZGF0aW9uVmFsaWRhdGlvbkNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0aW9uVmFsaWRhdGlvbiwgX3ZhbGlkYXRpb25VdGlsaXRpZXMsIF92YWxpZGF0aW9uVmFsaWRhdGlvbkxvY2FsZSwgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMsIF92YWxpZGF0aW9uVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUsIF92YWxpZGF0aW9uVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmFsaWRhdGlvbkRlY29yYXRvcnMsIF92YWxpZGF0aW9uR3JvdXApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIGV4cG9ydHMuY29uZmlndXJlID0gY29uZmlndXJlO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbiAgZnVuY3Rpb24gX2RlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHsgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkZWZhdWx0cyk7IGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgeyB2YXIga2V5ID0ga2V5c1tpXTsgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZWZhdWx0cywga2V5KTsgaWYgKHZhbHVlICYmIHZhbHVlLmNvbmZpZ3VyYWJsZSAmJiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpOyB9IH0gcmV0dXJuIG9iajsgfVxuXG4gIGV4cG9ydHMuVXRpbGl0aWVzID0gX3ZhbGlkYXRpb25VdGlsaXRpZXMuVXRpbGl0aWVzO1xuICBleHBvcnRzLlZhbGlkYXRpb25Db25maWcgPSBfdmFsaWRhdGlvblZhbGlkYXRpb25Db25maWcuVmFsaWRhdGlvbkNvbmZpZztcbiAgZXhwb3J0cy5WYWxpZGF0aW9uTG9jYWxlID0gX3ZhbGlkYXRpb25WYWxpZGF0aW9uTG9jYWxlLlZhbGlkYXRpb25Mb2NhbGU7XG5cbiAgX2RlZmF1bHRzKGV4cG9ydHMsIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF92YWxpZGF0aW9uVmFsaWRhdGlvblJlc3VsdCkpO1xuXG4gIF9kZWZhdWx0cyhleHBvcnRzLCBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcykpO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvbiA9IF92YWxpZGF0aW9uVmFsaWRhdGlvbi5WYWxpZGF0aW9uO1xuICBleHBvcnRzLlZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlID0gX3ZhbGlkYXRpb25WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZS5WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZTtcbiAgZXhwb3J0cy5WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneSA9IF92YWxpZGF0aW9uVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3kuVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3k7XG4gIGV4cG9ydHMuVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3lCYXNlID0gX3ZhbGlkYXRpb25WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneS5WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2U7XG4gIGV4cG9ydHMuVmFsaWRhdGlvbkdyb3VwID0gX3ZhbGlkYXRpb25Hcm91cC5WYWxpZGF0aW9uR3JvdXA7XG5cbiAgZXhwb3J0cy5lbnN1cmUgPSBfdmFsaWRhdGlvbkRlY29yYXRvcnMuZW5zdXJlO1xuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShhdXJlbGlhLCBjb25maWdDYWxsYmFjaykge1xuXG4gICAgYXVyZWxpYS5nbG9iYWxSZXNvdXJjZXMoJy4vdmFsaWRhdGlvbi92YWxpZGF0ZS1jdXN0b20tYXR0cmlidXRlJyk7XG4gICAgaWYgKGNvbmZpZ0NhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNvbmZpZ0NhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25maWdDYWxsYmFjayhfdmFsaWRhdGlvblZhbGlkYXRpb24uVmFsaWRhdGlvbi5kZWZhdWx0cyk7XG4gICAgfVxuICAgIGF1cmVsaWEuc2luZ2xldG9uKF92YWxpZGF0aW9uVmFsaWRhdGlvbkNvbmZpZy5WYWxpZGF0aW9uQ29uZmlnLCBfdmFsaWRhdGlvblZhbGlkYXRpb24uVmFsaWRhdGlvbi5kZWZhdWx0cyk7XG4gICAgcmV0dXJuIF92YWxpZGF0aW9uVmFsaWRhdGlvbi5WYWxpZGF0aW9uLmRlZmF1bHRzLmxvY2FsZSgpO1xuICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5wbTpjb3JlLWpzQDAuOS4xOC9pbmRleFwiKTsiLCJkZWZpbmUoW1wiZ2l0aHViOmF1cmVsaWEvbG9nZ2luZ0AwLjcuMC9hdXJlbGlhLWxvZ2dpbmdcIl0sIGZ1bmN0aW9uKG1haW4pIHtcbiAgcmV0dXJuIG1haW47XG59KTsiLCJkZWZpbmUoW1wiZ2l0aHViOmF1cmVsaWEvdGVtcGxhdGluZ0AwLjE1LjMvYXVyZWxpYS10ZW1wbGF0aW5nXCJdLCBmdW5jdGlvbihtYWluKSB7XG4gIHJldHVybiBtYWluO1xufSk7IiwiZGVmaW5lKFtcImdpdGh1YjphdXJlbGlhL3BhdGhAMC45LjAvYXVyZWxpYS1wYXRoXCJdLCBmdW5jdGlvbihtYWluKSB7XG4gIHJldHVybiBtYWluO1xufSk7IiwiZGVmaW5lKFtcImdpdGh1YjphdXJlbGlhL2RlcGVuZGVuY3ktaW5qZWN0aW9uQDAuMTAuMS9hdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uXCJdLCBmdW5jdGlvbihtYWluKSB7XG4gIHJldHVybiBtYWluO1xufSk7IiwiZGVmaW5lKFtcImdpdGh1YjphdXJlbGlhL2xvYWRlckAwLjkuMC9hdXJlbGlhLWxvYWRlclwiXSwgZnVuY3Rpb24obWFpbikge1xuICByZXR1cm4gbWFpbjtcbn0pOyIsImRlZmluZShbXCJnaXRodWI6YXVyZWxpYS9iaW5kaW5nQDAuOS4xL2F1cmVsaWEtYmluZGluZ1wiXSwgZnVuY3Rpb24obWFpbikge1xuICByZXR1cm4gbWFpbjtcbn0pOyIsImRlZmluZShbXCJnaXRodWI6YXVyZWxpYS9tZXRhZGF0YUAwLjguMC9hdXJlbGlhLW1ldGFkYXRhXCJdLCBmdW5jdGlvbihtYWluKSB7XG4gIHJldHVybiBtYWluO1xufSk7IiwiZGVmaW5lKFtcImdpdGh1YjphdXJlbGlhL3Rhc2stcXVldWVAMC43LjAvYXVyZWxpYS10YXNrLXF1ZXVlXCJdLCBmdW5jdGlvbihtYWluKSB7XG4gIHJldHVybiBtYWluO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJywgJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1sb2NhbGUnLCAnLi4vdmFsaWRhdGlvbi92YWxpZGF0ZS1jdXN0b20tYXR0cmlidXRlLXZpZXctc3RyYXRlZ3knXSwgZnVuY3Rpb24gKGV4cG9ydHMsIF92YWxpZGF0aW9uVmFsaWRhdGlvbkxvY2FsZSwgX3ZhbGlkYXRpb25WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgVmFsaWRhdGlvbkNvbmZpZ0RlZmF1bHRzID0gZnVuY3Rpb24gVmFsaWRhdGlvbkNvbmZpZ0RlZmF1bHRzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWxpZGF0aW9uQ29uZmlnRGVmYXVsdHMpO1xuICB9O1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvbkNvbmZpZ0RlZmF1bHRzID0gVmFsaWRhdGlvbkNvbmZpZ0RlZmF1bHRzO1xuXG4gIFZhbGlkYXRpb25Db25maWdEZWZhdWx0cy5fZGVmYXVsdHMgPSB7XG4gICAgZGVib3VuY2VUaW1lb3V0OiAwLFxuICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgbG9jYWxlOiAnZW4tVVMnLFxuICAgIGxvY2FsZVJlc291cmNlczogJ2F1cmVsaWEtdmFsaWRhdGlvbi9yZXNvdXJjZXMvJyxcbiAgICB2aWV3U3RyYXRlZ3k6IF92YWxpZGF0aW9uVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3kuVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3kuVFdCb290c3RyYXBBcHBlbmRUb01lc3NhZ2UsXG4gICAgYWxsUHJvcGVydGllc0FyZU1hbmRhdG9yeTogZmFsc2VcbiAgfTtcbiAgVmFsaWRhdGlvbkNvbmZpZ0RlZmF1bHRzLmRlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZWZhdWx0cyA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIFZhbGlkYXRpb25Db25maWdEZWZhdWx0cy5fZGVmYXVsdHMpO1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfTtcblxuICB2YXIgVmFsaWRhdGlvbkNvbmZpZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkNvbmZpZyhpbm5lckNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25Db25maWcpO1xuXG4gICAgICB0aGlzLmlubmVyQ29uZmlnID0gaW5uZXJDb25maWc7XG4gICAgICB0aGlzLnZhbHVlcyA9IHRoaXMuaW5uZXJDb25maWcgPyB7fSA6IFZhbGlkYXRpb25Db25maWdEZWZhdWx0cy5kZWZhdWx0cygpO1xuICAgICAgdGhpcy5jaGFuZ2VkSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZShpZGVudGlmaWVyKSB7XG4gICAgICBpZiAodGhpcy52YWx1ZXMuaGFzT3duUHJvcGVydHkoaWRlbnRpZmllcikgIT09IG51bGwgJiYgdGhpcy52YWx1ZXNbaWRlbnRpZmllcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbaWRlbnRpZmllcl07XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pbm5lckNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lckNvbmZpZy5nZXRWYWx1ZShpZGVudGlmaWVyKTtcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKCdDb25maWcgbm90IGZvdW5kOiAnICsgaWRlbnRpZmllcik7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Db25maWcucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUoaWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWVzW2lkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUub25Mb2NhbGVDaGFuZ2VkID0gZnVuY3Rpb24gb25Mb2NhbGVDaGFuZ2VkKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5pbm5lckNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyQ29uZmlnLm9uTG9jYWxlQ2hhbmdlZChjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3JldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGlkID0gKytWYWxpZGF0aW9uQ29uZmlnLnVuaXF1ZUxpc3RlbmVySWQ7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlZEhhbmRsZXJzLnNldChpZCwgY2FsbGJhY2spO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNoYW5nZWRIYW5kbGVyc1snZGVsZXRlJ10oaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfcmV0ID09PSAnb2JqZWN0JykgcmV0dXJuIF9yZXQudjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUuZ2V0RGVib3VuY2VUaW1lb3V0ID0gZnVuY3Rpb24gZ2V0RGVib3VuY2VUaW1lb3V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoJ2RlYm91bmNlVGltZW91dCcpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uQ29uZmlnLnByb3RvdHlwZS51c2VEZWJvdW5jZVRpbWVvdXQgPSBmdW5jdGlvbiB1c2VEZWJvdW5jZVRpbWVvdXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlKCdkZWJvdW5jZVRpbWVvdXQnLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Db25maWcucHJvdG90eXBlLmdldERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIGdldERlcGVuZGVuY2llcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCdkZXBlbmRlbmNpZXMnKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUuY29tcHV0ZWRGcm9tID0gZnVuY3Rpb24gY29tcHV0ZWRGcm9tKGRlcGVuZGVuY2llcykge1xuICAgICAgdmFyIGRlcHMgPSBkZXBlbmRlbmNpZXM7XG4gICAgICBpZiAodHlwZW9mIGRlcGVuZGVuY2llcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGVwcyA9IFtdO1xuICAgICAgICBkZXBzLnB1c2goZGVwZW5kZW5jaWVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlKCdkZXBlbmRlbmNpZXMnLCBkZXBzKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUudXNlTG9jYWxlID0gZnVuY3Rpb24gdXNlTG9jYWxlKGxvY2FsZUlkZW50aWZpZXIpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUoJ2xvY2FsZScsIGxvY2FsZUlkZW50aWZpZXIpO1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IEFycmF5LmZyb20odGhpcy5jaGFuZ2VkSGFuZGxlcnMudmFsdWVzKCkpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUubG9jYWxlID0gZnVuY3Rpb24gbG9jYWxlKCkge1xuICAgICAgcmV0dXJuIF92YWxpZGF0aW9uVmFsaWRhdGlvbkxvY2FsZS5WYWxpZGF0aW9uTG9jYWxlLlJlcG9zaXRvcnkubG9hZCh0aGlzLmdldFZhbHVlKCdsb2NhbGUnKSwgdGhpcy5nZXRWYWx1ZSgnbG9jYWxlUmVzb3VyY2VzJykpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uQ29uZmlnLnByb3RvdHlwZS51c2VWaWV3U3RyYXRlZ3kgPSBmdW5jdGlvbiB1c2VWaWV3U3RyYXRlZ3kodmlld1N0cmF0ZWd5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRWYWx1ZSgndmlld1N0cmF0ZWd5Jywgdmlld1N0cmF0ZWd5KTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkNvbmZpZy5wcm90b3R5cGUuZ2V0Vmlld1N0cmF0ZWd5ID0gZnVuY3Rpb24gZ2V0Vmlld1N0cmF0ZWd5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoJ3ZpZXdTdHJhdGVneScpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uQ29uZmlnLnByb3RvdHlwZS50cmVhdEFsbFByb3BlcnRpZXNBc01hbmRhdG9yeSA9IGZ1bmN0aW9uIHRyZWF0QWxsUHJvcGVydGllc0FzTWFuZGF0b3J5KCkge1xuICAgICAgdGhpcy5zZXRWYWx1ZSgnYWxsUHJvcGVydGllc0FyZU1hbmRhdG9yeScsIHRydWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Db25maWcucHJvdG90eXBlLnRyZWF0QWxsUHJvcGVydGllc0FzT3B0aW9uYWwgPSBmdW5jdGlvbiB0cmVhdEFsbFByb3BlcnRpZXNBc09wdGlvbmFsKCkge1xuICAgICAgdGhpcy5zZXRWYWx1ZSgnYWxsUHJvcGVydGllc0FyZU1hbmRhdG9yeScsIGZhbHNlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gVmFsaWRhdGlvbkNvbmZpZztcbiAgfSkoKTtcblxuICBleHBvcnRzLlZhbGlkYXRpb25Db25maWcgPSBWYWxpZGF0aW9uQ29uZmlnO1xuXG4gIFZhbGlkYXRpb25Db25maWcudW5pcXVlTGlzdGVuZXJJZCA9IDA7XG59KTsiLCIvKiAqLyBcbmRlZmluZShbJ2V4cG9ydHMnLCAnYXVyZWxpYS1iaW5kaW5nJywgJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1ydWxlcycsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcnVsZXMtY29sbGVjdGlvbicsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tZ3JvdXAnLCAnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbicsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tY29uZmlnJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfYXVyZWxpYUJpbmRpbmcsIF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLCBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24sIF92YWxpZGF0aW9uVmFsaWRhdGlvbkdyb3VwLCBfYXVyZWxpYURlcGVuZGVuY3lJbmplY3Rpb24sIF92YWxpZGF0aW9uVmFsaWRhdGlvbkNvbmZpZykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgVmFsaWRhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbihvYnNlcnZlckxvY2F0b3IsIHZhbGlkYXRpb25Db25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfVmFsaWRhdGlvbik7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgICAgdGhpcy5jb25maWcgPSB2YWxpZGF0aW9uQ29uZmlnID8gdmFsaWRhdGlvbkNvbmZpZyA6IFZhbGlkYXRpb24uZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgdmFyIF9WYWxpZGF0aW9uID0gVmFsaWRhdGlvbjtcblxuICAgIF9WYWxpZGF0aW9uLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKHN1YmplY3QsIGNvbmZpZ0NhbGxiYWNrKSB7XG4gICAgICB2YXIgY29uZiA9IG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25Db25maWcuVmFsaWRhdGlvbkNvbmZpZyh0aGlzLmNvbmZpZyk7XG4gICAgICBpZiAoY29uZmlnQ2FsbGJhY2sgIT09IG51bGwgJiYgY29uZmlnQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY29uZmlnQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uZmlnQ2FsbGJhY2soY29uZik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvbkdyb3VwLlZhbGlkYXRpb25Hcm91cChzdWJqZWN0LCB0aGlzLm9ic2VydmVyTG9jYXRvciwgY29uZik7XG4gICAgfTtcblxuICAgIF9WYWxpZGF0aW9uLnByb3RvdHlwZS5vbkJyZWV6ZUVudGl0eSA9IGZ1bmN0aW9uIG9uQnJlZXplRW50aXR5KGJyZWV6ZUVudGl0eSwgY29uZmlnQ2FsbGJhY2spIHtcbiAgICAgIHZhciB2YWxpZGF0aW9uID0gdGhpcy5vbihicmVlemVFbnRpdHksIGNvbmZpZ0NhbGxiYWNrKTtcbiAgICAgIHZhbGlkYXRpb24ub25CcmVlemVFbnRpdHkoKTtcbiAgICAgIHJldHVybiB2YWxpZGF0aW9uO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uID0gX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uLmluamVjdChfYXVyZWxpYUJpbmRpbmcuT2JzZXJ2ZXJMb2NhdG9yKShWYWxpZGF0aW9uKSB8fCBWYWxpZGF0aW9uO1xuICAgIHJldHVybiBWYWxpZGF0aW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvbiA9IFZhbGlkYXRpb247XG5cbiAgVmFsaWRhdGlvbi5kZWZhdWx0cyA9IG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25Db25maWcuVmFsaWRhdGlvbkNvbmZpZygpO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJ10sIGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHZhciBVdGlsaXRpZXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFV0aWxpdGllcygpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVdGlsaXRpZXMpO1xuICAgIH1cblxuICAgIFV0aWxpdGllcy5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKHZhbCkge1xuICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgVXRpbGl0aWVzLmlzRW1wdHlWYWx1ZSA9IGZ1bmN0aW9uIGlzRW1wdHlWYWx1ZSh2YWwpIHtcbiAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoU3RyaW5nLnByb3RvdHlwZS50cmltKSB7XG4gICAgICAgICAgdmFsID0gdmFsLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSB2YWwucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWwubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDAgPT09IHZhbC5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiBVdGlsaXRpZXM7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5VdGlsaXRpZXMgPSBVdGlsaXRpZXM7XG4gIDtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cyddLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgVmFsaWRhdGlvbkxvY2FsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkxvY2FsZShkZWZhdWx0cywgZGF0YSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25Mb2NhbGUpO1xuXG4gICAgICB0aGlzLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgICB0aGlzLmN1cnJlbnRMb2NhbGUgPSBkYXRhO1xuICAgIH1cblxuICAgIFZhbGlkYXRpb25Mb2NhbGUucHJvdG90eXBlLmdldFZhbHVlRm9yID0gZnVuY3Rpb24gZ2V0VmFsdWVGb3IoaWRlbnRpZmllciwgY2F0ZWdvcnkpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRMb2NhbGUgJiYgdGhpcy5jdXJyZW50TG9jYWxlW2NhdGVnb3J5XSkge1xuICAgICAgICB2YXIgY3VycmVudExvY2FsZVNldHRpbmcgPSB0aGlzLmN1cnJlbnRMb2NhbGVbY2F0ZWdvcnldW2lkZW50aWZpZXJdO1xuICAgICAgICBpZiAoY3VycmVudExvY2FsZVNldHRpbmcgIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50TG9jYWxlU2V0dGluZyAhPT0gbnVsbCkgcmV0dXJuIGN1cnJlbnRMb2NhbGVTZXR0aW5nO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGVmYXVsdHNbY2F0ZWdvcnldKSB7XG4gICAgICAgIHZhciBkZWZhdWx0U2V0dGluZyA9IHRoaXMuZGVmYXVsdHNbY2F0ZWdvcnldW2lkZW50aWZpZXJdO1xuICAgICAgICBpZiAoZGVmYXVsdFNldHRpbmcgIT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0U2V0dGluZyAhPT0gbnVsbCkgcmV0dXJuIGRlZmF1bHRTZXR0aW5nO1xuICAgICAgfVxuICAgICAgdGhyb3cgJ3ZhbGlkYXRpb246IEkxOE46IENvdWxkIG5vdCBmaW5kOiAnICsgaWRlbnRpZmllciArICcgaW4gY2F0ZWdvcnk6ICcgKyBjYXRlZ29yeTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkxvY2FsZS5wcm90b3R5cGUuc2V0dGluZyA9IGZ1bmN0aW9uIHNldHRpbmcoc2V0dGluZ0lkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlRm9yKHNldHRpbmdJZGVudGlmaWVyLCAnc2V0dGluZ3MnKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkxvY2FsZS5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zbGF0aW9uSWRlbnRpZmllciwgbmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgdmFyIHRyYW5zbGF0aW9uID0gdGhpcy5nZXRWYWx1ZUZvcih0cmFuc2xhdGlvbklkZW50aWZpZXIsICdtZXNzYWdlcycpO1xuICAgICAgaWYgKHR5cGVvZiB0cmFuc2xhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb24obmV3VmFsdWUsIHRocmVzaG9sZCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgICB9XG4gICAgICB0aHJvdyAnVmFsaWRhdGlvbiBtZXNzYWdlIGZvciAnICsgdHJhbnNsYXRpb25JZGVudGlmaWVyICsgJ3dhcyBpbiBhbiB1bnN1cHBvcnRlZCBmb3JtYXQnO1xuICAgIH07XG5cbiAgICByZXR1cm4gVmFsaWRhdGlvbkxvY2FsZTtcbiAgfSkoKTtcblxuICBleHBvcnRzLlZhbGlkYXRpb25Mb2NhbGUgPSBWYWxpZGF0aW9uTG9jYWxlO1xuXG4gIHZhciBWYWxpZGF0aW9uTG9jYWxlUmVwb3NpdG9yeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkxvY2FsZVJlcG9zaXRvcnkoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsaWRhdGlvbkxvY2FsZVJlcG9zaXRvcnkpO1xuXG4gICAgICB0aGlzWydkZWZhdWx0J10gPSBudWxsO1xuICAgICAgdGhpcy5pbnN0YW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICdudW1lcmljUmVnZXgnOiAvXi0/KD86XFxkK3xcXGR7MSwzfSg/OixcXGR7M30pKyk/KD86XFwuXFxkKyk/JC9cbiAgICAgICAgfSxcbiAgICAgICAgbWVzc2FnZXM6IHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIFZhbGlkYXRpb25Mb2NhbGVSZXBvc2l0b3J5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZChsb2NhbGVJZGVudGlmaWVyLCBiYXNlUGF0aCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCFiYXNlUGF0aCkgYmFzZVBhdGggPSAnYXVyZWxpYS12YWxpZGF0aW9uL3Jlc291cmNlcy8nO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKF90aGlzLmluc3RhbmNlcy5oYXMobG9jYWxlSWRlbnRpZmllcikpIHtcbiAgICAgICAgICB2YXIgbG9jYWxlID0gX3RoaXMuaW5zdGFuY2VzLmdldChsb2NhbGVJZGVudGlmaWVyKTtcbiAgICAgICAgICByZXNvbHZlKGxvY2FsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgU3lzdGVtWydpbXBvcnQnXShiYXNlUGF0aCArIGxvY2FsZUlkZW50aWZpZXIpLnRoZW4oZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlID0gX3RoaXMuYWRkTG9jYWxlKGxvY2FsZUlkZW50aWZpZXIsIHJlc291cmNlLmRhdGEpO1xuICAgICAgICAgICAgcmVzb2x2ZShsb2NhbGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkxvY2FsZVJlcG9zaXRvcnkucHJvdG90eXBlLmFkZExvY2FsZSA9IGZ1bmN0aW9uIGFkZExvY2FsZShsb2NhbGVJZGVudGlmaWVyLCBkYXRhKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgVmFsaWRhdGlvbkxvY2FsZSh0aGlzLmRlZmF1bHRzLCBkYXRhKTtcbiAgICAgIHRoaXMuaW5zdGFuY2VzLnNldChsb2NhbGVJZGVudGlmaWVyLCBpbnN0YW5jZSk7XG4gICAgICBpZiAodGhpc1snZGVmYXVsdCddID09PSBudWxsKSB0aGlzWydkZWZhdWx0J10gPSBpbnN0YW5jZTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25Mb2NhbGVSZXBvc2l0b3J5O1xuICB9KSgpO1xuXG4gIFZhbGlkYXRpb25Mb2NhbGUuUmVwb3NpdG9yeSA9IG5ldyBWYWxpZGF0aW9uTG9jYWxlUmVwb3NpdG9yeSgpO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJ10sIGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHZhciBWYWxpZGF0aW9uUmVzdWx0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWYWxpZGF0aW9uUmVzdWx0KCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25SZXN1bHQpO1xuXG4gICAgICB0aGlzLmlzVmFsaWQgPSB0cnVlO1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0ge307XG4gICAgfVxuXG4gICAgVmFsaWRhdGlvblJlc3VsdC5wcm90b3R5cGUuYWRkUHJvcGVydHkgPSBmdW5jdGlvbiBhZGRQcm9wZXJ0eShuYW1lKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcGVydGllc1tuYW1lXSkge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXNbbmFtZV0gPSBuZXcgVmFsaWRhdGlvblJlc3VsdFByb3BlcnR5KHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1tuYW1lXTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJlc3VsdC5wcm90b3R5cGUuY2hlY2tWYWxpZGl0eSA9IGZ1bmN0aW9uIGNoZWNrVmFsaWRpdHkoKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0uaXNWYWxpZCkge1xuICAgICAgICAgIHRoaXMuaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pc1ZhbGlkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJlc3VsdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMuaXNWYWxpZCA9IHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBWYWxpZGF0aW9uUmVzdWx0O1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvblJlc3VsdCA9IFZhbGlkYXRpb25SZXN1bHQ7XG5cbiAgdmFyIFZhbGlkYXRpb25SZXN1bHRQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvblJlc3VsdFByb3BlcnR5KGdyb3VwKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsaWRhdGlvblJlc3VsdFByb3BlcnR5KTtcblxuICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgVmFsaWRhdGlvblJlc3VsdFByb3BlcnR5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5pc1ZhbGlkID0gdHJ1ZTtcbiAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgdGhpcy5tZXNzYWdlID0gJyc7XG4gICAgICB0aGlzLmZhaWxpbmdSdWxlID0gbnVsbDtcbiAgICAgIHRoaXMubGF0ZXN0VmFsdWUgPSBudWxsO1xuICAgICAgdGhpcy5ub3RpZnlPYnNlcnZlcnNPZkNoYW5nZSgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uUmVzdWx0UHJvcGVydHkucHJvdG90eXBlLm9uVmFsaWRhdGUgPSBmdW5jdGlvbiBvblZhbGlkYXRlKG9uVmFsaWRhdGVDYWxsYmFjaykge1xuICAgICAgdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2tzLnB1c2gob25WYWxpZGF0ZUNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJlc3VsdFByb3BlcnR5LnByb3RvdHlwZS5ub3RpZnlPYnNlcnZlcnNPZkNoYW5nZSA9IGZ1bmN0aW9uIG5vdGlmeU9ic2VydmVyc09mQ2hhbmdlKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9uVmFsaWRhdGVDYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2tzW2ldO1xuICAgICAgICBjYWxsYmFjayh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJlc3VsdFByb3BlcnR5LnByb3RvdHlwZS5zZXRWYWxpZGl0eSA9IGZ1bmN0aW9uIHNldFZhbGlkaXR5KHZhbGlkYXRpb25SZXNwb25zZSwgc2hvdWxkQmVEaXJ0eSkge1xuICAgICAgdmFyIG5vdGlmeU9ic2VydmVycyA9ICF0aGlzLmlzRGlydHkgJiYgc2hvdWxkQmVEaXJ0eSB8fCB0aGlzLmlzVmFsaWQgIT09IHZhbGlkYXRpb25SZXNwb25zZS5pc1ZhbGlkIHx8IHRoaXMubWVzc2FnZSAhPT0gdmFsaWRhdGlvblJlc3BvbnNlLm1lc3NhZ2U7XG5cbiAgICAgIGlmIChzaG91bGRCZURpcnR5KSB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgICAgdGhpcy5tZXNzYWdlID0gdmFsaWRhdGlvblJlc3BvbnNlLm1lc3NhZ2U7XG4gICAgICB0aGlzLmZhaWxpbmdSdWxlID0gdmFsaWRhdGlvblJlc3BvbnNlLmZhaWxpbmdSdWxlO1xuICAgICAgdGhpcy5pc1ZhbGlkID0gdmFsaWRhdGlvblJlc3BvbnNlLmlzVmFsaWQ7XG4gICAgICB0aGlzLmxhdGVzdFZhbHVlID0gdmFsaWRhdGlvblJlc3BvbnNlLmxhdGVzdFZhbHVlO1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZCAhPT0gdGhpcy5ncm91cC5pc1ZhbGlkKSB0aGlzLmdyb3VwLmNoZWNrVmFsaWRpdHkoKTtcblxuICAgICAgaWYgKG5vdGlmeU9ic2VydmVycykge1xuICAgICAgICB0aGlzLm5vdGlmeU9ic2VydmVyc09mQ2hhbmdlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBWYWxpZGF0aW9uUmVzdWx0UHJvcGVydHk7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WYWxpZGF0aW9uUmVzdWx0UHJvcGVydHkgPSBWYWxpZGF0aW9uUmVzdWx0UHJvcGVydHk7XG59KTsiLCIvKiAqLyBcbmRlZmluZShbJ2V4cG9ydHMnLCAnLi4vdmFsaWRhdGlvbi91dGlsaXRpZXMnLCAnLi4vdmFsaWRhdGlvbi92YWxpZGF0aW9uLWxvY2FsZSddLCBmdW5jdGlvbiAoZXhwb3J0cywgX3ZhbGlkYXRpb25VdGlsaXRpZXMsIF92YWxpZGF0aW9uVmFsaWRhdGlvbkxvY2FsZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWYWxpZGF0aW9uUnVsZSh0aHJlc2hvbGQsIG9uVmFsaWRhdGUsIG1lc3NhZ2UsIHJ1bGVOYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICB0aGlzLm9uVmFsaWRhdGUgPSBvblZhbGlkYXRlO1xuICAgICAgdGhpcy50aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBudWxsO1xuICAgICAgdGhpcy5ydWxlTmFtZSA9IHJ1bGVOYW1lO1xuICAgIH1cblxuICAgIFZhbGlkYXRpb25SdWxlLnByb3RvdHlwZS53aXRoTWVzc2FnZSA9IGZ1bmN0aW9uIHdpdGhNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25SdWxlLnByb3RvdHlwZS5leHBsYWluID0gZnVuY3Rpb24gZXhwbGFpbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVycm9yTWVzc2FnZTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJ1bGUucHJvdG90eXBlLnNldFJlc3VsdCA9IGZ1bmN0aW9uIHNldFJlc3VsdChyZXN1bHQsIGN1cnJlbnRWYWx1ZSwgbG9jYWxlKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlIHx8IHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gbnVsbCB8fCByZXN1bHQgPT09ICcnKSB7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IHRoaXMubWVzc2FnZShjdXJyZW50VmFsdWUsIHRoaXMudGhyZXNob2xkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2U7XG4gICAgICAgICAgICB9IGVsc2UgdGhyb3cgJ1VuYWJsZSB0byBoYW5kbGUgdGhlIGVycm9yIG1lc3NhZ2U6JyArIHRoaXMubWVzc2FnZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBsb2NhbGUudHJhbnNsYXRlKHRoaXMucnVsZU5hbWUsIGN1cnJlbnRWYWx1ZSwgdGhpcy50aHJlc2hvbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25SdWxlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKGN1cnJlbnRWYWx1ZSwgbG9jYWxlKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAobG9jYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG9jYWxlID0gX3ZhbGlkYXRpb25WYWxpZGF0aW9uTG9jYWxlLlZhbGlkYXRpb25Mb2NhbGUuUmVwb3NpdG9yeVsnZGVmYXVsdCddO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50VmFsdWUgPSBfdmFsaWRhdGlvblV0aWxpdGllcy5VdGlsaXRpZXMuZ2V0VmFsdWUoY3VycmVudFZhbHVlKTtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLm9uVmFsaWRhdGUoY3VycmVudFZhbHVlLCB0aGlzLnRocmVzaG9sZCwgbG9jYWxlKTtcbiAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG5cbiAgICAgIHZhciBuZXh0UHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAocHJvbWlzZVJlc3VsdCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0UmVzdWx0KHByb21pc2VSZXN1bHQsIGN1cnJlbnRWYWx1ZSwgbG9jYWxlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChwcm9taXNlRmFpbHVyZSkge1xuICAgICAgICBpZiAodHlwZW9mIHByb21pc2VGYWlsdXJlID09PSAnc3RyaW5nJyAmJiBwcm9taXNlRmFpbHVyZSAhPT0gJycpIHJldHVybiBfdGhpcy5zZXRSZXN1bHQocHJvbWlzZUZhaWx1cmUsIGN1cnJlbnRWYWx1ZSwgbG9jYWxlKTtlbHNlIHJldHVybiBfdGhpcy5zZXRSZXN1bHQoZmFsc2UsIGN1cnJlbnRWYWx1ZSwgbG9jYWxlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5leHRQcm9taXNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gVmFsaWRhdGlvblJ1bGU7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WYWxpZGF0aW9uUnVsZSA9IFZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBVUkxWYWxpZGF0aW9uUnVsZSA9IChmdW5jdGlvbiAoX1ZhbGlkYXRpb25SdWxlKSB7XG4gICAgZnVuY3Rpb24gVVJMVmFsaWRhdGlvblJ1bGUodGhyZXNob2xkKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVVJMVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICB2YXIgZGVmYXVsdF91cmxfb3B0aW9ucyA9IHtcbiAgICAgICAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZnRwJ10sXG4gICAgICAgIHJlcXVpcmVfdGxkOiB0cnVlLFxuICAgICAgICByZXF1aXJlX3Byb3RvY29sOiBmYWxzZSxcbiAgICAgICAgYWxsb3dfdW5kZXJzY29yZXM6IHRydWUsXG4gICAgICAgIGFsbG93X3RyYWlsaW5nX2RvdDogZmFsc2UsXG4gICAgICAgIGFsbG93X3Byb3RvY29sX3JlbGF0aXZlX3VybHM6IHRydWVcbiAgICAgIH07XG4gICAgICBpZiAodGhyZXNob2xkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyZXNob2xkID0gZGVmYXVsdF91cmxfb3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgX1ZhbGlkYXRpb25SdWxlLmNhbGwodGhpcywgdGhyZXNob2xkLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICB2YXIgdXJsID0gbmV3VmFsdWU7XG4gICAgICAgIGlmICghdXJsIHx8IHVybC5sZW5ndGggPj0gMjA4MyB8fCAvXFxzLy50ZXN0KHVybCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCdtYWlsdG86JykgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3RvY29sLCBhdXRoLCBob3N0LCBob3N0bmFtZSwgcG9ydCwgcG9ydF9zdHIsIHNwbGl0O1xuICAgICAgICBzcGxpdCA9IHVybC5zcGxpdCgnOi8vJyk7XG4gICAgICAgIGlmIChzcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcHJvdG9jb2wgPSBzcGxpdC5zaGlmdCgpO1xuICAgICAgICAgIGlmICh0aHJlc2hvbGQucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aHJlc2hvbGQucmVxdWlyZV9wcm90b2NvbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aHJlc2hvbGQuYWxsb3dfcHJvdG9jb2xfcmVsYXRpdmVfdXJscyAmJiB1cmwuc3Vic3RyKDAsIDIpID09PSAnLy8nKSB7XG4gICAgICAgICAgc3BsaXRbMF0gPSB1cmwuc3Vic3RyKDIpO1xuICAgICAgICB9XG4gICAgICAgIHVybCA9IHNwbGl0LmpvaW4oJzovLycpO1xuICAgICAgICBzcGxpdCA9IHVybC5zcGxpdCgnIycpO1xuICAgICAgICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuXG4gICAgICAgIHNwbGl0ID0gdXJsLnNwbGl0KCc/Jyk7XG4gICAgICAgIHVybCA9IHNwbGl0LnNoaWZ0KCk7XG5cbiAgICAgICAgc3BsaXQgPSB1cmwuc3BsaXQoJy8nKTtcbiAgICAgICAgdXJsID0gc3BsaXQuc2hpZnQoKTtcbiAgICAgICAgc3BsaXQgPSB1cmwuc3BsaXQoJ0AnKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhdXRoID0gc3BsaXQuc2hpZnQoKTtcbiAgICAgICAgICBpZiAoYXV0aC5pbmRleE9mKCc6JykgPj0gMCAmJiBhdXRoLnNwbGl0KCc6JykubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBob3N0bmFtZSA9IHNwbGl0LmpvaW4oJ0AnKTtcbiAgICAgICAgc3BsaXQgPSBob3N0bmFtZS5zcGxpdCgnOicpO1xuICAgICAgICBob3N0ID0gc3BsaXQuc2hpZnQoKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCkge1xuICAgICAgICAgIHBvcnRfc3RyID0gc3BsaXQuam9pbignOicpO1xuICAgICAgICAgIHBvcnQgPSBwYXJzZUludChwb3J0X3N0ciwgMTApO1xuICAgICAgICAgIGlmICghL15bMC05XSskLy50ZXN0KHBvcnRfc3RyKSB8fCBwb3J0IDw9IDAgfHwgcG9ydCA+IDY1NTM1KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghVVJMVmFsaWRhdGlvblJ1bGUuaXNJUChob3N0KSAmJiAhVVJMVmFsaWRhdGlvblJ1bGUuaXNGUUROKGhvc3QsIHRocmVzaG9sZCkgJiYgaG9zdCAhPT0gJ2xvY2FsaG9zdCcpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRocmVzaG9sZC5ob3N0X3doaXRlbGlzdCAmJiB0aHJlc2hvbGQuaG9zdF93aGl0ZWxpc3QuaW5kZXhPZihob3N0KSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRocmVzaG9sZC5ob3N0X2JsYWNrbGlzdCAmJiB0aHJlc2hvbGQuaG9zdF9ibGFja2xpc3QuaW5kZXhPZihob3N0KSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LCBudWxsLCAnVVJMVmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoVVJMVmFsaWRhdGlvblJ1bGUsIF9WYWxpZGF0aW9uUnVsZSk7XG5cbiAgICBVUkxWYWxpZGF0aW9uUnVsZS5pc0lQID0gZnVuY3Rpb24gaXNJUChzdHIsIHZlcnNpb24pIHtcbiAgICAgIHZhciBpcHY0TWF5YmUgPSAvXihcXGQrKVxcLihcXGQrKVxcLihcXGQrKVxcLihcXGQrKSQvLFxuICAgICAgICAgIGlwdjZCbG9jayA9IC9eWzAtOUEtRl17MSw0fSQvaTtcblxuICAgICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSVAoc3RyLCA0KSB8fCB0aGlzLmlzSVAoc3RyLCA2KTtcbiAgICAgIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gNCkge1xuICAgICAgICBpZiAoIWlwdjRNYXliZS50ZXN0KHN0cikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCcuJykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJ0c1szXSA8PSAyNTU7XG4gICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IDYpIHtcbiAgICAgICAgdmFyIGJsb2NrcyA9IHN0ci5zcGxpdCgnOicpO1xuICAgICAgICB2YXIgZm91bmRPbWlzc2lvbkJsb2NrID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGJsb2Nrcy5sZW5ndGggPiA4KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKHN0ciA9PT0gJzo6Jykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0ci5zdWJzdHIoMCwgMikgPT09ICc6OicpIHtcbiAgICAgICAgICBibG9ja3Muc2hpZnQoKTtcbiAgICAgICAgICBibG9ja3Muc2hpZnQoKTtcbiAgICAgICAgICBmb3VuZE9taXNzaW9uQmxvY2sgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0ci5zdWJzdHIoc3RyLmxlbmd0aCAtIDIpID09PSAnOjonKSB7XG4gICAgICAgICAgYmxvY2tzLnBvcCgpO1xuICAgICAgICAgIGJsb2Nrcy5wb3AoKTtcbiAgICAgICAgICBmb3VuZE9taXNzaW9uQmxvY2sgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpZiAoYmxvY2tzW2ldID09PSAnJyAmJiBpID4gMCAmJiBpIDwgYmxvY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGlmIChmb3VuZE9taXNzaW9uQmxvY2spIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGZvdW5kT21pc3Npb25CbG9jayA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICghaXB2NkJsb2NrLnRlc3QoYmxvY2tzW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3VuZE9taXNzaW9uQmxvY2spIHtcbiAgICAgICAgICByZXR1cm4gYmxvY2tzLmxlbmd0aCA+PSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBibG9ja3MubGVuZ3RoID09PSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIFVSTFZhbGlkYXRpb25SdWxlLmlzRlFETiA9IGZ1bmN0aW9uIGlzRlFETihzdHIsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmFsbG93X3RyYWlsaW5nX2RvdCAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnLicpIHtcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoJy4nKTtcbiAgICAgIGlmIChvcHRpb25zLnJlcXVpcmVfdGxkKSB7XG4gICAgICAgIHZhciB0bGQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgaWYgKCFwYXJ0cy5sZW5ndGggfHwgIS9eKFthLXpcXHUwMGExLVxcdWZmZmZdezIsfXx4blthLXowLTktXXsyLH0pJC9pLnRlc3QodGxkKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcGFydCwgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgIGlmIChvcHRpb25zLmFsbG93X3VuZGVyc2NvcmVzKSB7XG4gICAgICAgICAgaWYgKHBhcnQuaW5kZXhPZignX18nKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnQgPSBwYXJ0LnJlcGxhY2UoL18vZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghL15bYS16XFx1MDBhMS1cXHVmZmZmMC05LV0rJC9pLnRlc3QocGFydCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRbMF0gPT09ICctJyB8fCBwYXJ0W3BhcnQubGVuZ3RoIC0gMV0gPT09ICctJyB8fCBwYXJ0LmluZGV4T2YoJy0tLScpID49IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gVVJMVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLlVSTFZhbGlkYXRpb25SdWxlID0gVVJMVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIEVtYWlsVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTIpIHtcbiAgICBmdW5jdGlvbiBFbWFpbFZhbGlkYXRpb25SdWxlKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtYWlsVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICBfVmFsaWRhdGlvblJ1bGUyLmNhbGwodGhpcywgbnVsbCwgZnVuY3Rpb24gKG5ld1ZhbHVlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgaWYgKC9cXHMvLnRlc3QobmV3VmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0cyA9IG5ld1ZhbHVlLnNwbGl0KCdAJyk7XG4gICAgICAgIHZhciBkb21haW4gPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgdmFyIHVzZXIgPSBwYXJ0cy5qb2luKCdAJyk7XG5cbiAgICAgICAgaWYgKCFFbWFpbFZhbGlkYXRpb25SdWxlLmlzRlFETihkb21haW4pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFbWFpbFZhbGlkYXRpb25SdWxlLnRlc3RFbWFpbFVzZXJVdGY4UmVnZXgodXNlcik7XG4gICAgICB9LCBudWxsLCAnRW1haWxWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhFbWFpbFZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUyKTtcblxuICAgIEVtYWlsVmFsaWRhdGlvblJ1bGUudGVzdEVtYWlsVXNlclV0ZjhSZWdleCA9IGZ1bmN0aW9uIHRlc3RFbWFpbFVzZXJVdGY4UmVnZXgodXNlcikge1xuICAgICAgdmFyIGVtYWlsVXNlclV0ZjhSZWdleCA9IC9eKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpJC9pO1xuICAgICAgcmV0dXJuIGVtYWlsVXNlclV0ZjhSZWdleC50ZXN0KHVzZXIpO1xuICAgIH07XG5cbiAgICBFbWFpbFZhbGlkYXRpb25SdWxlLmlzRlFETiA9IGZ1bmN0aW9uIGlzRlFETihzdHIpIHtcbiAgICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgnLicpO1xuICAgICAgZm9yICh2YXIgcGFydCwgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgIGlmIChwYXJ0LmluZGV4T2YoJ19fJykgPj0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0ID0gcGFydC5yZXBsYWNlKC9fL2csICcnKTtcbiAgICAgICAgaWYgKCEvXlthLXpcXHUwMGExLVxcdWZmZmYwLTktXSskL2kudGVzdChwYXJ0KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydFswXSA9PT0gJy0nIHx8IHBhcnRbcGFydC5sZW5ndGggLSAxXSA9PT0gJy0nIHx8IHBhcnQuaW5kZXhPZignLS0tJykgPj0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBFbWFpbFZhbGlkYXRpb25SdWxlO1xuICB9KShWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5FbWFpbFZhbGlkYXRpb25SdWxlID0gRW1haWxWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgTWluaW11bUxlbmd0aFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGUzKSB7XG4gICAgZnVuY3Rpb24gTWluaW11bUxlbmd0aFZhbGlkYXRpb25SdWxlKG1pbmltdW1MZW5ndGgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaW5pbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICBfVmFsaWRhdGlvblJ1bGUzLmNhbGwodGhpcywgbWluaW11bUxlbmd0aCwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBtaW5pbXVtTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZS5sZW5ndGggIT09IHVuZGVmaW5lZCAmJiBuZXdWYWx1ZS5sZW5ndGggPj0gbWluaW11bUxlbmd0aDtcbiAgICAgIH0sIG51bGwsICdNaW5pbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoTWluaW11bUxlbmd0aFZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUzKTtcblxuICAgIHJldHVybiBNaW5pbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLk1pbmltdW1MZW5ndGhWYWxpZGF0aW9uUnVsZSA9IE1pbmltdW1MZW5ndGhWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgTWF4aW11bUxlbmd0aFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGU0KSB7XG4gICAgZnVuY3Rpb24gTWF4aW11bUxlbmd0aFZhbGlkYXRpb25SdWxlKG1heGltdW1MZW5ndGgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXhpbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICBfVmFsaWRhdGlvblJ1bGU0LmNhbGwodGhpcywgbWF4aW11bUxlbmd0aCwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBtYXhpbXVtTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZS5sZW5ndGggIT09IHVuZGVmaW5lZCAmJiBuZXdWYWx1ZS5sZW5ndGggPD0gbWF4aW11bUxlbmd0aDtcbiAgICAgIH0sIG51bGwsICdNYXhpbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoTWF4aW11bUxlbmd0aFZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGU0KTtcblxuICAgIHJldHVybiBNYXhpbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLk1heGltdW1MZW5ndGhWYWxpZGF0aW9uUnVsZSA9IE1heGltdW1MZW5ndGhWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgQmV0d2Vlbkxlbmd0aFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGU1KSB7XG4gICAgZnVuY3Rpb24gQmV0d2Vlbkxlbmd0aFZhbGlkYXRpb25SdWxlKG1pbmltdW1MZW5ndGgsIG1heGltdW1MZW5ndGgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCZXR3ZWVuTGVuZ3RoVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICBfVmFsaWRhdGlvblJ1bGU1LmNhbGwodGhpcywgeyBtaW5pbXVtTGVuZ3RoOiBtaW5pbXVtTGVuZ3RoLCBtYXhpbXVtTGVuZ3RoOiBtYXhpbXVtTGVuZ3RoIH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSwgdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZS5sZW5ndGggIT09IHVuZGVmaW5lZCAmJiBuZXdWYWx1ZS5sZW5ndGggPj0gdGhyZXNob2xkLm1pbmltdW1MZW5ndGggJiYgbmV3VmFsdWUubGVuZ3RoIDw9IHRocmVzaG9sZC5tYXhpbXVtTGVuZ3RoO1xuICAgICAgfSwgbnVsbCwgJ0JldHdlZW5MZW5ndGhWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhCZXR3ZWVuTGVuZ3RoVmFsaWRhdGlvblJ1bGUsIF9WYWxpZGF0aW9uUnVsZTUpO1xuXG4gICAgcmV0dXJuIEJldHdlZW5MZW5ndGhWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuQmV0d2Vlbkxlbmd0aFZhbGlkYXRpb25SdWxlID0gQmV0d2Vlbkxlbmd0aFZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBDdXN0b21GdW5jdGlvblZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGU2KSB7XG4gICAgZnVuY3Rpb24gQ3VzdG9tRnVuY3Rpb25WYWxpZGF0aW9uUnVsZShjdXN0b21GdW5jdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3VzdG9tRnVuY3Rpb25WYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTYuY2FsbCh0aGlzLCB0aHJlc2hvbGQsIGN1c3RvbUZ1bmN0aW9uLCBudWxsLCAnQ3VzdG9tRnVuY3Rpb25WYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhDdXN0b21GdW5jdGlvblZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGU2KTtcblxuICAgIHJldHVybiBDdXN0b21GdW5jdGlvblZhbGlkYXRpb25SdWxlO1xuICB9KShWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5DdXN0b21GdW5jdGlvblZhbGlkYXRpb25SdWxlID0gQ3VzdG9tRnVuY3Rpb25WYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgTnVtZXJpY1ZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGU3KSB7XG4gICAgZnVuY3Rpb24gTnVtZXJpY1ZhbGlkYXRpb25SdWxlKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE51bWVyaWNWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTcuY2FsbCh0aGlzLCBudWxsLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBudW1lcmljUmVnZXggPSBsb2NhbGUuc2V0dGluZygnbnVtZXJpY1JlZ2V4Jyk7XG4gICAgICAgIHZhciBmbG9hdFZhbHVlID0gcGFyc2VGbG9hdChuZXdWYWx1ZSk7XG4gICAgICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQobmV3VmFsdWUpKSAmJiBOdW1iZXIuaXNGaW5pdGUoZmxvYXRWYWx1ZSkgJiYgbnVtZXJpY1JlZ2V4LnRlc3QobmV3VmFsdWUpO1xuICAgICAgfSwgbnVsbCwgJ051bWVyaWNWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhOdW1lcmljVmFsaWRhdGlvblJ1bGUsIF9WYWxpZGF0aW9uUnVsZTcpO1xuXG4gICAgcmV0dXJuIE51bWVyaWNWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuTnVtZXJpY1ZhbGlkYXRpb25SdWxlID0gTnVtZXJpY1ZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBSZWdleFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGU4KSB7XG4gICAgZnVuY3Rpb24gUmVnZXhWYWxpZGF0aW9uUnVsZShyZWdleCwgcnVsZU5hbWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWdleFZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlOC5jYWxsKHRoaXMsIHJlZ2V4LCBmdW5jdGlvbiAobmV3VmFsdWUsIHJlZ2V4KSB7XG4gICAgICAgIHJldHVybiByZWdleC50ZXN0KG5ld1ZhbHVlKTtcbiAgICAgIH0sIG51bGwsIHJ1bGVOYW1lIHx8ICdSZWdleFZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKFJlZ2V4VmFsaWRhdGlvblJ1bGUsIF9WYWxpZGF0aW9uUnVsZTgpO1xuXG4gICAgcmV0dXJuIFJlZ2V4VmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLlJlZ2V4VmFsaWRhdGlvblJ1bGUgPSBSZWdleFZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBDb250YWluc09ubHlWYWxpZGF0aW9uUnVsZSA9IChmdW5jdGlvbiAoX1JlZ2V4VmFsaWRhdGlvblJ1bGUpIHtcbiAgICBmdW5jdGlvbiBDb250YWluc09ubHlWYWxpZGF0aW9uUnVsZShyZWdleCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRhaW5zT25seVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1JlZ2V4VmFsaWRhdGlvblJ1bGUuY2FsbCh0aGlzLCByZWdleCwgJ0NvbnRhaW5zT25seVZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKENvbnRhaW5zT25seVZhbGlkYXRpb25SdWxlLCBfUmVnZXhWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICByZXR1cm4gQ29udGFpbnNPbmx5VmFsaWRhdGlvblJ1bGU7XG4gIH0pKFJlZ2V4VmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuQ29udGFpbnNPbmx5VmFsaWRhdGlvblJ1bGUgPSBDb250YWluc09ubHlWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgTWluaW11bVZhbHVlVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTkpIHtcbiAgICBmdW5jdGlvbiBNaW5pbXVtVmFsdWVWYWxpZGF0aW9uUnVsZShtaW5pbXVtVmFsdWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaW5pbXVtVmFsdWVWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTkuY2FsbCh0aGlzLCBtaW5pbXVtVmFsdWUsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgbWluaW11bVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfdmFsaWRhdGlvblV0aWxpdGllcy5VdGlsaXRpZXMuZ2V0VmFsdWUobWluaW11bVZhbHVlKSA8IG5ld1ZhbHVlO1xuICAgICAgfSwgbnVsbCwgJ01pbmltdW1WYWx1ZVZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKE1pbmltdW1WYWx1ZVZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGU5KTtcblxuICAgIHJldHVybiBNaW5pbXVtVmFsdWVWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuTWluaW11bVZhbHVlVmFsaWRhdGlvblJ1bGUgPSBNaW5pbXVtVmFsdWVWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgTWluaW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTEwKSB7XG4gICAgZnVuY3Rpb24gTWluaW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGUobWluaW11bVZhbHVlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWluaW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICBfVmFsaWRhdGlvblJ1bGUxMC5jYWxsKHRoaXMsIG1pbmltdW1WYWx1ZSwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBtaW5pbXVtVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF92YWxpZGF0aW9uVXRpbGl0aWVzLlV0aWxpdGllcy5nZXRWYWx1ZShtaW5pbXVtVmFsdWUpIDw9IG5ld1ZhbHVlO1xuICAgICAgfSwgbnVsbCwgJ01pbmltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKE1pbmltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUxMCk7XG5cbiAgICByZXR1cm4gTWluaW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLk1pbmltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlID0gTWluaW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIE1heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGUxMSkge1xuICAgIGZ1bmN0aW9uIE1heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlKG1heGltdW1WYWx1ZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMTEuY2FsbCh0aGlzLCBtYXhpbXVtVmFsdWUsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgbWF4aW11bVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA8IF92YWxpZGF0aW9uVXRpbGl0aWVzLlV0aWxpdGllcy5nZXRWYWx1ZShtYXhpbXVtVmFsdWUpO1xuICAgICAgfSwgbnVsbCwgJ01heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKE1heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUxMSk7XG5cbiAgICByZXR1cm4gTWF4aW11bVZhbHVlVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLk1heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlID0gTWF4aW11bVZhbHVlVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIE1heGltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGUxMikge1xuICAgIGZ1bmN0aW9uIE1heGltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlKG1heGltdW1WYWx1ZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1heGltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMTIuY2FsbCh0aGlzLCBtYXhpbXVtVmFsdWUsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgbWF4aW11bVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA8PSBfdmFsaWRhdGlvblV0aWxpdGllcy5VdGlsaXRpZXMuZ2V0VmFsdWUobWF4aW11bVZhbHVlKTtcbiAgICAgIH0sIG51bGwsICdNYXhpbXVtSW5jbHVzaXZlVmFsdWVWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhNYXhpbXVtSW5jbHVzaXZlVmFsdWVWYWxpZGF0aW9uUnVsZSwgX1ZhbGlkYXRpb25SdWxlMTIpO1xuXG4gICAgcmV0dXJuIE1heGltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlO1xuICB9KShWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5NYXhpbXVtSW5jbHVzaXZlVmFsdWVWYWxpZGF0aW9uUnVsZSA9IE1heGltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBCZXR3ZWVuVmFsdWVWYWxpZGF0aW9uUnVsZSA9IChmdW5jdGlvbiAoX1ZhbGlkYXRpb25SdWxlMTMpIHtcbiAgICBmdW5jdGlvbiBCZXR3ZWVuVmFsdWVWYWxpZGF0aW9uUnVsZShtaW5pbXVtVmFsdWUsIG1heGltdW1WYWx1ZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJldHdlZW5WYWx1ZVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMTMuY2FsbCh0aGlzLCB7IG1pbmltdW1WYWx1ZTogbWluaW11bVZhbHVlLCBtYXhpbXVtVmFsdWU6IG1heGltdW1WYWx1ZSB9LCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gX3ZhbGlkYXRpb25VdGlsaXRpZXMuVXRpbGl0aWVzLmdldFZhbHVlKHRocmVzaG9sZC5taW5pbXVtVmFsdWUpIDw9IG5ld1ZhbHVlICYmIG5ld1ZhbHVlIDw9IF92YWxpZGF0aW9uVXRpbGl0aWVzLlV0aWxpdGllcy5nZXRWYWx1ZSh0aHJlc2hvbGQubWF4aW11bVZhbHVlKTtcbiAgICAgIH0sIG51bGwsICdCZXR3ZWVuVmFsdWVWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhCZXR3ZWVuVmFsdWVWYWxpZGF0aW9uUnVsZSwgX1ZhbGlkYXRpb25SdWxlMTMpO1xuXG4gICAgcmV0dXJuIEJldHdlZW5WYWx1ZVZhbGlkYXRpb25SdWxlO1xuICB9KShWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5CZXR3ZWVuVmFsdWVWYWxpZGF0aW9uUnVsZSA9IEJldHdlZW5WYWx1ZVZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBEaWdpdFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGUxNCkge1xuICAgIGZ1bmN0aW9uIERpZ2l0VmFsaWRhdGlvblJ1bGUoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlnaXRWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTE0LmNhbGwodGhpcywgbnVsbCwgZnVuY3Rpb24gKG5ld1ZhbHVlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIC9eXFxkKyQvLnRlc3QobmV3VmFsdWUpO1xuICAgICAgfSwgbnVsbCwgJ0RpZ2l0VmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoRGlnaXRWYWxpZGF0aW9uUnVsZSwgX1ZhbGlkYXRpb25SdWxlMTQpO1xuXG4gICAgcmV0dXJuIERpZ2l0VmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLkRpZ2l0VmFsaWRhdGlvblJ1bGUgPSBEaWdpdFZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBOb1NwYWNlc1ZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGUxNSkge1xuICAgIGZ1bmN0aW9uIE5vU3BhY2VzVmFsaWRhdGlvblJ1bGUoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9TcGFjZXNWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTE1LmNhbGwodGhpcywgbnVsbCwgZnVuY3Rpb24gKG5ld1ZhbHVlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIC9eXFxTKiQvLnRlc3QobmV3VmFsdWUpO1xuICAgICAgfSwgbnVsbCwgJ05vU3BhY2VzVmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoTm9TcGFjZXNWYWxpZGF0aW9uUnVsZSwgX1ZhbGlkYXRpb25SdWxlMTUpO1xuXG4gICAgcmV0dXJuIE5vU3BhY2VzVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLk5vU3BhY2VzVmFsaWRhdGlvblJ1bGUgPSBOb1NwYWNlc1ZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBBbHBoYU51bWVyaWNWYWxpZGF0aW9uUnVsZSA9IChmdW5jdGlvbiAoX1ZhbGlkYXRpb25SdWxlMTYpIHtcbiAgICBmdW5jdGlvbiBBbHBoYU51bWVyaWNWYWxpZGF0aW9uUnVsZSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbHBoYU51bWVyaWNWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTE2LmNhbGwodGhpcywgbnVsbCwgZnVuY3Rpb24gKG5ld1ZhbHVlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIC9eW2EtejAtOV0rJC9pLnRlc3QobmV3VmFsdWUpO1xuICAgICAgfSwgbnVsbCwgJ0FscGhhTnVtZXJpY1ZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEFscGhhTnVtZXJpY1ZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUxNik7XG5cbiAgICByZXR1cm4gQWxwaGFOdW1lcmljVmFsaWRhdGlvblJ1bGU7XG4gIH0pKFZhbGlkYXRpb25SdWxlKTtcblxuICBleHBvcnRzLkFscGhhTnVtZXJpY1ZhbGlkYXRpb25SdWxlID0gQWxwaGFOdW1lcmljVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIEFscGhhVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTE3KSB7XG4gICAgZnVuY3Rpb24gQWxwaGFWYWxpZGF0aW9uUnVsZSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbHBoYVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMTcuY2FsbCh0aGlzLCBudWxsLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gL15bYS16XSskL2kudGVzdChuZXdWYWx1ZSk7XG4gICAgICB9LCBudWxsLCAnQWxwaGFWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhBbHBoYVZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUxNyk7XG5cbiAgICByZXR1cm4gQWxwaGFWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuQWxwaGFWYWxpZGF0aW9uUnVsZSA9IEFscGhhVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIEFscGhhT3JXaGl0ZXNwYWNlVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTE4KSB7XG4gICAgZnVuY3Rpb24gQWxwaGFPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbHBoYU9yV2hpdGVzcGFjZVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMTguY2FsbCh0aGlzLCBudWxsLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gL15bYS16XFxzXSskL2kudGVzdChuZXdWYWx1ZSk7XG4gICAgICB9LCBudWxsLCAnQWxwaGFPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhBbHBoYU9yV2hpdGVzcGFjZVZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUxOCk7XG5cbiAgICByZXR1cm4gQWxwaGFPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuQWxwaGFPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZSA9IEFscGhhT3JXaGl0ZXNwYWNlVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIEFscGhhTnVtZXJpY09yV2hpdGVzcGFjZVZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfVmFsaWRhdGlvblJ1bGUxOSkge1xuICAgIGZ1bmN0aW9uIEFscGhhTnVtZXJpY09yV2hpdGVzcGFjZVZhbGlkYXRpb25SdWxlKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFscGhhTnVtZXJpY09yV2hpdGVzcGFjZVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMTkuY2FsbCh0aGlzLCBudWxsLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gL15bYS16MC05XFxzXSskL2kudGVzdChuZXdWYWx1ZSk7XG4gICAgICB9LCBudWxsLCAnQWxwaGFOdW1lcmljT3JXaGl0ZXNwYWNlVmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoQWxwaGFOdW1lcmljT3JXaGl0ZXNwYWNlVmFsaWRhdGlvblJ1bGUsIF9WYWxpZGF0aW9uUnVsZTE5KTtcblxuICAgIHJldHVybiBBbHBoYU51bWVyaWNPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuQWxwaGFOdW1lcmljT3JXaGl0ZXNwYWNlVmFsaWRhdGlvblJ1bGUgPSBBbHBoYU51bWVyaWNPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSA9IChmdW5jdGlvbiAoX1ZhbGlkYXRpb25SdWxlMjApIHtcbiAgICBmdW5jdGlvbiBNZWRpdW1QYXNzd29yZFZhbGlkYXRpb25SdWxlKG1pbmltdW1Db21wbGV4aXR5TGV2ZWwsIHJ1bGVOYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTIwLmNhbGwodGhpcywgbWluaW11bUNvbXBsZXhpdHlMZXZlbCA/IG1pbmltdW1Db21wbGV4aXR5TGV2ZWwgOiAzLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgc3RyZW5ndGggPSAwO1xuXG4gICAgICAgIHN0cmVuZ3RoICs9IC9bQS1aXSsvLnRlc3QobmV3VmFsdWUpID8gMSA6IDA7XG4gICAgICAgIHN0cmVuZ3RoICs9IC9bYS16XSsvLnRlc3QobmV3VmFsdWUpID8gMSA6IDA7XG4gICAgICAgIHN0cmVuZ3RoICs9IC9bMC05XSsvLnRlc3QobmV3VmFsdWUpID8gMSA6IDA7XG4gICAgICAgIHN0cmVuZ3RoICs9IC9bXFxXXSsvLnRlc3QobmV3VmFsdWUpID8gMSA6IDA7XG4gICAgICAgIHJldHVybiBzdHJlbmd0aCA+PSB0aHJlc2hvbGQ7XG4gICAgICB9LCBudWxsLCBydWxlTmFtZSB8fCAnTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhNZWRpdW1QYXNzd29yZFZhbGlkYXRpb25SdWxlLCBfVmFsaWRhdGlvblJ1bGUyMCk7XG5cbiAgICByZXR1cm4gTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZTtcbiAgfSkoVmFsaWRhdGlvblJ1bGUpO1xuXG4gIGV4cG9ydHMuTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSA9IE1lZGl1bVBhc3N3b3JkVmFsaWRhdGlvblJ1bGU7XG5cbiAgdmFyIFN0cm9uZ1Bhc3N3b3JkVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9NZWRpdW1QYXNzd29yZFZhbGlkYXRpb25SdWxlKSB7XG4gICAgZnVuY3Rpb24gU3Ryb25nUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJvbmdQYXNzd29yZFZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX01lZGl1bVBhc3N3b3JkVmFsaWRhdGlvblJ1bGUuY2FsbCh0aGlzLCA0LCAnU3Ryb25nUGFzc3dvcmRWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhTdHJvbmdQYXNzd29yZFZhbGlkYXRpb25SdWxlLCBfTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICByZXR1cm4gU3Ryb25nUGFzc3dvcmRWYWxpZGF0aW9uUnVsZTtcbiAgfSkoTWVkaXVtUGFzc3dvcmRWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5TdHJvbmdQYXNzd29yZFZhbGlkYXRpb25SdWxlID0gU3Ryb25nUGFzc3dvcmRWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTIxKSB7XG4gICAgZnVuY3Rpb24gRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2Uob3RoZXJWYWx1ZSwgZXF1YWxpdHksIG90aGVyVmFsdWVMYWJlbCwgcnVsZU5hbWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZSk7XG5cbiAgICAgIF9WYWxpZGF0aW9uUnVsZTIxLmNhbGwodGhpcywge1xuICAgICAgICBvdGhlclZhbHVlOiBvdGhlclZhbHVlLFxuICAgICAgICBlcXVhbGl0eTogZXF1YWxpdHksXG4gICAgICAgIG90aGVyVmFsdWVMYWJlbDogb3RoZXJWYWx1ZUxhYmVsXG4gICAgICB9LCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICB2YXIgb3RoZXJWYWx1ZSA9IF92YWxpZGF0aW9uVXRpbGl0aWVzLlV0aWxpdGllcy5nZXRWYWx1ZSh0aHJlc2hvbGQub3RoZXJWYWx1ZSk7XG4gICAgICAgIGlmIChuZXdWYWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgb3RoZXJWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0aHJlc2hvbGQuZXF1YWxpdHkgPT09IChuZXdWYWx1ZS5nZXRUaW1lKCkgPT09IG90aGVyVmFsdWUuZ2V0VGltZSgpKTtcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZC5lcXVhbGl0eSA9PT0gKG5ld1ZhbHVlID09PSBvdGhlclZhbHVlKTtcbiAgICAgIH0sIG51bGwsIHJ1bGVOYW1lIHx8ICdFcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhFcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZSwgX1ZhbGlkYXRpb25SdWxlMjEpO1xuXG4gICAgcmV0dXJuIEVxdWFsaXR5VmFsaWRhdGlvblJ1bGVCYXNlO1xuICB9KShWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZSA9IEVxdWFsaXR5VmFsaWRhdGlvblJ1bGVCYXNlO1xuXG4gIHZhciBFcXVhbGl0eVZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UpIHtcbiAgICBmdW5jdGlvbiBFcXVhbGl0eVZhbGlkYXRpb25SdWxlKG90aGVyVmFsdWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcXVhbGl0eVZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX0VxdWFsaXR5VmFsaWRhdGlvblJ1bGVCYXNlLmNhbGwodGhpcywgb3RoZXJWYWx1ZSwgdHJ1ZSwgbnVsbCwgJ0VxdWFsaXR5VmFsaWRhdGlvblJ1bGUnKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoRXF1YWxpdHlWYWxpZGF0aW9uUnVsZSwgX0VxdWFsaXR5VmFsaWRhdGlvblJ1bGVCYXNlKTtcblxuICAgIHJldHVybiBFcXVhbGl0eVZhbGlkYXRpb25SdWxlO1xuICB9KShFcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZSk7XG5cbiAgZXhwb3J0cy5FcXVhbGl0eVZhbGlkYXRpb25SdWxlID0gRXF1YWxpdHlWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlID0gKGZ1bmN0aW9uIChfRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UyKSB7XG4gICAgZnVuY3Rpb24gRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlKG90aGVyVmFsdWUsIG90aGVyTGFiZWwpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcXVhbGl0eVdpdGhPdGhlckxhYmVsVmFsaWRhdGlvblJ1bGUpO1xuXG4gICAgICBfRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UyLmNhbGwodGhpcywgb3RoZXJWYWx1ZSwgdHJ1ZSwgb3RoZXJMYWJlbCwgJ0VxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhFcXVhbGl0eVdpdGhPdGhlckxhYmVsVmFsaWRhdGlvblJ1bGUsIF9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTIpO1xuXG4gICAgcmV0dXJuIEVxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZTtcbiAgfSkoRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UpO1xuXG4gIGV4cG9ydHMuRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlID0gRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBJbkVxdWFsaXR5VmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTMpIHtcbiAgICBmdW5jdGlvbiBJbkVxdWFsaXR5VmFsaWRhdGlvblJ1bGUob3RoZXJWYWx1ZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluRXF1YWxpdHlWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTMuY2FsbCh0aGlzLCBvdGhlclZhbHVlLCBmYWxzZSwgbnVsbCwgJ0luRXF1YWxpdHlWYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhJbkVxdWFsaXR5VmFsaWRhdGlvblJ1bGUsIF9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTMpO1xuXG4gICAgcmV0dXJuIEluRXF1YWxpdHlWYWxpZGF0aW9uUnVsZTtcbiAgfSkoRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UpO1xuXG4gIGV4cG9ydHMuSW5FcXVhbGl0eVZhbGlkYXRpb25SdWxlID0gSW5FcXVhbGl0eVZhbGlkYXRpb25SdWxlO1xuXG4gIHZhciBJbkVxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZSA9IChmdW5jdGlvbiAoX0VxdWFsaXR5VmFsaWRhdGlvblJ1bGVCYXNlNCkge1xuICAgIGZ1bmN0aW9uIEluRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlKG90aGVyVmFsdWUsIG90aGVyTGFiZWwpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbkVxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZSk7XG5cbiAgICAgIF9FcXVhbGl0eVZhbGlkYXRpb25SdWxlQmFzZTQuY2FsbCh0aGlzLCBvdGhlclZhbHVlLCBmYWxzZSwgb3RoZXJMYWJlbCwgJ0luRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlJyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEluRXF1YWxpdHlXaXRoT3RoZXJMYWJlbFZhbGlkYXRpb25SdWxlLCBfRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2U0KTtcblxuICAgIHJldHVybiBJbkVxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZTtcbiAgfSkoRXF1YWxpdHlWYWxpZGF0aW9uUnVsZUJhc2UpO1xuXG4gIGV4cG9ydHMuSW5FcXVhbGl0eVdpdGhPdGhlckxhYmVsVmFsaWRhdGlvblJ1bGUgPSBJbkVxdWFsaXR5V2l0aE90aGVyTGFiZWxWYWxpZGF0aW9uUnVsZTtcblxuICB2YXIgSW5Db2xsZWN0aW9uVmFsaWRhdGlvblJ1bGUgPSAoZnVuY3Rpb24gKF9WYWxpZGF0aW9uUnVsZTIyKSB7XG4gICAgZnVuY3Rpb24gSW5Db2xsZWN0aW9uVmFsaWRhdGlvblJ1bGUoY29sbGVjdGlvbikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluQ29sbGVjdGlvblZhbGlkYXRpb25SdWxlKTtcblxuICAgICAgX1ZhbGlkYXRpb25SdWxlMjIuY2FsbCh0aGlzLCBjb2xsZWN0aW9uLCBmdW5jdGlvbiAobmV3VmFsdWUsIHRocmVzaG9sZCkge1xuICAgICAgICB2YXIgY29sbGVjdGlvbiA9IF92YWxpZGF0aW9uVXRpbGl0aWVzLlV0aWxpdGllcy5nZXRWYWx1ZSh0aHJlc2hvbGQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IGNvbGxlY3Rpb25baV0pIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sIG51bGwsICdJbkNvbGxlY3Rpb25WYWxpZGF0aW9uUnVsZScpO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhJbkNvbGxlY3Rpb25WYWxpZGF0aW9uUnVsZSwgX1ZhbGlkYXRpb25SdWxlMjIpO1xuXG4gICAgcmV0dXJuIEluQ29sbGVjdGlvblZhbGlkYXRpb25SdWxlO1xuICB9KShWYWxpZGF0aW9uUnVsZSk7XG5cbiAgZXhwb3J0cy5JbkNvbGxlY3Rpb25WYWxpZGF0aW9uUnVsZSA9IEluQ29sbGVjdGlvblZhbGlkYXRpb25SdWxlO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJywgJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nLCAnYXVyZWxpYS10ZW1wbGF0aW5nJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfYXVyZWxpYURlcGVuZGVuY3lJbmplY3Rpb24sIF9hdXJlbGlhVGVtcGxhdGluZykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlKGVsZW1lbnQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUpO1xuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5wcm9jZXNzZWRWYWxpZGF0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMudmlld1N0cmF0ZWd5ID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX1ZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlID0gVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGU7XG5cbiAgICBfVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUucHJvdG90eXBlLnZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIHZhbHVlQ2hhbmdlZChuZXdWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMudmFsdWUgPT09IG51bGwgfHwgdGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzLnByb2Nlc3NlZFZhbGlkYXRpb24gPSB0aGlzLnZhbHVlO1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN1YnNjcmliZUNoYW5nZWRIYW5kbGVycyh0aGlzLmVsZW1lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUucHJvdG90eXBlLnN1YnNjcmliZUNoYW5nZWRIYW5kbGVycyA9IGZ1bmN0aW9uIHN1YnNjcmliZUNoYW5nZWRIYW5kbGVycyhjdXJyZW50RWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy52aWV3U3RyYXRlZ3kgPSB0aGlzLnZhbHVlLmNvbmZpZy5nZXRWaWV3U3RyYXRlZ3koKTtcbiAgICAgIHZhciB2YWxpZGF0aW9uUHJvcGVydHkgPSB0aGlzLnZpZXdTdHJhdGVneS5nZXRWYWxpZGF0aW9uUHJvcGVydHkodGhpcy52YWx1ZSwgY3VycmVudEVsZW1lbnQpO1xuICAgICAgaWYgKHZhbGlkYXRpb25Qcm9wZXJ0eSAhPT0gbnVsbCAmJiB2YWxpZGF0aW9uUHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnZpZXdTdHJhdGVneS5wcmVwYXJlRWxlbWVudCh2YWxpZGF0aW9uUHJvcGVydHksIGN1cnJlbnRFbGVtZW50KTtcbiAgICAgICAgdmFsaWRhdGlvblByb3BlcnR5Lm9uVmFsaWRhdGUoZnVuY3Rpb24gKHZwKSB7XG4gICAgICAgICAgX3RoaXMudmlld1N0cmF0ZWd5LnVwZGF0ZUVsZW1lbnQodnAsIGN1cnJlbnRFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50RWxlbWVudC5jaGlsZHJlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVDaGFuZ2VkSGFuZGxlcnMoY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUucHJvdG90eXBlLmRldGFjaGVkID0gZnVuY3Rpb24gZGV0YWNoZWQoKSB7fTtcblxuICAgIF9WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZS5wcm90b3R5cGUuYXR0YWNoZWQgPSBmdW5jdGlvbiBhdHRhY2hlZCgpIHtcbiAgICAgIGlmICh0aGlzLnByb2Nlc3NlZFZhbGlkYXRpb24gPT09IG51bGwgfHwgdGhpcy5wcm9jZXNzZWRWYWxpZGF0aW9uID09PSB1bmRlZmluZWQpIHRoaXMudmFsdWVDaGFuZ2VkKHRoaXMudmFsdWUpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZSA9IF9hdXJlbGlhRGVwZW5kZW5jeUluamVjdGlvbi5pbmplY3QoRWxlbWVudCkoVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUpIHx8IFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlO1xuICAgIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlID0gX2F1cmVsaWFUZW1wbGF0aW5nLmN1c3RvbUF0dHJpYnV0ZSgndmFsaWRhdGUnKShWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZSkgfHwgVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGU7XG4gICAgcmV0dXJuIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGUgPSBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZTtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cyddLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5QmFzZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3lCYXNlKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5QmFzZSk7XG5cbiAgICAgIHRoaXMuYmluZGluZ1BhdGhBdHRyaWJ1dGVzID0gWyd2YWxpZGF0ZScsICd2YWx1ZS5iaW5kJywgJ3ZhbHVlLnR3by13YXknXTtcbiAgICB9XG5cbiAgICBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2UucHJvdG90eXBlLmdldFZhbGlkYXRpb25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFZhbGlkYXRpb25Qcm9wZXJ0eSh2YWxpZGF0aW9uLCBlbGVtZW50KSB7XG4gICAgICB2YXIgYXR0cyA9IGVsZW1lbnQuYXR0cmlidXRlcztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5iaW5kaW5nUGF0aEF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmJpbmRpbmdQYXRoQXR0cmlidXRlc1tpXTtcbiAgICAgICAgaWYgKGF0dHNbYXR0cmlidXRlTmFtZV0pIHtcbiAgICAgICAgICB2YXIgYmluZGluZ1BhdGggPSBhdHRzW2F0dHJpYnV0ZU5hbWVdLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICBpZiAoYmluZGluZ1BhdGguaW5kZXhPZignfCcpICE9IC0xKSBiaW5kaW5nUGF0aCA9IGJpbmRpbmdQYXRoLnNwbGl0KCd8JylbMF0udHJpbSgpO1xuICAgICAgICAgIHZhciB2YWxpZGF0aW9uUHJvcGVydHkgPSB2YWxpZGF0aW9uLnJlc3VsdC5wcm9wZXJ0aWVzW2JpbmRpbmdQYXRoXTtcblxuICAgICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09ICd2YWxpZGF0ZScgJiYgKHZhbGlkYXRpb25Qcm9wZXJ0eSA9PT0gbnVsbCB8fCB2YWxpZGF0aW9uUHJvcGVydHkgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24uZW5zdXJlKGJpbmRpbmdQYXRoKTtcbiAgICAgICAgICAgIHZhbGlkYXRpb25Qcm9wZXJ0eSA9IHZhbGlkYXRpb24ucmVzdWx0LnByb3BlcnRpZXNbYmluZGluZ1BhdGhdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvblByb3BlcnR5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3lCYXNlLnByb3RvdHlwZS5wcmVwYXJlRWxlbWVudCA9IGZ1bmN0aW9uIHByZXBhcmVFbGVtZW50KHZhbGlkYXRpb25Qcm9wZXJ0eSwgZWxlbWVudCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1ZpZXcgc3RyYXRlZ3kgbXVzdCBpbXBsZW1lbnQgcHJlcGFyZUVsZW1lbnQodmFsaWRhdGlvblByb3BlcnR5LCBlbGVtZW50KScpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2UucHJvdG90eXBlLnVwZGF0ZUVsZW1lbnQgPSBmdW5jdGlvbiB1cGRhdGVFbGVtZW50KHZhbGlkYXRpb25Qcm9wZXJ0eSwgZWxlbWVudCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1ZpZXcgc3RyYXRlZ3kgbXVzdCBpbXBsZW1lbnQgdXBkYXRlRWxlbWVudCh2YWxpZGF0aW9uUHJvcGVydHksIGVsZW1lbnQpJyk7XG4gICAgfTtcblxuICAgIHJldHVybiBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2U7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2UgPSBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneUJhc2U7XG5cbiAgdmFyIFRXQm9vdHN0cmFwVmlld1N0cmF0ZWd5ID0gKGZ1bmN0aW9uIChfVmFsaWRhdGVDdXN0b21BdHRyaWJ1dGVWaWV3U3RyYXRlZ3lCYXNlKSB7XG4gICAgZnVuY3Rpb24gVFdCb290c3RyYXBWaWV3U3RyYXRlZ3koYXBwZW5kTWVzc2FnZVRvSW5wdXQsIGFwcGVuZE1lc3NhZ2VUb0xhYmVsLCBoZWxwQmxvY2tDbGFzcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRXQm9vdHN0cmFwVmlld1N0cmF0ZWd5KTtcblxuICAgICAgX1ZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5QmFzZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hcHBlbmRNZXNzYWdlVG9JbnB1dCA9IGFwcGVuZE1lc3NhZ2VUb0lucHV0O1xuICAgICAgdGhpcy5hcHBlbmRNZXNzYWdlVG9MYWJlbCA9IGFwcGVuZE1lc3NhZ2VUb0xhYmVsO1xuICAgICAgdGhpcy5oZWxwQmxvY2tDbGFzcyA9IGhlbHBCbG9ja0NsYXNzO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhUV0Jvb3RzdHJhcFZpZXdTdHJhdGVneSwgX1ZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5QmFzZSk7XG5cbiAgICBUV0Jvb3RzdHJhcFZpZXdTdHJhdGVneS5wcm90b3R5cGUuc2VhcmNoRm9ybUdyb3VwID0gZnVuY3Rpb24gc2VhcmNoRm9ybUdyb3VwKGN1cnJlbnRFbGVtZW50LCBjdXJyZW50RGVwdGgpIHtcbiAgICAgIGlmIChjdXJyZW50RGVwdGggPT09IDUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudEVsZW1lbnQuY2xhc3NMaXN0ICYmIGN1cnJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZm9ybS1ncm91cCcpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnNlYXJjaEZvcm1Hcm91cChjdXJyZW50RWxlbWVudC5wYXJlbnROb2RlLCAxICsgY3VycmVudERlcHRoKTtcbiAgICB9O1xuXG4gICAgVFdCb290c3RyYXBWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmZpbmRMYWJlbHMgPSBmdW5jdGlvbiBmaW5kTGFiZWxzKGZvcm1Hcm91cCwgaW5wdXRJZCkge1xuICAgICAgdmFyIGxhYmVscyA9IFtdO1xuICAgICAgdGhpcy5maW5kTGFiZWxzUmVjdXJzaXZlbHkoZm9ybUdyb3VwLCBpbnB1dElkLCBsYWJlbHMsIDApO1xuICAgICAgcmV0dXJuIGxhYmVscztcbiAgICB9O1xuXG4gICAgVFdCb290c3RyYXBWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmZpbmRMYWJlbHNSZWN1cnNpdmVseSA9IGZ1bmN0aW9uIGZpbmRMYWJlbHNSZWN1cnNpdmVseShjdXJyZW50RWxlbWVudCwgaW5wdXRJZCwgY3VycmVudExhYmVscywgY3VycmVudERlcHRoKSB7XG4gICAgICBpZiAoY3VycmVudERlcHRoID09PSA1KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50RWxlbWVudC5ub2RlTmFtZSA9PT0gJ0xBQkVMJyAmJiAoY3VycmVudEVsZW1lbnQuYXR0cmlidXRlc1snZm9yJ10gJiYgY3VycmVudEVsZW1lbnQuYXR0cmlidXRlc1snZm9yJ10udmFsdWUgPT09IGlucHV0SWQgfHwgIWN1cnJlbnRFbGVtZW50LmF0dHJpYnV0ZXNbJ2ZvciddKSkge1xuICAgICAgICBjdXJyZW50TGFiZWxzLnB1c2goY3VycmVudEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRFbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZmluZExhYmVsc1JlY3Vyc2l2ZWx5KGN1cnJlbnRFbGVtZW50LmNoaWxkcmVuW2ldLCBpbnB1dElkLCBjdXJyZW50TGFiZWxzLCAxICsgY3VycmVudERlcHRoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVFdCb290c3RyYXBWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmFwcGVuZE1lc3NhZ2VUb0VsZW1lbnQgPSBmdW5jdGlvbiBhcHBlbmRNZXNzYWdlVG9FbGVtZW50KGVsZW1lbnQsIHZhbGlkYXRpb25Qcm9wZXJ0eSkge1xuICAgICAgdmFyIGhlbHBCbG9jayA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICBpZiAoaGVscEJsb2NrKSB7XG4gICAgICAgIGlmICghaGVscEJsb2NrLmNsYXNzTGlzdCkge1xuICAgICAgICAgIGhlbHBCbG9jayA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoIWhlbHBCbG9jay5jbGFzc0xpc3QuY29udGFpbnModGhpcy5oZWxwQmxvY2tDbGFzcykpIHtcbiAgICAgICAgICBoZWxwQmxvY2sgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaGVscEJsb2NrKSB7XG4gICAgICAgIGhlbHBCbG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgaGVscEJsb2NrLmNsYXNzTGlzdC5hZGQoJ2hlbHAtYmxvY2snKTtcbiAgICAgICAgaGVscEJsb2NrLmNsYXNzTGlzdC5hZGQodGhpcy5oZWxwQmxvY2tDbGFzcyk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGhlbHBCbG9jaywgZWxlbWVudC5uZXh0U2libGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGhlbHBCbG9jayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh2YWxpZGF0aW9uUHJvcGVydHkpIGhlbHBCbG9jay50ZXh0Q29udGVudCA9IHZhbGlkYXRpb25Qcm9wZXJ0eS5tZXNzYWdlO2Vsc2UgaGVscEJsb2NrLnRleHRDb250ZW50ID0gJyc7XG4gICAgfTtcblxuICAgIFRXQm9vdHN0cmFwVmlld1N0cmF0ZWd5LnByb3RvdHlwZS5hcHBlbmRVSVZpc3VhbHMgPSBmdW5jdGlvbiBhcHBlbmRVSVZpc3VhbHModmFsaWRhdGlvblByb3BlcnR5LCBjdXJyZW50RWxlbWVudCkge1xuICAgICAgdmFyIGZvcm1Hcm91cCA9IHRoaXMuc2VhcmNoRm9ybUdyb3VwKGN1cnJlbnRFbGVtZW50LCAwKTtcbiAgICAgIGlmIChmb3JtR3JvdXApIHtcbiAgICAgICAgaWYgKHZhbGlkYXRpb25Qcm9wZXJ0eSAmJiB2YWxpZGF0aW9uUHJvcGVydHkuaXNEaXJ0eSkge1xuICAgICAgICAgIGlmICh2YWxpZGF0aW9uUHJvcGVydHkuaXNWYWxpZCkge1xuICAgICAgICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy13YXJuaW5nJyk7XG4gICAgICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnaGFzLXN1Y2Nlc3MnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1zdWNjZXNzJyk7XG4gICAgICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnaGFzLXdhcm5pbmcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy13YXJuaW5nJyk7XG4gICAgICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1zdWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXBwZW5kTWVzc2FnZVRvSW5wdXQpIHtcbiAgICAgICAgICB0aGlzLmFwcGVuZE1lc3NhZ2VUb0VsZW1lbnQoY3VycmVudEVsZW1lbnQsIHZhbGlkYXRpb25Qcm9wZXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXBwZW5kTWVzc2FnZVRvTGFiZWwpIHtcbiAgICAgICAgICB2YXIgbGFiZWxzID0gdGhpcy5maW5kTGFiZWxzKGZvcm1Hcm91cCwgY3VycmVudEVsZW1lbnQuaWQpO1xuICAgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBsYWJlbHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBsYWJlbHNbaWldO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRNZXNzYWdlVG9FbGVtZW50KGxhYmVsLCB2YWxpZGF0aW9uUHJvcGVydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBUV0Jvb3RzdHJhcFZpZXdTdHJhdGVneS5wcm90b3R5cGUucHJlcGFyZUVsZW1lbnQgPSBmdW5jdGlvbiBwcmVwYXJlRWxlbWVudCh2YWxpZGF0aW9uUHJvcGVydHksIGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuYXBwZW5kVUlWaXN1YWxzKG51bGwsIGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBUV0Jvb3RzdHJhcFZpZXdTdHJhdGVneS5wcm90b3R5cGUudXBkYXRlRWxlbWVudCA9IGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQodmFsaWRhdGlvblByb3BlcnR5LCBlbGVtZW50KSB7XG4gICAgICB0aGlzLmFwcGVuZFVJVmlzdWFscyh2YWxpZGF0aW9uUHJvcGVydHksIGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gVFdCb290c3RyYXBWaWV3U3RyYXRlZ3k7XG4gIH0pKFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5QmFzZSk7XG5cbiAgZXhwb3J0cy5UV0Jvb3RzdHJhcFZpZXdTdHJhdGVneSA9IFRXQm9vdHN0cmFwVmlld1N0cmF0ZWd5O1xuXG4gIHZhciBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneSA9IGZ1bmN0aW9uIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneSk7XG4gIH07XG5cbiAgZXhwb3J0cy5WYWxpZGF0ZUN1c3RvbUF0dHJpYnV0ZVZpZXdTdHJhdGVneSA9IFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5O1xuXG4gIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5LlRXQm9vdHN0cmFwQXBwZW5kVG9JbnB1dCA9IG5ldyBUV0Jvb3RzdHJhcFZpZXdTdHJhdGVneSh0cnVlLCBmYWxzZSwgJ2F1cmVsaWEtdmFsaWRhdGlvbi1tZXNzYWdlJyk7XG4gIFZhbGlkYXRlQ3VzdG9tQXR0cmlidXRlVmlld1N0cmF0ZWd5LlRXQm9vdHN0cmFwQXBwZW5kVG9NZXNzYWdlID0gbmV3IFRXQm9vdHN0cmFwVmlld1N0cmF0ZWd5KGZhbHNlLCB0cnVlLCAnYXVyZWxpYS12YWxpZGF0aW9uLW1lc3NhZ2UnKTtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cycsICdhdXJlbGlhLW1ldGFkYXRhJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfYXVyZWxpYU1ldGFkYXRhKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbiAgZXhwb3J0cy5lbnN1cmUgPSBlbnN1cmU7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFZhbGlkYXRpb25NZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbk1ldGFkYXRhKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25NZXRhZGF0YSk7XG5cbiAgICAgIHRoaXMucHJvcGVydGllcyA9IFtdO1xuICAgIH1cblxuICAgIFZhbGlkYXRpb25NZXRhZGF0YS5wcm90b3R5cGUuZ2V0T3JDcmVhdGVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldE9yQ3JlYXRlUHJvcGVydHkocHJvcGVydHlOYW1lKSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSB0aGlzLnByb3BlcnRpZXMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geC5wcm9wZXJ0eU5hbWUgPT09IHByb3BlcnR5TmFtZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHByb3BlcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcGVydHkgPSBuZXcgVmFsaWRhdGlvblByb3BlcnR5TWV0YWRhdGEocHJvcGVydHlOYW1lKTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uTWV0YWRhdGEucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gc2V0dXAodmFsaWRhdGlvbikge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgIHByb3BlcnR5LnNldHVwKHZhbGlkYXRpb24pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhWYWxpZGF0aW9uTWV0YWRhdGEsIG51bGwsIFt7XG4gICAgICBrZXk6ICdtZXRhZGF0YUtleScsXG4gICAgICB2YWx1ZTogJ2F1cmVsaWE6dmFsaWRhdGlvbicsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25NZXRhZGF0YTtcbiAgfSkoKTtcblxuICBleHBvcnRzLlZhbGlkYXRpb25NZXRhZGF0YSA9IFZhbGlkYXRpb25NZXRhZGF0YTtcblxuICB2YXIgVmFsaWRhdGlvblByb3BlcnR5TWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25Qcm9wZXJ0eU1ldGFkYXRhKHByb3BlcnR5TmFtZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25Qcm9wZXJ0eU1ldGFkYXRhKTtcblxuICAgICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICB0aGlzLnNldHVwU3RlcHMgPSBbXTtcbiAgICB9XG5cbiAgICBWYWxpZGF0aW9uUHJvcGVydHlNZXRhZGF0YS5wcm90b3R5cGUuYWRkU2V0dXBTdGVwID0gZnVuY3Rpb24gYWRkU2V0dXBTdGVwKHNldHVwU3RlcCkge1xuICAgICAgdGhpcy5zZXR1cFN0ZXBzLnB1c2goc2V0dXBTdGVwKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblByb3BlcnR5TWV0YWRhdGEucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gc2V0dXAodmFsaWRhdGlvbikge1xuICAgICAgdmFsaWRhdGlvbi5lbnN1cmUodGhpcy5wcm9wZXJ0eU5hbWUpO1xuICAgICAgdGhpcy5zZXR1cFN0ZXBzLmZvckVhY2goZnVuY3Rpb24gKHNldHVwU3RlcCkge1xuICAgICAgICBzZXR1cFN0ZXAodmFsaWRhdGlvbik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25Qcm9wZXJ0eU1ldGFkYXRhO1xuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZShzZXR1cFN0ZXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICB2YXIgdmFsaWRhdGlvbk1ldGFkYXRhID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPckNyZWF0ZU93bihWYWxpZGF0aW9uTWV0YWRhdGEubWV0YWRhdGFLZXksIFZhbGlkYXRpb25NZXRhZGF0YSwgdGFyZ2V0KTtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHZhbGlkYXRpb25NZXRhZGF0YS5nZXRPckNyZWF0ZVByb3BlcnR5KHByb3BlcnR5TmFtZSk7XG4gICAgICBwcm9wZXJ0eS5hZGRTZXR1cFN0ZXAoc2V0dXBTdGVwKTtcbiAgICB9O1xuICB9XG59KTsiLCIvKiAqLyBcbmRlZmluZShbJ2V4cG9ydHMnLCAnYXVyZWxpYS1tZXRhZGF0YScsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tZ3JvdXAtYnVpbGRlcicsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcmVzdWx0JywgJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1sb2NhbGUnLCAnLi4vdmFsaWRhdGlvbi9kZWNvcmF0b3JzJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfYXVyZWxpYU1ldGFkYXRhLCBfdmFsaWRhdGlvblZhbGlkYXRpb25Hcm91cEJ1aWxkZXIsIF92YWxpZGF0aW9uVmFsaWRhdGlvblJlc3VsdCwgX3ZhbGlkYXRpb25WYWxpZGF0aW9uTG9jYWxlLCBfdmFsaWRhdGlvbkRlY29yYXRvcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFZhbGlkYXRpb25Hcm91cCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkdyb3VwKHN1YmplY3QsIG9ic2VydmVyTG9jYXRvciwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsaWRhdGlvbkdyb3VwKTtcblxuICAgICAgdGhpcy5yZXN1bHQgPSBuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUmVzdWx0LlZhbGlkYXRpb25SZXN1bHQoKTtcbiAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICB0aGlzLnZhbGlkYXRpb25Qcm9wZXJ0aWVzID0gW107XG4gICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgIHRoaXMuYnVpbGRlciA9IG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25Hcm91cEJ1aWxkZXIuVmFsaWRhdGlvbkdyb3VwQnVpbGRlcihvYnNlcnZlckxvY2F0b3IsIHRoaXMpO1xuICAgICAgdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLm9uUHJvcGVydHlWYWxpZGF0aW9uQ2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLmlzVmFsaWRhdGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5vbkRlc3Ryb3kgPSBjb25maWcub25Mb2NhbGVDaGFuZ2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMudmFsaWRhdGUoZmFsc2UsIHRydWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciB2YWxpZGF0aW9uTWV0YWRhdGEgPSBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmdldE93bihfdmFsaWRhdGlvbkRlY29yYXRvcnMuVmFsaWRhdGlvbk1ldGFkYXRhLm1ldGFkYXRhS2V5LCB0aGlzLnN1YmplY3QpO1xuICAgICAgaWYgKHZhbGlkYXRpb25NZXRhZGF0YSkge1xuICAgICAgICB2YWxpZGF0aW9uTWV0YWRhdGEuc2V0dXAodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnZhbGlkYXRpb25Qcm9wZXJ0aWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvblByb3BlcnRpZXNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5vbkRlc3Ryb3koKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy52YWxpZGF0aW9uUHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHByb3AuY2xlYXIoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZXN1bHQuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5vbkJyZWV6ZUVudGl0eSA9IGZ1bmN0aW9uIG9uQnJlZXplRW50aXR5KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBicmVlemVFbnRpdHkgPSB0aGlzLnN1YmplY3Q7XG4gICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgdGhpcy5vblByb3BlcnR5VmFsaWRhdGUoZnVuY3Rpb24gKHByb3BlcnR5QmluZGluZ1BhdGgpIHtcbiAgICAgICAgX3RoaXMyLnBhc3NlcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYnJlZXplRW50aXR5LmVudGl0eUFzcGVjdC52YWxpZGF0ZVByb3BlcnR5KHByb3BlcnR5QmluZGluZ1BhdGgpO1xuICAgICAgICAgIHZhciBlcnJvcnMgPSBicmVlemVFbnRpdHkuZW50aXR5QXNwZWN0LmdldFZhbGlkYXRpb25FcnJvcnMocHJvcGVydHlCaW5kaW5nUGF0aCk7XG4gICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO2Vsc2UgcmV0dXJuIGVycm9yc1swXS5lcnJvck1lc3NhZ2U7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9uVmFsaWRhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBicmVlemVFbnRpdHkuZW50aXR5QXNwZWN0LnZhbGlkYXRlRW50aXR5KCk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0pO1xuXG4gICAgICBicmVlemVFbnRpdHkuZW50aXR5QXNwZWN0LnZhbGlkYXRpb25FcnJvcnNDaGFuZ2VkLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJyZWV6ZUVudGl0eS5lbnRpdHlBc3BlY3QuZ2V0VmFsaWRhdGlvbkVycm9ycygpLmZvckVhY2goZnVuY3Rpb24gKHZhbGlkYXRpb25FcnJvcikge1xuICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSB2YWxpZGF0aW9uRXJyb3IucHJvcGVydHlOYW1lO1xuICAgICAgICAgIGlmICghbWUucmVzdWx0LnByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSkge1xuICAgICAgICAgICAgbWUuZW5zdXJlKHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGN1cnJlbnRSZXN1bHRQcm9wID0gbWUucmVzdWx0LmFkZFByb3BlcnR5KHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgaWYgKGN1cnJlbnRSZXN1bHRQcm9wLmlzVmFsaWQpIHtcblxuICAgICAgICAgICAgY3VycmVudFJlc3VsdFByb3Auc2V0VmFsaWRpdHkoe1xuICAgICAgICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogdmFsaWRhdGlvbkVycm9yLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgZmFpbGluZ1J1bGU6ICdicmVlemUnLFxuICAgICAgICAgICAgICBsYXRlc3RWYWx1ZTogY3VycmVudFJlc3VsdFByb3AubGF0ZXN0VmFsdWVcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JjZURpcnR5ID0gYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzBdO1xuICAgICAgdmFyIGZvcmNlRXhlY3V0aW9uID0gYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICB0aGlzLmlzVmFsaWRhdGluZyA9IHRydWU7XG4gICAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh0cnVlKTtcblxuICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRvclByb3BlcnR5ID0gX3RoaXMzLnZhbGlkYXRpb25Qcm9wZXJ0aWVzW2ldO1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdG9yUHJvcGVydHkudmFsaWRhdGVDdXJyZW50VmFsdWUoZm9yY2VEaXJ0eSwgZm9yY2VFeGVjdXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnZhbGlkYXRpb25Qcm9wZXJ0aWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIF9sb29wKGkpO1xuICAgICAgfVxuICAgICAgcHJvbWlzZSA9IHByb21pc2VbJ2NhdGNoJ10oZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnU2hvdWxkIG5ldmVyIGdldCBoZXJlOiBhIHZhbGlkYXRpb24gcHJvcGVydHkgc2hvdWxkIGFsd2F5cyByZXNvbHZlIHRvIHRydWUvZmFsc2UhJyk7XG4gICAgICAgIHRocm93IEVycm9yKCdTaG91bGQgbmV2ZXIgZ2V0IGhlcmU6IGEgdmFsaWRhdGlvbiBwcm9wZXJ0eSBzaG91bGQgYWx3YXlzIHJlc29sdmUgdG8gdHJ1ZS9mYWxzZSEnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLm9uVmFsaWRhdGVDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAob25WYWxpZGF0ZUNhbGxiYWNrKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuY29uZmlnLmxvY2FsZSgpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9uVmFsaWRhdGVDYWxsYmFjay52YWxpZGF0aW9uRnVuY3Rpb24oKSkudGhlbihmdW5jdGlvbiAoY2FsbGJhY2tSZXN1bHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gY2FsbGJhY2tSZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpczMucmVzdWx0LnByb3BlcnRpZXNbcHJvcF0pIHtcbiAgICAgICAgICAgICAgICBfdGhpczMuZW5zdXJlKHByb3ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciByZXN1bHRQcm9wID0gX3RoaXMzLnJlc3VsdC5hZGRQcm9wZXJ0eShwcm9wKTtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrUmVzdWx0W3Byb3BdO1xuICAgICAgICAgICAgICB2YXIgbmV3UHJvcFJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZTogcmVzdWx0UHJvcC5sYXRlc3RWYWx1ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlIHx8IHJlc3VsdCA9PT0gbnVsbCB8fCByZXN1bHQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRQcm9wLmlzVmFsaWQgJiYgcmVzdWx0UHJvcC5mYWlsaW5nUnVsZSA9PT0gJ29uVmFsaWRhdGVDYWxsYmFjaycpIHtcbiAgICAgICAgICAgICAgICAgIG5ld1Byb3BSZXN1bHQuZmFpbGluZ1J1bGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgbmV3UHJvcFJlc3VsdC5tZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgICBuZXdQcm9wUmVzdWx0LmlzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0UHJvcC5zZXRWYWxpZGl0eShuZXdQcm9wUmVzdWx0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFByb3AuaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgbmV3UHJvcFJlc3VsdC5mYWlsaW5nUnVsZSA9ICdvblZhbGlkYXRlQ2FsbGJhY2snO1xuICAgICAgICAgICAgICAgICAgbmV3UHJvcFJlc3VsdC5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UHJvcFJlc3VsdC5tZXNzYWdlID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UHJvcFJlc3VsdC5tZXNzYWdlID0gbG9jYWxlLnRyYW5zbGF0ZShuZXdQcm9wUmVzdWx0LmZhaWxpbmdSdWxlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJlc3VsdFByb3Auc2V0VmFsaWRpdHkobmV3UHJvcFJlc3VsdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpczMucmVzdWx0LmNoZWNrVmFsaWRpdHkoKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgX3RoaXMzLnJlc3VsdC5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAob25WYWxpZGF0ZUNhbGxiYWNrLnZhbGlkYXRpb25GdW5jdGlvbkZhaWxlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIG9uVmFsaWRhdGVDYWxsYmFjay52YWxpZGF0aW9uRnVuY3Rpb25GYWlsZWRDYWxsYmFjayhhLCBiLCBjLCBkLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuaXNWYWxpZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChfdGhpczMucmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF90aGlzMy5yZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChfdGhpczMucmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5vblZhbGlkYXRlID0gZnVuY3Rpb24gb25WYWxpZGF0ZSh2YWxpZGF0aW9uRnVuY3Rpb24sIHZhbGlkYXRpb25GdW5jdGlvbkZhaWxlZENhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uVmFsaWRhdGVDYWxsYmFja3MucHVzaCh7IHZhbGlkYXRpb25GdW5jdGlvbjogdmFsaWRhdGlvbkZ1bmN0aW9uLCB2YWxpZGF0aW9uRnVuY3Rpb25GYWlsZWRDYWxsYmFjazogdmFsaWRhdGlvbkZ1bmN0aW9uRmFpbGVkQ2FsbGJhY2sgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5vblByb3BlcnR5VmFsaWRhdGUgPSBmdW5jdGlvbiBvblByb3BlcnR5VmFsaWRhdGUodmFsaWRhdGlvbkZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLm9uUHJvcGVydHlWYWxpZGF0aW9uQ2FsbGJhY2tzLnB1c2godmFsaWRhdGlvbkZ1bmN0aW9uKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmVuc3VyZSA9IGZ1bmN0aW9uIGVuc3VyZShiaW5kaW5nUGF0aCwgY29uZmlnQ2FsbGJhY2spIHtcbiAgICAgIHRoaXMuYnVpbGRlci5lbnN1cmUoYmluZGluZ1BhdGgsIGNvbmZpZ0NhbGxiYWNrKTtcbiAgICAgIHRoaXMub25Qcm9wZXJ0eVZhbGlkYXRpb25DYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soYmluZGluZ1BhdGgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5pc05vdEVtcHR5ID0gZnVuY3Rpb24gaXNOb3RFbXB0eSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaXNOb3RFbXB0eSgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmNhbkJlRW1wdHkgPSBmdW5jdGlvbiBjYW5CZUVtcHR5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5jYW5CZUVtcHR5KCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyA9IGZ1bmN0aW9uIGlzR3JlYXRlclRoYW5PckVxdWFsVG8obWluaW11bVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmlzR3JlYXRlclRoYW5PckVxdWFsVG8obWluaW11bVZhbHVlKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5pc0dyZWF0ZXJUaGFuID0gZnVuY3Rpb24gaXNHcmVhdGVyVGhhbihtaW5pbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaXNHcmVhdGVyVGhhbihtaW5pbXVtVmFsdWUpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmlzQmV0d2VlbiA9IGZ1bmN0aW9uIGlzQmV0d2VlbihtaW5pbXVtVmFsdWUsIG1heGltdW1WYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5pc0JldHdlZW4obWluaW11bVZhbHVlLCBtYXhpbXVtVmFsdWUpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmlzTGVzc1RoYW5PckVxdWFsVG8gPSBmdW5jdGlvbiBpc0xlc3NUaGFuT3JFcXVhbFRvKG1heGltdW1WYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5pc0xlc3NUaGFuT3JFcXVhbFRvKG1heGltdW1WYWx1ZSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuaXNMZXNzVGhhbiA9IGZ1bmN0aW9uIGlzTGVzc1RoYW4obWF4aW11bVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmlzTGVzc1RoYW4obWF4aW11bVZhbHVlKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5pc0VxdWFsVG8gPSBmdW5jdGlvbiBpc0VxdWFsVG8ob3RoZXJWYWx1ZSwgb3RoZXJWYWx1ZUxhYmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmlzRXF1YWxUbyhvdGhlclZhbHVlLCBvdGhlclZhbHVlTGFiZWwpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmlzTm90RXF1YWxUbyA9IGZ1bmN0aW9uIGlzTm90RXF1YWxUbyhvdGhlclZhbHVlLCBvdGhlclZhbHVlTGFiZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaXNOb3RFcXVhbFRvKG90aGVyVmFsdWUsIG90aGVyVmFsdWVMYWJlbCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuaXNFbWFpbCA9IGZ1bmN0aW9uIGlzRW1haWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmlzRW1haWwoKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5pc1VSTCA9IGZ1bmN0aW9uIGlzVVJMKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5pc1VSTCgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmlzSW4gPSBmdW5jdGlvbiBpc0luKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaXNJbihjb2xsZWN0aW9uKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5oYXNNaW5MZW5ndGggPSBmdW5jdGlvbiBoYXNNaW5MZW5ndGgobWluaW11bVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmhhc01pbkxlbmd0aChtaW5pbXVtVmFsdWUpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmhhc01heExlbmd0aCA9IGZ1bmN0aW9uIGhhc01heExlbmd0aChtYXhpbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaGFzTWF4TGVuZ3RoKG1heGltdW1WYWx1ZSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuaGFzTGVuZ3RoQmV0d2VlbiA9IGZ1bmN0aW9uIGhhc0xlbmd0aEJldHdlZW4obWluaW11bVZhbHVlLCBtYXhpbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaGFzTGVuZ3RoQmV0d2VlbihtaW5pbXVtVmFsdWUsIG1heGltdW1WYWx1ZSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuaXNOdW1iZXIoKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5jb250YWluc05vU3BhY2VzID0gZnVuY3Rpb24gY29udGFpbnNOb1NwYWNlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuY29udGFpbnNOb1NwYWNlcygpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmNvbnRhaW5zT25seURpZ2l0cyA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seURpZ2l0cygpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuY29udGFpbnNPbmx5RGlnaXRzKCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuY29udGFpbnNPbmx5ID0gZnVuY3Rpb24gY29udGFpbnNPbmx5KHJlZ2V4KSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmNvbnRhaW5zT25seShyZWdleCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuY29udGFpbnNPbmx5QWxwaGEgPSBmdW5jdGlvbiBjb250YWluc09ubHlBbHBoYSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIuY29udGFpbnNPbmx5QWxwaGEoKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5jb250YWluc09ubHlBbHBoYU9yV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seUFscGhhT3JXaGl0ZXNwYWNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5jb250YWluc09ubHlBbHBoYU9yV2hpdGVzcGFjZSgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmNvbnRhaW5zT25seUxldHRlcnMgPSBmdW5jdGlvbiBjb250YWluc09ubHlMZXR0ZXJzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5jb250YWluc09ubHlBbHBoYSgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmNvbnRhaW5zT25seUxldHRlcnNPcldoaXRlc3BhY2UgPSBmdW5jdGlvbiBjb250YWluc09ubHlMZXR0ZXJzT3JXaGl0ZXNwYWNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5jb250YWluc09ubHlBbHBoYU9yV2hpdGVzcGFjZSgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmNvbnRhaW5zT25seUFscGhhbnVtZXJpY3MgPSBmdW5jdGlvbiBjb250YWluc09ubHlBbHBoYW51bWVyaWNzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci5jb250YWluc09ubHlBbHBoYW51bWVyaWNzKCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUuY29udGFpbnNPbmx5QWxwaGFudW1lcmljc09yV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seUFscGhhbnVtZXJpY3NPcldoaXRlc3BhY2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmNvbnRhaW5zT25seUFscGhhbnVtZXJpY3NPcldoaXRlc3BhY2UoKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5pc1N0cm9uZ1Bhc3N3b3JkID0gZnVuY3Rpb24gaXNTdHJvbmdQYXNzd29yZChtaW5pbXVtQ29tcGxleGl0eUxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmlzU3Ryb25nUGFzc3dvcmQobWluaW11bUNvbXBsZXhpdHlMZXZlbCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uIG1hdGNoZXMocmVnZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIubWF0Y2hlcyhyZWdleCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUucGFzc2VzID0gZnVuY3Rpb24gcGFzc2VzKGN1c3RvbUZ1bmN0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXIucGFzc2VzKGN1c3RvbUZ1bmN0aW9uLCB0aHJlc2hvbGQpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLnBhc3Nlc1J1bGUgPSBmdW5jdGlvbiBwYXNzZXNSdWxlKHZhbGlkYXRpb25SdWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLnBhc3Nlc1J1bGUodmFsaWRhdGlvblJ1bGUpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlWydpZiddID0gZnVuY3Rpb24gX2lmKGNvbmRpdGlvbkV4cHJlc3Npb24sIHRocmVzaG9sZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlclsnaWYnXShjb25kaXRpb25FeHByZXNzaW9uLCB0aHJlc2hvbGQpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlWydlbHNlJ10gPSBmdW5jdGlvbiBfZWxzZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkZXJbJ2Vsc2UnXSgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLmVuZElmID0gZnVuY3Rpb24gZW5kSWYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmVuZElmKCk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGVbJ3N3aXRjaCddID0gZnVuY3Rpb24gX3N3aXRjaChjb25kaXRpb25FeHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyWydzd2l0Y2gnXShjb25kaXRpb25FeHByZXNzaW9uKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZVsnY2FzZSddID0gZnVuY3Rpb24gX2Nhc2UoY2FzZUxhYmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyWydjYXNlJ10oY2FzZUxhYmVsKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZVsnZGVmYXVsdCddID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyWydkZWZhdWx0J10oKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwLnByb3RvdHlwZS5lbmRTd2l0Y2ggPSBmdW5jdGlvbiBlbmRTd2l0Y2goKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZGVyLmVuZFN3aXRjaCgpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXAucHJvdG90eXBlLndpdGhNZXNzYWdlID0gZnVuY3Rpb24gd2l0aE1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRlci53aXRoTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25Hcm91cDtcbiAgfSkoKTtcblxuICBleHBvcnRzLlZhbGlkYXRpb25Hcm91cCA9IFZhbGlkYXRpb25Hcm91cDtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cyddLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0cy5BZ2dyZWdhdGVFcnJvciA9IEFnZ3JlZ2F0ZUVycm9yO1xuICBleHBvcnRzLmdldExvZ2dlciA9IGdldExvZ2dlcjtcbiAgZXhwb3J0cy5hZGRBcHBlbmRlciA9IGFkZEFwcGVuZGVyO1xuICBleHBvcnRzLnNldExldmVsID0gc2V0TGV2ZWw7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgZnVuY3Rpb24gQWdncmVnYXRlRXJyb3IobWVzc2FnZSwgaW5uZXJFcnJvciwgc2tpcElmQWxyZWFkeUFnZ3JlZ2F0ZSkge1xuICAgIGlmIChpbm5lckVycm9yKSB7XG4gICAgICBpZiAoaW5uZXJFcnJvci5pbm5lckVycm9yICYmIHNraXBJZkFscmVhZHlBZ2dyZWdhdGUpIHtcbiAgICAgICAgcmV0dXJuIGlubmVyRXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbm5lckVycm9yLnN0YWNrKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJ1xcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbmlubmVyIGVycm9yOiAnICsgaW5uZXJFcnJvci5zdGFjaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBpZiAoaW5uZXJFcnJvcikge1xuICAgICAgZS5pbm5lckVycm9yID0gaW5uZXJFcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIHZhciBsb2dMZXZlbCA9IHtcbiAgICBub25lOiAwLFxuICAgIGVycm9yOiAxLFxuICAgIHdhcm46IDIsXG4gICAgaW5mbzogMyxcbiAgICBkZWJ1ZzogNFxuICB9O1xuXG4gIGV4cG9ydHMubG9nTGV2ZWwgPSBsb2dMZXZlbDtcbiAgdmFyIGxvZ2dlcnMgPSB7fTtcbiAgdmFyIGN1cnJlbnRMZXZlbCA9IGxvZ0xldmVsLm5vbmU7XG4gIHZhciBhcHBlbmRlcnMgPSBbXTtcbiAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICB2YXIgbG9nZ2VyQ29uc3RydWN0aW9uS2V5ID0ge307XG5cbiAgZnVuY3Rpb24gbG9nKGxvZ2dlciwgbGV2ZWwsIGFyZ3MpIHtcbiAgICB2YXIgaSA9IGFwcGVuZGVycy5sZW5ndGg7XG4gICAgdmFyIGN1cnJlbnQgPSB1bmRlZmluZWQ7XG5cbiAgICBhcmdzID0gc2xpY2UuY2FsbChhcmdzKTtcbiAgICBhcmdzLnVuc2hpZnQobG9nZ2VyKTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGN1cnJlbnQgPSBhcHBlbmRlcnNbaV07XG4gICAgICBjdXJyZW50W2xldmVsXS5hcHBseShjdXJyZW50LCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICBpZiAoY3VycmVudExldmVsIDwgNCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZyh0aGlzLCAnZGVidWcnLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5mbygpIHtcbiAgICBpZiAoY3VycmVudExldmVsIDwgMykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZyh0aGlzLCAnaW5mbycsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiB3YXJuKCkge1xuICAgIGlmIChjdXJyZW50TGV2ZWwgPCAyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9nKHRoaXMsICd3YXJuJywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9yKCkge1xuICAgIGlmIChjdXJyZW50TGV2ZWwgPCAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9nKHRoaXMsICdlcnJvcicsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb25uZWN0TG9nZ2VyKGxvZ2dlcikge1xuICAgIGxvZ2dlci5kZWJ1ZyA9IGRlYnVnO1xuICAgIGxvZ2dlci5pbmZvID0gaW5mbztcbiAgICBsb2dnZXIud2FybiA9IHdhcm47XG4gICAgbG9nZ2VyLmVycm9yID0gZXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVMb2dnZXIoaWQpIHtcbiAgICB2YXIgbG9nZ2VyID0gbmV3IExvZ2dlcihpZCwgbG9nZ2VyQ29uc3RydWN0aW9uS2V5KTtcblxuICAgIGlmIChhcHBlbmRlcnMubGVuZ3RoKSB7XG4gICAgICBjb25uZWN0TG9nZ2VyKGxvZ2dlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExvZ2dlcihpZCkge1xuICAgIHJldHVybiBsb2dnZXJzW2lkXSB8fCAobG9nZ2Vyc1tpZF0gPSBjcmVhdGVMb2dnZXIoaWQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEFwcGVuZGVyKGFwcGVuZGVyKSB7XG4gICAgYXBwZW5kZXJzLnB1c2goYXBwZW5kZXIpO1xuXG4gICAgaWYgKGFwcGVuZGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2dnZXJzKSB7XG4gICAgICAgIGNvbm5lY3RMb2dnZXIobG9nZ2Vyc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZXZlbChsZXZlbCkge1xuICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgdmFyIExvZ2dlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9nZ2VyKGlkLCBrZXkpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2dnZXIpO1xuXG4gICAgICBpZiAoa2V5ICE9PSBsb2dnZXJDb25zdHJ1Y3Rpb25LZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IGluc3RhbnRpYXRlIFwiTG9nZ2VyXCIuIFVzZSB0aGUgXCJnZXRMb2dnZXJcIiBBUEkgaW5zdGVhZC4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pZCA9IGlkO1xuICAgIH1cblxuICAgIExvZ2dlci5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiBkZWJ1ZyhtZXNzYWdlKSB7fTtcblxuICAgIExvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uIGluZm8obWVzc2FnZSkge307XG5cbiAgICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHt9O1xuXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHt9O1xuXG4gICAgcmV0dXJuIExvZ2dlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkxvZ2dlciA9IExvZ2dlcjtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cyddLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0cy5yZWxhdGl2ZVRvRmlsZSA9IHJlbGF0aXZlVG9GaWxlO1xuICBleHBvcnRzLmpvaW4gPSBqb2luO1xuICBleHBvcnRzLmJ1aWxkUXVlcnlTdHJpbmcgPSBidWlsZFF1ZXJ5U3RyaW5nO1xuICBleHBvcnRzLnBhcnNlUXVlcnlTdHJpbmcgPSBwYXJzZVF1ZXJ5U3RyaW5nO1xuICBmdW5jdGlvbiB0cmltRG90cyhhcnkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHBhcnQgPSBhcnlbaV07XG4gICAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICAgIGFyeS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGkgLT0gMTtcbiAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSAxICYmIGFyeVsyXSA9PT0gJy4uJyB8fCBhcnlbaSAtIDFdID09PSAnLi4nKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcbiAgICAgICAgICBhcnkuc3BsaWNlKGkgLSAxLCAyKTtcbiAgICAgICAgICBpIC09IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWxhdGl2ZVRvRmlsZShuYW1lLCBmaWxlKSB7XG4gICAgdmFyIGZpbGVQYXJ0cyA9IGZpbGUgJiYgZmlsZS5zcGxpdCgnLycpO1xuICAgIHZhciBuYW1lUGFydHMgPSBuYW1lLnRyaW0oKS5zcGxpdCgnLycpO1xuXG4gICAgaWYgKG5hbWVQYXJ0c1swXS5jaGFyQXQoMCkgPT09ICcuJyAmJiBmaWxlUGFydHMpIHtcbiAgICAgIHZhciBub3JtYWxpemVkQmFzZVBhcnRzID0gZmlsZVBhcnRzLnNsaWNlKDAsIGZpbGVQYXJ0cy5sZW5ndGggLSAxKTtcbiAgICAgIG5hbWVQYXJ0cy51bnNoaWZ0LmFwcGx5KG5hbWVQYXJ0cywgbm9ybWFsaXplZEJhc2VQYXJ0cyk7XG4gICAgfVxuXG4gICAgdHJpbURvdHMobmFtZVBhcnRzKTtcblxuICAgIHJldHVybiBuYW1lUGFydHMuam9pbignLycpO1xuICB9XG5cbiAgZnVuY3Rpb24gam9pbihwYXRoMSwgcGF0aDIpIHtcbiAgICBpZiAoIXBhdGgxKSB7XG4gICAgICByZXR1cm4gcGF0aDI7XG4gICAgfVxuXG4gICAgaWYgKCFwYXRoMikge1xuICAgICAgcmV0dXJuIHBhdGgxO1xuICAgIH1cblxuICAgIHZhciBzY2hlbWVNYXRjaCA9IHBhdGgxLm1hdGNoKC9eKFteL10qPzopXFwvLyk7XG4gICAgdmFyIHNjaGVtZSA9IHNjaGVtZU1hdGNoICYmIHNjaGVtZU1hdGNoLmxlbmd0aCA+IDAgPyBzY2hlbWVNYXRjaFsxXSA6ICcnO1xuICAgIHBhdGgxID0gcGF0aDEuc3Vic3RyKHNjaGVtZS5sZW5ndGgpO1xuXG4gICAgdmFyIHVybFByZWZpeCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGF0aDEuaW5kZXhPZignLy8vJykgPT09IDAgJiYgc2NoZW1lID09PSAnZmlsZTonKSB7XG4gICAgICB1cmxQcmVmaXggPSAnLy8vJztcbiAgICB9IGVsc2UgaWYgKHBhdGgxLmluZGV4T2YoJy8vJykgPT09IDApIHtcbiAgICAgIHVybFByZWZpeCA9ICcvLyc7XG4gICAgfSBlbHNlIGlmIChwYXRoMS5pbmRleE9mKCcvJykgPT09IDApIHtcbiAgICAgIHVybFByZWZpeCA9ICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsUHJlZml4ID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHRyYWlsaW5nU2xhc2ggPSBwYXRoMi5zbGljZSgtMSkgPT09ICcvJyA/ICcvJyA6ICcnO1xuXG4gICAgdmFyIHVybDEgPSBwYXRoMS5zcGxpdCgnLycpO1xuICAgIHZhciB1cmwyID0gcGF0aDIuc3BsaXQoJy8nKTtcbiAgICB2YXIgdXJsMyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdXJsMS5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBpZiAodXJsMVtpXSA9PT0gJy4uJykge1xuICAgICAgICB1cmwzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmICh1cmwxW2ldID09PSAnLicgfHwgdXJsMVtpXSA9PT0gJycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwzLnB1c2godXJsMVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdXJsMi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBpZiAodXJsMltpXSA9PT0gJy4uJykge1xuICAgICAgICB1cmwzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmICh1cmwyW2ldID09PSAnLicgfHwgdXJsMltpXSA9PT0gJycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwzLnB1c2godXJsMltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjaGVtZSArIHVybFByZWZpeCArIHVybDMuam9pbignLycpICsgdHJhaWxpbmdTbGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkUXVlcnlTdHJpbmcocGFyYW1zKSB7XG4gICAgdmFyIHBhaXJzID0gW107XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMgfHwge30pLnNvcnQoKTtcbiAgICB2YXIgZW5jb2RlID0gZW5jb2RlVVJJQ29tcG9uZW50O1xuICAgIHZhciBlbmNvZGVLZXkgPSBmdW5jdGlvbiBlbmNvZGVLZXkoaykge1xuICAgICAgcmV0dXJuIGVuY29kZShrKS5yZXBsYWNlKCclMjQnLCAnJCcpO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBwYXJhbXNba2V5XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGFycmF5S2V5ID0gZW5jb2RlS2V5KGtleSkgKyAnW10nO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIHBhaXJzLnB1c2goYXJyYXlLZXkgKyAnPScgKyBlbmNvZGUodmFsdWVbal0pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFpcnMucHVzaChlbmNvZGVLZXkoa2V5KSArICc9JyArIGVuY29kZSh2YWx1ZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYWlycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gcGFpcnMuam9pbignJicpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykge1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHt9O1xuICAgIGlmICghcXVlcnlTdHJpbmcgfHwgdHlwZW9mIHF1ZXJ5U3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHF1ZXJ5UGFyYW1zO1xuICAgIH1cblxuICAgIHZhciBxdWVyeSA9IHF1ZXJ5U3RyaW5nO1xuICAgIGlmIChxdWVyeS5jaGFyQXQoMCkgPT09ICc/Jykge1xuICAgICAgcXVlcnkgPSBxdWVyeS5zdWJzdHIoMSk7XG4gICAgfVxuXG4gICAgdmFyIHBhaXJzID0gcXVlcnkuc3BsaXQoJyYnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICB2YXIga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pO1xuICAgICAgdmFyIGtleUxlbmd0aCA9IGtleS5sZW5ndGg7XG4gICAgICB2YXIgaXNBcnJheSA9IGZhbHNlO1xuICAgICAgdmFyIHZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIWtleSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFpci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleUxlbmd0aCA+IDIgJiYga2V5LnNsaWNlKGtleUxlbmd0aCAtIDIpID09PSAnW10nKSB7XG4gICAgICAgICAgaXNBcnJheSA9IHRydWU7XG4gICAgICAgICAga2V5ID0ga2V5LnNsaWNlKDAsIGtleUxlbmd0aCAtIDIpO1xuICAgICAgICAgIGlmICghcXVlcnlQYXJhbXNba2V5XSkge1xuICAgICAgICAgICAgcXVlcnlQYXJhbXNba2V5XSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlID0gcGFpclsxXSA/IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKSA6ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICBxdWVyeVBhcmFtc1trZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlQYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBxdWVyeVBhcmFtcztcbiAgfVxufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJ10sIGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICB2YXIgaGFzU2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJztcblxuICBmdW5jdGlvbiBtYWtlUmVxdWVzdEZsdXNoRnJvbU11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpIHtcbiAgICB2YXIgdG9nZ2xlID0gMTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Rmx1c2goKSB7XG4gICAgICB0b2dnbGUgPSAtdG9nZ2xlO1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlUmVxdWVzdEZsdXNoRnJvbVRpbWVyKGZsdXNoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RGbHVzaCgpIHtcbiAgICAgIHZhciB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChoYW5kbGVGbHVzaFRpbWVyLCAwKTtcblxuICAgICAgdmFyIGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwoaGFuZGxlRmx1c2hUaW1lciwgNTApO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlRmx1c2hUaW1lcigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgICAgZmx1c2goKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIFRhc2tRdWV1ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFza1F1ZXVlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhc2tRdWV1ZSk7XG5cbiAgICAgIHRoaXMubWljcm9UYXNrUXVldWUgPSBbXTtcbiAgICAgIHRoaXMubWljcm9UYXNrUXVldWVDYXBhY2l0eSA9IDEwMjQ7XG4gICAgICB0aGlzLnRhc2tRdWV1ZSA9IFtdO1xuXG4gICAgICBpZiAodHlwZW9mIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEZsdXNoTWljcm9UYXNrUXVldWUgPSBtYWtlUmVxdWVzdEZsdXNoRnJvbU11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5mbHVzaE1pY3JvVGFza1F1ZXVlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Rmx1c2hNaWNyb1Rhc2tRdWV1ZSA9IG1ha2VSZXF1ZXN0Rmx1c2hGcm9tVGltZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5mbHVzaE1pY3JvVGFza1F1ZXVlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlcXVlc3RGbHVzaFRhc2tRdWV1ZSA9IG1ha2VSZXF1ZXN0Rmx1c2hGcm9tVGltZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZmx1c2hUYXNrUXVldWUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIFRhc2tRdWV1ZS5wcm90b3R5cGUucXVldWVNaWNyb1Rhc2sgPSBmdW5jdGlvbiBxdWV1ZU1pY3JvVGFzayh0YXNrKSB7XG4gICAgICBpZiAodGhpcy5taWNyb1Rhc2tRdWV1ZS5sZW5ndGggPCAxKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEZsdXNoTWljcm9UYXNrUXVldWUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5taWNyb1Rhc2tRdWV1ZS5wdXNoKHRhc2spO1xuICAgIH07XG5cbiAgICBUYXNrUXVldWUucHJvdG90eXBlLnF1ZXVlVGFzayA9IGZ1bmN0aW9uIHF1ZXVlVGFzayh0YXNrKSB7XG4gICAgICBpZiAodGhpcy50YXNrUXVldWUubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aGlzLnJlcXVlc3RGbHVzaFRhc2tRdWV1ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRhc2tRdWV1ZS5wdXNoKHRhc2spO1xuICAgIH07XG5cbiAgICBUYXNrUXVldWUucHJvdG90eXBlLmZsdXNoVGFza1F1ZXVlID0gZnVuY3Rpb24gZmx1c2hUYXNrUXVldWUoKSB7XG4gICAgICB2YXIgcXVldWUgPSB0aGlzLnRhc2tRdWV1ZTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdGFzayA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50YXNrUXVldWUgPSBbXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdGFzayA9IHF1ZXVlW2luZGV4XTtcbiAgICAgICAgICB0YXNrLmNhbGwoKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLm9uRXJyb3IoZXJyb3IsIHRhc2spO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUYXNrUXVldWUucHJvdG90eXBlLmZsdXNoTWljcm9UYXNrUXVldWUgPSBmdW5jdGlvbiBmbHVzaE1pY3JvVGFza1F1ZXVlKCkge1xuICAgICAgdmFyIHF1ZXVlID0gdGhpcy5taWNyb1Rhc2tRdWV1ZTtcbiAgICAgIHZhciBjYXBhY2l0eSA9IHRoaXMubWljcm9UYXNrUXVldWVDYXBhY2l0eTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdGFzayA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdGFzayA9IHF1ZXVlW2luZGV4XTtcbiAgICAgICAgICB0YXNrLmNhbGwoKTtcbiAgICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgICAgaWYgKGluZGV4ID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHNjYW4gPSAwOyBzY2FuIDwgaW5kZXg7IHNjYW4rKykge1xuICAgICAgICAgICAgICBxdWV1ZVtzY2FuXSA9IHF1ZXVlW3NjYW4gKyBpbmRleF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCAtPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnJvciwgdGFzayk7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfTtcblxuICAgIFRhc2tRdWV1ZS5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IsIHRhc2spIHtcbiAgICAgIGlmICgnb25FcnJvcicgaW4gdGFzaykge1xuICAgICAgICB0YXNrLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChoYXNTZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUYXNrUXVldWU7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5UYXNrUXVldWUgPSBUYXNrUXVldWU7XG59KTsiLCIvKiAqLyBcbnJlcXVpcmUoXCIuL3NoaW1cIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2NvcmUuZGljdFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5pdGVyLWhlbHBlcnNcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2NvcmUuJGZvclwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5kZWxheVwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5mdW5jdGlvbi5wYXJ0XCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9jb3JlLm9iamVjdFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5hcnJheS50dXJuXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9jb3JlLm51bWJlci5pdGVyYXRvclwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5udW1iZXIubWF0aFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5zdHJpbmcuZXNjYXBlLWh0bWxcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2NvcmUuZGF0ZVwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvY29yZS5nbG9iYWxcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2NvcmUubG9nXCIpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9tb2R1bGVzLyRcIikuY29yZTtcbiIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cycsICdjb3JlLWpzJywgJ2F1cmVsaWEtbG9nZ2luZycsICdhdXJlbGlhLW1ldGFkYXRhJywgJ2F1cmVsaWEtcGF0aCcsICdhdXJlbGlhLWxvYWRlcicsICdhdXJlbGlhLWJpbmRpbmcnLCAnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbicsICdhdXJlbGlhLXRhc2stcXVldWUnXSwgZnVuY3Rpb24gKGV4cG9ydHMsIF9jb3JlSnMsIF9hdXJlbGlhTG9nZ2luZywgX2F1cmVsaWFNZXRhZGF0YSwgX2F1cmVsaWFQYXRoLCBfYXVyZWxpYUxvYWRlciwgX2F1cmVsaWFCaW5kaW5nLCBfYXVyZWxpYURlcGVuZGVuY3lJbmplY3Rpb24sIF9hdXJlbGlhVGFza1F1ZXVlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbiAgZXhwb3J0cy5uZXh0RWxlbWVudFNpYmxpbmcgPSBuZXh0RWxlbWVudFNpYmxpbmc7XG4gIGV4cG9ydHMuY3JlYXRlVGVtcGxhdGVGcm9tTWFya3VwID0gY3JlYXRlVGVtcGxhdGVGcm9tTWFya3VwO1xuICBleHBvcnRzLnJlcGxhY2VOb2RlID0gcmVwbGFjZU5vZGU7XG4gIGV4cG9ydHMucmVtb3ZlTm9kZSA9IHJlbW92ZU5vZGU7XG4gIGV4cG9ydHMuaW5qZWN0U3R5bGVzID0gaW5qZWN0U3R5bGVzO1xuICBleHBvcnRzLmh5cGhlbmF0ZSA9IGh5cGhlbmF0ZTtcbiAgZXhwb3J0cy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICBleHBvcnRzLmJlaGF2aW9yID0gYmVoYXZpb3I7XG4gIGV4cG9ydHMuY3VzdG9tRWxlbWVudCA9IGN1c3RvbUVsZW1lbnQ7XG4gIGV4cG9ydHMuY3VzdG9tQXR0cmlidXRlID0gY3VzdG9tQXR0cmlidXRlO1xuICBleHBvcnRzLnRlbXBsYXRlQ29udHJvbGxlciA9IHRlbXBsYXRlQ29udHJvbGxlcjtcbiAgZXhwb3J0cy5iaW5kYWJsZSA9IGJpbmRhYmxlO1xuICBleHBvcnRzLmR5bmFtaWNPcHRpb25zID0gZHluYW1pY09wdGlvbnM7XG4gIGV4cG9ydHMuc3luYyA9IHN5bmM7XG4gIGV4cG9ydHMudXNlU2hhZG93RE9NID0gdXNlU2hhZG93RE9NO1xuICBleHBvcnRzLnNraXBDb250ZW50UHJvY2Vzc2luZyA9IHNraXBDb250ZW50UHJvY2Vzc2luZztcbiAgZXhwb3J0cy5wcm9jZXNzQ29udGVudCA9IHByb2Nlc3NDb250ZW50O1xuICBleHBvcnRzLmNvbnRhaW5lcmxlc3MgPSBjb250YWluZXJsZXNzO1xuICBleHBvcnRzLnZpZXdTdHJhdGVneSA9IHZpZXdTdHJhdGVneTtcbiAgZXhwb3J0cy51c2VWaWV3ID0gdXNlVmlldztcbiAgZXhwb3J0cy5pbmxpbmVWaWV3ID0gaW5saW5lVmlldztcbiAgZXhwb3J0cy5ub1ZpZXcgPSBub1ZpZXc7XG4gIGV4cG9ydHMuZWxlbWVudENvbmZpZyA9IGVsZW1lbnRDb25maWc7XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgbmVlZHNUZW1wbGF0ZUZpeHVwID0gISgnY29udGVudCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKSk7XG4gIHZhciBzaGFkb3dQb2x5ID0gd2luZG93LlNoYWRvd0RPTVBvbHlmaWxsIHx8IG51bGw7XG5cbiAgdmFyIERPTUJvdW5kYXJ5ID0gJ2F1cmVsaWEtZG9tLWJvdW5kYXJ5JztcbiAgZXhwb3J0cy5ET01Cb3VuZGFyeSA9IERPTUJvdW5kYXJ5O1xuICB2YXIgaGFzU2hhZG93RE9NID0gISFIVE1MRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU2hhZG93Um9vdDtcblxuICBleHBvcnRzLmhhc1NoYWRvd0RPTSA9IGhhc1NoYWRvd0RPTTtcblxuICBmdW5jdGlvbiBuZXh0RWxlbWVudFNpYmxpbmcoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgcmV0dXJuIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIH1cbiAgICBkbyB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5uZXh0U2libGluZztcbiAgICB9IHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDEpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGVGcm9tTWFya3VwKG1hcmt1cCkge1xuICAgIHZhciBwYXJzZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwYXJzZXIuaW5uZXJIVE1MID0gbWFya3VwO1xuXG4gICAgdmFyIHRlbXAgPSBwYXJzZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG5cbiAgICBpZiAobmVlZHNUZW1wbGF0ZUZpeHVwKSB7XG4gICAgICB0ZW1wLmNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICB3aGlsZSAodGVtcC5maXJzdENoaWxkKSB7XG4gICAgICAgIHRlbXAuY29udGVudC5hcHBlbmRDaGlsZCh0ZW1wLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0ZW1wO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZU5vZGUobmV3Tm9kZSwgbm9kZSwgcGFyZW50Tm9kZSkge1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgbm9kZSk7XG4gICAgfSBlbHNlIGlmIChzaGFkb3dQb2x5KSB7XG4gICAgICBzaGFkb3dQb2x5LnVud3JhcChwYXJlbnROb2RlKS5yZXBsYWNlQ2hpbGQoc2hhZG93UG9seS51bndyYXAobmV3Tm9kZSksIHNoYWRvd1BvbHkudW53cmFwKG5vZGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgbm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlLCBwYXJlbnROb2RlKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoc2hhZG93UG9seSkge1xuICAgICAgc2hhZG93UG9seS51bndyYXAocGFyZW50Tm9kZSkucmVtb3ZlQ2hpbGQoc2hhZG93UG9seS51bndyYXAobm9kZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluamVjdFN0eWxlcyhzdHlsZXMsIGRlc3RpbmF0aW9uLCBwcmVwZW5kKSB7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIG5vZGUuaW5uZXJIVE1MID0gc3R5bGVzO1xuICAgIG5vZGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgICBkZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uIHx8IGRvY3VtZW50LmhlYWQ7XG5cbiAgICBpZiAocHJlcGVuZCAmJiBkZXN0aW5hdGlvbi5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGRlc3RpbmF0aW9uLmluc2VydEJlZm9yZShub2RlLCBkZXN0aW5hdGlvbi5jaGlsZE5vZGVzWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdGluYXRpb24uYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgYW5pbWF0aW9uRXZlbnQgPSB7XG4gICAgZW50ZXJCZWdpbjogJ2FuaW1hdGlvbjplbnRlcjpiZWdpbicsXG4gICAgZW50ZXJBY3RpdmU6ICdhbmltYXRpb246ZW50ZXI6YWN0aXZlJyxcbiAgICBlbnRlckRvbmU6ICdhbmltYXRpb246ZW50ZXI6ZG9uZScsXG4gICAgZW50ZXJUaW1lb3V0OiAnYW5pbWF0aW9uOmVudGVyOnRpbWVvdXQnLFxuXG4gICAgbGVhdmVCZWdpbjogJ2FuaW1hdGlvbjpsZWF2ZTpiZWdpbicsXG4gICAgbGVhdmVBY3RpdmU6ICdhbmltYXRpb246bGVhdmU6YWN0aXZlJyxcbiAgICBsZWF2ZURvbmU6ICdhbmltYXRpb246bGVhdmU6ZG9uZScsXG4gICAgbGVhdmVUaW1lb3V0OiAnYW5pbWF0aW9uOmxlYXZlOnRpbWVvdXQnLFxuXG4gICAgc3RhZ2dlck5leHQ6ICdhbmltYXRpb246c3RhZ2dlcjpuZXh0JyxcblxuICAgIHJlbW92ZUNsYXNzQmVnaW46ICdhbmltYXRpb246cmVtb3ZlLWNsYXNzOmJlZ2luJyxcbiAgICByZW1vdmVDbGFzc0FjdGl2ZTogJ2FuaW1hdGlvbjpyZW1vdmUtY2xhc3M6YWN0aXZlJyxcbiAgICByZW1vdmVDbGFzc0RvbmU6ICdhbmltYXRpb246cmVtb3ZlLWNsYXNzOmRvbmUnLFxuICAgIHJlbW92ZUNsYXNzVGltZW91dDogJ2FuaW1hdGlvbjpyZW1vdmUtY2xhc3M6dGltZW91dCcsXG5cbiAgICBhZGRDbGFzc0JlZ2luOiAnYW5pbWF0aW9uOmFkZC1jbGFzczpiZWdpbicsXG4gICAgYWRkQ2xhc3NBY3RpdmU6ICdhbmltYXRpb246YWRkLWNsYXNzOmFjdGl2ZScsXG4gICAgYWRkQ2xhc3NEb25lOiAnYW5pbWF0aW9uOmFkZC1jbGFzczpkb25lJyxcbiAgICBhZGRDbGFzc1RpbWVvdXQ6ICdhbmltYXRpb246YWRkLWNsYXNzOnRpbWVvdXQnLFxuXG4gICAgYW5pbWF0ZUJlZ2luOiAnYW5pbWF0aW9uOmFuaW1hdGU6YmVnaW4nLFxuICAgIGFuaW1hdGVBY3RpdmU6ICdhbmltYXRpb246YW5pbWF0ZTphY3RpdmUnLFxuICAgIGFuaW1hdGVEb25lOiAnYW5pbWF0aW9uOmFuaW1hdGU6ZG9uZScsXG4gICAgYW5pbWF0ZVRpbWVvdXQ6ICdhbmltYXRpb246YW5pbWF0ZTp0aW1lb3V0JyxcblxuICAgIHNlcXVlbmNlQmVnaW46ICdhbmltYXRpb246c2VxdWVuY2U6YmVnaW4nLFxuICAgIHNlcXVlbmNlRG9uZTogJ2FuaW1hdGlvbjpzZXF1ZW5jZTpkb25lJ1xuICB9O1xuXG4gIGV4cG9ydHMuYW5pbWF0aW9uRXZlbnQgPSBhbmltYXRpb25FdmVudDtcblxuICB2YXIgQW5pbWF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuaW1hdG9yKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFuaW1hdG9yKTtcbiAgICB9XG5cbiAgICBBbmltYXRvci5jb25maWd1cmVEZWZhdWx0ID0gZnVuY3Rpb24gY29uZmlndXJlRGVmYXVsdChjb250YWluZXIsIGFuaW1hdG9ySW5zdGFuY2UpIHtcbiAgICAgIGNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKEFuaW1hdG9yLCBBbmltYXRvci5pbnN0YW5jZSA9IGFuaW1hdG9ySW5zdGFuY2UgfHwgbmV3IEFuaW1hdG9yKCkpO1xuICAgIH07XG5cbiAgICBBbmltYXRvci5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gZW50ZXIoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfTtcblxuICAgIEFuaW1hdG9yLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIGxlYXZlKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH07XG5cbiAgICBBbmltYXRvci5wcm90b3R5cGUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH07XG5cbiAgICBBbmltYXRvci5wcm90b3R5cGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH07XG5cbiAgICBBbmltYXRvci5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uIGFuaW1hdGUoZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLnJ1blNlcXVlbmNlID0gZnVuY3Rpb24gcnVuU2VxdWVuY2Uoc2VxdWVuY2UpIHt9O1xuXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLnJlZ2lzdGVyRWZmZWN0ID0gZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoZWZmZWN0TmFtZSwgcHJvcGVydGllcykge307XG5cbiAgICBBbmltYXRvci5wcm90b3R5cGUudW5yZWdpc3RlckVmZmVjdCA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJFZmZlY3QoZWZmZWN0TmFtZSkge307XG5cbiAgICByZXR1cm4gQW5pbWF0b3I7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5BbmltYXRvciA9IEFuaW1hdG9yO1xuXG4gIHZhciBjYXBpdGFsTWF0Y2hlciA9IC8oW0EtWl0pL2c7XG5cbiAgZnVuY3Rpb24gYWRkSHlwaGVuQW5kTG93ZXIoY2hhcikge1xuICAgIHJldHVybiBcIi1cIiArIGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh5cGhlbmF0ZShuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSkucmVwbGFjZShjYXBpdGFsTWF0Y2hlciwgYWRkSHlwaGVuQW5kTG93ZXIpO1xuICB9XG5cbiAgdmFyIFJlc291cmNlTG9hZENvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlTG9hZENvbnRleHQoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzb3VyY2VMb2FkQ29udGV4dCk7XG5cbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0ge307XG4gICAgfVxuXG4gICAgUmVzb3VyY2VMb2FkQ29udGV4dC5wcm90b3R5cGUuYWRkRGVwZW5kZW5jeSA9IGZ1bmN0aW9uIGFkZERlcGVuZGVuY3kodXJsKSB7XG4gICAgICB0aGlzLmRlcGVuZGVuY2llc1t1cmxdID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgUmVzb3VyY2VMb2FkQ29udGV4dC5wcm90b3R5cGUuZG9lc05vdEhhdmVEZXBlbmRlbmN5ID0gZnVuY3Rpb24gZG9lc05vdEhhdmVEZXBlbmRlbmN5KHVybCkge1xuICAgICAgcmV0dXJuICEodXJsIGluIHRoaXMuZGVwZW5kZW5jaWVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlc291cmNlTG9hZENvbnRleHQ7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5SZXNvdXJjZUxvYWRDb250ZXh0ID0gUmVzb3VyY2VMb2FkQ29udGV4dDtcblxuICB2YXIgVmlld0NvbXBpbGVJbnN0cnVjdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgX2NyZWF0ZUNsYXNzKFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24sIG51bGwsIFt7XG4gICAgICBrZXk6ICdub3JtYWwnLFxuICAgICAgdmFsdWU6IG5ldyBWaWV3Q29tcGlsZUluc3RydWN0aW9uKCksXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfV0pO1xuXG4gICAgZnVuY3Rpb24gVmlld0NvbXBpbGVJbnN0cnVjdGlvbigpIHtcbiAgICAgIHZhciB0YXJnZXRTaGFkb3dET00gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1swXTtcbiAgICAgIHZhciBjb21waWxlU3Vycm9nYXRlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhcmd1bWVudHNbMV07XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3Q29tcGlsZUluc3RydWN0aW9uKTtcblxuICAgICAgdGhpcy50YXJnZXRTaGFkb3dET00gPSB0YXJnZXRTaGFkb3dET007XG4gICAgICB0aGlzLmNvbXBpbGVTdXJyb2dhdGUgPSBjb21waWxlU3Vycm9nYXRlO1xuICAgICAgdGhpcy5hc3NvY2lhdGVkTW9kdWxlSWQgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBWaWV3Q29tcGlsZUluc3RydWN0aW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmlld0NvbXBpbGVJbnN0cnVjdGlvbiA9IFZpZXdDb21waWxlSW5zdHJ1Y3Rpb247XG5cbiAgdmFyIEJlaGF2aW9ySW5zdHJ1Y3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIEJlaGF2aW9ySW5zdHJ1Y3Rpb24uZWxlbWVudCA9IGZ1bmN0aW9uIGVsZW1lbnQobm9kZSwgdHlwZSkge1xuICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IEJlaGF2aW9ySW5zdHJ1Y3Rpb24odHJ1ZSk7XG4gICAgICBpbnN0cnVjdGlvbi50eXBlID0gdHlwZTtcbiAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIGluc3RydWN0aW9uLmFuY2hvcklzQ29udGFpbmVyID0gIShub2RlLmhhc0F0dHJpYnV0ZSgnY29udGFpbmVybGVzcycpIHx8IHR5cGUuY29udGFpbmVybGVzcyk7XG4gICAgICBpbnN0cnVjdGlvbi5pbml0aWF0ZWRCeUJlaGF2aW9yID0gdHJ1ZTtcbiAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcbiAgICB9O1xuXG4gICAgQmVoYXZpb3JJbnN0cnVjdGlvbi5hdHRyaWJ1dGUgPSBmdW5jdGlvbiBhdHRyaWJ1dGUoYXR0ck5hbWUsIHR5cGUpIHtcbiAgICAgIHZhciBpbnN0cnVjdGlvbiA9IG5ldyBCZWhhdmlvckluc3RydWN0aW9uKHRydWUpO1xuICAgICAgaW5zdHJ1Y3Rpb24uYXR0ck5hbWUgPSBhdHRyTmFtZTtcbiAgICAgIGluc3RydWN0aW9uLnR5cGUgPSB0eXBlIHx8IG51bGw7XG4gICAgICBpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzID0ge307XG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gICAgfTtcblxuICAgIEJlaGF2aW9ySW5zdHJ1Y3Rpb24uZHluYW1pYyA9IGZ1bmN0aW9uIGR5bmFtaWMoaG9zdCwgYmluZGluZ0NvbnRleHQsIHZpZXdGYWN0b3J5KSB7XG4gICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgQmVoYXZpb3JJbnN0cnVjdGlvbih0cnVlKTtcbiAgICAgIGluc3RydWN0aW9uLmhvc3QgPSBob3N0O1xuICAgICAgaW5zdHJ1Y3Rpb24uYmluZGluZ0NvbnRleHQgPSBiaW5kaW5nQ29udGV4dDtcbiAgICAgIGluc3RydWN0aW9uLnZpZXdGYWN0b3J5ID0gdmlld0ZhY3Rvcnk7XG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhCZWhhdmlvckluc3RydWN0aW9uLCBudWxsLCBbe1xuICAgICAga2V5OiAnbm9ybWFsJyxcbiAgICAgIHZhbHVlOiBuZXcgQmVoYXZpb3JJbnN0cnVjdGlvbigpLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbnRlbnRTZWxlY3RvcicsXG4gICAgICB2YWx1ZTogbmV3IEJlaGF2aW9ySW5zdHJ1Y3Rpb24odHJ1ZSksXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfV0pO1xuXG4gICAgZnVuY3Rpb24gQmVoYXZpb3JJbnN0cnVjdGlvbigpIHtcbiAgICAgIHZhciBzdXBwcmVzc0JpbmQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJlaGF2aW9ySW5zdHJ1Y3Rpb24pO1xuXG4gICAgICB0aGlzLnN1cHByZXNzQmluZCA9IHN1cHByZXNzQmluZDtcbiAgICAgIHRoaXMuaW5pdGlhdGVkQnlCZWhhdmlvciA9IGZhbHNlO1xuICAgICAgdGhpcy5zeXN0ZW1Db250cm9sbGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmVuaGFuY2UgPSBmYWxzZTtcbiAgICAgIHRoaXMucGFydFJlcGxhY2VtZW50cyA9IG51bGw7XG4gICAgICB0aGlzLnZpZXdGYWN0b3J5ID0gbnVsbDtcbiAgICAgIHRoaXMub3JpZ2luYWxBdHRyTmFtZSA9IG51bGw7XG4gICAgICB0aGlzLnNraXBDb250ZW50UHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy5jb250ZW50RmFjdG9yeSA9IG51bGw7XG4gICAgICB0aGlzLmJpbmRpbmdDb250ZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMuYW5jaG9ySXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMuaG9zdCA9IG51bGw7XG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBudWxsO1xuICAgICAgdGhpcy50eXBlID0gbnVsbDtcbiAgICAgIHRoaXMuYXR0ck5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBCZWhhdmlvckluc3RydWN0aW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQmVoYXZpb3JJbnN0cnVjdGlvbiA9IEJlaGF2aW9ySW5zdHJ1Y3Rpb247XG5cbiAgdmFyIFRhcmdldEluc3RydWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBUYXJnZXRJbnN0cnVjdGlvbi5jb250ZW50U2VsZWN0b3IgPSBmdW5jdGlvbiBjb250ZW50U2VsZWN0b3Iobm9kZSwgcGFyZW50SW5qZWN0b3JJZCkge1xuICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFRhcmdldEluc3RydWN0aW9uKCk7XG4gICAgICBpbnN0cnVjdGlvbi5wYXJlbnRJbmplY3RvcklkID0gcGFyZW50SW5qZWN0b3JJZDtcbiAgICAgIGluc3RydWN0aW9uLmNvbnRlbnRTZWxlY3RvciA9IHRydWU7XG4gICAgICBpbnN0cnVjdGlvbi5zZWxlY3RvciA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzZWxlY3QnKTtcbiAgICAgIGluc3RydWN0aW9uLnN1cHByZXNzQmluZCA9IHRydWU7XG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gICAgfTtcblxuICAgIFRhcmdldEluc3RydWN0aW9uLmNvbnRlbnRFeHByZXNzaW9uID0gZnVuY3Rpb24gY29udGVudEV4cHJlc3Npb24oZXhwcmVzc2lvbikge1xuICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFRhcmdldEluc3RydWN0aW9uKCk7XG4gICAgICBpbnN0cnVjdGlvbi5jb250ZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gICAgfTtcblxuICAgIFRhcmdldEluc3RydWN0aW9uLmxpZnRpbmcgPSBmdW5jdGlvbiBsaWZ0aW5nKHBhcmVudEluamVjdG9ySWQsIGxpZnRpbmdJbnN0cnVjdGlvbikge1xuICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFRhcmdldEluc3RydWN0aW9uKCk7XG4gICAgICBpbnN0cnVjdGlvbi5wYXJlbnRJbmplY3RvcklkID0gcGFyZW50SW5qZWN0b3JJZDtcbiAgICAgIGluc3RydWN0aW9uLmV4cHJlc3Npb25zID0gVGFyZ2V0SW5zdHJ1Y3Rpb24ubm9FeHByZXNzaW9ucztcbiAgICAgIGluc3RydWN0aW9uLmJlaGF2aW9ySW5zdHJ1Y3Rpb25zID0gW2xpZnRpbmdJbnN0cnVjdGlvbl07XG4gICAgICBpbnN0cnVjdGlvbi52aWV3RmFjdG9yeSA9IGxpZnRpbmdJbnN0cnVjdGlvbi52aWV3RmFjdG9yeTtcbiAgICAgIGluc3RydWN0aW9uLnByb3ZpZGVycyA9IFtsaWZ0aW5nSW5zdHJ1Y3Rpb24udHlwZS50YXJnZXRdO1xuICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xuICAgIH07XG5cbiAgICBUYXJnZXRJbnN0cnVjdGlvbi5ub3JtYWwgPSBmdW5jdGlvbiBub3JtYWwoaW5qZWN0b3JJZCwgcGFyZW50SW5qZWN0b3JJZCwgcHJvdmlkZXJzLCBiZWhhdmlvckluc3RydWN0aW9ucywgZXhwcmVzc2lvbnMsIGVsZW1lbnRJbnN0cnVjdGlvbikge1xuICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFRhcmdldEluc3RydWN0aW9uKCk7XG4gICAgICBpbnN0cnVjdGlvbi5pbmplY3RvcklkID0gaW5qZWN0b3JJZDtcbiAgICAgIGluc3RydWN0aW9uLnBhcmVudEluamVjdG9ySWQgPSBwYXJlbnRJbmplY3RvcklkO1xuICAgICAgaW5zdHJ1Y3Rpb24ucHJvdmlkZXJzID0gcHJvdmlkZXJzO1xuICAgICAgaW5zdHJ1Y3Rpb24uYmVoYXZpb3JJbnN0cnVjdGlvbnMgPSBiZWhhdmlvckluc3RydWN0aW9ucztcbiAgICAgIGluc3RydWN0aW9uLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XG4gICAgICBpbnN0cnVjdGlvbi5hbmNob3JJc0NvbnRhaW5lciA9IGVsZW1lbnRJbnN0cnVjdGlvbiA/IGVsZW1lbnRJbnN0cnVjdGlvbi5hbmNob3JJc0NvbnRhaW5lciA6IHRydWU7XG4gICAgICBpbnN0cnVjdGlvbi5lbGVtZW50SW5zdHJ1Y3Rpb24gPSBlbGVtZW50SW5zdHJ1Y3Rpb247XG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gICAgfTtcblxuICAgIFRhcmdldEluc3RydWN0aW9uLnN1cnJvZ2F0ZSA9IGZ1bmN0aW9uIHN1cnJvZ2F0ZShwcm92aWRlcnMsIGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLCBleHByZXNzaW9ucywgdmFsdWVzKSB7XG4gICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgVGFyZ2V0SW5zdHJ1Y3Rpb24oKTtcbiAgICAgIGluc3RydWN0aW9uLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XG4gICAgICBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9ucyA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zO1xuICAgICAgaW5zdHJ1Y3Rpb24ucHJvdmlkZXJzID0gcHJvdmlkZXJzO1xuICAgICAgaW5zdHJ1Y3Rpb24udmFsdWVzID0gdmFsdWVzO1xuICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFyZ2V0SW5zdHJ1Y3Rpb24sIG51bGwsIFt7XG4gICAgICBrZXk6ICdub0V4cHJlc3Npb25zJyxcbiAgICAgIHZhbHVlOiBPYmplY3QuZnJlZXplKFtdKSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XSk7XG5cbiAgICBmdW5jdGlvbiBUYXJnZXRJbnN0cnVjdGlvbigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYXJnZXRJbnN0cnVjdGlvbik7XG5cbiAgICAgIHRoaXMuaW5qZWN0b3JJZCA9IG51bGw7XG4gICAgICB0aGlzLnBhcmVudEluamVjdG9ySWQgPSBudWxsO1xuXG4gICAgICB0aGlzLmNvbnRlbnRTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgdGhpcy5zZWxlY3RvciA9IG51bGw7XG4gICAgICB0aGlzLnN1cHByZXNzQmluZCA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmNvbnRlbnRFeHByZXNzaW9uID0gbnVsbDtcblxuICAgICAgdGhpcy5leHByZXNzaW9ucyA9IG51bGw7XG4gICAgICB0aGlzLmJlaGF2aW9ySW5zdHJ1Y3Rpb25zID0gbnVsbDtcbiAgICAgIHRoaXMucHJvdmlkZXJzID0gbnVsbDtcblxuICAgICAgdGhpcy52aWV3RmFjdG9yeSA9IG51bGw7XG5cbiAgICAgIHRoaXMuYW5jaG9ySXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMuZWxlbWVudEluc3RydWN0aW9uID0gbnVsbDtcblxuICAgICAgdGhpcy52YWx1ZXMgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBUYXJnZXRJbnN0cnVjdGlvbjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlRhcmdldEluc3RydWN0aW9uID0gVGFyZ2V0SW5zdHJ1Y3Rpb247XG5cbiAgdmFyIFZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmlld1N0cmF0ZWd5KCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdTdHJhdGVneSk7XG4gICAgfVxuXG4gICAgVmlld1N0cmF0ZWd5LnByb3RvdHlwZS5tYWtlUmVsYXRpdmVUbyA9IGZ1bmN0aW9uIG1ha2VSZWxhdGl2ZVRvKGJhc2VVcmwpIHt9O1xuXG4gICAgVmlld1N0cmF0ZWd5Lm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWUgPSBuZXcgVXNlVmlld1N0cmF0ZWd5KHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlICYmICEodmFsdWUgaW5zdGFuY2VvZiBWaWV3U3RyYXRlZ3kpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZpZXcgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBpbnN0YW5jZSBvZiBWaWV3U3RyYXRlZ3kuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgVmlld1N0cmF0ZWd5LmdldERlZmF1bHQgPSBmdW5jdGlvbiBnZXREZWZhdWx0KHRhcmdldCkge1xuICAgICAgdmFyIHN0cmF0ZWd5LCBhbm5vdGF0aW9uO1xuXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gICAgICB9XG5cbiAgICAgIGFubm90YXRpb24gPSBfYXVyZWxpYU1ldGFkYXRhLk9yaWdpbi5nZXQodGFyZ2V0KTtcbiAgICAgIHN0cmF0ZWd5ID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXQoVmlld1N0cmF0ZWd5Lm1ldGFkYXRhS2V5LCB0YXJnZXQpO1xuXG4gICAgICBpZiAoIXN0cmF0ZWd5KSB7XG4gICAgICAgIGlmICghYW5ub3RhdGlvbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRldGVybWludGUgZGVmYXVsdCB2aWV3IHN0cmF0ZWd5IGZvciBvYmplY3QuJywgdGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmF0ZWd5ID0gbmV3IENvbnZlbnRpb25hbFZpZXdTdHJhdGVneShhbm5vdGF0aW9uLm1vZHVsZUlkKTtcbiAgICAgIH0gZWxzZSBpZiAoYW5ub3RhdGlvbikge1xuICAgICAgICBzdHJhdGVneS5tb2R1bGVJZCA9IGFubm90YXRpb24ubW9kdWxlSWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHJhdGVneTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFZpZXdTdHJhdGVneSwgbnVsbCwgW3tcbiAgICAgIGtleTogJ21ldGFkYXRhS2V5JyxcbiAgICAgIHZhbHVlOiAnYXVyZWxpYTp2aWV3LXN0cmF0ZWd5JyxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVmlld1N0cmF0ZWd5O1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmlld1N0cmF0ZWd5ID0gVmlld1N0cmF0ZWd5O1xuXG4gIHZhciBVc2VWaWV3U3RyYXRlZ3kgPSAoZnVuY3Rpb24gKF9WaWV3U3RyYXRlZ3kpIHtcbiAgICBfaW5oZXJpdHMoVXNlVmlld1N0cmF0ZWd5LCBfVmlld1N0cmF0ZWd5KTtcblxuICAgIGZ1bmN0aW9uIFVzZVZpZXdTdHJhdGVneShwYXRoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXNlVmlld1N0cmF0ZWd5KTtcblxuICAgICAgX1ZpZXdTdHJhdGVneS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB9XG5cbiAgICBVc2VWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmxvYWRWaWV3RmFjdG9yeSA9IGZ1bmN0aW9uIGxvYWRWaWV3RmFjdG9yeSh2aWV3RW5naW5lLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0KSB7XG4gICAgICBpZiAoIXRoaXMuYWJzb2x1dGVQYXRoICYmIHRoaXMubW9kdWxlSWQpIHtcbiAgICAgICAgdGhpcy5hYnNvbHV0ZVBhdGggPSBfYXVyZWxpYVBhdGgucmVsYXRpdmVUb0ZpbGUodGhpcy5wYXRoLCB0aGlzLm1vZHVsZUlkKTtcbiAgICAgIH1cblxuICAgICAgY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCA9IHRoaXMubW9kdWxlSWQ7XG4gICAgICByZXR1cm4gdmlld0VuZ2luZS5sb2FkVmlld0ZhY3RvcnkodGhpcy5hYnNvbHV0ZVBhdGggfHwgdGhpcy5wYXRoLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0KTtcbiAgICB9O1xuXG4gICAgVXNlVmlld1N0cmF0ZWd5LnByb3RvdHlwZS5tYWtlUmVsYXRpdmVUbyA9IGZ1bmN0aW9uIG1ha2VSZWxhdGl2ZVRvKGZpbGUpIHtcbiAgICAgIHRoaXMuYWJzb2x1dGVQYXRoID0gX2F1cmVsaWFQYXRoLnJlbGF0aXZlVG9GaWxlKHRoaXMucGF0aCwgZmlsZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBVc2VWaWV3U3RyYXRlZ3k7XG4gIH0pKFZpZXdTdHJhdGVneSk7XG5cbiAgZXhwb3J0cy5Vc2VWaWV3U3RyYXRlZ3kgPSBVc2VWaWV3U3RyYXRlZ3k7XG5cbiAgdmFyIENvbnZlbnRpb25hbFZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoX1ZpZXdTdHJhdGVneTIpIHtcbiAgICBfaW5oZXJpdHMoQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5LCBfVmlld1N0cmF0ZWd5Mik7XG5cbiAgICBmdW5jdGlvbiBDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3kobW9kdWxlSWQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3kpO1xuXG4gICAgICBfVmlld1N0cmF0ZWd5Mi5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5tb2R1bGVJZCA9IG1vZHVsZUlkO1xuICAgICAgdGhpcy52aWV3VXJsID0gQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5LmNvbnZlcnRNb2R1bGVJZFRvVmlld1VybChtb2R1bGVJZCk7XG4gICAgfVxuXG4gICAgQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5LnByb3RvdHlwZS5sb2FkVmlld0ZhY3RvcnkgPSBmdW5jdGlvbiBsb2FkVmlld0ZhY3Rvcnkodmlld0VuZ2luZSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCkge1xuICAgICAgY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCA9IHRoaXMubW9kdWxlSWQ7XG4gICAgICByZXR1cm4gdmlld0VuZ2luZS5sb2FkVmlld0ZhY3RvcnkodGhpcy52aWV3VXJsLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0KTtcbiAgICB9O1xuXG4gICAgQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5LmNvbnZlcnRNb2R1bGVJZFRvVmlld1VybCA9IGZ1bmN0aW9uIGNvbnZlcnRNb2R1bGVJZFRvVmlld1VybChtb2R1bGVJZCkge1xuICAgICAgdmFyIGlkID0gbW9kdWxlSWQuZW5kc1dpdGgoJy5qcycpIHx8IG1vZHVsZUlkLmVuZHNXaXRoKCcudHMnKSA/IG1vZHVsZUlkLnN1YnN0cmluZygwLCBtb2R1bGVJZC5sZW5ndGggLSAzKSA6IG1vZHVsZUlkO1xuICAgICAgcmV0dXJuIGlkICsgJy5odG1sJztcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnZlbnRpb25hbFZpZXdTdHJhdGVneTtcbiAgfSkoVmlld1N0cmF0ZWd5KTtcblxuICBleHBvcnRzLkNvbnZlbnRpb25hbFZpZXdTdHJhdGVneSA9IENvbnZlbnRpb25hbFZpZXdTdHJhdGVneTtcblxuICB2YXIgTm9WaWV3U3RyYXRlZ3kgPSAoZnVuY3Rpb24gKF9WaWV3U3RyYXRlZ3kzKSB7XG4gICAgX2luaGVyaXRzKE5vVmlld1N0cmF0ZWd5LCBfVmlld1N0cmF0ZWd5Myk7XG5cbiAgICBmdW5jdGlvbiBOb1ZpZXdTdHJhdGVneSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb1ZpZXdTdHJhdGVneSk7XG5cbiAgICAgIF9WaWV3U3RyYXRlZ3kzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgTm9WaWV3U3RyYXRlZ3kucHJvdG90eXBlLmxvYWRWaWV3RmFjdG9yeSA9IGZ1bmN0aW9uIGxvYWRWaWV3RmFjdG9yeSh2aWV3RW5naW5lLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTm9WaWV3U3RyYXRlZ3k7XG4gIH0pKFZpZXdTdHJhdGVneSk7XG5cbiAgZXhwb3J0cy5Ob1ZpZXdTdHJhdGVneSA9IE5vVmlld1N0cmF0ZWd5O1xuXG4gIHZhciBUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5ID0gKGZ1bmN0aW9uIChfVmlld1N0cmF0ZWd5NCkge1xuICAgIF9pbmhlcml0cyhUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5LCBfVmlld1N0cmF0ZWd5NCk7XG5cbiAgICBmdW5jdGlvbiBUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5KG1vZHVsZUlkLCBlbnRyeSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRlbXBsYXRlUmVnaXN0cnlWaWV3U3RyYXRlZ3kpO1xuXG4gICAgICBfVmlld1N0cmF0ZWd5NC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5tb2R1bGVJZCA9IG1vZHVsZUlkO1xuICAgICAgdGhpcy5lbnRyeSA9IGVudHJ5O1xuICAgIH1cblxuICAgIFRlbXBsYXRlUmVnaXN0cnlWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmxvYWRWaWV3RmFjdG9yeSA9IGZ1bmN0aW9uIGxvYWRWaWV3RmFjdG9yeSh2aWV3RW5naW5lLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0KSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmVudHJ5O1xuXG4gICAgICBpZiAoZW50cnkuaXNSZWFkeSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVudHJ5LmZhY3RvcnkpO1xuICAgICAgfVxuXG4gICAgICBjb21waWxlSW5zdHJ1Y3Rpb24uYXNzb2NpYXRlZE1vZHVsZUlkID0gdGhpcy5tb2R1bGVJZDtcbiAgICAgIHJldHVybiB2aWV3RW5naW5lLmxvYWRWaWV3RmFjdG9yeShlbnRyeSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCk7XG4gICAgfTtcblxuICAgIHJldHVybiBUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5O1xuICB9KShWaWV3U3RyYXRlZ3kpO1xuXG4gIGV4cG9ydHMuVGVtcGxhdGVSZWdpc3RyeVZpZXdTdHJhdGVneSA9IFRlbXBsYXRlUmVnaXN0cnlWaWV3U3RyYXRlZ3k7XG5cbiAgdmFyIElubGluZVZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoX1ZpZXdTdHJhdGVneTUpIHtcbiAgICBfaW5oZXJpdHMoSW5saW5lVmlld1N0cmF0ZWd5LCBfVmlld1N0cmF0ZWd5NSk7XG5cbiAgICBmdW5jdGlvbiBJbmxpbmVWaWV3U3RyYXRlZ3kobWFya3VwLCBkZXBlbmRlbmNpZXMsIGRlcGVuZGVuY3lCYXNlVXJsKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5saW5lVmlld1N0cmF0ZWd5KTtcblxuICAgICAgX1ZpZXdTdHJhdGVneTUuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMubWFya3VwID0gbWFya3VwO1xuICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXMgfHwgbnVsbDtcbiAgICAgIHRoaXMuZGVwZW5kZW5jeUJhc2VVcmwgPSBkZXBlbmRlbmN5QmFzZVVybCB8fCAnJztcbiAgICB9XG5cbiAgICBJbmxpbmVWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmxvYWRWaWV3RmFjdG9yeSA9IGZ1bmN0aW9uIGxvYWRWaWV3RmFjdG9yeSh2aWV3RW5naW5lLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0KSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmVudHJ5LFxuICAgICAgICAgIGRlcGVuZGVuY2llcyA9IHRoaXMuZGVwZW5kZW5jaWVzO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnkuaXNSZWFkeSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVudHJ5LmZhY3RvcnkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVudHJ5ID0gZW50cnkgPSBuZXcgX2F1cmVsaWFMb2FkZXIuVGVtcGxhdGVSZWdpc3RyeUVudHJ5KHRoaXMubW9kdWxlSWQgfHwgdGhpcy5kZXBlbmRlbmN5QmFzZVVybCk7XG4gICAgICBlbnRyeS5zZXRUZW1wbGF0ZShjcmVhdGVUZW1wbGF0ZUZyb21NYXJrdXAodGhpcy5tYXJrdXApKTtcblxuICAgICAgaWYgKGRlcGVuZGVuY2llcyAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gZGVwZW5kZW5jaWVzW2ldO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY3VycmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZW50cnkuYWRkRGVwZW5kZW5jeShjdXJyZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50cnkuYWRkRGVwZW5kZW5jeShjdXJyZW50LmZyb20sIGN1cnJlbnQuYXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb21waWxlSW5zdHJ1Y3Rpb24uYXNzb2NpYXRlZE1vZHVsZUlkID0gdGhpcy5tb2R1bGVJZDtcbiAgICAgIHJldHVybiB2aWV3RW5naW5lLmxvYWRWaWV3RmFjdG9yeShlbnRyeSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCk7XG4gICAgfTtcblxuICAgIHJldHVybiBJbmxpbmVWaWV3U3RyYXRlZ3k7XG4gIH0pKFZpZXdTdHJhdGVneSk7XG5cbiAgZXhwb3J0cy5JbmxpbmVWaWV3U3RyYXRlZ3kgPSBJbmxpbmVWaWV3U3RyYXRlZ3k7XG5cbiAgdmFyIEJpbmRpbmdMYW5ndWFnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZ0xhbmd1YWdlKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJpbmRpbmdMYW5ndWFnZSk7XG4gICAgfVxuXG4gICAgQmluZGluZ0xhbmd1YWdlLnByb3RvdHlwZS5pbnNwZWN0QXR0cmlidXRlID0gZnVuY3Rpb24gaW5zcGVjdEF0dHJpYnV0ZShyZXNvdXJjZXMsIGF0dHJOYW1lLCBhdHRyVmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQSBCaW5kaW5nTGFuZ3VhZ2UgbXVzdCBpbXBsZW1lbnQgaW5zcGVjdEF0dHJpYnV0ZSguLi4pJyk7XG4gICAgfTtcblxuICAgIEJpbmRpbmdMYW5ndWFnZS5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbihyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQSBCaW5kaW5nTGFuZ3VhZ2UgbXVzdCBpbXBsZW1lbnQgY3JlYXRlQXR0cmlidXRlSW5zdHJ1Y3Rpb24oLi4uKScpO1xuICAgIH07XG5cbiAgICBCaW5kaW5nTGFuZ3VhZ2UucHJvdG90eXBlLnBhcnNlVGV4dCA9IGZ1bmN0aW9uIHBhcnNlVGV4dChyZXNvdXJjZXMsIHZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgQmluZGluZ0xhbmd1YWdlIG11c3QgaW1wbGVtZW50IHBhcnNlVGV4dCguLi4pJyk7XG4gICAgfTtcblxuICAgIHJldHVybiBCaW5kaW5nTGFuZ3VhZ2U7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5CaW5kaW5nTGFuZ3VhZ2UgPSBCaW5kaW5nTGFuZ3VhZ2U7XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIobG9va3VwLCBuYW1lLCByZXNvdXJjZSwgdHlwZSkge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBleGlzdGluZyA9IGxvb2t1cFtuYW1lXTtcbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGlmIChleGlzdGluZyAhPT0gcmVzb3VyY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gcmVnaXN0ZXIgJyArIHR5cGUgKyAnIHdoZW4gb25lIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cy4gTmFtZTogJyArIG5hbWUgKyAnLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9va3VwW25hbWVdID0gcmVzb3VyY2U7XG4gIH1cblxuICB2YXIgVmlld1Jlc291cmNlcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmlld1Jlc291cmNlcyhwYXJlbnQsIHZpZXdVcmwpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3UmVzb3VyY2VzKTtcblxuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgICAgIHRoaXMuaGFzUGFyZW50ID0gdGhpcy5wYXJlbnQgIT09IG51bGw7XG4gICAgICB0aGlzLnZpZXdVcmwgPSB2aWV3VXJsIHx8ICcnO1xuICAgICAgdGhpcy52YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uID0gdGhpcy5nZXRWYWx1ZUNvbnZlcnRlci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgICB0aGlzLnZhbHVlQ29udmVydGVycyA9IHt9O1xuICAgICAgdGhpcy5hdHRyaWJ1dGVNYXAgPSB7fTtcbiAgICAgIHRoaXMuYmluZGluZ0xhbmd1YWdlID0gbnVsbDtcbiAgICAgIHRoaXMuaG9vazEgPSBudWxsO1xuICAgICAgdGhpcy5ob29rMiA9IG51bGw7XG4gICAgICB0aGlzLmhvb2szID0gbnVsbDtcbiAgICAgIHRoaXMuYWRkaXRpb25hbEhvb2tzID0gbnVsbDtcbiAgICB9XG5cbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5vbkJlZm9yZUNvbXBpbGUgPSBmdW5jdGlvbiBvbkJlZm9yZUNvbXBpbGUoY29udGVudCwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbikge1xuICAgICAgaWYgKHRoaXMuaGFzUGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm9uQmVmb3JlQ29tcGlsZShjb250ZW50LCByZXNvdXJjZXMsIGluc3RydWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaG9vazEgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5ob29rMS5iZWZvcmVDb21waWxlKGNvbnRlbnQsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLmhvb2syICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5ob29rMi5iZWZvcmVDb21waWxlKGNvbnRlbnQsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb24pO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaG9vazMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaG9vazMuYmVmb3JlQ29tcGlsZShjb250ZW50LCByZXNvdXJjZXMsIGluc3RydWN0aW9uKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWRkaXRpb25hbEhvb2tzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBob29rcyA9IHRoaXMuYWRkaXRpb25hbEhvb2tzO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgX2xlbmd0aCA9IGhvb2tzLmxlbmd0aDsgaSA8IF9sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGhvb2tzW2ldLmJlZm9yZUNvbXBpbGUoY29udGVudCwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUub25BZnRlckNvbXBpbGUgPSBmdW5jdGlvbiBvbkFmdGVyQ29tcGlsZSh2aWV3RmFjdG9yeSkge1xuICAgICAgaWYgKHRoaXMuaGFzUGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm9uQWZ0ZXJDb21waWxlKHZpZXdGYWN0b3J5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaG9vazEgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5ob29rMS5hZnRlckNvbXBpbGUodmlld0ZhY3RvcnkpO1xuXG4gICAgICAgIGlmICh0aGlzLmhvb2syICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5ob29rMi5hZnRlckNvbXBpbGUodmlld0ZhY3RvcnkpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaG9vazMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaG9vazMuYWZ0ZXJDb21waWxlKHZpZXdGYWN0b3J5KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWRkaXRpb25hbEhvb2tzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBob29rcyA9IHRoaXMuYWRkaXRpb25hbEhvb2tzO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgX2xlbmd0aDIgPSBob29rcy5sZW5ndGg7IGkgPCBfbGVuZ3RoMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgaG9va3NbaV0uYWZ0ZXJDb21waWxlKHZpZXdGYWN0b3J5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5vbkJlZm9yZUNyZWF0ZSA9IGZ1bmN0aW9uIG9uQmVmb3JlQ3JlYXRlKHZpZXdGYWN0b3J5LCBjb250YWluZXIsIGNvbnRlbnQsIGluc3RydWN0aW9uLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgaWYgKHRoaXMuaGFzUGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm9uQmVmb3JlQ3JlYXRlKHZpZXdGYWN0b3J5LCBjb250YWluZXIsIGNvbnRlbnQsIGluc3RydWN0aW9uLCBiaW5kaW5nQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhvb2sxICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuaG9vazEuYmVmb3JlQ3JlYXRlKHZpZXdGYWN0b3J5LCBjb250YWluZXIsIGNvbnRlbnQsIGluc3RydWN0aW9uLCBiaW5kaW5nQ29udGV4dCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaG9vazIgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmhvb2syLmJlZm9yZUNyZWF0ZSh2aWV3RmFjdG9yeSwgY29udGFpbmVyLCBjb250ZW50LCBpbnN0cnVjdGlvbiwgYmluZGluZ0NvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaG9vazMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaG9vazMuYmVmb3JlQ3JlYXRlKHZpZXdGYWN0b3J5LCBjb250YWluZXIsIGNvbnRlbnQsIGluc3RydWN0aW9uLCBiaW5kaW5nQ29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFkZGl0aW9uYWxIb29rcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgaG9va3MgPSB0aGlzLmFkZGl0aW9uYWxIb29rcztcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIF9sZW5ndGgzID0gaG9va3MubGVuZ3RoOyBpIDwgX2xlbmd0aDM7ICsraSkge1xuICAgICAgICAgICAgICAgIGhvb2tzW2ldLmJlZm9yZUNyZWF0ZSh2aWV3RmFjdG9yeSwgY29udGFpbmVyLCBjb250ZW50LCBpbnN0cnVjdGlvbiwgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLm9uQWZ0ZXJDcmVhdGUgPSBmdW5jdGlvbiBvbkFmdGVyQ3JlYXRlKHZpZXcpIHtcbiAgICAgIGlmICh0aGlzLmhhc1BhcmVudCkge1xuICAgICAgICB0aGlzLnBhcmVudC5vbkFmdGVyQ3JlYXRlKHZpZXcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ob29rMSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmhvb2sxLmFmdGVyQ3JlYXRlKHZpZXcpO1xuXG4gICAgICAgIGlmICh0aGlzLmhvb2syICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5ob29rMi5hZnRlckNyZWF0ZSh2aWV3KTtcblxuICAgICAgICAgIGlmICh0aGlzLmhvb2szICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmhvb2szLmFmdGVyQ3JlYXRlKHZpZXcpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5hZGRpdGlvbmFsSG9va3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIGhvb2tzID0gdGhpcy5hZGRpdGlvbmFsSG9va3M7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBfbGVuZ3RoNCA9IGhvb2tzLmxlbmd0aDsgaSA8IF9sZW5ndGg0OyArK2kpIHtcbiAgICAgICAgICAgICAgICBob29rc1tpXS5hZnRlckNyZWF0ZSh2aWV3KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWdpc3RlclZpZXdFbmdpbmVIb29rcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyVmlld0VuZ2luZUhvb2tzKGhvb2tzKSB7XG4gICAgICBpZiAoaG9va3MuYmVmb3JlQ29tcGlsZSA9PT0gdW5kZWZpbmVkKSBob29rcy5iZWZvcmVDb21waWxlID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5ub29wO1xuICAgICAgaWYgKGhvb2tzLmFmdGVyQ29tcGlsZSA9PT0gdW5kZWZpbmVkKSBob29rcy5hZnRlckNvbXBpbGUgPSBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLm5vb3A7XG4gICAgICBpZiAoaG9va3MuYmVmb3JlQ3JlYXRlID09PSB1bmRlZmluZWQpIGhvb2tzLmJlZm9yZUNyZWF0ZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEubm9vcDtcbiAgICAgIGlmIChob29rcy5hZnRlckNyZWF0ZSA9PT0gdW5kZWZpbmVkKSBob29rcy5hZnRlckNyZWF0ZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEubm9vcDtcblxuICAgICAgaWYgKHRoaXMuaG9vazEgPT09IG51bGwpIHRoaXMuaG9vazEgPSBob29rcztlbHNlIGlmICh0aGlzLmhvb2syID09PSBudWxsKSB0aGlzLmhvb2syID0gaG9va3M7ZWxzZSBpZiAodGhpcy5ob29rMyA9PT0gbnVsbCkgdGhpcy5ob29rMyA9IGhvb2tzO2Vsc2Uge1xuICAgICAgICBpZiAodGhpcy5hZGRpdGlvbmFsSG9va3MgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmFkZGl0aW9uYWxIb29rcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsSG9va3MucHVzaChob29rcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLmdldEJpbmRpbmdMYW5ndWFnZSA9IGZ1bmN0aW9uIGdldEJpbmRpbmdMYW5ndWFnZShiaW5kaW5nTGFuZ3VhZ2VGYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ0xhbmd1YWdlIHx8ICh0aGlzLmJpbmRpbmdMYW5ndWFnZSA9IGJpbmRpbmdMYW5ndWFnZUZhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUucGF0Y2hJblBhcmVudCA9IGZ1bmN0aW9uIHBhdGNoSW5QYXJlbnQobmV3UGFyZW50KSB7XG4gICAgICB2YXIgb3JpZ2luYWxQYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuICAgICAgdGhpcy5wYXJlbnQgPSBuZXdQYXJlbnQgfHwgbnVsbDtcbiAgICAgIHRoaXMuaGFzUGFyZW50ID0gdGhpcy5wYXJlbnQgIT09IG51bGw7XG5cbiAgICAgIGlmIChuZXdQYXJlbnQucGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgIG5ld1BhcmVudC5wYXJlbnQgPSBvcmlnaW5hbFBhcmVudDtcbiAgICAgICAgbmV3UGFyZW50Lmhhc1BhcmVudCA9IG9yaWdpbmFsUGFyZW50ICE9PSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWxhdGl2ZVRvVmlldyA9IGZ1bmN0aW9uIHJlbGF0aXZlVG9WaWV3KHBhdGgpIHtcbiAgICAgIHJldHVybiBfYXVyZWxpYVBhdGgucmVsYXRpdmVUb0ZpbGUocGF0aCwgdGhpcy52aWV3VXJsKTtcbiAgICB9O1xuXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUucmVnaXN0ZXJFbGVtZW50ID0gZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGJlaGF2aW9yKSB7XG4gICAgICByZWdpc3Rlcih0aGlzLmVsZW1lbnRzLCB0YWdOYW1lLCBiZWhhdmlvciwgJ2FuIEVsZW1lbnQnKTtcbiAgICB9O1xuXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uIGdldEVsZW1lbnQodGFnTmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbdGFnTmFtZV0gfHwgKHRoaXMuaGFzUGFyZW50ID8gdGhpcy5wYXJlbnQuZ2V0RWxlbWVudCh0YWdOYW1lKSA6IG51bGwpO1xuICAgIH07XG5cbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5tYXBBdHRyaWJ1dGUgPSBmdW5jdGlvbiBtYXBBdHRyaWJ1dGUoYXR0cmlidXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXBbYXR0cmlidXRlXSB8fCAodGhpcy5oYXNQYXJlbnQgPyB0aGlzLnBhcmVudC5tYXBBdHRyaWJ1dGUoYXR0cmlidXRlKSA6IG51bGwpO1xuICAgIH07XG5cbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWdpc3RlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyQXR0cmlidXRlKGF0dHJpYnV0ZSwgYmVoYXZpb3IsIGtub3duQXR0cmlidXRlKSB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZU1hcFthdHRyaWJ1dGVdID0ga25vd25BdHRyaWJ1dGU7XG4gICAgICByZWdpc3Rlcih0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZSwgYmVoYXZpb3IsICdhbiBBdHRyaWJ1dGUnKTtcbiAgICB9O1xuXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVdIHx8ICh0aGlzLmhhc1BhcmVudCA/IHRoaXMucGFyZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpIDogbnVsbCk7XG4gICAgfTtcblxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLnJlZ2lzdGVyVmFsdWVDb252ZXJ0ZXIgPSBmdW5jdGlvbiByZWdpc3RlclZhbHVlQ29udmVydGVyKG5hbWUsIHZhbHVlQ29udmVydGVyKSB7XG4gICAgICByZWdpc3Rlcih0aGlzLnZhbHVlQ29udmVydGVycywgbmFtZSwgdmFsdWVDb252ZXJ0ZXIsICdhIFZhbHVlQ29udmVydGVyJyk7XG4gICAgfTtcblxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLmdldFZhbHVlQ29udmVydGVyID0gZnVuY3Rpb24gZ2V0VmFsdWVDb252ZXJ0ZXIobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVDb252ZXJ0ZXJzW25hbWVdIHx8ICh0aGlzLmhhc1BhcmVudCA/IHRoaXMucGFyZW50LmdldFZhbHVlQ29udmVydGVyKG5hbWUpIDogbnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBWaWV3UmVzb3VyY2VzO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmlld1Jlc291cmNlcyA9IFZpZXdSZXNvdXJjZXM7XG5cbiAgdmFyIFZpZXcgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpZXcodmlld0ZhY3RvcnksIGNvbnRhaW5lciwgZnJhZ21lbnQsIGJlaGF2aW9ycywgYmluZGluZ3MsIGNoaWxkcmVuLCBzeXN0ZW1Db250cm9sbGVkLCBjb250ZW50U2VsZWN0b3JzKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlldyk7XG5cbiAgICAgIHRoaXMudmlld0ZhY3RvcnkgPSB2aWV3RmFjdG9yeTtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50O1xuICAgICAgdGhpcy5iZWhhdmlvcnMgPSBiZWhhdmlvcnM7XG4gICAgICB0aGlzLmJpbmRpbmdzID0gYmluZGluZ3M7XG4gICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICB0aGlzLnN5c3RlbUNvbnRyb2xsZWQgPSBzeXN0ZW1Db250cm9sbGVkO1xuICAgICAgdGhpcy5jb250ZW50U2VsZWN0b3JzID0gY29udGVudFNlbGVjdG9ycztcbiAgICAgIHRoaXMuZmlyc3RDaGlsZCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICB0aGlzLmxhc3RDaGlsZCA9IGZyYWdtZW50Lmxhc3RDaGlsZDtcbiAgICAgIHRoaXMuaXNCb3VuZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pc0F0dGFjaGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZyb21DYWNoZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIFZpZXcucHJvdG90eXBlLnJldHVyblRvQ2FjaGUgPSBmdW5jdGlvbiByZXR1cm5Ub0NhY2hlKCkge1xuICAgICAgdGhpcy52aWV3RmFjdG9yeS5yZXR1cm5WaWV3VG9DYWNoZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuY3JlYXRlZCA9IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBpaSxcbiAgICAgICAgICBiZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9ycztcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYmVoYXZpb3JzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgYmVoYXZpb3JzW2ldLmNyZWF0ZWQodGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKGJpbmRpbmdDb250ZXh0LCBzeXN0ZW1VcGRhdGUpIHtcbiAgICAgIHZhciBjb250ZXh0LCBiZWhhdmlvcnMsIGJpbmRpbmdzLCBjaGlsZHJlbiwgaSwgaWk7XG5cbiAgICAgIGlmIChzeXN0ZW1VcGRhdGUgJiYgIXRoaXMuc3lzdGVtQ29udHJvbGxlZCkge1xuICAgICAgICBjb250ZXh0ID0gdGhpcy5iaW5kaW5nQ29udGV4dCB8fCBiaW5kaW5nQ29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQgPSBiaW5kaW5nQ29udGV4dCB8fCB0aGlzLmJpbmRpbmdDb250ZXh0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XG4gICAgICAgIGlmICh0aGlzLmJpbmRpbmdDb250ZXh0ID09PSBjb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcbiAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgICBpZiAodGhpcy5vd25lcikge1xuICAgICAgICB0aGlzLm93bmVyLmJpbmQoY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncztcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYmluZGluZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBiaW5kaW5nc1tpXS5iaW5kKGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBiZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9ycztcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYmVoYXZpb3JzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgYmVoYXZpb3JzW2ldLmJpbmQoY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjaGlsZHJlbltpXS5iaW5kKGNvbnRleHQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5hZGRCaW5kaW5nID0gZnVuY3Rpb24gYWRkQmluZGluZyhiaW5kaW5nKSB7XG4gICAgICB0aGlzLmJpbmRpbmdzLnB1c2goYmluZGluZyk7XG5cbiAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcbiAgICAgICAgYmluZGluZy5iaW5kKHRoaXMuYmluZGluZ0NvbnRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB2YXIgYmVoYXZpb3JzLCBiaW5kaW5ncywgY2hpbGRyZW4sIGksIGlpO1xuXG4gICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLm93bmVyKSB7XG4gICAgICAgICAgdGhpcy5vd25lci51bmJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncztcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBiaW5kaW5ncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgYmluZGluZ3NbaV0udW5iaW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBiZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9ycztcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBiZWhhdmlvcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIGJlaGF2aW9yc1tpXS51bmJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgY2hpbGRyZW5baV0udW5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuaW5zZXJ0Tm9kZXNCZWZvcmUgPSBmdW5jdGlvbiBpbnNlcnROb2Rlc0JlZm9yZShyZWZOb2RlKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcmVmTm9kZS5wYXJlbnROb2RlO1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLmZyYWdtZW50LCByZWZOb2RlKTtcbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuYXBwZW5kTm9kZXNUbyA9IGZ1bmN0aW9uIGFwcGVuZE5vZGVzVG8ocGFyZW50KSB7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5mcmFnbWVudCk7XG4gICAgfTtcblxuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU5vZGVzID0gZnVuY3Rpb24gcmVtb3ZlTm9kZXMoKSB7XG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLmZpcnN0Q2hpbGQsXG4gICAgICAgICAgZW5kID0gdGhpcy5sYXN0Q2hpbGQsXG4gICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50LFxuICAgICAgICAgIG5leHQ7XG5cbiAgICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICAgICAgbG9vcCA9IHRydWUsXG4gICAgICAgICAgbm9kZXMgPSBbXTtcblxuICAgICAgd2hpbGUgKGxvb3ApIHtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IGVuZCkge1xuICAgICAgICAgIGxvb3AgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB0aGlzLmZyYWdtZW50LmFwcGVuZENoaWxkKGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuYXR0YWNoZWQgPSBmdW5jdGlvbiBhdHRhY2hlZCgpIHtcbiAgICAgIHZhciBiZWhhdmlvcnMsIGNoaWxkcmVuLCBpLCBpaTtcblxuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLm93bmVyKSB7XG4gICAgICAgIHRoaXMub3duZXIuYXR0YWNoZWQoKTtcbiAgICAgIH1cblxuICAgICAgYmVoYXZpb3JzID0gdGhpcy5iZWhhdmlvcnM7XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGJlaGF2aW9ycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGJlaGF2aW9yc1tpXS5hdHRhY2hlZCgpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgY2hpbGRyZW5baV0uYXR0YWNoZWQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuZGV0YWNoZWQgPSBmdW5jdGlvbiBkZXRhY2hlZCgpIHtcbiAgICAgIHZhciBiZWhhdmlvcnMsIGNoaWxkcmVuLCBpLCBpaTtcblxuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5vd25lcikge1xuICAgICAgICAgIHRoaXMub3duZXIuZGV0YWNoZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJlaGF2aW9ycyA9IHRoaXMuYmVoYXZpb3JzO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGJlaGF2aW9ycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgYmVoYXZpb3JzW2ldLmRldGFjaGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIGNoaWxkcmVuW2ldLmRldGFjaGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFZpZXc7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WaWV3ID0gVmlldztcblxuICBpZiAoRWxlbWVudCAmJiAhRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgIHZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuICAgIHByb3RvLm1hdGNoZXMgPSBwcm90by5tYXRjaGVzU2VsZWN0b3IgfHwgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IHByb3RvLm9NYXRjaGVzU2VsZWN0b3IgfHwgcHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xuICB9XG5cbiAgdmFyIHBsYWNlaG9sZGVyID0gW107XG5cbiAgZnVuY3Rpb24gZmluZEluc2VydGlvblBvaW50KGdyb3VwcywgaW5kZXgpIHtcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICB3aGlsZSAoIWluc2VydGlvblBvaW50ICYmIGluZGV4ID49IDApIHtcbiAgICAgIGluc2VydGlvblBvaW50ID0gZ3JvdXBzW2luZGV4XVswXTtcbiAgICAgIGluZGV4LS07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2VydGlvblBvaW50O1xuICB9XG5cbiAgdmFyIENvbnRlbnRTZWxlY3RvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgQ29udGVudFNlbGVjdG9yLmFwcGx5U2VsZWN0b3JzID0gZnVuY3Rpb24gYXBwbHlTZWxlY3RvcnModmlldywgY29udGVudFNlbGVjdG9ycywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBjdXJyZW50Q2hpbGQgPSB2aWV3LmZyYWdtZW50LmZpcnN0Q2hpbGQsXG4gICAgICAgICAgY29udGVudE1hcCA9IG5ldyBNYXAoKSxcbiAgICAgICAgICBuZXh0U2libGluZyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjtcblxuICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCkge1xuICAgICAgICBuZXh0U2libGluZyA9IGN1cnJlbnRDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICBpZiAoY3VycmVudENoaWxkLnZpZXdTbG90KSB7XG4gICAgICAgICAgdmFyIHZpZXdTbG90U2VsZWN0b3JzID0gY29udGVudFNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4LmNvcHlGb3JWaWV3U2xvdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGN1cnJlbnRDaGlsZC52aWV3U2xvdC5pbnN0YWxsQ29udGVudFNlbGVjdG9ycyh2aWV3U2xvdFNlbGVjdG9ycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBjb250ZW50U2VsZWN0b3JzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRlbnRTZWxlY3RvciA9IGNvbnRlbnRTZWxlY3RvcnNbaV07XG4gICAgICAgICAgICBpZiAoY29udGVudFNlbGVjdG9yLm1hdGNoZXMoY3VycmVudENoaWxkKSkge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBjb250ZW50TWFwLmdldChjb250ZW50U2VsZWN0b3IpO1xuICAgICAgICAgICAgICBpZiAoIWVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb250ZW50TWFwLnNldChjb250ZW50U2VsZWN0b3IsIGVsZW1lbnRzKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goY3VycmVudENoaWxkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudENoaWxkID0gbmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gY29udGVudFNlbGVjdG9ycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGNvbnRlbnRTZWxlY3RvciA9IGNvbnRlbnRTZWxlY3RvcnNbaV07XG4gICAgICAgIGNhbGxiYWNrKGNvbnRlbnRTZWxlY3RvciwgY29udGVudE1hcC5nZXQoY29udGVudFNlbGVjdG9yKSB8fCBwbGFjZWhvbGRlcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbnRlbnRTZWxlY3RvcihhbmNob3IsIHNlbGVjdG9yKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGVudFNlbGVjdG9yKTtcblxuICAgICAgdGhpcy5hbmNob3IgPSBhbmNob3I7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICB0aGlzLmFsbCA9ICF0aGlzLnNlbGVjdG9yO1xuICAgICAgdGhpcy5ncm91cHMgPSBbXTtcbiAgICB9XG5cbiAgICBDb250ZW50U2VsZWN0b3IucHJvdG90eXBlLmNvcHlGb3JWaWV3U2xvdCA9IGZ1bmN0aW9uIGNvcHlGb3JWaWV3U2xvdCgpIHtcbiAgICAgIHJldHVybiBuZXcgQ29udGVudFNlbGVjdG9yKHRoaXMuYW5jaG9yLCB0aGlzLnNlbGVjdG9yKTtcbiAgICB9O1xuXG4gICAgQ29udGVudFNlbGVjdG9yLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlcyhub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hbGwgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLm1hdGNoZXModGhpcy5zZWxlY3Rvcik7XG4gICAgfTtcblxuICAgIENvbnRlbnRTZWxlY3Rvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKGdyb3VwKSB7XG4gICAgICB2YXIgYW5jaG9yID0gdGhpcy5hbmNob3IsXG4gICAgICAgICAgcGFyZW50ID0gYW5jaG9yLnBhcmVudE5vZGUsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpaTtcblxuICAgICAgZm9yIChpID0gMCwgaWkgPSBncm91cC5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZ3JvdXBbaV0sIGFuY2hvcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ3JvdXBzLnB1c2goZ3JvdXApO1xuICAgIH07XG5cbiAgICBDb250ZW50U2VsZWN0b3IucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChpbmRleCwgZ3JvdXApIHtcbiAgICAgIGlmIChncm91cC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGFuY2hvciA9IGZpbmRJbnNlcnRpb25Qb2ludCh0aGlzLmdyb3VwcywgaW5kZXgpIHx8IHRoaXMuYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50ID0gYW5jaG9yLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaWk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBncm91cC5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShncm91cFtpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmdyb3Vwcy5zcGxpY2UoaW5kZXgsIDAsIGdyb3VwKTtcbiAgICB9O1xuXG4gICAgQ29udGVudFNlbGVjdG9yLnByb3RvdHlwZS5yZW1vdmVBdCA9IGZ1bmN0aW9uIHJlbW92ZUF0KGluZGV4LCBmcmFnbWVudCkge1xuICAgICAgdmFyIGdyb3VwID0gdGhpcy5ncm91cHNbaW5kZXhdLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gZ3JvdXAubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChncm91cFtpXSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ3JvdXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb250ZW50U2VsZWN0b3I7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Db250ZW50U2VsZWN0b3IgPSBDb250ZW50U2VsZWN0b3I7XG5cbiAgZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZUVsZW1lbnQodmlldykge1xuICAgIHZhciBmaXJzdENoaWxkID0gdmlldy5maXJzdENoaWxkO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGQgIT09IG51bGwgJiYgZmlyc3RDaGlsZCAhPT0gdW5kZWZpbmVkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gbmV4dEVsZW1lbnRTaWJsaW5nKGZpcnN0Q2hpbGQpO1xuXG4gICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCAmJiBlbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnYXUtYW5pbWF0ZScpKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIFZpZXdTbG90ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3U2xvdChhbmNob3IsIGFuY2hvcklzQ29udGFpbmVyLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgdmFyIGFuaW1hdG9yID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gQW5pbWF0b3IuaW5zdGFuY2UgOiBhcmd1bWVudHNbM107XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3U2xvdCk7XG5cbiAgICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yO1xuICAgICAgdGhpcy52aWV3QWRkTWV0aG9kID0gYW5jaG9ySXNDb250YWluZXIgPyAnYXBwZW5kTm9kZXNUbycgOiAnaW5zZXJ0Tm9kZXNCZWZvcmUnO1xuICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0O1xuICAgICAgdGhpcy5hbmltYXRvciA9IGFuaW1hdG9yO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XG4gICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY29udGVudFNlbGVjdG9ycyA9IG51bGw7XG4gICAgICBhbmNob3Iudmlld1Nsb3QgPSB0aGlzO1xuICAgIH1cblxuICAgIFZpZXdTbG90LnByb3RvdHlwZS50cmFuc2Zvcm1DaGlsZE5vZGVzSW50b1ZpZXcgPSBmdW5jdGlvbiB0cmFuc2Zvcm1DaGlsZE5vZGVzSW50b1ZpZXcoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5hbmNob3I7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgIGZyYWdtZW50OiBwYXJlbnQsXG4gICAgICAgIGZpcnN0Q2hpbGQ6IHBhcmVudC5maXJzdENoaWxkLFxuICAgICAgICBsYXN0Q2hpbGQ6IHBhcmVudC5sYXN0Q2hpbGQsXG4gICAgICAgIHJldHVyblRvQ2FjaGU6IGZ1bmN0aW9uIHJldHVyblRvQ2FjaGUoKSB7fSxcbiAgICAgICAgcmVtb3ZlTm9kZXM6IGZ1bmN0aW9uIHJlbW92ZU5vZGVzKCkge1xuICAgICAgICAgIHZhciBsYXN0O1xuXG4gICAgICAgICAgd2hpbGUgKGxhc3QgPSBwYXJlbnQubGFzdENoaWxkKSB7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobGFzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge30sXG4gICAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7fSxcbiAgICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7fSxcbiAgICAgICAgYXR0YWNoZWQ6IGZ1bmN0aW9uIGF0dGFjaGVkKCkge30sXG4gICAgICAgIGRldGFjaGVkOiBmdW5jdGlvbiBkZXRhY2hlZCgpIHt9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICB2YXIgaSwgaWksIGNoaWxkcmVuO1xuXG4gICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XG4gICAgICAgIGlmICh0aGlzLmJpbmRpbmdDb250ZXh0ID09PSBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XG4gICAgICB0aGlzLmJpbmRpbmdDb250ZXh0ID0gYmluZGluZ0NvbnRleHQgPSBiaW5kaW5nQ29udGV4dCB8fCB0aGlzLmJpbmRpbmdDb250ZXh0O1xuXG4gICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgY2hpbGRyZW5baV0uYmluZChiaW5kaW5nQ29udGV4dCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdTbG90LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBpaSxcbiAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcblxuICAgICAgZm9yIChpID0gMCwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGNoaWxkcmVuW2ldLnVuYmluZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3U2xvdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHZpZXcpIHtcbiAgICAgIHZpZXdbdGhpcy52aWV3QWRkTWV0aG9kXSh0aGlzLmFuY2hvcik7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmlldyk7XG5cbiAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcbiAgICAgICAgdmlldy5hdHRhY2hlZCgpO1xuXG4gICAgICAgIHZhciBhbmltYXRhYmxlRWxlbWVudCA9IGdldEFuaW1hdGFibGVFbGVtZW50KHZpZXcpO1xuICAgICAgICBpZiAoYW5pbWF0YWJsZUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRvci5lbnRlcihhbmltYXRhYmxlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChpbmRleCwgdmlldykge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbixcbiAgICAgICAgICBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBsZW5ndGggPT09IDAgfHwgaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZCh2aWV3KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZXcuaW5zZXJ0Tm9kZXNCZWZvcmUoY2hpbGRyZW5baW5kZXhdLmZpcnN0Q2hpbGQpO1xuICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIHZpZXcpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcbiAgICAgICAgICB2aWV3LmF0dGFjaGVkKCk7XG5cbiAgICAgICAgICB2YXIgYW5pbWF0YWJsZUVsZW1lbnQgPSBnZXRBbmltYXRhYmxlRWxlbWVudCh2aWV3KTtcbiAgICAgICAgICBpZiAoYW5pbWF0YWJsZUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdG9yLmVudGVyKGFuaW1hdGFibGVFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSh2aWV3LCByZXR1cm5Ub0NhY2hlLCBza2lwQW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVBdCh0aGlzLmNoaWxkcmVuLmluZGV4T2YodmlldyksIHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pO1xuICAgIH07XG5cbiAgICBWaWV3U2xvdC5wcm90b3R5cGUucmVtb3ZlQXQgPSBmdW5jdGlvbiByZW1vdmVBdChpbmRleCwgcmV0dXJuVG9DYWNoZSwgc2tpcEFuaW1hdGlvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHZpZXcgPSB0aGlzLmNoaWxkcmVuW2luZGV4XTtcblxuICAgICAgdmFyIHJlbW92ZUFjdGlvbiA9IGZ1bmN0aW9uIHJlbW92ZUFjdGlvbigpIHtcbiAgICAgICAgdmlldy5yZW1vdmVOb2RlcygpO1xuICAgICAgICBfdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIGlmIChfdGhpcy5pc0F0dGFjaGVkKSB7XG4gICAgICAgICAgdmlldy5kZXRhY2hlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldHVyblRvQ2FjaGUpIHtcbiAgICAgICAgICB2aWV3LnJldHVyblRvQ2FjaGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgfTtcblxuICAgICAgaWYgKCFza2lwQW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBhbmltYXRhYmxlRWxlbWVudCA9IGdldEFuaW1hdGFibGVFbGVtZW50KHZpZXcpO1xuICAgICAgICBpZiAoYW5pbWF0YWJsZUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRvci5sZWF2ZShhbmltYXRhYmxlRWxlbWVudCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlQWN0aW9uKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbW92ZUFjdGlvbigpO1xuICAgIH07XG5cbiAgICBWaWV3U2xvdC5wcm90b3R5cGUucmVtb3ZlQWxsID0gZnVuY3Rpb24gcmVtb3ZlQWxsKHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLFxuICAgICAgICAgIGlpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgIGk7XG5cbiAgICAgIHZhciBybVByb21pc2VzID0gW107XG5cbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChza2lwQW5pbWF0aW9uKSB7XG4gICAgICAgICAgY2hpbGQucmVtb3ZlTm9kZXMoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYW5pbWF0YWJsZUVsZW1lbnQgPSBnZXRBbmltYXRhYmxlRWxlbWVudChjaGlsZCk7XG4gICAgICAgIGlmIChhbmltYXRhYmxlRWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHJtUHJvbWlzZXMucHVzaChfdGhpczIuYW5pbWF0b3IubGVhdmUoYW5pbWF0YWJsZUVsZW1lbnQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnJlbW92ZU5vZGVzKCk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkLnJlbW92ZU5vZGVzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcmVtb3ZlQWN0aW9uID0gZnVuY3Rpb24gcmVtb3ZlQWN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMyLmlzQXR0YWNoZWQpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgY2hpbGRyZW5baV0uZGV0YWNoZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0dXJuVG9DYWNoZSkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltpXS5yZXR1cm5Ub0NhY2hlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmNoaWxkcmVuID0gW107XG4gICAgICB9O1xuXG4gICAgICBpZiAocm1Qcm9taXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChybVByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gcmVtb3ZlQWN0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlQWN0aW9uKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24gc3dhcCh2aWV3LCByZXR1cm5Ub0NhY2hlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHJlbW92ZVJlc3BvbnNlID0gdGhpcy5yZW1vdmVBbGwocmV0dXJuVG9DYWNoZSk7XG5cbiAgICAgIGlmIChyZW1vdmVSZXNwb25zZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVJlc3BvbnNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuYWRkKHZpZXcpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZCh2aWV3KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLmF0dGFjaGVkID0gZnVuY3Rpb24gYXR0YWNoZWQoKSB7XG4gICAgICB2YXIgaSwgaWksIGNoaWxkcmVuLCBjaGlsZDtcblxuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IHRydWU7XG5cbiAgICAgIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBjaGlsZC5hdHRhY2hlZCgpO1xuXG4gICAgICAgIHZhciBlbGVtZW50ID0gY2hpbGQuZmlyc3RDaGlsZCA/IG5leHRFbGVtZW50U2libGluZyhjaGlsZC5maXJzdENoaWxkKSA6IG51bGw7XG4gICAgICAgIGlmIChjaGlsZC5maXJzdENoaWxkICYmIGNoaWxkLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDggJiYgZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhdS1hbmltYXRlJykpIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdG9yLmVudGVyKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5kZXRhY2hlZCA9IGZ1bmN0aW9uIGRldGFjaGVkKCkge1xuICAgICAgdmFyIGksIGlpLCBjaGlsZHJlbjtcblxuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICBjaGlsZHJlbltpXS5kZXRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5pbnN0YWxsQ29udGVudFNlbGVjdG9ycyA9IGZ1bmN0aW9uIGluc3RhbGxDb250ZW50U2VsZWN0b3JzKGNvbnRlbnRTZWxlY3RvcnMpIHtcbiAgICAgIHRoaXMuY29udGVudFNlbGVjdG9ycyA9IGNvbnRlbnRTZWxlY3RvcnM7XG4gICAgICB0aGlzLmFkZCA9IHRoaXMuX2NvbnRlbnRTZWxlY3RvckFkZDtcbiAgICAgIHRoaXMuaW5zZXJ0ID0gdGhpcy5fY29udGVudFNlbGVjdG9ySW5zZXJ0O1xuICAgICAgdGhpcy5yZW1vdmUgPSB0aGlzLl9jb250ZW50U2VsZWN0b3JSZW1vdmU7XG4gICAgICB0aGlzLnJlbW92ZUF0ID0gdGhpcy5fY29udGVudFNlbGVjdG9yUmVtb3ZlQXQ7XG4gICAgICB0aGlzLnJlbW92ZUFsbCA9IHRoaXMuX2NvbnRlbnRTZWxlY3RvclJlbW92ZUFsbDtcbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLl9jb250ZW50U2VsZWN0b3JBZGQgPSBmdW5jdGlvbiBfY29udGVudFNlbGVjdG9yQWRkKHZpZXcpIHtcbiAgICAgIENvbnRlbnRTZWxlY3Rvci5hcHBseVNlbGVjdG9ycyh2aWV3LCB0aGlzLmNvbnRlbnRTZWxlY3RvcnMsIGZ1bmN0aW9uIChjb250ZW50U2VsZWN0b3IsIGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50U2VsZWN0b3IuYWRkKGdyb3VwKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmlldyk7XG5cbiAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcbiAgICAgICAgdmlldy5hdHRhY2hlZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3U2xvdC5wcm90b3R5cGUuX2NvbnRlbnRTZWxlY3Rvckluc2VydCA9IGZ1bmN0aW9uIF9jb250ZW50U2VsZWN0b3JJbnNlcnQoaW5kZXgsIHZpZXcpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhdGhpcy5jaGlsZHJlbi5sZW5ndGggfHwgaW5kZXggPj0gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmlldyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDb250ZW50U2VsZWN0b3IuYXBwbHlTZWxlY3RvcnModmlldywgdGhpcy5jb250ZW50U2VsZWN0b3JzLCBmdW5jdGlvbiAoY29udGVudFNlbGVjdG9yLCBncm91cCkge1xuICAgICAgICAgIHJldHVybiBjb250ZW50U2VsZWN0b3IuaW5zZXJ0KGluZGV4LCBncm91cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCB2aWV3KTtcblxuICAgICAgICBpZiAodGhpcy5pc0F0dGFjaGVkKSB7XG4gICAgICAgICAgdmlldy5hdHRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5fY29udGVudFNlbGVjdG9yUmVtb3ZlID0gZnVuY3Rpb24gX2NvbnRlbnRTZWxlY3RvclJlbW92ZSh2aWV3KSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YodmlldyksXG4gICAgICAgICAgY29udGVudFNlbGVjdG9ycyA9IHRoaXMuY29udGVudFNlbGVjdG9ycyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpO1xuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGNvbnRlbnRTZWxlY3RvcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjb250ZW50U2VsZWN0b3JzW2ldLnJlbW92ZUF0KGluZGV4LCB2aWV3LmZyYWdtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICBpZiAodGhpcy5pc0F0dGFjaGVkKSB7XG4gICAgICAgIHZpZXcuZGV0YWNoZWQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLl9jb250ZW50U2VsZWN0b3JSZW1vdmVBdCA9IGZ1bmN0aW9uIF9jb250ZW50U2VsZWN0b3JSZW1vdmVBdChpbmRleCkge1xuICAgICAgdmFyIHZpZXcgPSB0aGlzLmNoaWxkcmVuW2luZGV4XSxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3JzID0gdGhpcy5jb250ZW50U2VsZWN0b3JzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gY29udGVudFNlbGVjdG9ycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGNvbnRlbnRTZWxlY3RvcnNbaV0ucmVtb3ZlQXQoaW5kZXgsIHZpZXcuZnJhZ21lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcbiAgICAgICAgdmlldy5kZXRhY2hlZCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmlldztcbiAgICB9O1xuXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLl9jb250ZW50U2VsZWN0b3JSZW1vdmVBbGwgPSBmdW5jdGlvbiBfY29udGVudFNlbGVjdG9yUmVtb3ZlQWxsKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbixcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3JzID0gdGhpcy5jb250ZW50U2VsZWN0b3JzLFxuICAgICAgICAgIGlpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgIGpqID0gY29udGVudFNlbGVjdG9ycy5sZW5ndGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIHZpZXc7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHZpZXcgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgamo7ICsraikge1xuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcnNbal0ucmVtb3ZlQXQoMCwgdmlldy5mcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIGNoaWxkcmVuW2ldLmRldGFjaGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIH07XG5cbiAgICByZXR1cm4gVmlld1Nsb3Q7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WaWV3U2xvdCA9IFZpZXdTbG90O1xuXG4gIGZ1bmN0aW9uIGVsZW1lbnRDb250YWluZXJHZXQoa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gRWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSBCb3VuZFZpZXdGYWN0b3J5KSB7XG4gICAgICBpZiAodGhpcy5ib3VuZFZpZXdGYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdW5kVmlld0ZhY3Rvcnk7XG4gICAgICB9XG5cbiAgICAgIHZhciBmYWN0b3J5ID0gdGhpcy5pbnN0cnVjdGlvbi52aWV3RmFjdG9yeSxcbiAgICAgICAgICBwYXJ0UmVwbGFjZW1lbnRzID0gdGhpcy5wYXJ0UmVwbGFjZW1lbnRzO1xuXG4gICAgICBpZiAocGFydFJlcGxhY2VtZW50cykge1xuICAgICAgICBmYWN0b3J5ID0gcGFydFJlcGxhY2VtZW50c1tmYWN0b3J5LnBhcnRdIHx8IGZhY3Rvcnk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmJvdW5kVmlld0ZhY3RvcnkgPSBuZXcgQm91bmRWaWV3RmFjdG9yeSh0aGlzLCBmYWN0b3J5LCB0aGlzLmJpbmRpbmdDb250ZXh0LCBwYXJ0UmVwbGFjZW1lbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSBWaWV3U2xvdCkge1xuICAgICAgaWYgKHRoaXMudmlld1Nsb3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnZpZXdTbG90ID0gbmV3IFZpZXdTbG90KHRoaXMuZWxlbWVudCwgdGhpcy5pbnN0cnVjdGlvbi5hbmNob3JJc0NvbnRhaW5lciwgdGhpcy5iaW5kaW5nQ29udGV4dCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh0aGlzLnZpZXdTbG90KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMudmlld1Nsb3Q7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gVmlld1Jlc291cmNlcykge1xuICAgICAgcmV0dXJuIHRoaXMudmlld1Jlc291cmNlcztcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSBUYXJnZXRJbnN0cnVjdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3VwZXJHZXQoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRDb250YWluZXIocGFyZW50LCBlbGVtZW50LCBpbnN0cnVjdGlvbiwgYmluZGluZ0NvbnRleHQsIGNoaWxkcmVuLCBwYXJ0UmVwbGFjZW1lbnRzLCByZXNvdXJjZXMpIHtcbiAgICB2YXIgY29udGFpbmVyID0gcGFyZW50LmNyZWF0ZUNoaWxkKCksXG4gICAgICAgIHByb3ZpZGVycyxcbiAgICAgICAgaTtcblxuICAgIGNvbnRhaW5lci5lbGVtZW50ID0gZWxlbWVudDtcbiAgICBjb250YWluZXIuaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcbiAgICBjb250YWluZXIuYmluZGluZ0NvbnRleHQgPSBiaW5kaW5nQ29udGV4dDtcbiAgICBjb250YWluZXIuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICBjb250YWluZXIudmlld1Jlc291cmNlcyA9IHJlc291cmNlcztcbiAgICBjb250YWluZXIucGFydFJlcGxhY2VtZW50cyA9IHBhcnRSZXBsYWNlbWVudHM7XG5cbiAgICBwcm92aWRlcnMgPSBpbnN0cnVjdGlvbi5wcm92aWRlcnM7XG4gICAgaSA9IHByb3ZpZGVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24ocHJvdmlkZXJzW2ldKTtcbiAgICB9XG5cbiAgICBjb250YWluZXIuc3VwZXJHZXQgPSBjb250YWluZXIuZ2V0O1xuICAgIGNvbnRhaW5lci5nZXQgPSBlbGVtZW50Q29udGFpbmVyR2V0O1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VFbGVtZW50SW50b0FuY2hvcihlbGVtZW50LCBlbGVtZW50SW5zdHJ1Y3Rpb24pIHtcbiAgICB2YXIgYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnYW5jaG9yJyk7XG5cbiAgICBpZiAoZWxlbWVudEluc3RydWN0aW9uKSB7XG4gICAgICBhbmNob3IuaGFzQXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfTtcbiAgICAgIGFuY2hvci5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9O1xuICAgICAgYW5jaG9yLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoYW5jaG9yLCBlbGVtZW50KTtcblxuICAgIHJldHVybiBhbmNob3I7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseUluc3RydWN0aW9ucyhjb250YWluZXJzLCBiaW5kaW5nQ29udGV4dCwgZWxlbWVudCwgaW5zdHJ1Y3Rpb24sIGJlaGF2aW9ycywgYmluZGluZ3MsIGNoaWxkcmVuLCBjb250ZW50U2VsZWN0b3JzLCBwYXJ0UmVwbGFjZW1lbnRzLCByZXNvdXJjZXMpIHtcbiAgICB2YXIgYmVoYXZpb3JJbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9ucyxcbiAgICAgICAgZXhwcmVzc2lvbnMgPSBpbnN0cnVjdGlvbi5leHByZXNzaW9ucyxcbiAgICAgICAgZWxlbWVudENvbnRhaW5lcixcbiAgICAgICAgaSxcbiAgICAgICAgaWksXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIGluc3RhbmNlO1xuXG4gICAgaWYgKGluc3RydWN0aW9uLmNvbnRlbnRFeHByZXNzaW9uKSB7XG4gICAgICBiaW5kaW5ncy5wdXNoKGluc3RydWN0aW9uLmNvbnRlbnRFeHByZXNzaW9uLmNyZWF0ZUJpbmRpbmcoZWxlbWVudC5uZXh0U2libGluZykpO1xuICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0cnVjdGlvbi5jb250ZW50U2VsZWN0b3IpIHtcbiAgICAgIHZhciBjb21tZW50QW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnYW5jaG9yJyk7XG4gICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbW1lbnRBbmNob3IsIGVsZW1lbnQpO1xuICAgICAgY29udGVudFNlbGVjdG9ycy5wdXNoKG5ldyBDb250ZW50U2VsZWN0b3IoY29tbWVudEFuY2hvciwgaW5zdHJ1Y3Rpb24uc2VsZWN0b3IpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYmVoYXZpb3JJbnN0cnVjdGlvbnMubGVuZ3RoKSB7XG4gICAgICBpZiAoIWluc3RydWN0aW9uLmFuY2hvcklzQ29udGFpbmVyKSB7XG4gICAgICAgIGVsZW1lbnQgPSBtYWtlRWxlbWVudEludG9BbmNob3IoZWxlbWVudCwgaW5zdHJ1Y3Rpb24uZWxlbWVudEluc3RydWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgY29udGFpbmVyc1tpbnN0cnVjdGlvbi5pbmplY3RvcklkXSA9IGVsZW1lbnRDb250YWluZXIgPSBjcmVhdGVFbGVtZW50Q29udGFpbmVyKGNvbnRhaW5lcnNbaW5zdHJ1Y3Rpb24ucGFyZW50SW5qZWN0b3JJZF0sIGVsZW1lbnQsIGluc3RydWN0aW9uLCBiaW5kaW5nQ29udGV4dCwgY2hpbGRyZW4sIHBhcnRSZXBsYWNlbWVudHMsIHJlc291cmNlcyk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYmVoYXZpb3JJbnN0cnVjdGlvbnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjdXJyZW50ID0gYmVoYXZpb3JJbnN0cnVjdGlvbnNbaV07XG4gICAgICAgIGluc3RhbmNlID0gY3VycmVudC50eXBlLmNyZWF0ZShlbGVtZW50Q29udGFpbmVyLCBjdXJyZW50LCBlbGVtZW50LCBiaW5kaW5ncywgY3VycmVudC5wYXJ0UmVwbGFjZW1lbnRzKTtcblxuICAgICAgICBpZiAoaW5zdGFuY2UuY29udGVudFZpZXcpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGluc3RhbmNlLmNvbnRlbnRWaWV3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJlaGF2aW9ycy5wdXNoKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIGJpbmRpbmdzLnB1c2goZXhwcmVzc2lvbnNbaV0uY3JlYXRlQmluZGluZyhlbGVtZW50KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVTdHJpbmdUb09iamVjdChzdHlsZSwgdGFyZ2V0KSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdHlsZS5zcGxpdCgnOycpLFxuICAgICAgICBmaXJzdEluZGV4T2ZDb2xvbixcbiAgICAgICAgaSxcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTtcblxuICAgIHRhcmdldCA9IHRhcmdldCB8fCB7fTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50ID0gYXR0cmlidXRlc1tpXTtcbiAgICAgIGZpcnN0SW5kZXhPZkNvbG9uID0gY3VycmVudC5pbmRleE9mKFwiOlwiKTtcbiAgICAgIGtleSA9IGN1cnJlbnQuc3Vic3RyaW5nKDAsIGZpcnN0SW5kZXhPZkNvbG9uKS50cmltKCk7XG4gICAgICB2YWx1ZSA9IGN1cnJlbnQuc3Vic3RyaW5nKGZpcnN0SW5kZXhPZkNvbG9uICsgMSkudHJpbSgpO1xuICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVPYmplY3RUb1N0cmluZyhvYmopIHtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICByZXN1bHQgKz0ga2V5ICsgJzonICsgb2JqW2tleV0gKyAnOyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5U3Vycm9nYXRlSW5zdHJ1Y3Rpb24oY29udGFpbmVyLCBlbGVtZW50LCBpbnN0cnVjdGlvbiwgYmVoYXZpb3JzLCBiaW5kaW5ncywgY2hpbGRyZW4pIHtcbiAgICB2YXIgYmVoYXZpb3JJbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9ucyxcbiAgICAgICAgZXhwcmVzc2lvbnMgPSBpbnN0cnVjdGlvbi5leHByZXNzaW9ucyxcbiAgICAgICAgcHJvdmlkZXJzID0gaW5zdHJ1Y3Rpb24ucHJvdmlkZXJzLFxuICAgICAgICB2YWx1ZXMgPSBpbnN0cnVjdGlvbi52YWx1ZXMsXG4gICAgICAgIGkgPSB1bmRlZmluZWQsXG4gICAgICAgIGlpID0gdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50ID0gdW5kZWZpbmVkLFxuICAgICAgICBpbnN0YW5jZSA9IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudEF0dHJpYnV0ZVZhbHVlID0gdW5kZWZpbmVkLFxuICAgICAgICBzdHlsZVBhcnRzID0gdW5kZWZpbmVkO1xuXG4gICAgaSA9IHByb3ZpZGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29udGFpbmVyLnJlZ2lzdGVyU2luZ2xldG9uKHByb3ZpZGVyc1tpXSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlcykge1xuICAgICAgY3VycmVudEF0dHJpYnV0ZVZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoa2V5KTtcblxuICAgICAgaWYgKGN1cnJlbnRBdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VycmVudEF0dHJpYnV0ZVZhbHVlICsgJyAnICsgdmFsdWVzW2tleV0pO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgIHZhciBzdHlsZU9iamVjdCA9IHN0eWxlU3RyaW5nVG9PYmplY3QodmFsdWVzW2tleV0pO1xuICAgICAgICAgIHN0eWxlU3RyaW5nVG9PYmplY3QoY3VycmVudEF0dHJpYnV0ZVZhbHVlLCBzdHlsZU9iamVjdCk7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVPYmplY3RUb1N0cmluZyhzdHlsZU9iamVjdCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLmxlbmd0aCkge1xuICAgICAgZm9yIChpID0gMCwgaWkgPSBiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGN1cnJlbnQgPSBiZWhhdmlvckluc3RydWN0aW9uc1tpXTtcbiAgICAgICAgaW5zdGFuY2UgPSBjdXJyZW50LnR5cGUuY3JlYXRlKGNvbnRhaW5lciwgY3VycmVudCwgZWxlbWVudCwgYmluZGluZ3MsIGN1cnJlbnQucGFydFJlcGxhY2VtZW50cyk7XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLmNvbnRlbnRWaWV3KSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChpbnN0YW5jZS5jb250ZW50Vmlldyk7XG4gICAgICAgIH1cblxuICAgICAgICBiZWhhdmlvcnMucHVzaChpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBiaW5kaW5ncy5wdXNoKGV4cHJlc3Npb25zW2ldLmNyZWF0ZUJpbmRpbmcoZWxlbWVudCkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBCb3VuZFZpZXdGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb3VuZFZpZXdGYWN0b3J5KHBhcmVudENvbnRhaW5lciwgdmlld0ZhY3RvcnksIGJpbmRpbmdDb250ZXh0LCBwYXJ0UmVwbGFjZW1lbnRzKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQm91bmRWaWV3RmFjdG9yeSk7XG5cbiAgICAgIHRoaXMucGFyZW50Q29udGFpbmVyID0gcGFyZW50Q29udGFpbmVyO1xuICAgICAgdGhpcy52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xuICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0O1xuICAgICAgdGhpcy5mYWN0b3J5Q3JlYXRlSW5zdHJ1Y3Rpb24gPSB7IHBhcnRSZXBsYWNlbWVudHM6IHBhcnRSZXBsYWNlbWVudHMgfTtcbiAgICB9XG5cbiAgICBCb3VuZFZpZXdGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoYmluZGluZ0NvbnRleHQpIHtcbiAgICAgIHZhciBjaGlsZENvbnRhaW5lciA9IHRoaXMucGFyZW50Q29udGFpbmVyLmNyZWF0ZUNoaWxkKCksXG4gICAgICAgICAgY29udGV4dCA9IGJpbmRpbmdDb250ZXh0IHx8IHRoaXMuYmluZGluZ0NvbnRleHQ7XG5cbiAgICAgIHRoaXMuZmFjdG9yeUNyZWF0ZUluc3RydWN0aW9uLnN5c3RlbUNvbnRyb2xsZWQgPSAhYmluZGluZ0NvbnRleHQ7XG5cbiAgICAgIHJldHVybiB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShjaGlsZENvbnRhaW5lciwgY29udGV4dCwgdGhpcy5mYWN0b3J5Q3JlYXRlSW5zdHJ1Y3Rpb24pO1xuICAgIH07XG5cbiAgICBCb3VuZFZpZXdGYWN0b3J5LnByb3RvdHlwZS5zZXRDYWNoZVNpemUgPSBmdW5jdGlvbiBzZXRDYWNoZVNpemUoc2l6ZSwgZG9Ob3RPdmVycmlkZUlmQWxyZWFkeVNldCkge1xuICAgICAgdGhpcy52aWV3RmFjdG9yeS5zZXRDYWNoZVNpemUoc2l6ZSwgZG9Ob3RPdmVycmlkZUlmQWxyZWFkeVNldCk7XG4gICAgfTtcblxuICAgIEJvdW5kVmlld0ZhY3RvcnkucHJvdG90eXBlLmdldENhY2hlZFZpZXcgPSBmdW5jdGlvbiBnZXRDYWNoZWRWaWV3KCkge1xuICAgICAgcmV0dXJuIHRoaXMudmlld0ZhY3RvcnkuZ2V0Q2FjaGVkVmlldygpO1xuICAgIH07XG5cbiAgICBCb3VuZFZpZXdGYWN0b3J5LnByb3RvdHlwZS5yZXR1cm5WaWV3VG9DYWNoZSA9IGZ1bmN0aW9uIHJldHVyblZpZXdUb0NhY2hlKHZpZXcpIHtcbiAgICAgIHRoaXMudmlld0ZhY3RvcnkucmV0dXJuVmlld1RvQ2FjaGUodmlldyk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhCb3VuZFZpZXdGYWN0b3J5LCBbe1xuICAgICAga2V5OiAnaXNDYWNoaW5nJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3RmFjdG9yeS5pc0NhY2hpbmc7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJvdW5kVmlld0ZhY3Rvcnk7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Cb3VuZFZpZXdGYWN0b3J5ID0gQm91bmRWaWV3RmFjdG9yeTtcblxuICB2YXIgVmlld0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpZXdGYWN0b3J5KHRlbXBsYXRlLCBpbnN0cnVjdGlvbnMsIHJlc291cmNlcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdGYWN0b3J5KTtcblxuICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnM7XG4gICAgICB0aGlzLnJlc291cmNlcyA9IHJlc291cmNlcztcbiAgICAgIHRoaXMuY2FjaGVTaXplID0gLTE7XG4gICAgICB0aGlzLmNhY2hlID0gbnVsbDtcbiAgICAgIHRoaXMuaXNDYWNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgVmlld0ZhY3RvcnkucHJvdG90eXBlLnNldENhY2hlU2l6ZSA9IGZ1bmN0aW9uIHNldENhY2hlU2l6ZShzaXplLCBkb05vdE92ZXJyaWRlSWZBbHJlYWR5U2V0KSB7XG4gICAgICBpZiAoc2l6ZSkge1xuICAgICAgICBpZiAoc2l6ZSA9PT0gJyonKSB7XG4gICAgICAgICAgc2l6ZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNpemUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBzaXplID0gcGFyc2VJbnQoc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2FjaGVTaXplID09PSAtMSB8fCAhZG9Ob3RPdmVycmlkZUlmQWxyZWFkeVNldCkge1xuICAgICAgICB0aGlzLmNhY2hlU2l6ZSA9IHNpemU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNhY2hlU2l6ZSA+IDApIHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNDYWNoaW5nID0gdGhpcy5jYWNoZVNpemUgPiAwO1xuICAgIH07XG5cbiAgICBWaWV3RmFjdG9yeS5wcm90b3R5cGUuZ2V0Q2FjaGVkVmlldyA9IGZ1bmN0aW9uIGdldENhY2hlZFZpZXcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZSAhPT0gbnVsbCA/IHRoaXMuY2FjaGUucG9wKCkgfHwgbnVsbCA6IG51bGw7XG4gICAgfTtcblxuICAgIFZpZXdGYWN0b3J5LnByb3RvdHlwZS5yZXR1cm5WaWV3VG9DYWNoZSA9IGZ1bmN0aW9uIHJldHVyblZpZXdUb0NhY2hlKHZpZXcpIHtcbiAgICAgIGlmICh2aWV3LmlzQXR0YWNoZWQpIHtcbiAgICAgICAgdmlldy5kZXRhY2hlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmlldy5pc0JvdW5kKSB7XG4gICAgICAgIHZpZXcudW5iaW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNhY2hlICE9PSBudWxsICYmIHRoaXMuY2FjaGUubGVuZ3RoIDwgdGhpcy5jYWNoZVNpemUpIHtcbiAgICAgICAgdmlldy5mcm9tQ2FjaGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNhY2hlLnB1c2godmlldyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZpZXdGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoY29udGFpbmVyLCBiaW5kaW5nQ29udGV4dCwgY3JlYXRlSW5zdHJ1Y3Rpb24sIGVsZW1lbnQpIHtcbiAgICAgIGNyZWF0ZUluc3RydWN0aW9uID0gY3JlYXRlSW5zdHJ1Y3Rpb24gfHwgQmVoYXZpb3JJbnN0cnVjdGlvbi5ub3JtYWw7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCBudWxsO1xuXG4gICAgICB2YXIgY2FjaGVkVmlldyA9IHRoaXMuZ2V0Q2FjaGVkVmlldygpO1xuICAgICAgaWYgKGNhY2hlZFZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFjcmVhdGVJbnN0cnVjdGlvbi5zdXBwcmVzc0JpbmQpIHtcbiAgICAgICAgICBjYWNoZWRWaWV3LmJpbmQoYmluZGluZ0NvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlZFZpZXc7XG4gICAgICB9XG5cbiAgICAgIHZhciBmcmFnbWVudCA9IGNyZWF0ZUluc3RydWN0aW9uLmVuaGFuY2UgPyB0aGlzLnRlbXBsYXRlIDogdGhpcy50ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSksXG4gICAgICAgICAgaW5zdHJ1Y3RhYmxlcyA9IGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdS10YXJnZXQnKSxcbiAgICAgICAgICBpbnN0cnVjdGlvbnMgPSB0aGlzLmluc3RydWN0aW9ucyxcbiAgICAgICAgICByZXNvdXJjZXMgPSB0aGlzLnJlc291cmNlcyxcbiAgICAgICAgICBiZWhhdmlvcnMgPSBbXSxcbiAgICAgICAgICBiaW5kaW5ncyA9IFtdLFxuICAgICAgICAgIGNoaWxkcmVuID0gW10sXG4gICAgICAgICAgY29udGVudFNlbGVjdG9ycyA9IFtdLFxuICAgICAgICAgIGNvbnRhaW5lcnMgPSB7IHJvb3Q6IGNvbnRhaW5lciB9LFxuICAgICAgICAgIHBhcnRSZXBsYWNlbWVudHMgPSBjcmVhdGVJbnN0cnVjdGlvbi5wYXJ0UmVwbGFjZW1lbnRzLFxuICAgICAgICAgIGkgPSB1bmRlZmluZWQsXG4gICAgICAgICAgaWkgPSB1bmRlZmluZWQsXG4gICAgICAgICAgdmlldyA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBpbnN0cnVjdGFibGUgPSB1bmRlZmluZWQsXG4gICAgICAgICAgaW5zdHJ1Y3Rpb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMucmVzb3VyY2VzLm9uQmVmb3JlQ3JlYXRlKHRoaXMsIGNvbnRhaW5lciwgZnJhZ21lbnQsIGNyZWF0ZUluc3RydWN0aW9uLCBiaW5kaW5nQ29udGV4dCk7XG5cbiAgICAgIGlmIChlbGVtZW50ICE9PSBudWxsICYmIHRoaXMuc3Vycm9nYXRlSW5zdHJ1Y3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgYXBwbHlTdXJyb2dhdGVJbnN0cnVjdGlvbihjb250YWluZXIsIGVsZW1lbnQsIHRoaXMuc3Vycm9nYXRlSW5zdHJ1Y3Rpb24sIGJlaGF2aW9ycywgYmluZGluZ3MsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgaWkgPSBpbnN0cnVjdGFibGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgaW5zdHJ1Y3RhYmxlID0gaW5zdHJ1Y3RhYmxlc1tpXTtcbiAgICAgICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaW5zdHJ1Y3RhYmxlLmdldEF0dHJpYnV0ZSgnYXUtdGFyZ2V0LWlkJyldO1xuXG4gICAgICAgIGFwcGx5SW5zdHJ1Y3Rpb25zKGNvbnRhaW5lcnMsIGJpbmRpbmdDb250ZXh0LCBpbnN0cnVjdGFibGUsIGluc3RydWN0aW9uLCBiZWhhdmlvcnMsIGJpbmRpbmdzLCBjaGlsZHJlbiwgY29udGVudFNlbGVjdG9ycywgcGFydFJlcGxhY2VtZW50cywgcmVzb3VyY2VzKTtcbiAgICAgIH1cblxuICAgICAgdmlldyA9IG5ldyBWaWV3KHRoaXMsIGNvbnRhaW5lciwgZnJhZ21lbnQsIGJlaGF2aW9ycywgYmluZGluZ3MsIGNoaWxkcmVuLCBjcmVhdGVJbnN0cnVjdGlvbi5zeXN0ZW1Db250cm9sbGVkLCBjb250ZW50U2VsZWN0b3JzKTtcblxuICAgICAgaWYgKCFjcmVhdGVJbnN0cnVjdGlvbi5pbml0aWF0ZWRCeUJlaGF2aW9yKSB7XG4gICAgICAgIHZpZXcuY3JlYXRlZCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc291cmNlcy5vbkFmdGVyQ3JlYXRlKHZpZXcpO1xuXG4gICAgICBpZiAoIWNyZWF0ZUluc3RydWN0aW9uLnN1cHByZXNzQmluZCkge1xuICAgICAgICB2aWV3LmJpbmQoYmluZGluZ0NvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmlldztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZpZXdGYWN0b3J5O1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmlld0ZhY3RvcnkgPSBWaWV3RmFjdG9yeTtcblxuICB2YXIgbmV4dEluamVjdG9ySWQgPSAwO1xuICBmdW5jdGlvbiBnZXROZXh0SW5qZWN0b3JJZCgpIHtcbiAgICByZXR1cm4gKytuZXh0SW5qZWN0b3JJZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZVByb3BlcnRpZXMoaW5zdHJ1Y3Rpb24sIHJlc291cmNlcykge1xuICAgIHZhciB0eXBlID0gaW5zdHJ1Y3Rpb24udHlwZSxcbiAgICAgICAgYXR0ck5hbWUgPSBpbnN0cnVjdGlvbi5hdHRyTmFtZSxcbiAgICAgICAgYXR0cmlidXRlcyA9IGluc3RydWN0aW9uLmF0dHJpYnV0ZXMsXG4gICAgICAgIHByb3BlcnR5LFxuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlO1xuXG4gICAgdmFyIGtub3duQXR0cmlidXRlID0gcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgaWYgKGtub3duQXR0cmlidXRlICYmIGF0dHJOYW1lIGluIGF0dHJpYnV0ZXMgJiYga25vd25BdHRyaWJ1dGUgIT09IGF0dHJOYW1lKSB7XG4gICAgICBhdHRyaWJ1dGVzW2tub3duQXR0cmlidXRlXSA9IGF0dHJpYnV0ZXNbYXR0ck5hbWVdO1xuICAgICAgZGVsZXRlIGF0dHJpYnV0ZXNbYXR0ck5hbWVdO1xuICAgIH1cblxuICAgIGZvciAoa2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHZhbHVlID0gYXR0cmlidXRlc1trZXldO1xuXG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBwcm9wZXJ0eSA9IHR5cGUuYXR0cmlidXRlc1trZXldO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFsdWUudGFyZ2V0UHJvcGVydHkgPSBwcm9wZXJ0eS5uYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlLnRhcmdldFByb3BlcnR5ID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGxhc3RBVVRhcmdldElEID0gMDtcbiAgZnVuY3Rpb24gZ2V0TmV4dEFVVGFyZ2V0SUQoKSB7XG4gICAgcmV0dXJuICgrK2xhc3RBVVRhcmdldElEKS50b1N0cmluZygpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUludG9JbnN0cnVjdGlvblRhcmdldChlbGVtZW50KSB7XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyksXG4gICAgICAgIGF1VGFyZ2V0SUQgPSBnZXROZXh0QVVUYXJnZXRJRCgpO1xuXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdmFsdWUgPyB2YWx1ZSArPSAnIGF1LXRhcmdldCcgOiAnYXUtdGFyZ2V0Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2F1LXRhcmdldC1pZCcsIGF1VGFyZ2V0SUQpO1xuXG4gICAgcmV0dXJuIGF1VGFyZ2V0SUQ7XG4gIH1cblxuICB2YXIgVmlld0NvbXBpbGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3Q29tcGlsZXIoYmluZGluZ0xhbmd1YWdlLCByZXNvdXJjZXMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfVmlld0NvbXBpbGVyKTtcblxuICAgICAgdGhpcy5iaW5kaW5nTGFuZ3VhZ2UgPSBiaW5kaW5nTGFuZ3VhZ2U7XG4gICAgICB0aGlzLnJlc291cmNlcyA9IHJlc291cmNlcztcbiAgICB9XG5cbiAgICBWaWV3Q29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGUgPSBmdW5jdGlvbiBjb21waWxlKHNvdXJjZSwgcmVzb3VyY2VzLCBjb21waWxlSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHJlc291cmNlcyA9IHJlc291cmNlcyB8fCB0aGlzLnJlc291cmNlcztcbiAgICAgIGNvbXBpbGVJbnN0cnVjdGlvbiA9IGNvbXBpbGVJbnN0cnVjdGlvbiB8fCBWaWV3Q29tcGlsZUluc3RydWN0aW9uLm5vcm1hbDtcbiAgICAgIHNvdXJjZSA9IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gY3JlYXRlVGVtcGxhdGVGcm9tTWFya3VwKHNvdXJjZSkgOiBzb3VyY2U7XG5cbiAgICAgIHZhciBjb250ZW50ID0gdW5kZWZpbmVkLFxuICAgICAgICAgIHBhcnQgPSB1bmRlZmluZWQsXG4gICAgICAgICAgY2FjaGVTaXplID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoc291cmNlLmNvbnRlbnQpIHtcbiAgICAgICAgcGFydCA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUoJ3BhcnQnKTtcbiAgICAgICAgY2FjaGVTaXplID0gc291cmNlLmdldEF0dHJpYnV0ZSgndmlldy1jYWNoZScpO1xuICAgICAgICBjb250ZW50ID0gZG9jdW1lbnQuYWRvcHROb2RlKHNvdXJjZS5jb250ZW50LCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQgPSBzb3VyY2U7XG4gICAgICB9XG5cbiAgICAgIGNvbXBpbGVJbnN0cnVjdGlvbi50YXJnZXRTaGFkb3dET00gPSBjb21waWxlSW5zdHJ1Y3Rpb24udGFyZ2V0U2hhZG93RE9NICYmIGhhc1NoYWRvd0RPTTtcbiAgICAgIHJlc291cmNlcy5vbkJlZm9yZUNvbXBpbGUoY29udGVudCwgcmVzb3VyY2VzLCBjb21waWxlSW5zdHJ1Y3Rpb24pO1xuXG4gICAgICB2YXIgaW5zdHJ1Y3Rpb25zID0ge307XG4gICAgICB0aGlzLmNvbXBpbGVOb2RlKGNvbnRlbnQsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb25zLCBzb3VyY2UsICdyb290JywgIWNvbXBpbGVJbnN0cnVjdGlvbi50YXJnZXRTaGFkb3dET00pO1xuICAgICAgY29udGVudC5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnPHZpZXc+JyksIGNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgICBjb250ZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJzwvdmlldz4nKSk7XG5cbiAgICAgIHZhciBmYWN0b3J5ID0gbmV3IFZpZXdGYWN0b3J5KGNvbnRlbnQsIGluc3RydWN0aW9ucywgcmVzb3VyY2VzKTtcblxuICAgICAgZmFjdG9yeS5zdXJyb2dhdGVJbnN0cnVjdGlvbiA9IGNvbXBpbGVJbnN0cnVjdGlvbi5jb21waWxlU3Vycm9nYXRlID8gdGhpcy5jb21waWxlU3Vycm9nYXRlKHNvdXJjZSwgcmVzb3VyY2VzKSA6IG51bGw7XG4gICAgICBmYWN0b3J5LnBhcnQgPSBwYXJ0O1xuXG4gICAgICBpZiAoY2FjaGVTaXplKSB7XG4gICAgICAgIGZhY3Rvcnkuc2V0Q2FjaGVTaXplKGNhY2hlU2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc291cmNlcy5vbkFmdGVyQ29tcGlsZShmYWN0b3J5KTtcblxuICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgfTtcblxuICAgIFZpZXdDb21waWxlci5wcm90b3R5cGUuY29tcGlsZU5vZGUgPSBmdW5jdGlvbiBjb21waWxlTm9kZShub2RlLCByZXNvdXJjZXMsIGluc3RydWN0aW9ucywgcGFyZW50Tm9kZSwgcGFyZW50SW5qZWN0b3JJZCwgdGFyZ2V0TGlnaHRET00pIHtcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZUVsZW1lbnQobm9kZSwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbnMsIHBhcmVudE5vZGUsIHBhcmVudEluamVjdG9ySWQsIHRhcmdldExpZ2h0RE9NKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHZhciBleHByZXNzaW9uID0gcmVzb3VyY2VzLmdldEJpbmRpbmdMYW5ndWFnZSh0aGlzLmJpbmRpbmdMYW5ndWFnZSkucGFyc2VUZXh0KHJlc291cmNlcywgbm9kZS53aG9sZVRleHQpO1xuICAgICAgICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXUtbWFya2VyJyksXG4gICAgICAgICAgICAgICAgYXVUYXJnZXRJRCA9IG1ha2VJbnRvSW5zdHJ1Y3Rpb25UYXJnZXQobWFya2VyKTtcbiAgICAgICAgICAgIChub2RlLnBhcmVudE5vZGUgfHwgcGFyZW50Tm9kZSkuaW5zZXJ0QmVmb3JlKG1hcmtlciwgbm9kZSk7XG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gJyAnO1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zW2F1VGFyZ2V0SURdID0gVGFyZ2V0SW5zdHJ1Y3Rpb24uY29udGVudEV4cHJlc3Npb24oZXhwcmVzc2lvbik7XG5cbiAgICAgICAgICAgIHdoaWxlIChub2RlLm5leHRTaWJsaW5nICYmIG5vZGUubmV4dFNpYmxpbmcubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgKG5vZGUucGFyZW50Tm9kZSB8fCBwYXJlbnROb2RlKS5yZW1vdmVDaGlsZChub2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKG5vZGUubmV4dFNpYmxpbmcgJiYgbm9kZS5uZXh0U2libGluZy5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICB3aGlsZSAoY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICBjdXJyZW50Q2hpbGQgPSB0aGlzLmNvbXBpbGVOb2RlKGN1cnJlbnRDaGlsZCwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbnMsIG5vZGUsIHBhcmVudEluamVjdG9ySWQsIHRhcmdldExpZ2h0RE9NKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuICAgIH07XG5cbiAgICBWaWV3Q29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVTdXJyb2dhdGUgPSBmdW5jdGlvbiBjb21waWxlU3Vycm9nYXRlKG5vZGUsIHJlc291cmNlcykge1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgYmluZGluZ0xhbmd1YWdlID0gcmVzb3VyY2VzLmdldEJpbmRpbmdMYW5ndWFnZSh0aGlzLmJpbmRpbmdMYW5ndWFnZSksXG4gICAgICAgICAga25vd25BdHRyaWJ1dGUgPSB1bmRlZmluZWQsXG4gICAgICAgICAgcHJvcGVydHkgPSB1bmRlZmluZWQsXG4gICAgICAgICAgaW5zdHJ1Y3Rpb24gPSB1bmRlZmluZWQsXG4gICAgICAgICAgaSA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBpaSA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBhdHRyID0gdW5kZWZpbmVkLFxuICAgICAgICAgIGF0dHJOYW1lID0gdW5kZWZpbmVkLFxuICAgICAgICAgIGF0dHJWYWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBpbmZvID0gdW5kZWZpbmVkLFxuICAgICAgICAgIHR5cGUgPSB1bmRlZmluZWQsXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXSxcbiAgICAgICAgICBleHByZXNzaW9uID0gdW5kZWZpbmVkLFxuICAgICAgICAgIGJlaGF2aW9ySW5zdHJ1Y3Rpb25zID0gW10sXG4gICAgICAgICAgdmFsdWVzID0ge30sXG4gICAgICAgICAgaGFzVmFsdWVzID0gZmFsc2UsXG4gICAgICAgICAgcHJvdmlkZXJzID0gW107XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGF0dHIgPSBhdHRyaWJ1dGVzW2ldO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblxuICAgICAgICBpbmZvID0gYmluZGluZ0xhbmd1YWdlLmluc3BlY3RBdHRyaWJ1dGUocmVzb3VyY2VzLCBhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgdHlwZSA9IHJlc291cmNlcy5nZXRBdHRyaWJ1dGUoaW5mby5hdHRyTmFtZSk7XG5cbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICBrbm93bkF0dHJpYnV0ZSA9IHJlc291cmNlcy5tYXBBdHRyaWJ1dGUoaW5mby5hdHRyTmFtZSk7XG4gICAgICAgICAgaWYgKGtub3duQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHR5cGUuYXR0cmlidXRlc1trbm93bkF0dHJpYnV0ZV07XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICBpbmZvLmRlZmF1bHRCaW5kaW5nTW9kZSA9IHByb3BlcnR5LmRlZmF1bHRCaW5kaW5nTW9kZTtcblxuICAgICAgICAgICAgICBpZiAoIWluZm8uY29tbWFuZCAmJiAhaW5mby5leHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgaW5mby5jb21tYW5kID0gcHJvcGVydHkuaGFzT3B0aW9ucyA/ICdvcHRpb25zJyA6IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0cnVjdGlvbiA9IGJpbmRpbmdMYW5ndWFnZS5jcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbihyZXNvdXJjZXMsIG5vZGUsIGluZm8pO1xuXG4gICAgICAgIGlmIChpbnN0cnVjdGlvbikge1xuICAgICAgICAgIGlmIChpbnN0cnVjdGlvbi5hbHRlcmVkQXR0cikge1xuICAgICAgICAgICAgdHlwZSA9IHJlc291cmNlcy5nZXRBdHRyaWJ1dGUoaW5zdHJ1Y3Rpb24uYXR0ck5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbnN0cnVjdGlvbi5kaXNjcmV0ZSkge1xuICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChpbnN0cnVjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAgIGluc3RydWN0aW9uLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICBjb25maWd1cmVQcm9wZXJ0aWVzKGluc3RydWN0aW9uLCByZXNvdXJjZXMpO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlLmxpZnRzQ29udGVudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCBwbGFjZSBhIHRlbXBsYXRlIGNvbnRyb2xsZXIgb24gYSBzdXJyb2dhdGUgZWxlbWVudC4nKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiZWhhdmlvckluc3RydWN0aW9ucy5wdXNoKGluc3RydWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW2luc3RydWN0aW9uLmF0dHJOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGF0dHJOYW1lLCB0eXBlKTtcbiAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShhdHRyTmFtZSldID0gYXR0clZhbHVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZS5saWZ0c0NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IHBsYWNlIGEgdGVtcGxhdGUgY29udHJvbGxlciBvbiBhIHN1cnJvZ2F0ZSBlbGVtZW50LicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYmVoYXZpb3JJbnN0cnVjdGlvbnMucHVzaChpbnN0cnVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyTmFtZSAhPT0gJ2lkJyAmJiBhdHRyTmFtZSAhPT0gJ3BhcnQnICYmIGF0dHJOYW1lICE9PSAncmVwbGFjZS1wYXJ0Jykge1xuICAgICAgICAgICAgaGFzVmFsdWVzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhbHVlc1thdHRyTmFtZV0gPSBhdHRyVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChleHByZXNzaW9ucy5sZW5ndGggfHwgYmVoYXZpb3JJbnN0cnVjdGlvbnMubGVuZ3RoIHx8IGhhc1ZhbHVlcykge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICBpbnN0cnVjdGlvbiA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zW2ldO1xuICAgICAgICAgIGluc3RydWN0aW9uLnR5cGUuY29tcGlsZSh0aGlzLCByZXNvdXJjZXMsIG5vZGUsIGluc3RydWN0aW9uKTtcbiAgICAgICAgICBwcm92aWRlcnMucHVzaChpbnN0cnVjdGlvbi50eXBlLnRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbnNbaV07XG4gICAgICAgICAgaWYgKGV4cHJlc3Npb24uYXR0clRvUmVtb3ZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGV4cHJlc3Npb24uYXR0clRvUmVtb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gVGFyZ2V0SW5zdHJ1Y3Rpb24uc3Vycm9nYXRlKHByb3ZpZGVycywgYmVoYXZpb3JJbnN0cnVjdGlvbnMsIGV4cHJlc3Npb25zLCB2YWx1ZXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgVmlld0NvbXBpbGVyLnByb3RvdHlwZS5jb21waWxlRWxlbWVudCA9IGZ1bmN0aW9uIGNvbXBpbGVFbGVtZW50KG5vZGUsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb25zLCBwYXJlbnROb2RlLCBwYXJlbnRJbmplY3RvcklkLCB0YXJnZXRMaWdodERPTSkge1xuICAgICAgdmFyIHRhZ05hbWUgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sXG4gICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICBiZWhhdmlvckluc3RydWN0aW9ucyA9IFtdLFxuICAgICAgICAgIHByb3ZpZGVycyA9IFtdLFxuICAgICAgICAgIGJpbmRpbmdMYW5ndWFnZSA9IHJlc291cmNlcy5nZXRCaW5kaW5nTGFuZ3VhZ2UodGhpcy5iaW5kaW5nTGFuZ3VhZ2UpLFxuICAgICAgICAgIGxpZnRpbmdJbnN0cnVjdGlvbixcbiAgICAgICAgICB2aWV3RmFjdG9yeSxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGVsZW1lbnRJbnN0cnVjdGlvbixcbiAgICAgICAgICBlbGVtZW50UHJvcGVydHksXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpaSxcbiAgICAgICAgICBhdHRyLFxuICAgICAgICAgIGF0dHJOYW1lLFxuICAgICAgICAgIGF0dHJWYWx1ZSxcbiAgICAgICAgICBpbnN0cnVjdGlvbixcbiAgICAgICAgICBpbmZvLFxuICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgIGtub3duQXR0cmlidXRlLFxuICAgICAgICAgIGF1VGFyZ2V0SUQsXG4gICAgICAgICAgaW5qZWN0b3JJZDtcblxuICAgICAgaWYgKHRhZ05hbWUgPT09ICdjb250ZW50Jykge1xuICAgICAgICBpZiAodGFyZ2V0TGlnaHRET00pIHtcbiAgICAgICAgICBhdVRhcmdldElEID0gbWFrZUludG9JbnN0cnVjdGlvblRhcmdldChub2RlKTtcbiAgICAgICAgICBpbnN0cnVjdGlvbnNbYXVUYXJnZXRJRF0gPSBUYXJnZXRJbnN0cnVjdGlvbi5jb250ZW50U2VsZWN0b3Iobm9kZSwgcGFyZW50SW5qZWN0b3JJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgdmlld0ZhY3RvcnkgPSB0aGlzLmNvbXBpbGUobm9kZSwgcmVzb3VyY2VzKTtcbiAgICAgICAgdmlld0ZhY3RvcnkucGFydCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdwYXJ0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gcmVzb3VyY2VzLmdldEVsZW1lbnQodGFnTmFtZSk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgZWxlbWVudEluc3RydWN0aW9uID0gQmVoYXZpb3JJbnN0cnVjdGlvbi5lbGVtZW50KG5vZGUsIHR5cGUpO1xuICAgICAgICAgIGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLnB1c2goZWxlbWVudEluc3RydWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBhdHRyID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgIGF0dHJWYWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgICAgIGluZm8gPSBiaW5kaW5nTGFuZ3VhZ2UuaW5zcGVjdEF0dHJpYnV0ZShyZXNvdXJjZXMsIGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICB0eXBlID0gcmVzb3VyY2VzLmdldEF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcbiAgICAgICAgZWxlbWVudFByb3BlcnR5ID0gbnVsbDtcblxuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIGtub3duQXR0cmlidXRlID0gcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcbiAgICAgICAgICBpZiAoa25vd25BdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gdHlwZS5hdHRyaWJ1dGVzW2tub3duQXR0cmlidXRlXTtcblxuICAgICAgICAgICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIGluZm8uZGVmYXVsdEJpbmRpbmdNb2RlID0gcHJvcGVydHkuZGVmYXVsdEJpbmRpbmdNb2RlO1xuXG4gICAgICAgICAgICAgIGlmICghaW5mby5jb21tYW5kICYmICFpbmZvLmV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBpbmZvLmNvbW1hbmQgPSBwcm9wZXJ0eS5oYXNPcHRpb25zID8gJ29wdGlvbnMnIDogbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50SW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIGVsZW1lbnRQcm9wZXJ0eSA9IGVsZW1lbnRJbnN0cnVjdGlvbi50eXBlLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV07XG4gICAgICAgICAgICBpZiAoZWxlbWVudFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIGluZm8uZGVmYXVsdEJpbmRpbmdNb2RlID0gZWxlbWVudFByb3BlcnR5LmRlZmF1bHRCaW5kaW5nTW9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnRQcm9wZXJ0eSkge1xuICAgICAgICAgIGluc3RydWN0aW9uID0gYmluZGluZ0xhbmd1YWdlLmNyZWF0ZUF0dHJpYnV0ZUluc3RydWN0aW9uKHJlc291cmNlcywgbm9kZSwgaW5mbywgZWxlbWVudEluc3RydWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnN0cnVjdGlvbiA9IGJpbmRpbmdMYW5ndWFnZS5jcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbihyZXNvdXJjZXMsIG5vZGUsIGluZm8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluc3RydWN0aW9uKSB7XG4gICAgICAgICAgaWYgKGluc3RydWN0aW9uLmFsdGVyZWRBdHRyKSB7XG4gICAgICAgICAgICB0eXBlID0gcmVzb3VyY2VzLmdldEF0dHJpYnV0ZShpbnN0cnVjdGlvbi5hdHRyTmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluc3RydWN0aW9uLmRpc2NyZXRlKSB7XG4gICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGluc3RydWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGNvbmZpZ3VyZVByb3BlcnRpZXMoaW5zdHJ1Y3Rpb24sIHJlc291cmNlcyk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGUubGlmdHNDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24ub3JpZ2luYWxBdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgICAgICAgICAgICAgIGxpZnRpbmdJbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLnB1c2goaW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnRQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICBlbGVtZW50SW5zdHJ1Y3Rpb24uYXR0cmlidXRlc1tpbmZvLmF0dHJOYW1lXS50YXJnZXRQcm9wZXJ0eSA9IGVsZW1lbnRQcm9wZXJ0eS5uYW1lO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW2luc3RydWN0aW9uLmF0dHJOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGF0dHJOYW1lLCB0eXBlKTtcbiAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShhdHRyTmFtZSldID0gYXR0clZhbHVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZS5saWZ0c0NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24ub3JpZ2luYWxBdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgICAgICAgICAgICBsaWZ0aW5nSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBiZWhhdmlvckluc3RydWN0aW9ucy5wdXNoKGluc3RydWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnRQcm9wZXJ0eSkge1xuICAgICAgICAgICAgZWxlbWVudEluc3RydWN0aW9uLmF0dHJpYnV0ZXNbYXR0ck5hbWVdID0gYXR0clZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGlmdGluZ0luc3RydWN0aW9uKSB7XG4gICAgICAgIGxpZnRpbmdJbnN0cnVjdGlvbi52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xuICAgICAgICBub2RlID0gbGlmdGluZ0luc3RydWN0aW9uLnR5cGUuY29tcGlsZSh0aGlzLCByZXNvdXJjZXMsIG5vZGUsIGxpZnRpbmdJbnN0cnVjdGlvbiwgcGFyZW50Tm9kZSk7XG4gICAgICAgIGF1VGFyZ2V0SUQgPSBtYWtlSW50b0luc3RydWN0aW9uVGFyZ2V0KG5vZGUpO1xuICAgICAgICBpbnN0cnVjdGlvbnNbYXVUYXJnZXRJRF0gPSBUYXJnZXRJbnN0cnVjdGlvbi5saWZ0aW5nKHBhcmVudEluamVjdG9ySWQsIGxpZnRpbmdJbnN0cnVjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoIHx8IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgIGluamVjdG9ySWQgPSBiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGggPyBnZXROZXh0SW5qZWN0b3JJZCgpIDogZmFsc2U7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9uID0gYmVoYXZpb3JJbnN0cnVjdGlvbnNbaV07XG4gICAgICAgICAgICBpbnN0cnVjdGlvbi50eXBlLmNvbXBpbGUodGhpcywgcmVzb3VyY2VzLCBub2RlLCBpbnN0cnVjdGlvbiwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChpbnN0cnVjdGlvbi50eXBlLnRhcmdldCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbnNbaV07XG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5hdHRyVG9SZW1vdmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShleHByZXNzaW9uLmF0dHJUb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXVUYXJnZXRJRCA9IG1ha2VJbnRvSW5zdHJ1Y3Rpb25UYXJnZXQobm9kZSk7XG4gICAgICAgICAgaW5zdHJ1Y3Rpb25zW2F1VGFyZ2V0SURdID0gVGFyZ2V0SW5zdHJ1Y3Rpb24ubm9ybWFsKGluamVjdG9ySWQsIHBhcmVudEluamVjdG9ySWQsIHByb3ZpZGVycywgYmVoYXZpb3JJbnN0cnVjdGlvbnMsIGV4cHJlc3Npb25zLCBlbGVtZW50SW5zdHJ1Y3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnRJbnN0cnVjdGlvbiAmJiBlbGVtZW50SW5zdHJ1Y3Rpb24uc2tpcENvbnRlbnRQcm9jZXNzaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudENoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgY3VycmVudENoaWxkID0gdGhpcy5jb21waWxlTm9kZShjdXJyZW50Q2hpbGQsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb25zLCBub2RlLCBpbmplY3RvcklkIHx8IHBhcmVudEluamVjdG9ySWQsIHRhcmdldExpZ2h0RE9NKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9O1xuXG4gICAgdmFyIF9WaWV3Q29tcGlsZXIgPSBWaWV3Q29tcGlsZXI7XG4gICAgVmlld0NvbXBpbGVyID0gX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uLmluamVjdChCaW5kaW5nTGFuZ3VhZ2UsIFZpZXdSZXNvdXJjZXMpKFZpZXdDb21waWxlcikgfHwgVmlld0NvbXBpbGVyO1xuICAgIHJldHVybiBWaWV3Q29tcGlsZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WaWV3Q29tcGlsZXIgPSBWaWV3Q29tcGlsZXI7XG5cbiAgdmFyIGxvZ2dlciA9IF9hdXJlbGlhTG9nZ2luZy5nZXRMb2dnZXIoJ3RlbXBsYXRpbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmVSZWdpc3RyeUVudHJ5KGxvYWRlciwgdXJsT3JSZWdpc3RyeUVudHJ5KSB7XG4gICAgaWYgKHVybE9yUmVnaXN0cnlFbnRyeSBpbnN0YW5jZW9mIF9hdXJlbGlhTG9hZGVyLlRlbXBsYXRlUmVnaXN0cnlFbnRyeSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cmxPclJlZ2lzdHJ5RW50cnkpO1xuICAgIH1cblxuICAgIHJldHVybiBsb2FkZXIubG9hZFRlbXBsYXRlKHVybE9yUmVnaXN0cnlFbnRyeSk7XG4gIH1cblxuICB2YXIgUHJveHlWaWV3RmFjdG9yeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJveHlWaWV3RmFjdG9yeShwcm9taXNlKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3h5Vmlld0ZhY3RvcnkpO1xuXG4gICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5hYnNvcmIoeCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBQcm94eVZpZXdGYWN0b3J5LnByb3RvdHlwZS5hYnNvcmIgPSBmdW5jdGlvbiBhYnNvcmIoZmFjdG9yeSkge1xuICAgICAgdGhpcy5jcmVhdGUgPSBmYWN0b3J5LmNyZWF0ZS5iaW5kKGZhY3RvcnkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJveHlWaWV3RmFjdG9yeTtcbiAgfSkoKTtcblxuICB2YXIgVmlld0VuZ2luZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgVmlld0VuZ2luZS5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgICByZXR1cm4gW19hdXJlbGlhTG9hZGVyLkxvYWRlciwgX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uLkNvbnRhaW5lciwgVmlld0NvbXBpbGVyLCBNb2R1bGVBbmFseXplciwgVmlld1Jlc291cmNlc107XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFZpZXdFbmdpbmUobG9hZGVyLCBjb250YWluZXIsIHZpZXdDb21waWxlciwgbW9kdWxlQW5hbHl6ZXIsIGFwcFJlc291cmNlcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdFbmdpbmUpO1xuXG4gICAgICB0aGlzLmxvYWRlciA9IGxvYWRlcjtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgdGhpcy52aWV3Q29tcGlsZXIgPSB2aWV3Q29tcGlsZXI7XG4gICAgICB0aGlzLm1vZHVsZUFuYWx5emVyID0gbW9kdWxlQW5hbHl6ZXI7XG4gICAgICB0aGlzLmFwcFJlc291cmNlcyA9IGFwcFJlc291cmNlcztcbiAgICAgIHRoaXMuX3BsdWdpbk1hcCA9IHt9O1xuICAgIH1cblxuICAgIFZpZXdFbmdpbmUucHJvdG90eXBlLmFkZFJlc291cmNlUGx1Z2luID0gZnVuY3Rpb24gYWRkUmVzb3VyY2VQbHVnaW4oZXh0ZW5zaW9uLCBpbXBsZW1lbnRhdGlvbikge1xuICAgICAgdmFyIG5hbWUgPSBleHRlbnNpb24ucmVwbGFjZSgnLicsICcnKSArICctcmVzb3VyY2UtcGx1Z2luJztcbiAgICAgIHRoaXMuX3BsdWdpbk1hcFtleHRlbnNpb25dID0gbmFtZTtcbiAgICAgIHRoaXMubG9hZGVyLmFkZFBsdWdpbihuYW1lLCBpbXBsZW1lbnRhdGlvbik7XG4gICAgfTtcblxuICAgIFZpZXdFbmdpbmUucHJvdG90eXBlLmVuaGFuY2UgPSBmdW5jdGlvbiBlbmhhbmNlKGNvbnRhaW5lciwgZWxlbWVudCwgcmVzb3VyY2VzLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgdmFyIGluc3RydWN0aW9ucyA9IHt9O1xuICAgICAgdGhpcy52aWV3Q29tcGlsZXIuY29tcGlsZU5vZGUoZWxlbWVudCwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbnMsIGVsZW1lbnQucGFyZW50Tm9kZSwgJ3Jvb3QnLCB0cnVlKTtcblxuICAgICAgdmFyIGZhY3RvcnkgPSBuZXcgVmlld0ZhY3RvcnkoZWxlbWVudCwgaW5zdHJ1Y3Rpb25zLCByZXNvdXJjZXMpO1xuICAgICAgcmV0dXJuIGZhY3RvcnkuY3JlYXRlKGNvbnRhaW5lciwgYmluZGluZ0NvbnRleHQsIHsgZW5oYW5jZTogdHJ1ZSB9KTtcbiAgICB9O1xuXG4gICAgVmlld0VuZ2luZS5wcm90b3R5cGUubG9hZFZpZXdGYWN0b3J5ID0gZnVuY3Rpb24gbG9hZFZpZXdGYWN0b3J5KHVybE9yUmVnaXN0cnlFbnRyeSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIGxvYWRDb250ZXh0ID0gbG9hZENvbnRleHQgfHwgbmV3IFJlc291cmNlTG9hZENvbnRleHQoKTtcblxuICAgICAgcmV0dXJuIGVuc3VyZVJlZ2lzdHJ5RW50cnkodGhpcy5sb2FkZXIsIHVybE9yUmVnaXN0cnlFbnRyeSkudGhlbihmdW5jdGlvbiAodmlld1JlZ2lzdHJ5RW50cnkpIHtcbiAgICAgICAgaWYgKHZpZXdSZWdpc3RyeUVudHJ5Lm9uUmVhZHkpIHtcbiAgICAgICAgICBpZiAobG9hZENvbnRleHQuZG9lc05vdEhhdmVEZXBlbmRlbmN5KHVybE9yUmVnaXN0cnlFbnRyeSkpIHtcbiAgICAgICAgICAgIGxvYWRDb250ZXh0LmFkZERlcGVuZGVuY3kodXJsT3JSZWdpc3RyeUVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiB2aWV3UmVnaXN0cnlFbnRyeS5vblJlYWR5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IFByb3h5Vmlld0ZhY3Rvcnkodmlld1JlZ2lzdHJ5RW50cnkub25SZWFkeSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9hZENvbnRleHQuYWRkRGVwZW5kZW5jeSh1cmxPclJlZ2lzdHJ5RW50cnkpO1xuXG4gICAgICAgIHJldHVybiB2aWV3UmVnaXN0cnlFbnRyeS5vblJlYWR5ID0gX3RoaXM1LmxvYWRUZW1wbGF0ZVJlc291cmNlcyh2aWV3UmVnaXN0cnlFbnRyeSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCkudGhlbihmdW5jdGlvbiAocmVzb3VyY2VzKSB7XG4gICAgICAgICAgdmlld1JlZ2lzdHJ5RW50cnkuc2V0UmVzb3VyY2VzKHJlc291cmNlcyk7XG4gICAgICAgICAgdmFyIHZpZXdGYWN0b3J5ID0gX3RoaXM1LnZpZXdDb21waWxlci5jb21waWxlKHZpZXdSZWdpc3RyeUVudHJ5LnRlbXBsYXRlLCByZXNvdXJjZXMsIGNvbXBpbGVJbnN0cnVjdGlvbik7XG4gICAgICAgICAgdmlld1JlZ2lzdHJ5RW50cnkuc2V0RmFjdG9yeSh2aWV3RmFjdG9yeSk7XG4gICAgICAgICAgcmV0dXJuIHZpZXdGYWN0b3J5O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBWaWV3RW5naW5lLnByb3RvdHlwZS5sb2FkVGVtcGxhdGVSZXNvdXJjZXMgPSBmdW5jdGlvbiBsb2FkVGVtcGxhdGVSZXNvdXJjZXModmlld1JlZ2lzdHJ5RW50cnksIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQpIHtcbiAgICAgIHZhciByZXNvdXJjZXMgPSBuZXcgVmlld1Jlc291cmNlcyh0aGlzLmFwcFJlc291cmNlcywgdmlld1JlZ2lzdHJ5RW50cnkuYWRkcmVzcyksXG4gICAgICAgICAgZGVwZW5kZW5jaWVzID0gdmlld1JlZ2lzdHJ5RW50cnkuZGVwZW5kZW5jaWVzLFxuICAgICAgICAgIGltcG9ydElkcyxcbiAgICAgICAgICBuYW1lcztcblxuICAgICAgY29tcGlsZUluc3RydWN0aW9uID0gY29tcGlsZUluc3RydWN0aW9uIHx8IFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24ubm9ybWFsO1xuXG4gICAgICBpZiAoZGVwZW5kZW5jaWVzLmxlbmd0aCA9PT0gMCAmJiAhY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc291cmNlcyk7XG4gICAgICB9XG5cbiAgICAgIGltcG9ydElkcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHguc3JjO1xuICAgICAgfSk7XG4gICAgICBuYW1lcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHgubmFtZTtcbiAgICAgIH0pO1xuICAgICAgbG9nZ2VyLmRlYnVnKCdpbXBvcnRpbmcgcmVzb3VyY2VzIGZvciAnICsgdmlld1JlZ2lzdHJ5RW50cnkuYWRkcmVzcywgaW1wb3J0SWRzKTtcblxuICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0Vmlld1Jlc291cmNlcyhpbXBvcnRJZHMsIG5hbWVzLCByZXNvdXJjZXMsIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQpO1xuICAgIH07XG5cbiAgICBWaWV3RW5naW5lLnByb3RvdHlwZS5pbXBvcnRWaWV3TW9kZWxSZXNvdXJjZSA9IGZ1bmN0aW9uIGltcG9ydFZpZXdNb2RlbFJlc291cmNlKG1vZHVsZUltcG9ydCwgbW9kdWxlTWVtYmVyKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMubG9hZGVyLmxvYWRNb2R1bGUobW9kdWxlSW1wb3J0KS50aGVuKGZ1bmN0aW9uICh2aWV3TW9kZWxNb2R1bGUpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZCA9IF9hdXJlbGlhTWV0YWRhdGEuT3JpZ2luLmdldCh2aWV3TW9kZWxNb2R1bGUpLm1vZHVsZUlkLFxuICAgICAgICAgICAgcmVzb3VyY2VNb2R1bGUgPSBfdGhpczYubW9kdWxlQW5hbHl6ZXIuYW5hbHl6ZShub3JtYWxpemVkSWQsIHZpZXdNb2RlbE1vZHVsZSwgbW9kdWxlTWVtYmVyKTtcblxuICAgICAgICBpZiAoIXJlc291cmNlTW9kdWxlLm1haW5SZXNvdXJjZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdmlldyBtb2RlbCBmb3VuZCBpbiBtb2R1bGUgXCInICsgbW9kdWxlSW1wb3J0ICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb3VyY2VNb2R1bGUuYW5hbHl6ZShfdGhpczYuY29udGFpbmVyKTtcblxuICAgICAgICByZXR1cm4gcmVzb3VyY2VNb2R1bGUubWFpblJlc291cmNlO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFZpZXdFbmdpbmUucHJvdG90eXBlLmltcG9ydFZpZXdSZXNvdXJjZXMgPSBmdW5jdGlvbiBpbXBvcnRWaWV3UmVzb3VyY2VzKG1vZHVsZUlkcywgbmFtZXMsIHJlc291cmNlcywgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIGxvYWRDb250ZXh0ID0gbG9hZENvbnRleHQgfHwgbmV3IFJlc291cmNlTG9hZENvbnRleHQoKTtcbiAgICAgIGNvbXBpbGVJbnN0cnVjdGlvbiA9IGNvbXBpbGVJbnN0cnVjdGlvbiB8fCBWaWV3Q29tcGlsZUluc3RydWN0aW9uLm5vcm1hbDtcblxuICAgICAgbW9kdWxlSWRzID0gbW9kdWxlSWRzLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gX3RoaXM3Ll9hcHBseUxvYWRlclBsdWdpbih4KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcy5sb2FkZXIubG9hZEFsbE1vZHVsZXMobW9kdWxlSWRzKS50aGVuKGZ1bmN0aW9uIChpbXBvcnRzKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBhbmFseXNpcyxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRJZCxcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICBhc3NvY2lhdGVkTW9kdWxlLFxuICAgICAgICAgICAgY29udGFpbmVyID0gX3RoaXM3LmNvbnRhaW5lcixcbiAgICAgICAgICAgIG1vZHVsZUFuYWx5emVyID0gX3RoaXM3Lm1vZHVsZUFuYWx5emVyLFxuICAgICAgICAgICAgYWxsQW5hbHlzaXMgPSBuZXcgQXJyYXkoaW1wb3J0cy5sZW5ndGgpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gaW1wb3J0cy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgY3VycmVudCA9IGltcG9ydHNbaV07XG4gICAgICAgICAgbm9ybWFsaXplZElkID0gX2F1cmVsaWFNZXRhZGF0YS5PcmlnaW4uZ2V0KGN1cnJlbnQpLm1vZHVsZUlkO1xuXG4gICAgICAgICAgYW5hbHlzaXMgPSBtb2R1bGVBbmFseXplci5hbmFseXplKG5vcm1hbGl6ZWRJZCwgY3VycmVudCk7XG4gICAgICAgICAgYW5hbHlzaXMuYW5hbHl6ZShjb250YWluZXIpO1xuICAgICAgICAgIGFuYWx5c2lzLnJlZ2lzdGVyKHJlc291cmNlcywgbmFtZXNbaV0pO1xuXG4gICAgICAgICAgYWxsQW5hbHlzaXNbaV0gPSBhbmFseXNpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21waWxlSW5zdHJ1Y3Rpb24uYXNzb2NpYXRlZE1vZHVsZUlkKSB7XG4gICAgICAgICAgYXNzb2NpYXRlZE1vZHVsZSA9IG1vZHVsZUFuYWx5emVyLmdldEFuYWx5c2lzKGNvbXBpbGVJbnN0cnVjdGlvbi5hc3NvY2lhdGVkTW9kdWxlSWQpO1xuXG4gICAgICAgICAgaWYgKGFzc29jaWF0ZWRNb2R1bGUpIHtcbiAgICAgICAgICAgIGFzc29jaWF0ZWRNb2R1bGUucmVnaXN0ZXIocmVzb3VyY2VzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGFsbEFuYWx5c2lzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICBhbGxBbmFseXNpc1tpXSA9IGFsbEFuYWx5c2lzW2ldLmxvYWQoY29udGFpbmVyLCBsb2FkQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYWxsQW5hbHlzaXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiByZXNvdXJjZXM7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFZpZXdFbmdpbmUucHJvdG90eXBlLl9hcHBseUxvYWRlclBsdWdpbiA9IGZ1bmN0aW9uIF9hcHBseUxvYWRlclBsdWdpbihpZCkge1xuICAgICAgdmFyIGluZGV4ID0gaWQubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdmFyIGV4dCA9IGlkLnN1YnN0cmluZyhpbmRleCk7XG4gICAgICAgIHZhciBwbHVnaW5OYW1lID0gdGhpcy5fcGx1Z2luTWFwW2V4dF07XG5cbiAgICAgICAgaWYgKHBsdWdpbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRlci5hcHBseVBsdWdpblRvVXJsKGlkLCBwbHVnaW5OYW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlkO1xuICAgIH07XG5cbiAgICByZXR1cm4gVmlld0VuZ2luZTtcbiAgfSkoKTtcblxuICBleHBvcnRzLlZpZXdFbmdpbmUgPSBWaWV3RW5naW5lO1xuXG4gIHZhciBCZWhhdmlvckluc3RhbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCZWhhdmlvckluc3RhbmNlKGJlaGF2aW9yLCBiaW5kaW5nQ29udGV4dCwgaW5zdHJ1Y3Rpb24pIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCZWhhdmlvckluc3RhbmNlKTtcblxuICAgICAgdGhpcy5iZWhhdmlvciA9IGJlaGF2aW9yO1xuICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0O1xuICAgICAgdGhpcy5pc0F0dGFjaGVkID0gZmFsc2U7XG5cbiAgICAgIHZhciBvYnNlcnZlckxvb2t1cCA9IGJlaGF2aW9yLm9ic2VydmVyTG9jYXRvci5nZXRPckNyZWF0ZU9ic2VydmVyc0xvb2t1cChiaW5kaW5nQ29udGV4dCksXG4gICAgICAgICAgaGFuZGxlc0JpbmQgPSBiZWhhdmlvci5oYW5kbGVzQmluZCxcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gaW5zdHJ1Y3Rpb24uYXR0cmlidXRlcyxcbiAgICAgICAgICBib3VuZFByb3BlcnRpZXMgPSB0aGlzLmJvdW5kUHJvcGVydGllcyA9IFtdLFxuICAgICAgICAgIHByb3BlcnRpZXMgPSBiZWhhdmlvci5wcm9wZXJ0aWVzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWk7XG5cbiAgICAgIGJlaGF2aW9yLmVuc3VyZVByb3BlcnRpZXNEZWZpbmVkKGJpbmRpbmdDb250ZXh0LCBvYnNlcnZlckxvb2t1cCk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHByb3BlcnRpZXNbaV0uaW5pdGlhbGl6ZShiaW5kaW5nQ29udGV4dCwgb2JzZXJ2ZXJMb29rdXAsIGF0dHJpYnV0ZXMsIGhhbmRsZXNCaW5kLCBib3VuZFByb3BlcnRpZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEJlaGF2aW9ySW5zdGFuY2UuY3JlYXRlRm9yVW5pdFRlc3QgPSBmdW5jdGlvbiBjcmVhdGVGb3JVbml0VGVzdCh0eXBlLCBhdHRyaWJ1dGVzLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgdmFyIGRlc2NyaXB0aW9uID0gUmVzb3VyY2VEZXNjcmlwdGlvbi5nZXQodHlwZSk7XG4gICAgICBkZXNjcmlwdGlvbi5hbmFseXplKF9hdXJlbGlhRGVwZW5kZW5jeUluamVjdGlvbi5Db250YWluZXIuaW5zdGFuY2UpO1xuXG4gICAgICB2YXIgYmVoYXZpb3JDb250ZXh0ID0gX2F1cmVsaWFEZXBlbmRlbmN5SW5qZWN0aW9uLkNvbnRhaW5lci5pbnN0YW5jZS5nZXQodHlwZSk7XG4gICAgICB2YXIgYmVoYXZpb3JJbnN0YW5jZSA9IG5ldyBCZWhhdmlvckluc3RhbmNlKGRlc2NyaXB0aW9uLm1ldGFkYXRhLCBiZWhhdmlvckNvbnRleHQsIHsgYXR0cmlidXRlczogYXR0cmlidXRlcyB8fCB7fSB9KTtcblxuICAgICAgYmVoYXZpb3JJbnN0YW5jZS5iaW5kKGJpbmRpbmdDb250ZXh0IHx8IHt9KTtcblxuICAgICAgcmV0dXJuIGJlaGF2aW9yQ29udGV4dDtcbiAgICB9O1xuXG4gICAgQmVoYXZpb3JJbnN0YW5jZS5wcm90b3R5cGUuY3JlYXRlZCA9IGZ1bmN0aW9uIGNyZWF0ZWQoY29udGV4dCkge1xuICAgICAgaWYgKHRoaXMuYmVoYXZpb3IuaGFuZGxlc0NyZWF0ZWQpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dC5jcmVhdGVkKGNvbnRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCZWhhdmlvckluc3RhbmNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZChjb250ZXh0KSB7XG4gICAgICB2YXIgc2tpcFNlbGZTdWJzY3JpYmVyID0gdGhpcy5iZWhhdmlvci5oYW5kbGVzQmluZCxcbiAgICAgICAgICBib3VuZFByb3BlcnRpZXMgPSB0aGlzLmJvdW5kUHJvcGVydGllcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgb2JzZXJ2ZXIsXG4gICAgICAgICAgc2VsZlN1YnNjcmliZXI7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYm91bmRQcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgeCA9IGJvdW5kUHJvcGVydGllc1tpXTtcbiAgICAgICAgb2JzZXJ2ZXIgPSB4Lm9ic2VydmVyO1xuICAgICAgICBzZWxmU3Vic2NyaWJlciA9IG9ic2VydmVyLnNlbGZTdWJzY3JpYmVyO1xuICAgICAgICBvYnNlcnZlci5wdWJsaXNoaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNraXBTZWxmU3Vic2NyaWJlcikge1xuICAgICAgICAgIG9ic2VydmVyLnNlbGZTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHguYmluZGluZy5iaW5kKGNvbnRleHQpO1xuICAgICAgICBvYnNlcnZlci5jYWxsKCk7XG5cbiAgICAgICAgb2JzZXJ2ZXIucHVibGlzaGluZyA9IHRydWU7XG4gICAgICAgIG9ic2VydmVyLnNlbGZTdWJzY3JpYmVyID0gc2VsZlN1YnNjcmliZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChza2lwU2VsZlN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dC5iaW5kKGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgIHRoaXMudmlldy5iaW5kKHRoaXMuYmluZGluZ0NvbnRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCZWhhdmlvckluc3RhbmNlLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB2YXIgYm91bmRQcm9wZXJ0aWVzID0gdGhpcy5ib3VuZFByb3BlcnRpZXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpaTtcblxuICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICB0aGlzLnZpZXcudW5iaW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmJlaGF2aW9yLmhhbmRsZXNVbmJpbmQpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dC51bmJpbmQoKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgaWkgPSBib3VuZFByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBib3VuZFByb3BlcnRpZXNbaV0uYmluZGluZy51bmJpbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmVoYXZpb3JJbnN0YW5jZS5wcm90b3R5cGUuYXR0YWNoZWQgPSBmdW5jdGlvbiBhdHRhY2hlZCgpIHtcbiAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlzQXR0YWNoZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5iZWhhdmlvci5oYW5kbGVzQXR0YWNoZWQpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dC5hdHRhY2hlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgIHRoaXMudmlldy5hdHRhY2hlZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCZWhhdmlvckluc3RhbmNlLnByb3RvdHlwZS5kZXRhY2hlZCA9IGZ1bmN0aW9uIGRldGFjaGVkKCkge1xuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgdGhpcy52aWV3LmRldGFjaGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5iZWhhdmlvci5oYW5kbGVzRGV0YWNoZWQpIHtcbiAgICAgICAgICB0aGlzLmJpbmRpbmdDb250ZXh0LmRldGFjaGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEJlaGF2aW9ySW5zdGFuY2U7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5CZWhhdmlvckluc3RhbmNlID0gQmVoYXZpb3JJbnN0YW5jZTtcblxuICBmdW5jdGlvbiBnZXRPYnNlcnZlcihiZWhhdmlvciwgaW5zdGFuY2UsIG5hbWUpIHtcbiAgICB2YXIgbG9va3VwID0gaW5zdGFuY2UuX19vYnNlcnZlcnNfXztcblxuICAgIGlmIChsb29rdXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbG9va3VwID0gYmVoYXZpb3Iub2JzZXJ2ZXJMb2NhdG9yLmdldE9yQ3JlYXRlT2JzZXJ2ZXJzTG9va3VwKGluc3RhbmNlKTtcbiAgICAgIGJlaGF2aW9yLmVuc3VyZVByb3BlcnRpZXNEZWZpbmVkKGluc3RhbmNlLCBsb29rdXApO1xuICAgIH1cblxuICAgIHJldHVybiBsb29rdXBbbmFtZV07XG4gIH1cblxuICB2YXIgQmluZGFibGVQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGFibGVQcm9wZXJ0eShuYW1lT3JDb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCaW5kYWJsZVByb3BlcnR5KTtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lT3JDb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVPckNvbmZpZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgbmFtZU9yQ29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZSB8fCBoeXBoZW5hdGUodGhpcy5uYW1lKTtcbiAgICAgIHRoaXMuZGVmYXVsdEJpbmRpbmdNb2RlID0gdGhpcy5kZWZhdWx0QmluZGluZ01vZGUgfHwgX2F1cmVsaWFCaW5kaW5nLmJpbmRpbmdNb2RlLm9uZVdheTtcbiAgICAgIHRoaXMuY2hhbmdlSGFuZGxlciA9IHRoaXMuY2hhbmdlSGFuZGxlciB8fCBudWxsO1xuICAgICAgdGhpcy5vd25lciA9IG51bGw7XG4gICAgfVxuXG4gICAgQmluZGFibGVQcm9wZXJ0eS5wcm90b3R5cGUucmVnaXN0ZXJXaXRoID0gZnVuY3Rpb24gcmVnaXN0ZXJXaXRoKHRhcmdldCwgYmVoYXZpb3IsIGRlc2NyaXB0b3IpIHtcbiAgICAgIGJlaGF2aW9yLnByb3BlcnRpZXMucHVzaCh0aGlzKTtcbiAgICAgIGJlaGF2aW9yLmF0dHJpYnV0ZXNbdGhpcy5hdHRyaWJ1dGVdID0gdGhpcztcbiAgICAgIHRoaXMub3duZXIgPSBiZWhhdmlvcjtcblxuICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlRGVzY3JpcHRvcihiZWhhdmlvciwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJpbmRhYmxlUHJvcGVydHkucHJvdG90eXBlLmNvbmZpZ3VyZURlc2NyaXB0b3IgPSBmdW5jdGlvbiBjb25maWd1cmVEZXNjcmlwdG9yKGJlaGF2aW9yLCBkZXNjcmlwdG9yKSB7XG4gICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcblxuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcblxuICAgICAgaWYgKCdpbml0aWFsaXplcicgaW4gZGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXI7XG4gICAgICAgIGRlbGV0ZSBkZXNjcmlwdG9yLmluaXRpYWxpemVyO1xuICAgICAgICBkZWxldGUgZGVzY3JpcHRvci53cml0YWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGRlbGV0ZSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICBkZWxldGUgZGVzY3JpcHRvci53cml0YWJsZTtcbiAgICAgIH1cblxuICAgICAgZGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRPYnNlcnZlcihiZWhhdmlvciwgdGhpcywgbmFtZSkuZ2V0VmFsdWUoKTtcbiAgICAgIH07XG5cbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGdldE9ic2VydmVyKGJlaGF2aW9yLCB0aGlzLCBuYW1lKS5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICBkZXNjcmlwdG9yLmdldC5nZXRPYnNlcnZlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIGdldE9ic2VydmVyKGJlaGF2aW9yLCBvYmosIG5hbWUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcblxuICAgIEJpbmRhYmxlUHJvcGVydHkucHJvdG90eXBlLmRlZmluZU9uID0gZnVuY3Rpb24gZGVmaW5lT24odGFyZ2V0LCBiZWhhdmlvcikge1xuICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUsXG4gICAgICAgICAgaGFuZGxlck5hbWU7XG5cbiAgICAgIGlmICh0aGlzLmNoYW5nZUhhbmRsZXIgPT09IG51bGwpIHtcbiAgICAgICAgaGFuZGxlck5hbWUgPSBuYW1lICsgJ0NoYW5nZWQnO1xuICAgICAgICBpZiAoaGFuZGxlck5hbWUgaW4gdGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlciA9IGhhbmRsZXJOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5kZXNjcmlwdG9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQucHJvdG90eXBlLCBuYW1lLCB0aGlzLmNvbmZpZ3VyZURlc2NyaXB0b3IoYmVoYXZpb3IsIHt9KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJpbmRhYmxlUHJvcGVydHkucHJvdG90eXBlLmNyZWF0ZU9ic2VydmVyID0gZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIoYmluZGluZ0NvbnRleHQpIHtcbiAgICAgIHZhciBzZWxmU3Vic2NyaWJlciA9IG51bGwsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlID0gdGhpcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgY2hhbmdlSGFuZGxlck5hbWUgPSB0aGlzLmNoYW5nZUhhbmRsZXIsXG4gICAgICAgICAgbmFtZSA9IHRoaXMubmFtZSxcbiAgICAgICAgICBpbml0aWFsVmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLmhhc09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlSGFuZGxlck5hbWUgaW4gYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgaWYgKCdwcm9wZXJ0eUNoYW5nZWQnIGluIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBiaW5kaW5nQ29udGV4dFtjaGFuZ2VIYW5kbGVyTmFtZV0obmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgIGJpbmRpbmdDb250ZXh0LnByb3BlcnR5Q2hhbmdlZChuYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZGluZ0NvbnRleHRbY2hhbmdlSGFuZGxlck5hbWVdKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgncHJvcGVydHlDaGFuZ2VkJyBpbiBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICBzZWxmU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYmluZGluZ0NvbnRleHQucHJvcGVydHlDaGFuZ2VkKG5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGNoYW5nZUhhbmRsZXJOYW1lICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hhbmdlIGhhbmRsZXIgJyArIGNoYW5nZUhhbmRsZXJOYW1lICsgJyB3YXMgc3BlY2lmaWVkIGJ1dCBub3QgZGVsY2FyZWQgb24gdGhlIGNsYXNzLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5pdGlhbFZhbHVlID0gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZS5jYWxsKGJpbmRpbmdDb250ZXh0KSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIodGhpcy5vd25lci50YXNrUXVldWUsIGJpbmRpbmdDb250ZXh0LCB0aGlzLm5hbWUsIHNlbGZTdWJzY3JpYmVyLCBpbml0aWFsVmFsdWUpO1xuICAgIH07XG5cbiAgICBCaW5kYWJsZVByb3BlcnR5LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gaW5pdGlhbGl6ZShiaW5kaW5nQ29udGV4dCwgb2JzZXJ2ZXJMb29rdXAsIGF0dHJpYnV0ZXMsIGJlaGF2aW9ySGFuZGxlc0JpbmQsIGJvdW5kUHJvcGVydGllcykge1xuICAgICAgdmFyIHNlbGZTdWJzY3JpYmVyLFxuICAgICAgICAgIG9ic2VydmVyLFxuICAgICAgICAgIGF0dHJpYnV0ZSxcbiAgICAgICAgICBkZWZhdWx0VmFsdWUgPSB0aGlzLmRlZmF1bHRWYWx1ZTtcblxuICAgICAgaWYgKHRoaXMuaXNEeW5hbWljKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgdGhpcy5jcmVhdGVEeW5hbWljUHJvcGVydHkoYmluZGluZ0NvbnRleHQsIG9ic2VydmVyTG9va3VwLCBiZWhhdmlvckhhbmRsZXNCaW5kLCBrZXksIGF0dHJpYnV0ZXNba2V5XSwgYm91bmRQcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5oYXNPcHRpb25zKSB7XG4gICAgICAgIG9ic2VydmVyID0gb2JzZXJ2ZXJMb29rdXBbdGhpcy5uYW1lXTtcblxuICAgICAgICBpZiAoYXR0cmlidXRlcyAhPT0gbnVsbCkge1xuICAgICAgICAgIHNlbGZTdWJzY3JpYmVyID0gb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXI7XG4gICAgICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1t0aGlzLmF0dHJpYnV0ZV07XG5cbiAgICAgICAgICBpZiAoYmVoYXZpb3JIYW5kbGVzQmluZCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYmluZGluZ0NvbnRleHRbdGhpcy5uYW1lXSA9IGF0dHJpYnV0ZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNhbGwoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgYm91bmRQcm9wZXJ0aWVzLnB1c2goeyBvYnNlcnZlcjogb2JzZXJ2ZXIsIGJpbmRpbmc6IGF0dHJpYnV0ZS5jcmVhdGVCaW5kaW5nKGJpbmRpbmdDb250ZXh0KSB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5jYWxsKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXIgPSBzZWxmU3Vic2NyaWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVyLnB1Ymxpc2hpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCaW5kYWJsZVByb3BlcnR5LnByb3RvdHlwZS5jcmVhdGVEeW5hbWljUHJvcGVydHkgPSBmdW5jdGlvbiBjcmVhdGVEeW5hbWljUHJvcGVydHkoYmluZGluZ0NvbnRleHQsIG9ic2VydmVyTG9va3VwLCBiZWhhdmlvckhhbmRsZXNCaW5kLCBuYW1lLCBhdHRyaWJ1dGUsIGJvdW5kUHJvcGVydGllcykge1xuICAgICAgdmFyIGNoYW5nZUhhbmRsZXJOYW1lID0gbmFtZSArICdDaGFuZ2VkJyxcbiAgICAgICAgICBzZWxmU3Vic2NyaWJlciA9IG51bGwsXG4gICAgICAgICAgb2JzZXJ2ZXIsXG4gICAgICAgICAgaW5mbztcblxuICAgICAgaWYgKGNoYW5nZUhhbmRsZXJOYW1lIGluIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIGlmICgncHJvcGVydHlDaGFuZ2VkJyBpbiBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgIHNlbGZTdWJzY3JpYmVyID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgYmluZGluZ0NvbnRleHRbY2hhbmdlSGFuZGxlck5hbWVdKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICBiaW5kaW5nQ29udGV4dC5wcm9wZXJ0eUNoYW5nZWQobmFtZSwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGZTdWJzY3JpYmVyID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdDb250ZXh0W2NoYW5nZUhhbmRsZXJOYW1lXShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoJ3Byb3BlcnR5Q2hhbmdlZCcgaW4gYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGJpbmRpbmdDb250ZXh0LnByb3BlcnR5Q2hhbmdlZChuYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvYnNlcnZlciA9IG9ic2VydmVyTG9va3VwW25hbWVdID0gbmV3IEJlaGF2aW9yUHJvcGVydHlPYnNlcnZlcih0aGlzLm93bmVyLnRhc2tRdWV1ZSwgYmluZGluZ0NvbnRleHQsIG5hbWUsIHNlbGZTdWJzY3JpYmVyKTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJpbmRpbmdDb250ZXh0LCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBvYnNlcnZlci5nZXRWYWx1ZS5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgc2V0OiBvYnNlcnZlci5zZXRWYWx1ZS5iaW5kKG9ic2VydmVyKVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChiZWhhdmlvckhhbmRsZXNCaW5kKSB7XG4gICAgICAgIG9ic2VydmVyLnNlbGZTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJpbmRpbmdDb250ZXh0W25hbWVdID0gYXR0cmlidXRlO1xuICAgICAgICBvYnNlcnZlci5jYWxsKCk7XG4gICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgICBpbmZvID0geyBvYnNlcnZlcjogb2JzZXJ2ZXIsIGJpbmRpbmc6IGF0dHJpYnV0ZS5jcmVhdGVCaW5kaW5nKGJpbmRpbmdDb250ZXh0KSB9O1xuICAgICAgICBib3VuZFByb3BlcnRpZXMucHVzaChpbmZvKTtcbiAgICAgIH1cblxuICAgICAgb2JzZXJ2ZXIucHVibGlzaGluZyA9IHRydWU7XG4gICAgICBvYnNlcnZlci5zZWxmU3Vic2NyaWJlciA9IHNlbGZTdWJzY3JpYmVyO1xuICAgIH07XG5cbiAgICByZXR1cm4gQmluZGFibGVQcm9wZXJ0eTtcbiAgfSkoKTtcblxuICBleHBvcnRzLkJpbmRhYmxlUHJvcGVydHkgPSBCaW5kYWJsZVByb3BlcnR5O1xuXG4gIHZhciBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yUHJvcGVydHlPYnNlcnZlcih0YXNrUXVldWUsIG9iaiwgcHJvcGVydHlOYW1lLCBzZWxmU3Vic2NyaWJlciwgaW5pdGlhbFZhbHVlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyKTtcblxuICAgICAgdGhpcy50YXNrUXVldWUgPSB0YXNrUXVldWU7XG4gICAgICB0aGlzLm9iaiA9IG9iajtcbiAgICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbiAgICAgIHRoaXMubm90cXVldWVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucHVibGlzaGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5zZWxmU3Vic2NyaWJlciA9IHNlbGZTdWJzY3JpYmVyO1xuICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB0aGlzLm9sZFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIH1cblxuICAgIEJlaGF2aW9yUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRWYWx1ZTtcbiAgICB9O1xuXG4gICAgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5wdWJsaXNoaW5nICYmIHRoaXMubm90cXVldWVkKSB7XG4gICAgICAgICAgdGhpcy5ub3RxdWV1ZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2xkVmFsdWUgPSBvbGRWYWx1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWUsXG4gICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgdGhpcy5ub3RxdWV1ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGZTdWJzY3JpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zZWxmU3Vic2NyaWJlcihuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIGNhbGxiYWNrc1tpXShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzO1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNwbGljZShjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayksIDEpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJlaGF2aW9yUHJvcGVydHlPYnNlcnZlcjtcbiAgfSkoKTtcblxuICB2YXIgY29udGVudFNlbGVjdG9yVmlld0NyZWF0ZUluc3RydWN0aW9uID0geyBzdXBwcmVzc0JpbmQ6IHRydWUsIGVuaGFuY2U6IGZhbHNlIH07XG5cbiAgZnVuY3Rpb24gZG9Qcm9jZXNzQ29udGVudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBIdG1sQmVoYXZpb3JSZXNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHRtbEJlaGF2aW9yUmVzb3VyY2UoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSHRtbEJlaGF2aW9yUmVzb3VyY2UpO1xuXG4gICAgICB0aGlzLmVsZW1lbnROYW1lID0gbnVsbDtcbiAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IG51bGw7XG4gICAgICB0aGlzLmF0dHJpYnV0ZURlZmF1bHRCaW5kaW5nTW9kZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMubGlmdHNDb250ZW50ID0gZmFsc2U7XG4gICAgICB0aGlzLnRhcmdldFNoYWRvd0RPTSA9IGZhbHNlO1xuICAgICAgdGhpcy5wcm9jZXNzQ29udGVudCA9IGRvUHJvY2Vzc0NvbnRlbnQ7XG4gICAgICB0aGlzLnVzZXNTaGFkb3dET00gPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hpbGRCaW5kaW5ncyA9IG51bGw7XG4gICAgICB0aGlzLmhhc0R5bmFtaWNPcHRpb25zID0gZmFsc2U7XG4gICAgICB0aGlzLmNvbnRhaW5lcmxlc3MgPSBmYWxzZTtcbiAgICAgIHRoaXMucHJvcGVydGllcyA9IFtdO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbiA9IGZ1bmN0aW9uIGNvbnZlbnRpb24obmFtZSwgZXhpc3RpbmcpIHtcbiAgICAgIHZhciBiZWhhdmlvcjtcblxuICAgICAgaWYgKG5hbWUuZW5kc1dpdGgoJ0N1c3RvbUF0dHJpYnV0ZScpKSB7XG4gICAgICAgIGJlaGF2aW9yID0gZXhpc3RpbmcgfHwgbmV3IEh0bWxCZWhhdmlvclJlc291cmNlKCk7XG4gICAgICAgIGJlaGF2aW9yLmF0dHJpYnV0ZU5hbWUgPSBoeXBoZW5hdGUobmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxNSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZS5lbmRzV2l0aCgnQ3VzdG9tRWxlbWVudCcpKSB7XG4gICAgICAgIGJlaGF2aW9yID0gZXhpc3RpbmcgfHwgbmV3IEh0bWxCZWhhdmlvclJlc291cmNlKCk7XG4gICAgICAgIGJlaGF2aW9yLmVsZW1lbnROYW1lID0gaHlwaGVuYXRlKG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMTMpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJlaGF2aW9yO1xuICAgIH07XG5cbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUuYWRkQ2hpbGRCaW5kaW5nID0gZnVuY3Rpb24gYWRkQ2hpbGRCaW5kaW5nKGJlaGF2aW9yKSB7XG4gICAgICBpZiAodGhpcy5jaGlsZEJpbmRpbmdzID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY2hpbGRCaW5kaW5ncyA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoaWxkQmluZGluZ3MucHVzaChiZWhhdmlvcik7XG4gICAgfTtcblxuICAgIEh0bWxCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5hbmFseXplID0gZnVuY3Rpb24gYW5hbHl6ZShjb250YWluZXIsIHRhcmdldCkge1xuICAgICAgdmFyIHByb3RvID0gdGFyZ2V0LnByb3RvdHlwZSxcbiAgICAgICAgICBwcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0aWVzLFxuICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmF0dHJpYnV0ZU5hbWUsXG4gICAgICAgICAgYXR0cmlidXRlRGVmYXVsdEJpbmRpbmdNb2RlID0gdGhpcy5hdHRyaWJ1dGVEZWZhdWx0QmluZGluZ01vZGUsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpaSxcbiAgICAgICAgICBjdXJyZW50O1xuXG4gICAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IGNvbnRhaW5lci5nZXQoX2F1cmVsaWFCaW5kaW5nLk9ic2VydmVyTG9jYXRvcik7XG4gICAgICB0aGlzLnRhc2tRdWV1ZSA9IGNvbnRhaW5lci5nZXQoX2F1cmVsaWFUYXNrUXVldWUuVGFza1F1ZXVlKTtcblxuICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLnVzZXNTaGFkb3dET00gPSB0aGlzLnRhcmdldFNoYWRvd0RPTSAmJiBoYXNTaGFkb3dET007XG4gICAgICB0aGlzLmhhbmRsZXNDcmVhdGVkID0gJ2NyZWF0ZWQnIGluIHByb3RvO1xuICAgICAgdGhpcy5oYW5kbGVzQmluZCA9ICdiaW5kJyBpbiBwcm90bztcbiAgICAgIHRoaXMuaGFuZGxlc1VuYmluZCA9ICd1bmJpbmQnIGluIHByb3RvO1xuICAgICAgdGhpcy5oYW5kbGVzQXR0YWNoZWQgPSAnYXR0YWNoZWQnIGluIHByb3RvO1xuICAgICAgdGhpcy5oYW5kbGVzRGV0YWNoZWQgPSAnZGV0YWNoZWQnIGluIHByb3RvO1xuICAgICAgdGhpcy5odG1sTmFtZSA9IHRoaXMuZWxlbWVudE5hbWUgfHwgdGhpcy5hdHRyaWJ1dGVOYW1lO1xuICAgICAgdGhpcy5hcGlOYW1lID0gdGhpcy5odG1sTmFtZS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAobSwgdykge1xuICAgICAgICByZXR1cm4gdy50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG5ldyBCaW5kYWJsZVByb3BlcnR5KHtcbiAgICAgICAgICAgIG5hbWU6ICd2YWx1ZScsXG4gICAgICAgICAgICBjaGFuZ2VIYW5kbGVyOiAndmFsdWVDaGFuZ2VkJyBpbiBwcm90byA/ICd2YWx1ZUNoYW5nZWQnIDogbnVsbCxcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlTmFtZSxcbiAgICAgICAgICAgIGRlZmF1bHRCaW5kaW5nTW9kZTogYXR0cmlidXRlRGVmYXVsdEJpbmRpbmdNb2RlXG4gICAgICAgICAgfSkucmVnaXN0ZXJXaXRoKHRhcmdldCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50ID0gcHJvcGVydGllc1swXTtcblxuICAgICAgICBpZiAocHJvcGVydGllcy5sZW5ndGggPT09IDEgJiYgY3VycmVudC5uYW1lID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgY3VycmVudC5pc0R5bmFtaWMgPSBjdXJyZW50Lmhhc09wdGlvbnMgPSB0aGlzLmhhc0R5bmFtaWNPcHRpb25zO1xuICAgICAgICAgIGN1cnJlbnQuZGVmaW5lT24odGFyZ2V0LCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgcHJvcGVydGllc1tpXS5kZWZpbmVPbih0YXJnZXQsIHRoaXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnQgPSBuZXcgQmluZGFibGVQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAndmFsdWUnLFxuICAgICAgICAgICAgY2hhbmdlSGFuZGxlcjogJ3ZhbHVlQ2hhbmdlZCcgaW4gcHJvdG8gPyAndmFsdWVDaGFuZ2VkJyA6IG51bGwsXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZU5hbWUsXG4gICAgICAgICAgICBkZWZhdWx0QmluZGluZ01vZGU6IGF0dHJpYnV0ZURlZmF1bHRCaW5kaW5nTW9kZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY3VycmVudC5oYXNPcHRpb25zID0gdHJ1ZTtcbiAgICAgICAgICBjdXJyZW50LnJlZ2lzdGVyV2l0aCh0YXJnZXQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIHByb3BlcnRpZXNbaV0uZGVmaW5lT24odGFyZ2V0LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQoY29udGFpbmVyLCB0YXJnZXQsIHZpZXdTdHJhdGVneSwgdHJhbnNpZW50VmlldywgbG9hZENvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucztcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgdmlld1N0cmF0ZWd5ID0gdmlld1N0cmF0ZWd5IHx8IHRoaXMudmlld1N0cmF0ZWd5IHx8IFZpZXdTdHJhdGVneS5nZXREZWZhdWx0KHRhcmdldCk7XG4gICAgICAgIG9wdGlvbnMgPSBuZXcgVmlld0NvbXBpbGVJbnN0cnVjdGlvbih0aGlzLnRhcmdldFNoYWRvd0RPTSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKCF2aWV3U3RyYXRlZ3kubW9kdWxlSWQpIHtcbiAgICAgICAgICB2aWV3U3RyYXRlZ3kubW9kdWxlSWQgPSBfYXVyZWxpYU1ldGFkYXRhLk9yaWdpbi5nZXQodGFyZ2V0KS5tb2R1bGVJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aWV3U3RyYXRlZ3kubG9hZFZpZXdGYWN0b3J5KGNvbnRhaW5lci5nZXQoVmlld0VuZ2luZSksIG9wdGlvbnMsIGxvYWRDb250ZXh0KS50aGVuKGZ1bmN0aW9uICh2aWV3RmFjdG9yeSkge1xuICAgICAgICAgIGlmICghdHJhbnNpZW50VmlldyB8fCAhX3RoaXM4LnZpZXdGYWN0b3J5KSB7XG4gICAgICAgICAgICBfdGhpczgudmlld0ZhY3RvcnkgPSB2aWV3RmFjdG9yeTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmlld0ZhY3Rvcnk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xuICAgIH07XG5cbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihyZWdpc3RyeSwgbmFtZSkge1xuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICByZWdpc3RyeS5yZWdpc3RlckF0dHJpYnV0ZShuYW1lIHx8IHRoaXMuYXR0cmlidXRlTmFtZSwgdGhpcywgdGhpcy5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZWxlbWVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgcmVnaXN0cnkucmVnaXN0ZXJFbGVtZW50KG5hbWUgfHwgdGhpcy5lbGVtZW50TmFtZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEh0bWxCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5jb21waWxlID0gZnVuY3Rpb24gY29tcGlsZShjb21waWxlciwgcmVzb3VyY2VzLCBub2RlLCBpbnN0cnVjdGlvbiwgcGFyZW50Tm9kZSkge1xuICAgICAgaWYgKHRoaXMubGlmdHNDb250ZW50KSB7XG4gICAgICAgIGlmICghaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkpIHtcbiAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpLFxuICAgICAgICAgICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgICAgICAgICAgY2FjaGVTaXplID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZpZXctY2FjaGUnKSxcbiAgICAgICAgICAgICAgcGFydCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdwYXJ0Jyk7XG5cbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShpbnN0cnVjdGlvbi5vcmlnaW5hbEF0dHJOYW1lKTtcbiAgICAgICAgICByZXBsYWNlTm9kZSh0ZW1wbGF0ZSwgbm9kZSwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkgPSBjb21waWxlci5jb21waWxlKGZyYWdtZW50LCByZXNvdXJjZXMpO1xuXG4gICAgICAgICAgaWYgKHBhcnQpIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9uLnZpZXdGYWN0b3J5LnBhcnQgPSBwYXJ0O1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3BhcnQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2FjaGVTaXplKSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbi52aWV3RmFjdG9yeS5zZXRDYWNoZVNpemUoY2FjaGVTaXplKTtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCd2aWV3LWNhY2hlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZSA9IHRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHBhcnRSZXBsYWNlbWVudHMgPSBpbnN0cnVjdGlvbi5wYXJ0UmVwbGFjZW1lbnRzID0ge307XG5cbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc0NvbnRlbnQoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgaW5zdHJ1Y3Rpb24pICYmIG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgaWYgKHRoaXMudXNlc1NoYWRvd0RPTSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICB0b1JlcGxhY2U7XG5cbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgICAgICAgbmV4dFNpYmxpbmcgPSBjdXJyZW50Q2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaGlsZC50YWdOYW1lID09PSAnVEVNUExBVEUnICYmICh0b1JlcGxhY2UgPSBjdXJyZW50Q2hpbGQuZ2V0QXR0cmlidXRlKCdyZXBsYWNlLXBhcnQnKSkpIHtcbiAgICAgICAgICAgICAgICBwYXJ0UmVwbGFjZW1lbnRzW3RvUmVwbGFjZV0gPSBjb21waWxlci5jb21waWxlKGN1cnJlbnRDaGlsZCwgcmVzb3VyY2VzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1cnJlbnRDaGlsZCwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjdXJyZW50Q2hpbGQgPSBuZXh0U2libGluZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24uc2tpcENvbnRlbnRQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgICAgbmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgICAgICAgbmV4dFNpYmxpbmcgPSBjdXJyZW50Q2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaGlsZC50YWdOYW1lID09PSAnVEVNUExBVEUnICYmICh0b1JlcGxhY2UgPSBjdXJyZW50Q2hpbGQuZ2V0QXR0cmlidXRlKCdyZXBsYWNlLXBhcnQnKSkpIHtcbiAgICAgICAgICAgICAgICBwYXJ0UmVwbGFjZW1lbnRzW3RvUmVwbGFjZV0gPSBjb21waWxlci5jb21waWxlKGN1cnJlbnRDaGlsZCwgcmVzb3VyY2VzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1cnJlbnRDaGlsZCwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY3VycmVudENoaWxkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGN1cnJlbnRDaGlsZCA9IG5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnN0cnVjdGlvbi5jb250ZW50RmFjdG9yeSA9IGNvbXBpbGVyLmNvbXBpbGUoZnJhZ21lbnQsIHJlc291cmNlcyk7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbi5za2lwQ29udGVudFByb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnN0cnVjdGlvbi5za2lwQ29udGVudFByb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG5cbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGNvbnRhaW5lciwgaW5zdHJ1Y3Rpb24sIGVsZW1lbnQsIGJpbmRpbmdzKSB7XG4gICAgICB2YXIgaG9zdCA9IHVuZGVmaW5lZDtcblxuICAgICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbiB8fCBCZWhhdmlvckluc3RydWN0aW9uLm5vcm1hbDtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50IHx8IG51bGw7XG4gICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzIHx8IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnROYW1lICE9PSBudWxsICYmIGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlc1NoYWRvd0RPTSkge1xuICAgICAgICAgIGhvc3QgPSBlbGVtZW50LmNyZWF0ZVNoYWRvd1Jvb3QoKTtcbiAgICAgICAgICBjb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShET01Cb3VuZGFyeSwgaG9zdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaG9zdCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgICBpZiAodGhpcy50YXJnZXRTaGFkb3dET00pIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKERPTUJvdW5kYXJ5LCBob3N0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGJpbmRpbmdDb250ZXh0ID0gaW5zdHJ1Y3Rpb24uYmluZGluZ0NvbnRleHQgfHwgY29udGFpbmVyLmdldCh0aGlzLnRhcmdldCksXG4gICAgICAgICAgYmVoYXZpb3JJbnN0YW5jZSA9IG5ldyBCZWhhdmlvckluc3RhbmNlKHRoaXMsIGJpbmRpbmdDb250ZXh0LCBpbnN0cnVjdGlvbiksXG4gICAgICAgICAgY2hpbGRCaW5kaW5ncyA9IHRoaXMuY2hpbGRCaW5kaW5ncyxcbiAgICAgICAgICB2aWV3RmFjdG9yeSA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHRoaXMubGlmdHNDb250ZW50KSB7XG4gICAgICAgIGVsZW1lbnQucHJpbWFyeUJlaGF2aW9yID0gYmVoYXZpb3JJbnN0YW5jZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50TmFtZSAhPT0gbnVsbCkge1xuICAgICAgICB2aWV3RmFjdG9yeSA9IGluc3RydWN0aW9uLnZpZXdGYWN0b3J5IHx8IHRoaXMudmlld0ZhY3Rvcnk7XG4gICAgICAgIGNvbnRhaW5lci52aWV3TW9kZWwgPSBiaW5kaW5nQ29udGV4dDtcblxuICAgICAgICBpZiAodmlld0ZhY3RvcnkpIHtcbiAgICAgICAgICBiZWhhdmlvckluc3RhbmNlLnZpZXcgPSB2aWV3RmFjdG9yeS5jcmVhdGUoY29udGFpbmVyLCBiaW5kaW5nQ29udGV4dCwgaW5zdHJ1Y3Rpb24sIGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50LnByaW1hcnlCZWhhdmlvciA9IGJlaGF2aW9ySW5zdGFuY2U7XG5cbiAgICAgICAgICBpZiAoYmVoYXZpb3JJbnN0YW5jZS52aWV3KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudXNlc1NoYWRvd0RPTSkge1xuICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24uY29udGVudEZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudFZpZXcgPSBpbnN0cnVjdGlvbi5jb250ZW50RmFjdG9yeS5jcmVhdGUoY29udGFpbmVyLCBudWxsLCBjb250ZW50U2VsZWN0b3JWaWV3Q3JlYXRlSW5zdHJ1Y3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgQ29udGVudFNlbGVjdG9yLmFwcGx5U2VsZWN0b3JzKGNvbnRlbnRWaWV3LCBiZWhhdmlvckluc3RhbmNlLnZpZXcuY29udGVudFNlbGVjdG9ycywgZnVuY3Rpb24gKGNvbnRlbnRTZWxlY3RvciwgZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50U2VsZWN0b3IuYWRkKGdyb3VwKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGJlaGF2aW9ySW5zdGFuY2UuY29udGVudFZpZXcgPSBjb250ZW50VmlldztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24uYW5jaG9ySXNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgaWYgKGNoaWxkQmluZGluZ3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjaGlsZEJpbmRpbmdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgIGJlaGF2aW9ySW5zdGFuY2Uudmlldy5hZGRCaW5kaW5nKGNoaWxkQmluZGluZ3NbaV0uY3JlYXRlKGhvc3QsIGJpbmRpbmdDb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYmVoYXZpb3JJbnN0YW5jZS52aWV3LmFwcGVuZE5vZGVzVG8oaG9zdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBiZWhhdmlvckluc3RhbmNlLnZpZXcuaW5zZXJ0Tm9kZXNCZWZvcmUoaG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGlsZEJpbmRpbmdzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjaGlsZEJpbmRpbmdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShlbGVtZW50LCBiaW5kaW5nQ29udGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChiZWhhdmlvckluc3RhbmNlLnZpZXcpIHtcbiAgICAgICAgICBiZWhhdmlvckluc3RhbmNlLnZpZXcub3duZXIgPSBiZWhhdmlvckluc3RhbmNlO1xuXG4gICAgICAgICAgaWYgKGNoaWxkQmluZGluZ3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNoaWxkQmluZGluZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgICBiZWhhdmlvckluc3RhbmNlLnZpZXcuYWRkQmluZGluZyhjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShpbnN0cnVjdGlvbi5ob3N0LCBiaW5kaW5nQ29udGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZEJpbmRpbmdzICE9PSBudWxsKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2hpbGRCaW5kaW5ncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICBiaW5kaW5ncy5wdXNoKGNoaWxkQmluZGluZ3NbaV0uY3JlYXRlKGluc3RydWN0aW9uLmhvc3QsIGJpbmRpbmdDb250ZXh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkQmluZGluZ3MgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2hpbGRCaW5kaW5ncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgYmluZGluZ3MucHVzaChjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShlbGVtZW50LCBiaW5kaW5nQ29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGlmICghKHRoaXMuYXBpTmFtZSBpbiBlbGVtZW50KSkge1xuICAgICAgICAgIGVsZW1lbnRbdGhpcy5hcGlOYW1lXSA9IGJpbmRpbmdDb250ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEodGhpcy5odG1sTmFtZSBpbiBlbGVtZW50KSkge1xuICAgICAgICAgIGVsZW1lbnRbdGhpcy5odG1sTmFtZV0gPSBiZWhhdmlvckluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0cnVjdGlvbi5pbml0aWF0ZWRCeUJlaGF2aW9yICYmIHZpZXdGYWN0b3J5KSB7XG4gICAgICAgIGJlaGF2aW9ySW5zdGFuY2Uudmlldy5jcmVhdGVkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiZWhhdmlvckluc3RhbmNlO1xuICAgIH07XG5cbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUuZW5zdXJlUHJvcGVydGllc0RlZmluZWQgPSBmdW5jdGlvbiBlbnN1cmVQcm9wZXJ0aWVzRGVmaW5lZChpbnN0YW5jZSwgbG9va3VwKSB7XG4gICAgICB2YXIgcHJvcGVydGllcywgaSwgaWksIG9ic2VydmVyO1xuXG4gICAgICBpZiAoJ19fcHJvcGVydGllc0RlZmluZWRfXycgaW4gbG9va3VwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbG9va3VwLl9fcHJvcGVydGllc0RlZmluZWRfXyA9IHRydWU7XG4gICAgICBwcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0aWVzO1xuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBvYnNlcnZlciA9IHByb3BlcnRpZXNbaV0uY3JlYXRlT2JzZXJ2ZXIoaW5zdGFuY2UpO1xuXG4gICAgICAgIGlmIChvYnNlcnZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbG9va3VwW29ic2VydmVyLnByb3BlcnR5TmFtZV0gPSBvYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gSHRtbEJlaGF2aW9yUmVzb3VyY2U7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5IdG1sQmVoYXZpb3JSZXNvdXJjZSA9IEh0bWxCZWhhdmlvclJlc291cmNlO1xuXG4gIHZhciBSZXNvdXJjZU1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VNb2R1bGUobW9kdWxlSWQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNvdXJjZU1vZHVsZSk7XG5cbiAgICAgIHRoaXMuaWQgPSBtb2R1bGVJZDtcbiAgICAgIHRoaXMubW9kdWxlSW5zdGFuY2UgPSBudWxsO1xuICAgICAgdGhpcy5tYWluUmVzb3VyY2UgPSBudWxsO1xuICAgICAgdGhpcy5yZXNvdXJjZXMgPSBudWxsO1xuICAgICAgdGhpcy52aWV3U3RyYXRlZ3kgPSBudWxsO1xuICAgICAgdGhpcy5pc0FuYWx5emVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgUmVzb3VyY2VNb2R1bGUucHJvdG90eXBlLmFuYWx5emUgPSBmdW5jdGlvbiBhbmFseXplKGNvbnRhaW5lcikge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLm1haW5SZXNvdXJjZSxcbiAgICAgICAgICByZXNvdXJjZXMgPSB0aGlzLnJlc291cmNlcyxcbiAgICAgICAgICB2aWV3U3RyYXRlZ3kgPSB0aGlzLnZpZXdTdHJhdGVneSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpO1xuXG4gICAgICBpZiAodGhpcy5pc0FuYWx5emVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc0FuYWx5emVkID0gdHJ1ZTtcblxuICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgY3VycmVudC5tZXRhZGF0YS52aWV3U3RyYXRlZ3kgPSB2aWV3U3RyYXRlZ3k7XG4gICAgICAgIGN1cnJlbnQuYW5hbHl6ZShjb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IHJlc291cmNlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGN1cnJlbnQgPSByZXNvdXJjZXNbaV07XG4gICAgICAgIGN1cnJlbnQubWV0YWRhdGEudmlld1N0cmF0ZWd5ID0gdmlld1N0cmF0ZWd5O1xuICAgICAgICBjdXJyZW50LmFuYWx5emUoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUmVzb3VyY2VNb2R1bGUucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocmVnaXN0cnksIG5hbWUpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGlpLFxuICAgICAgICAgIHJlc291cmNlcyA9IHRoaXMucmVzb3VyY2VzO1xuXG4gICAgICBpZiAodGhpcy5tYWluUmVzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5tYWluUmVzb3VyY2UucmVnaXN0ZXIocmVnaXN0cnksIG5hbWUpO1xuICAgICAgICBuYW1lID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgaWkgPSByZXNvdXJjZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICByZXNvdXJjZXNbaV0ucmVnaXN0ZXIocmVnaXN0cnksIG5hbWUpO1xuICAgICAgICBuYW1lID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUmVzb3VyY2VNb2R1bGUucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGNvbnRhaW5lciwgbG9hZENvbnRleHQpIHtcbiAgICAgIGlmICh0aGlzLm9uTG9hZGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uTG9hZGVkO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMubWFpblJlc291cmNlLFxuICAgICAgICAgIHJlc291cmNlcyA9IHRoaXMucmVzb3VyY2VzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWksXG4gICAgICAgICAgbG9hZHMgPSBbXTtcblxuICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgbG9hZHMucHVzaChjdXJyZW50LmxvYWQoY29udGFpbmVyLCBsb2FkQ29udGV4dCkpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IHJlc291cmNlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGxvYWRzLnB1c2gocmVzb3VyY2VzW2ldLmxvYWQoY29udGFpbmVyLCBsb2FkQ29udGV4dCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9uTG9hZGVkID0gUHJvbWlzZS5hbGwobG9hZHMpO1xuICAgICAgcmV0dXJuIHRoaXMub25Mb2FkZWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBSZXNvdXJjZU1vZHVsZTtcbiAgfSkoKTtcblxuICBleHBvcnRzLlJlc291cmNlTW9kdWxlID0gUmVzb3VyY2VNb2R1bGU7XG5cbiAgdmFyIFJlc291cmNlRGVzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCBleHBvcnRlZFZhbHVlLCByZXNvdXJjZVR5cGVNZXRhKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzb3VyY2VEZXNjcmlwdGlvbik7XG5cbiAgICAgIGlmICghcmVzb3VyY2VUeXBlTWV0YSkge1xuICAgICAgICByZXNvdXJjZVR5cGVNZXRhID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXQoX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgZXhwb3J0ZWRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKCFyZXNvdXJjZVR5cGVNZXRhKSB7XG4gICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YSA9IG5ldyBIdG1sQmVoYXZpb3JSZXNvdXJjZSgpO1xuICAgICAgICAgIHJlc291cmNlVHlwZU1ldGEuZWxlbWVudE5hbWUgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgICBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmRlZmluZShfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCByZXNvdXJjZVR5cGVNZXRhLCBleHBvcnRlZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzb3VyY2VUeXBlTWV0YSBpbnN0YW5jZW9mIEh0bWxCZWhhdmlvclJlc291cmNlKSB7XG4gICAgICAgIGlmIChyZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2VUeXBlTWV0YS5hdHRyaWJ1dGVOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhLmF0dHJpYnV0ZU5hbWUgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvdXJjZVR5cGVNZXRhLmF0dHJpYnV0ZU5hbWUgPT09IG51bGwgJiYgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9PT0gbnVsbCkge1xuICAgICAgICAgIEh0bWxCZWhhdmlvclJlc291cmNlLmNvbnZlbnRpb24oa2V5LCByZXNvdXJjZVR5cGVNZXRhKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcmVzb3VyY2VUeXBlTWV0YS5uYW1lKSB7XG4gICAgICAgIHJlc291cmNlVHlwZU1ldGEubmFtZSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1ldGFkYXRhID0gcmVzb3VyY2VUeXBlTWV0YTtcbiAgICAgIHRoaXMudmFsdWUgPSBleHBvcnRlZFZhbHVlO1xuICAgIH1cblxuICAgIFJlc291cmNlRGVzY3JpcHRpb24ucHJvdG90eXBlLmFuYWx5emUgPSBmdW5jdGlvbiBhbmFseXplKGNvbnRhaW5lcikge1xuICAgICAgdmFyIG1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWU7XG5cbiAgICAgIGlmICgnYW5hbHl6ZScgaW4gbWV0YWRhdGEpIHtcbiAgICAgICAgbWV0YWRhdGEuYW5hbHl6ZShjb250YWluZXIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUmVzb3VyY2VEZXNjcmlwdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihyZWdpc3RyeSwgbmFtZSkge1xuICAgICAgdGhpcy5tZXRhZGF0YS5yZWdpc3RlcihyZWdpc3RyeSwgbmFtZSk7XG4gICAgfTtcblxuICAgIFJlc291cmNlRGVzY3JpcHRpb24ucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGNvbnRhaW5lciwgbG9hZENvbnRleHQpIHtcbiAgICAgIHZhciBtZXRhZGF0YSA9IHRoaXMubWV0YWRhdGEsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgICBpZiAoJ2xvYWQnIGluIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXRhZGF0YS5sb2FkKGNvbnRhaW5lciwgdmFsdWUsIG51bGwsIG51bGwsIGxvYWRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUmVzb3VyY2VEZXNjcmlwdGlvbi5nZXQgPSBmdW5jdGlvbiBnZXQocmVzb3VyY2UpIHtcbiAgICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyAnY3VzdG9tLXJlc291cmNlJyA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgdmFyIHJlc291cmNlVHlwZU1ldGEgPSBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmdldChfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCByZXNvdXJjZSksXG4gICAgICAgICAgcmVzb3VyY2VEZXNjcmlwdGlvbjtcblxuICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEpIHtcbiAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9PT0gbnVsbCAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihrZXksIHJlc291cmNlVHlwZU1ldGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9PT0gbnVsbCAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb3VyY2VEZXNjcmlwdGlvbiA9IG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgcmVzb3VyY2UsIHJlc291cmNlVHlwZU1ldGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEgPSBIdG1sQmVoYXZpb3JSZXNvdXJjZS5jb252ZW50aW9uKGtleSkpIHtcbiAgICAgICAgICByZXNvdXJjZURlc2NyaXB0aW9uID0gbmV3IFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCByZXNvdXJjZSwgcmVzb3VyY2VUeXBlTWV0YSk7XG4gICAgICAgICAgX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5kZWZpbmUoX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgcmVzb3VyY2VUeXBlTWV0YSwgcmVzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc291cmNlVHlwZU1ldGEgPSBfYXVyZWxpYUJpbmRpbmcuVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZS5jb252ZW50aW9uKGtleSkpIHtcbiAgICAgICAgICByZXNvdXJjZURlc2NyaXB0aW9uID0gbmV3IFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCByZXNvdXJjZSwgcmVzb3VyY2VUeXBlTWV0YSk7XG4gICAgICAgICAgX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5kZWZpbmUoX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgcmVzb3VyY2VUeXBlTWV0YSwgcmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNvdXJjZURlc2NyaXB0aW9uO1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVzb3VyY2VEZXNjcmlwdGlvbjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlJlc291cmNlRGVzY3JpcHRpb24gPSBSZXNvdXJjZURlc2NyaXB0aW9uO1xuXG4gIHZhciBNb2R1bGVBbmFseXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlQW5hbHl6ZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kdWxlQW5hbHl6ZXIpO1xuXG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuXG4gICAgTW9kdWxlQW5hbHl6ZXIucHJvdG90eXBlLmdldEFuYWx5c2lzID0gZnVuY3Rpb24gZ2V0QW5hbHlzaXMobW9kdWxlSWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlW21vZHVsZUlkXTtcbiAgICB9O1xuXG4gICAgTW9kdWxlQW5hbHl6ZXIucHJvdG90eXBlLmFuYWx5emUgPSBmdW5jdGlvbiBhbmFseXplKG1vZHVsZUlkLCBtb2R1bGVJbnN0YW5jZSwgdmlld01vZGVsTWVtYmVyKSB7XG4gICAgICB2YXIgbWFpblJlc291cmNlLFxuICAgICAgICAgIGZhbGxiYWNrVmFsdWUsXG4gICAgICAgICAgZmFsbGJhY2tLZXksXG4gICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgZXhwb3J0ZWRWYWx1ZSxcbiAgICAgICAgICByZXNvdXJjZXMgPSBbXSxcbiAgICAgICAgICBjb252ZW50aW9uYWwsXG4gICAgICAgICAgdmlld1N0cmF0ZWd5LFxuICAgICAgICAgIHJlc291cmNlTW9kdWxlO1xuXG4gICAgICByZXNvdXJjZU1vZHVsZSA9IHRoaXMuY2FjaGVbbW9kdWxlSWRdO1xuICAgICAgaWYgKHJlc291cmNlTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiByZXNvdXJjZU1vZHVsZTtcbiAgICAgIH1cblxuICAgICAgcmVzb3VyY2VNb2R1bGUgPSBuZXcgUmVzb3VyY2VNb2R1bGUobW9kdWxlSWQpO1xuICAgICAgdGhpcy5jYWNoZVttb2R1bGVJZF0gPSByZXNvdXJjZU1vZHVsZTtcblxuICAgICAgaWYgKHR5cGVvZiBtb2R1bGVJbnN0YW5jZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtb2R1bGVJbnN0YW5jZSA9IHsgJ2RlZmF1bHQnOiBtb2R1bGVJbnN0YW5jZSB9O1xuICAgICAgfVxuXG4gICAgICBpZiAodmlld01vZGVsTWVtYmVyKSB7XG4gICAgICAgIG1haW5SZXNvdXJjZSA9IG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKHZpZXdNb2RlbE1lbWJlciwgbW9kdWxlSW5zdGFuY2Vbdmlld01vZGVsTWVtYmVyXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoa2V5IGluIG1vZHVsZUluc3RhbmNlKSB7XG4gICAgICAgIGV4cG9ydGVkVmFsdWUgPSBtb2R1bGVJbnN0YW5jZVtrZXldO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHZpZXdNb2RlbE1lbWJlciB8fCB0eXBlb2YgZXhwb3J0ZWRWYWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb3VyY2VUeXBlTWV0YSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0KF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEucmVzb3VyY2UsIGV4cG9ydGVkVmFsdWUpO1xuXG4gICAgICAgIGlmIChyZXNvdXJjZVR5cGVNZXRhKSB7XG4gICAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9PT0gbnVsbCAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5jb252ZW50aW9uKGtleSwgcmVzb3VyY2VUeXBlTWV0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9PT0gbnVsbCAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFtYWluUmVzb3VyY2UgJiYgcmVzb3VyY2VUeXBlTWV0YSBpbnN0YW5jZW9mIEh0bWxCZWhhdmlvclJlc291cmNlICYmIHJlc291cmNlVHlwZU1ldGEuZWxlbWVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1haW5SZXNvdXJjZSA9IG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgZXhwb3J0ZWRWYWx1ZSwgcmVzb3VyY2VUeXBlTWV0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgZXhwb3J0ZWRWYWx1ZSwgcmVzb3VyY2VUeXBlTWV0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHBvcnRlZFZhbHVlIGluc3RhbmNlb2YgVmlld1N0cmF0ZWd5KSB7XG4gICAgICAgICAgdmlld1N0cmF0ZWd5ID0gZXhwb3J0ZWRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChleHBvcnRlZFZhbHVlIGluc3RhbmNlb2YgX2F1cmVsaWFMb2FkZXIuVGVtcGxhdGVSZWdpc3RyeUVudHJ5KSB7XG4gICAgICAgICAgdmlld1N0cmF0ZWd5ID0gbmV3IFRlbXBsYXRlUmVnaXN0cnlWaWV3U3RyYXRlZ3kobW9kdWxlSWQsIGV4cG9ydGVkVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjb252ZW50aW9uYWwgPSBIdG1sQmVoYXZpb3JSZXNvdXJjZS5jb252ZW50aW9uKGtleSkpIHtcbiAgICAgICAgICAgIGlmIChjb252ZW50aW9uYWwuZWxlbWVudE5hbWUgIT09IG51bGwgJiYgIW1haW5SZXNvdXJjZSkge1xuICAgICAgICAgICAgICBtYWluUmVzb3VyY2UgPSBuZXcgUmVzb3VyY2VEZXNjcmlwdGlvbihrZXksIGV4cG9ydGVkVmFsdWUsIGNvbnZlbnRpb25hbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvdXJjZXMucHVzaChuZXcgUmVzb3VyY2VEZXNjcmlwdGlvbihrZXksIGV4cG9ydGVkVmFsdWUsIGNvbnZlbnRpb25hbCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmRlZmluZShfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBjb252ZW50aW9uYWwsIGV4cG9ydGVkVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29udmVudGlvbmFsID0gX2F1cmVsaWFCaW5kaW5nLlZhbHVlQ29udmVydGVyUmVzb3VyY2UuY29udmVudGlvbihrZXkpKSB7XG4gICAgICAgICAgICByZXNvdXJjZXMucHVzaChuZXcgUmVzb3VyY2VEZXNjcmlwdGlvbihrZXksIGV4cG9ydGVkVmFsdWUsIGNvbnZlbnRpb25hbCkpO1xuICAgICAgICAgICAgX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5kZWZpbmUoX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgY29udmVudGlvbmFsLCBleHBvcnRlZFZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFmYWxsYmFja1ZhbHVlKSB7XG4gICAgICAgICAgICBmYWxsYmFja1ZhbHVlID0gZXhwb3J0ZWRWYWx1ZTtcbiAgICAgICAgICAgIGZhbGxiYWNrS2V5ID0ga2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIW1haW5SZXNvdXJjZSAmJiBmYWxsYmFja1ZhbHVlKSB7XG4gICAgICAgIG1haW5SZXNvdXJjZSA9IG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGZhbGxiYWNrS2V5LCBmYWxsYmFja1ZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzb3VyY2VNb2R1bGUubW9kdWxlSW5zdGFuY2UgPSBtb2R1bGVJbnN0YW5jZTtcbiAgICAgIHJlc291cmNlTW9kdWxlLm1haW5SZXNvdXJjZSA9IG1haW5SZXNvdXJjZTtcbiAgICAgIHJlc291cmNlTW9kdWxlLnJlc291cmNlcyA9IHJlc291cmNlcztcbiAgICAgIHJlc291cmNlTW9kdWxlLnZpZXdTdHJhdGVneSA9IHZpZXdTdHJhdGVneTtcblxuICAgICAgcmV0dXJuIHJlc291cmNlTW9kdWxlO1xuICAgIH07XG5cbiAgICByZXR1cm4gTW9kdWxlQW5hbHl6ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Nb2R1bGVBbmFseXplciA9IE1vZHVsZUFuYWx5emVyO1xuXG4gIHZhciBub011dGF0aW9ucyA9IFtdO1xuXG4gIHZhciBDaGlsZE9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDaGlsZE9ic2VydmVyKGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoaWxkT2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICAgIHRoaXMuY2hhbmdlSGFuZGxlciA9IGNvbmZpZy5jaGFuZ2VIYW5kbGVyIHx8IHRoaXMubmFtZSArICdDaGFuZ2VkJztcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBjb25maWcuc2VsZWN0b3I7XG4gICAgfVxuXG4gICAgQ2hpbGRPYnNlcnZlci5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHRhcmdldCwgYmVoYXZpb3IpIHtcbiAgICAgIHJldHVybiBuZXcgQ2hpbGRPYnNlcnZlckJpbmRlcih0aGlzLnNlbGVjdG9yLCB0YXJnZXQsIHRoaXMubmFtZSwgYmVoYXZpb3IsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgfTtcblxuICAgIHJldHVybiBDaGlsZE9ic2VydmVyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQ2hpbGRPYnNlcnZlciA9IENoaWxkT2JzZXJ2ZXI7XG5cbiAgdmFyIENoaWxkT2JzZXJ2ZXJCaW5kZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENoaWxkT2JzZXJ2ZXJCaW5kZXIoc2VsZWN0b3IsIHRhcmdldCwgcHJvcGVydHksIGJlaGF2aW9yLCBjaGFuZ2VIYW5kbGVyKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hpbGRPYnNlcnZlckJpbmRlcik7XG5cbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgdGhpcy5iZWhhdmlvciA9IGJlaGF2aW9yO1xuICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyID0gY2hhbmdlSGFuZGxlciBpbiBiZWhhdmlvciA/IGNoYW5nZUhhbmRsZXIgOiBudWxsO1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgQ2hpbGRPYnNlcnZlckJpbmRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQoc291cmNlKSB7XG4gICAgICB2YXIgaXRlbXMsXG4gICAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgYmVoYXZpb3IgPSB0aGlzLmJlaGF2aW9yO1xuXG4gICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy50YXJnZXQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuXG4gICAgICBpdGVtcyA9IGJlaGF2aW9yW3RoaXMucHJvcGVydHldO1xuICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICBpdGVtcyA9IGJlaGF2aW9yW3RoaXMucHJvcGVydHldID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtcy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRzID0gdGhpcy50YXJnZXQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnNlbGVjdG9yKTtcblxuICAgICAgZm9yIChpID0gMCwgaWkgPSByZXN1bHRzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IHJlc3VsdHNbaV07XG4gICAgICAgIGl0ZW1zLnB1c2gobm9kZS5wcmltYXJ5QmVoYXZpb3IgPyBub2RlLnByaW1hcnlCZWhhdmlvci5iaW5kaW5nQ29udGV4dCA6IG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jaGFuZ2VIYW5kbGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuYmVoYXZpb3JbdGhpcy5jaGFuZ2VIYW5kbGVyXShub011dGF0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoaWxkT2JzZXJ2ZXJCaW5kZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG5cbiAgICBDaGlsZE9ic2VydmVyQmluZGVyLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlKG11dGF0aW9ucykge1xuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5iZWhhdmlvclt0aGlzLnByb3BlcnR5XSxcbiAgICAgICAgICBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG5cbiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgdmFyIGFkZGVkID0gcmVjb3JkLmFkZGVkTm9kZXMsXG4gICAgICAgICAgICByZW1vdmVkID0gcmVjb3JkLnJlbW92ZWROb2RlcyxcbiAgICAgICAgICAgIHByZXYgPSByZWNvcmQucHJldmlvdXNTaWJsaW5nLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgcHJpbWFyeSxcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbm9kZTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHJlbW92ZWQubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIG5vZGUgPSByZW1vdmVkW2ldO1xuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxICYmIG5vZGUubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHByaW1hcnkgPSBub2RlLnByaW1hcnlCZWhhdmlvciA/IG5vZGUucHJpbWFyeUJlaGF2aW9yLmJpbmRpbmdDb250ZXh0IDogbm9kZTtcbiAgICAgICAgICAgIGluZGV4ID0gaXRlbXMuaW5kZXhPZihwcmltYXJ5KTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gYWRkZWQubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIG5vZGUgPSBhZGRlZFtpXTtcbiAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBwcmltYXJ5ID0gbm9kZS5wcmltYXJ5QmVoYXZpb3IgPyBub2RlLnByaW1hcnlCZWhhdmlvci5iaW5kaW5nQ29udGV4dCA6IG5vZGU7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgIHdoaWxlIChwcmV2KSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2Lm5vZGVUeXBlID09PSAxICYmIHByZXYubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcHJldiA9IHByZXYucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtcy5zcGxpY2UoaW5kZXgsIDAsIHByaW1hcnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmNoYW5nZUhhbmRsZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5iZWhhdmlvclt0aGlzLmNoYW5nZUhhbmRsZXJdKG11dGF0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBDaGlsZE9ic2VydmVyQmluZGVyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQ2hpbGRPYnNlcnZlckJpbmRlciA9IENoaWxkT2JzZXJ2ZXJCaW5kZXI7XG5cbiAgdmFyIENvbXBvc2l0aW9uRW5naW5lID0gKGZ1bmN0aW9uICgpIHtcbiAgICBDb21wb3NpdGlvbkVuZ2luZS5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgICByZXR1cm4gW1ZpZXdFbmdpbmVdO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb21wb3NpdGlvbkVuZ2luZSh2aWV3RW5naW5lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcG9zaXRpb25FbmdpbmUpO1xuXG4gICAgICB0aGlzLnZpZXdFbmdpbmUgPSB2aWV3RW5naW5lO1xuICAgIH1cblxuICAgIENvbXBvc2l0aW9uRW5naW5lLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIGFjdGl2YXRlKGluc3RydWN0aW9uKSB7XG4gICAgICBpZiAoaW5zdHJ1Y3Rpb24uc2tpcEFjdGl2YXRpb24gfHwgdHlwZW9mIGluc3RydWN0aW9uLnZpZXdNb2RlbC5hY3RpdmF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0cnVjdGlvbi52aWV3TW9kZWwuYWN0aXZhdGUoaW5zdHJ1Y3Rpb24ubW9kZWwpIHx8IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG5cbiAgICBDb21wb3NpdGlvbkVuZ2luZS5wcm90b3R5cGUuY3JlYXRlQmVoYXZpb3JBbmRTd2FwID0gZnVuY3Rpb24gY3JlYXRlQmVoYXZpb3JBbmRTd2FwKGluc3RydWN0aW9uKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgdmFyIHJlbW92ZVJlc3BvbnNlID0gaW5zdHJ1Y3Rpb24udmlld1Nsb3QucmVtb3ZlQWxsKHRydWUpO1xuXG4gICAgICBpZiAocmVtb3ZlUmVzcG9uc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVSZXNwb25zZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM5LmNyZWF0ZUJlaGF2aW9yKGluc3RydWN0aW9uKS50aGVuKGZ1bmN0aW9uIChiZWhhdmlvcikge1xuICAgICAgICAgICAgaWYgKGluc3RydWN0aW9uLmN1cnJlbnRCZWhhdmlvcikge1xuICAgICAgICAgICAgICBpbnN0cnVjdGlvbi5jdXJyZW50QmVoYXZpb3IudW5iaW5kKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJlaGF2aW9yLnZpZXcuYmluZChiZWhhdmlvci5iaW5kaW5nQ29udGV4dCk7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbi52aWV3U2xvdC5hZGQoYmVoYXZpb3Iudmlldyk7XG5cbiAgICAgICAgICAgIHJldHVybiBiZWhhdmlvcjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVCZWhhdmlvcihpbnN0cnVjdGlvbikudGhlbihmdW5jdGlvbiAoYmVoYXZpb3IpIHtcbiAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24uY3VycmVudEJlaGF2aW9yKSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbi5jdXJyZW50QmVoYXZpb3IudW5iaW5kKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmVoYXZpb3Iudmlldy5iaW5kKGJlaGF2aW9yLmJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICBpbnN0cnVjdGlvbi52aWV3U2xvdC5hZGQoYmVoYXZpb3Iudmlldyk7XG5cbiAgICAgICAgICByZXR1cm4gYmVoYXZpb3I7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb21wb3NpdGlvbkVuZ2luZS5wcm90b3R5cGUuY3JlYXRlQmVoYXZpb3IgPSBmdW5jdGlvbiBjcmVhdGVCZWhhdmlvcihpbnN0cnVjdGlvbikge1xuICAgICAgdmFyIGNoaWxkQ29udGFpbmVyID0gaW5zdHJ1Y3Rpb24uY2hpbGRDb250YWluZXIsXG4gICAgICAgICAgdmlld01vZGVsUmVzb3VyY2UgPSBpbnN0cnVjdGlvbi52aWV3TW9kZWxSZXNvdXJjZSxcbiAgICAgICAgICB2aWV3TW9kZWwgPSBpbnN0cnVjdGlvbi52aWV3TW9kZWwsXG4gICAgICAgICAgbWV0YWRhdGE7XG5cbiAgICAgIHJldHVybiB0aGlzLmFjdGl2YXRlKGluc3RydWN0aW9uKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRvbmVMb2FkaW5nLCB2aWV3U3RyYXRlZ3lGcm9tVmlld01vZGVsLCBvcmlnaW47XG5cbiAgICAgICAgaWYgKCdnZXRWaWV3U3RyYXRlZ3knIGluIHZpZXdNb2RlbCAmJiAhaW5zdHJ1Y3Rpb24udmlldykge1xuICAgICAgICAgIHZpZXdTdHJhdGVneUZyb21WaWV3TW9kZWwgPSB0cnVlO1xuICAgICAgICAgIGluc3RydWN0aW9uLnZpZXcgPSBWaWV3U3RyYXRlZ3kubm9ybWFsaXplKHZpZXdNb2RlbC5nZXRWaWV3U3RyYXRlZ3koKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24udmlldykge1xuICAgICAgICAgIGlmICh2aWV3U3RyYXRlZ3lGcm9tVmlld01vZGVsKSB7XG4gICAgICAgICAgICBvcmlnaW4gPSBfYXVyZWxpYU1ldGFkYXRhLk9yaWdpbi5nZXQodmlld01vZGVsLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIGlmIChvcmlnaW4pIHtcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udmlldy5tYWtlUmVsYXRpdmVUbyhvcmlnaW4ubW9kdWxlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24udmlld1Jlc291cmNlcykge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udmlldy5tYWtlUmVsYXRpdmVUbyhpbnN0cnVjdGlvbi52aWV3UmVzb3VyY2VzLnZpZXdVcmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aWV3TW9kZWxSZXNvdXJjZSkge1xuICAgICAgICAgIG1ldGFkYXRhID0gdmlld01vZGVsUmVzb3VyY2UubWV0YWRhdGE7XG4gICAgICAgICAgZG9uZUxvYWRpbmcgPSBtZXRhZGF0YS5sb2FkKGNoaWxkQ29udGFpbmVyLCB2aWV3TW9kZWxSZXNvdXJjZS52YWx1ZSwgaW5zdHJ1Y3Rpb24udmlldywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0YWRhdGEgPSBuZXcgSHRtbEJlaGF2aW9yUmVzb3VyY2UoKTtcbiAgICAgICAgICBtZXRhZGF0YS5lbGVtZW50TmFtZSA9ICdkeW5hbWljLWVsZW1lbnQnO1xuICAgICAgICAgIG1ldGFkYXRhLmFuYWx5emUoaW5zdHJ1Y3Rpb24uY29udGFpbmVyIHx8IGNoaWxkQ29udGFpbmVyLCB2aWV3TW9kZWwuY29uc3RydWN0b3IpO1xuICAgICAgICAgIGRvbmVMb2FkaW5nID0gbWV0YWRhdGEubG9hZChjaGlsZENvbnRhaW5lciwgdmlld01vZGVsLmNvbnN0cnVjdG9yLCBpbnN0cnVjdGlvbi52aWV3LCB0cnVlKS50aGVuKGZ1bmN0aW9uICh2aWV3RmFjdG9yeSkge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXdGYWN0b3J5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRvbmVMb2FkaW5nLnRoZW4oZnVuY3Rpb24gKHZpZXdGYWN0b3J5KSB7XG4gICAgICAgICAgcmV0dXJuIG1ldGFkYXRhLmNyZWF0ZShjaGlsZENvbnRhaW5lciwgQmVoYXZpb3JJbnN0cnVjdGlvbi5keW5hbWljKGluc3RydWN0aW9uLmhvc3QsIHZpZXdNb2RlbCwgdmlld0ZhY3RvcnkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ29tcG9zaXRpb25FbmdpbmUucHJvdG90eXBlLmNyZWF0ZVZpZXdNb2RlbCA9IGZ1bmN0aW9uIGNyZWF0ZVZpZXdNb2RlbChpbnN0cnVjdGlvbikge1xuICAgICAgdmFyIGNoaWxkQ29udGFpbmVyID0gaW5zdHJ1Y3Rpb24uY2hpbGRDb250YWluZXIgfHwgaW5zdHJ1Y3Rpb24uY29udGFpbmVyLmNyZWF0ZUNoaWxkKCk7XG5cbiAgICAgIGluc3RydWN0aW9uLnZpZXdNb2RlbCA9IGluc3RydWN0aW9uLnZpZXdSZXNvdXJjZXMgPyBpbnN0cnVjdGlvbi52aWV3UmVzb3VyY2VzLnJlbGF0aXZlVG9WaWV3KGluc3RydWN0aW9uLnZpZXdNb2RlbCkgOiBpbnN0cnVjdGlvbi52aWV3TW9kZWw7XG5cbiAgICAgIHJldHVybiB0aGlzLnZpZXdFbmdpbmUuaW1wb3J0Vmlld01vZGVsUmVzb3VyY2UoaW5zdHJ1Y3Rpb24udmlld01vZGVsKS50aGVuKGZ1bmN0aW9uICh2aWV3TW9kZWxSZXNvdXJjZSkge1xuICAgICAgICBjaGlsZENvbnRhaW5lci5hdXRvUmVnaXN0ZXIodmlld01vZGVsUmVzb3VyY2UudmFsdWUpO1xuXG4gICAgICAgIGlmIChpbnN0cnVjdGlvbi5ob3N0KSB7XG4gICAgICAgICAgY2hpbGRDb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShFbGVtZW50LCBpbnN0cnVjdGlvbi5ob3N0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RydWN0aW9uLnZpZXdNb2RlbCA9IGNoaWxkQ29udGFpbmVyLnZpZXdNb2RlbCA9IGNoaWxkQ29udGFpbmVyLmdldCh2aWV3TW9kZWxSZXNvdXJjZS52YWx1ZSk7XG4gICAgICAgIGluc3RydWN0aW9uLnZpZXdNb2RlbFJlc291cmNlID0gdmlld01vZGVsUmVzb3VyY2U7XG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDb21wb3NpdGlvbkVuZ2luZS5wcm90b3R5cGUuY29tcG9zZSA9IGZ1bmN0aW9uIGNvbXBvc2UoaW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgaW5zdHJ1Y3Rpb24uY2hpbGRDb250YWluZXIgPSBpbnN0cnVjdGlvbi5jaGlsZENvbnRhaW5lciB8fCBpbnN0cnVjdGlvbi5jb250YWluZXIuY3JlYXRlQ2hpbGQoKTtcbiAgICAgIGluc3RydWN0aW9uLnZpZXcgPSBWaWV3U3RyYXRlZ3kubm9ybWFsaXplKGluc3RydWN0aW9uLnZpZXcpO1xuXG4gICAgICBpZiAoaW5zdHJ1Y3Rpb24udmlld01vZGVsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb24udmlld01vZGVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVZpZXdNb2RlbChpbnN0cnVjdGlvbikudGhlbihmdW5jdGlvbiAoaW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczEwLmNyZWF0ZUJlaGF2aW9yQW5kU3dhcChpbnN0cnVjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQmVoYXZpb3JBbmRTd2FwKGluc3RydWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbi52aWV3KSB7XG4gICAgICAgIGlmIChpbnN0cnVjdGlvbi52aWV3UmVzb3VyY2VzKSB7XG4gICAgICAgICAgaW5zdHJ1Y3Rpb24udmlldy5tYWtlUmVsYXRpdmVUbyhpbnN0cnVjdGlvbi52aWV3UmVzb3VyY2VzLnZpZXdVcmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uLnZpZXcubG9hZFZpZXdGYWN0b3J5KHRoaXMudmlld0VuZ2luZSwgbmV3IFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24oKSkudGhlbihmdW5jdGlvbiAodmlld0ZhY3RvcnkpIHtcbiAgICAgICAgICB2YXIgcmVtb3ZlUmVzcG9uc2UgPSBpbnN0cnVjdGlvbi52aWV3U2xvdC5yZW1vdmVBbGwodHJ1ZSk7XG5cbiAgICAgICAgICBpZiAocmVtb3ZlUmVzcG9uc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlUmVzcG9uc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2aWV3RmFjdG9yeS5jcmVhdGUoaW5zdHJ1Y3Rpb24uY2hpbGRDb250YWluZXIsIGluc3RydWN0aW9uLmJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udmlld1Nsb3QuYWRkKHJlc3VsdCk7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZpZXdGYWN0b3J5LmNyZWF0ZShpbnN0cnVjdGlvbi5jaGlsZENvbnRhaW5lciwgaW5zdHJ1Y3Rpb24uYmluZGluZ0NvbnRleHQpO1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udmlld1Nsb3QuYWRkKHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uLnZpZXdTbG90KSB7XG4gICAgICAgIGluc3RydWN0aW9uLnZpZXdTbG90LnJlbW92ZUFsbCgpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQ29tcG9zaXRpb25FbmdpbmU7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Db21wb3NpdGlvbkVuZ2luZSA9IENvbXBvc2l0aW9uRW5naW5lO1xuXG4gIHZhciBFbGVtZW50Q29uZmlnUmVzb3VyY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVsZW1lbnRDb25maWdSZXNvdXJjZSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbGVtZW50Q29uZmlnUmVzb3VyY2UpO1xuICAgIH1cblxuICAgIEVsZW1lbnRDb25maWdSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQoY29udGFpbmVyLCB0YXJnZXQpIHtcbiAgICAgIHZhciBjb25maWcgPSBuZXcgdGFyZ2V0KCksXG4gICAgICAgICAgZXZlbnRNYW5hZ2VyID0gY29udGFpbmVyLmdldChfYXVyZWxpYUJpbmRpbmcuRXZlbnRNYW5hZ2VyKTtcblxuICAgICAgZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyRWxlbWVudENvbmZpZyhjb25maWcpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgRWxlbWVudENvbmZpZ1Jlc291cmNlLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKCkge307XG5cbiAgICByZXR1cm4gRWxlbWVudENvbmZpZ1Jlc291cmNlO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuRWxlbWVudENvbmZpZ1Jlc291cmNlID0gRWxlbWVudENvbmZpZ1Jlc291cmNlO1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlQmVoYXZpb3JOYW1lKG5hbWUsIHR5cGUpIHtcbiAgICBpZiAoL1tBLVpdLy50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcJycgKyBuYW1lICsgJ1xcJyBpcyBub3QgYSB2YWxpZCAnICsgdHlwZSArICcgbmFtZS4gIFVwcGVyLWNhc2UgbGV0dGVycyBhcmUgbm90IGFsbG93ZWQgYmVjYXVzZSB0aGUgRE9NIGlzIG5vdCBjYXNlLXNlbnNpdGl2ZS4nKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNvdXJjZShpbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmRlZmluZShfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBpbnN0YW5jZSwgdGFyZ2V0KTtcbiAgICB9O1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdyZXNvdXJjZScsIHJlc291cmNlKTtcblxuICBmdW5jdGlvbiBiZWhhdmlvcihvdmVycmlkZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBpZiAob3ZlcnJpZGUgaW5zdGFuY2VvZiBIdG1sQmVoYXZpb3JSZXNvdXJjZSkge1xuICAgICAgICBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmRlZmluZShfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBvdmVycmlkZSwgdGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHRhcmdldCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVzb3VyY2UsIG92ZXJyaWRlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdiZWhhdmlvcicsIGJlaGF2aW9yKTtcblxuICBmdW5jdGlvbiBjdXN0b21FbGVtZW50KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUJlaGF2aW9yTmFtZShuYW1lLCAnY3VzdG9tIGVsZW1lbnQnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgdmFyIHJlc291cmNlID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPckNyZWF0ZU93bihfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgIHJlc291cmNlLmVsZW1lbnROYW1lID0gbmFtZTtcbiAgICB9O1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdjdXN0b21FbGVtZW50JywgY3VzdG9tRWxlbWVudCk7XG5cbiAgZnVuY3Rpb24gY3VzdG9tQXR0cmlidXRlKG5hbWUsIGRlZmF1bHRCaW5kaW5nTW9kZSkge1xuICAgIHZhbGlkYXRlQmVoYXZpb3JOYW1lKG5hbWUsICdjdXN0b20gYXR0cmlidXRlJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHZhciByZXNvdXJjZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHRhcmdldCk7XG4gICAgICByZXNvdXJjZS5hdHRyaWJ1dGVOYW1lID0gbmFtZTtcbiAgICAgIHJlc291cmNlLmF0dHJpYnV0ZURlZmF1bHRCaW5kaW5nTW9kZSA9IGRlZmF1bHRCaW5kaW5nTW9kZTtcbiAgICB9O1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdjdXN0b21BdHRyaWJ1dGUnLCBjdXN0b21BdHRyaWJ1dGUpO1xuXG4gIGZ1bmN0aW9uIHRlbXBsYXRlQ29udHJvbGxlcih0YXJnZXQpIHtcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uIGRlY28odGFyZ2V0KSB7XG4gICAgICB2YXIgcmVzb3VyY2UgPSBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmdldE9yQ3JlYXRlT3duKF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEucmVzb3VyY2UsIEh0bWxCZWhhdmlvclJlc291cmNlLCB0YXJnZXQpO1xuICAgICAgcmVzb3VyY2UubGlmdHNDb250ZW50ID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRhcmdldCA/IGRlY28odGFyZ2V0KSA6IGRlY287XG4gIH1cblxuICBfYXVyZWxpYU1ldGFkYXRhLkRlY29yYXRvcnMuY29uZmlndXJlLnNpbXBsZURlY29yYXRvcigndGVtcGxhdGVDb250cm9sbGVyJywgdGVtcGxhdGVDb250cm9sbGVyKTtcblxuICBmdW5jdGlvbiBiaW5kYWJsZShuYW1lT3JDb25maWdPclRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgdmFyIGRlY28gPSBmdW5jdGlvbiBkZWNvKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICB2YXIgYWN0dWFsVGFyZ2V0ID0ga2V5ID8gdGFyZ2V0LmNvbnN0cnVjdG9yIDogdGFyZ2V0LFxuICAgICAgICAgIHJlc291cmNlID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPckNyZWF0ZU93bihfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgYWN0dWFsVGFyZ2V0KSxcbiAgICAgICAgICBwcm9wO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIG5hbWVPckNvbmZpZ09yVGFyZ2V0ID0gbmFtZU9yQ29uZmlnT3JUYXJnZXQgfHwge307XG4gICAgICAgIG5hbWVPckNvbmZpZ09yVGFyZ2V0Lm5hbWUgPSBrZXk7XG4gICAgICB9XG5cbiAgICAgIHByb3AgPSBuZXcgQmluZGFibGVQcm9wZXJ0eShuYW1lT3JDb25maWdPclRhcmdldCk7XG4gICAgICByZXR1cm4gcHJvcC5yZWdpc3RlcldpdGgoYWN0dWFsVGFyZ2V0LCByZXNvdXJjZSwgZGVzY3JpcHRvcik7XG4gICAgfTtcblxuICAgIGlmICghbmFtZU9yQ29uZmlnT3JUYXJnZXQpIHtcbiAgICAgIHJldHVybiBkZWNvO1xuICAgIH1cblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBuYW1lT3JDb25maWdPclRhcmdldDtcbiAgICAgIG5hbWVPckNvbmZpZ09yVGFyZ2V0ID0gbnVsbDtcbiAgICAgIHJldHVybiBkZWNvKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVjbztcbiAgfVxuXG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUucGFyYW1ldGVyaXplZERlY29yYXRvcignYmluZGFibGUnLCBiaW5kYWJsZSk7XG5cbiAgZnVuY3Rpb24gZHluYW1pY09wdGlvbnModGFyZ2V0KSB7XG4gICAgdmFyIGRlY28gPSBmdW5jdGlvbiBkZWNvKHRhcmdldCkge1xuICAgICAgdmFyIHJlc291cmNlID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPckNyZWF0ZU93bihfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgIHJlc291cmNlLmhhc0R5bmFtaWNPcHRpb25zID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRhcmdldCA/IGRlY28odGFyZ2V0KSA6IGRlY287XG4gIH1cblxuICBfYXVyZWxpYU1ldGFkYXRhLkRlY29yYXRvcnMuY29uZmlndXJlLnNpbXBsZURlY29yYXRvcignZHluYW1pY09wdGlvbnMnLCBkeW5hbWljT3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gc3luYyhzZWxlY3Rvck9yQ29uZmlnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgICAgdmFyIGFjdHVhbFRhcmdldCA9IGtleSA/IHRhcmdldC5jb25zdHJ1Y3RvciA6IHRhcmdldCxcbiAgICAgICAgICByZXNvdXJjZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIGFjdHVhbFRhcmdldCk7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3JPckNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2VsZWN0b3JPckNvbmZpZyA9IHtcbiAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JPckNvbmZpZyxcbiAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmVzb3VyY2UuYWRkQ2hpbGRCaW5kaW5nKG5ldyBDaGlsZE9ic2VydmVyKHNlbGVjdG9yT3JDb25maWcpKTtcbiAgICB9O1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdzeW5jJywgc3luYyk7XG5cbiAgZnVuY3Rpb24gdXNlU2hhZG93RE9NKHRhcmdldCkge1xuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gZGVjbyh0YXJnZXQpIHtcbiAgICAgIHZhciByZXNvdXJjZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHRhcmdldCk7XG4gICAgICByZXNvdXJjZS50YXJnZXRTaGFkb3dET00gPSB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGFyZ2V0ID8gZGVjbyh0YXJnZXQpIDogZGVjbztcbiAgfVxuXG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUuc2ltcGxlRGVjb3JhdG9yKCd1c2VTaGFkb3dET00nLCB1c2VTaGFkb3dET00pO1xuXG4gIGZ1bmN0aW9uIGRvTm90UHJvY2Vzc0NvbnRlbnQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2tpcENvbnRlbnRQcm9jZXNzaW5nKHRhcmdldCkge1xuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gZGVjbyh0YXJnZXQpIHtcbiAgICAgIHZhciByZXNvdXJjZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHRhcmdldCk7XG4gICAgICByZXNvdXJjZS5wcm9jZXNzQ29udGVudCA9IGRvTm90UHJvY2Vzc0NvbnRlbnQ7XG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBAc2tpcENvbnRlbnRQcm9jZXNzaW5nIGRlY29yYXRvciBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gUGxlYXNlIHVzZSBAcHJvY2Vzc0NvbnRlbnQoZmFsc2UpIGluc3RlYWQuJyk7XG4gICAgfTtcblxuICAgIHJldHVybiB0YXJnZXQgPyBkZWNvKHRhcmdldCkgOiBkZWNvO1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5zaW1wbGVEZWNvcmF0b3IoJ3NraXBDb250ZW50UHJvY2Vzc2luZycsIHNraXBDb250ZW50UHJvY2Vzc2luZyk7XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0NvbnRlbnQocHJvY2Vzc29yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHZhciByZXNvdXJjZSA9IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHRhcmdldCk7XG4gICAgICByZXNvdXJjZS5wcm9jZXNzQ29udGVudCA9IHByb2Nlc3NvciB8fCBkb05vdFByb2Nlc3NDb250ZW50O1xuICAgIH07XG4gIH1cblxuICBfYXVyZWxpYU1ldGFkYXRhLkRlY29yYXRvcnMuY29uZmlndXJlLnBhcmFtZXRlcml6ZWREZWNvcmF0b3IoJ3Byb2Nlc3NDb250ZW50JywgcHJvY2Vzc0NvbnRlbnQpO1xuXG4gIGZ1bmN0aW9uIGNvbnRhaW5lcmxlc3ModGFyZ2V0KSB7XG4gICAgdmFyIGRlY28gPSBmdW5jdGlvbiBkZWNvKHRhcmdldCkge1xuICAgICAgdmFyIHJlc291cmNlID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPckNyZWF0ZU93bihfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgIHJlc291cmNlLmNvbnRhaW5lcmxlc3MgPSB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGFyZ2V0ID8gZGVjbyh0YXJnZXQpIDogZGVjbztcbiAgfVxuXG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUuc2ltcGxlRGVjb3JhdG9yKCdjb250YWluZXJsZXNzJywgY29udGFpbmVybGVzcyk7XG5cbiAgZnVuY3Rpb24gdmlld1N0cmF0ZWd5KHN0cmF0ZWd5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZGVmaW5lKFZpZXdTdHJhdGVneS5tZXRhZGF0YUtleSwgc3RyYXRlZ3ksIHRhcmdldCk7XG4gICAgfTtcbiAgfVxuXG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUucGFyYW1ldGVyaXplZERlY29yYXRvcigndmlld1N0cmF0ZWd5JywgdXNlVmlldyk7XG5cbiAgZnVuY3Rpb24gdXNlVmlldyhwYXRoKSB7XG4gICAgcmV0dXJuIHZpZXdTdHJhdGVneShuZXcgVXNlVmlld1N0cmF0ZWd5KHBhdGgpKTtcbiAgfVxuXG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUucGFyYW1ldGVyaXplZERlY29yYXRvcigndXNlVmlldycsIHVzZVZpZXcpO1xuXG4gIGZ1bmN0aW9uIGlubGluZVZpZXcobWFya3VwLCBkZXBlbmRlbmNpZXMsIGRlcGVuZGVuY3lCYXNlVXJsKSB7XG4gICAgcmV0dXJuIHZpZXdTdHJhdGVneShuZXcgSW5saW5lVmlld1N0cmF0ZWd5KG1hcmt1cCwgZGVwZW5kZW5jaWVzLCBkZXBlbmRlbmN5QmFzZVVybCkpO1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdpbmxpbmVWaWV3JywgaW5saW5lVmlldyk7XG5cbiAgZnVuY3Rpb24gbm9WaWV3KHRhcmdldCkge1xuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gZGVjbyh0YXJnZXQpIHtcbiAgICAgIF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZGVmaW5lKFZpZXdTdHJhdGVneS5tZXRhZGF0YUtleSwgbmV3IE5vVmlld1N0cmF0ZWd5KCksIHRhcmdldCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0YXJnZXQgPyBkZWNvKHRhcmdldCkgOiBkZWNvO1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5zaW1wbGVEZWNvcmF0b3IoJ25vVmlldycsIG5vVmlldyk7XG5cbiAgZnVuY3Rpb24gZWxlbWVudENvbmZpZyh0YXJnZXQpIHtcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uIGRlY28odGFyZ2V0KSB7XG4gICAgICBfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLmRlZmluZShfYXVyZWxpYU1ldGFkYXRhLk1ldGFkYXRhLnJlc291cmNlLCBuZXcgRWxlbWVudENvbmZpZ1Jlc291cmNlKCksIHRhcmdldCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0YXJnZXQgPyBkZWNvKHRhcmdldCkgOiBkZWNvO1xuICB9XG5cbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5zaW1wbGVEZWNvcmF0b3IoJ2VsZW1lbnRDb25maWcnLCBlbGVtZW50Q29uZmlnKTtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cycsICdjb3JlLWpzJywgJ2F1cmVsaWEtbWV0YWRhdGEnLCAnYXVyZWxpYS1sb2dnaW5nJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfY29yZUpzLCBfYXVyZWxpYU1ldGFkYXRhLCBfYXVyZWxpYUxvZ2dpbmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuICBleHBvcnRzLmF1dG9pbmplY3QgPSBhdXRvaW5qZWN0O1xuICBleHBvcnRzLmluamVjdCA9IGluamVjdDtcbiAgZXhwb3J0cy5yZWdpc3RyYXRpb24gPSByZWdpc3RyYXRpb247XG4gIGV4cG9ydHMudHJhbnNpZW50ID0gdHJhbnNpZW50O1xuICBleHBvcnRzLnNpbmdsZXRvbiA9IHNpbmdsZXRvbjtcbiAgZXhwb3J0cy5pbnN0YW5jZUFjdGl2YXRvciA9IGluc3RhbmNlQWN0aXZhdG9yO1xuICBleHBvcnRzLmZhY3RvcnkgPSBmYWN0b3J5O1xuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFRyYW5zaWVudFJlZ2lzdHJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNpZW50UmVnaXN0cmF0aW9uKGtleSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaWVudFJlZ2lzdHJhdGlvbik7XG5cbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIH1cblxuICAgIFRyYW5zaWVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcihjb250YWluZXIsIGtleSwgZm4pIHtcbiAgICAgIGNvbnRhaW5lci5yZWdpc3RlclRyYW5zaWVudCh0aGlzLmtleSB8fCBrZXksIGZuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRyYW5zaWVudFJlZ2lzdHJhdGlvbjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlRyYW5zaWVudFJlZ2lzdHJhdGlvbiA9IFRyYW5zaWVudFJlZ2lzdHJhdGlvbjtcblxuICB2YXIgU2luZ2xldG9uUmVnaXN0cmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW5nbGV0b25SZWdpc3RyYXRpb24oa2V5T3JSZWdpc3RlckluQ2hpbGQpIHtcbiAgICAgIHZhciByZWdpc3RlckluQ2hpbGQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbmdsZXRvblJlZ2lzdHJhdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2Yga2V5T3JSZWdpc3RlckluQ2hpbGQgPT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLnJlZ2lzdGVySW5DaGlsZCA9IGtleU9yUmVnaXN0ZXJJbkNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXlPclJlZ2lzdGVySW5DaGlsZDtcbiAgICAgICAgdGhpcy5yZWdpc3RlckluQ2hpbGQgPSByZWdpc3RlckluQ2hpbGQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgU2luZ2xldG9uUmVnaXN0cmF0aW9uLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvbnRhaW5lciwga2V5LCBmbikge1xuICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5yZWdpc3RlckluQ2hpbGQgPyBjb250YWluZXIgOiBjb250YWluZXIucm9vdDtcbiAgICAgIGRlc3RpbmF0aW9uLnJlZ2lzdGVyU2luZ2xldG9uKHRoaXMua2V5IHx8IGtleSwgZm4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2luZ2xldG9uUmVnaXN0cmF0aW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuU2luZ2xldG9uUmVnaXN0cmF0aW9uID0gU2luZ2xldG9uUmVnaXN0cmF0aW9uO1xuXG4gIHZhciBSZXNvbHZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb2x2ZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIFJlc29sdmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQoY29udGFpbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgY3VzdG9tIFJlc29sdmVyIG11c3QgaW1wbGVtZW50IGdldChjb250YWluZXIpIGFuZCByZXR1cm4gdGhlIHJlc29sdmVkIGluc3RhbmNlKHMpLicpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVzb2x2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5SZXNvbHZlciA9IFJlc29sdmVyO1xuXG4gIHZhciBMYXp5ID0gKGZ1bmN0aW9uIChfUmVzb2x2ZXIpIHtcbiAgICBfaW5oZXJpdHMoTGF6eSwgX1Jlc29sdmVyKTtcblxuICAgIGZ1bmN0aW9uIExhenkoa2V5KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGF6eSk7XG5cbiAgICAgIF9SZXNvbHZlci5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgfVxuXG4gICAgTGF6eS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KGNvbnRhaW5lcikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXQoX3RoaXMua2V5KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIExhenkub2YgPSBmdW5jdGlvbiBvZihrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgTGF6eShrZXkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTGF6eTtcbiAgfSkoUmVzb2x2ZXIpO1xuXG4gIGV4cG9ydHMuTGF6eSA9IExhenk7XG5cbiAgdmFyIEFsbCA9IChmdW5jdGlvbiAoX1Jlc29sdmVyMikge1xuICAgIF9pbmhlcml0cyhBbGwsIF9SZXNvbHZlcjIpO1xuXG4gICAgZnVuY3Rpb24gQWxsKGtleSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFsbCk7XG5cbiAgICAgIF9SZXNvbHZlcjIuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIH1cblxuICAgIEFsbC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXRBbGwodGhpcy5rZXkpO1xuICAgIH07XG5cbiAgICBBbGwub2YgPSBmdW5jdGlvbiBvZihrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgQWxsKGtleSk7XG4gICAgfTtcblxuICAgIHJldHVybiBBbGw7XG4gIH0pKFJlc29sdmVyKTtcblxuICBleHBvcnRzLkFsbCA9IEFsbDtcblxuICB2YXIgT3B0aW9uYWwgPSAoZnVuY3Rpb24gKF9SZXNvbHZlcjMpIHtcbiAgICBfaW5oZXJpdHMoT3B0aW9uYWwsIF9SZXNvbHZlcjMpO1xuXG4gICAgZnVuY3Rpb24gT3B0aW9uYWwoa2V5KSB7XG4gICAgICB2YXIgY2hlY2tQYXJlbnQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wdGlvbmFsKTtcblxuICAgICAgX1Jlc29sdmVyMy5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICB0aGlzLmNoZWNrUGFyZW50ID0gY2hlY2tQYXJlbnQ7XG4gICAgfVxuXG4gICAgT3B0aW9uYWwucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldChjb250YWluZXIpIHtcbiAgICAgIGlmIChjb250YWluZXIuaGFzSGFuZGxlcih0aGlzLmtleSwgdGhpcy5jaGVja1BhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXQodGhpcy5rZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgT3B0aW9uYWwub2YgPSBmdW5jdGlvbiBvZihrZXkpIHtcbiAgICAgIHZhciBjaGVja1BhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICByZXR1cm4gbmV3IE9wdGlvbmFsKGtleSwgY2hlY2tQYXJlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gT3B0aW9uYWw7XG4gIH0pKFJlc29sdmVyKTtcblxuICBleHBvcnRzLk9wdGlvbmFsID0gT3B0aW9uYWw7XG5cbiAgdmFyIFBhcmVudCA9IChmdW5jdGlvbiAoX1Jlc29sdmVyNCkge1xuICAgIF9pbmhlcml0cyhQYXJlbnQsIF9SZXNvbHZlcjQpO1xuXG4gICAgZnVuY3Rpb24gUGFyZW50KGtleSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhcmVudCk7XG5cbiAgICAgIF9SZXNvbHZlcjQuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIH1cblxuICAgIFBhcmVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5wYXJlbnQgPyBjb250YWluZXIucGFyZW50LmdldCh0aGlzLmtleSkgOiBudWxsO1xuICAgIH07XG5cbiAgICBQYXJlbnQub2YgPSBmdW5jdGlvbiBvZihrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgUGFyZW50KGtleSk7XG4gICAgfTtcblxuICAgIHJldHVybiBQYXJlbnQ7XG4gIH0pKFJlc29sdmVyKTtcblxuICBleHBvcnRzLlBhcmVudCA9IFBhcmVudDtcblxuICB2YXIgQ2xhc3NBY3RpdmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENsYXNzQWN0aXZhdG9yKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsYXNzQWN0aXZhdG9yKTtcbiAgICB9XG5cbiAgICBDbGFzc0FjdGl2YXRvci5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gaW52b2tlKGZuLCBhcmdzKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QoZm4sIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2xhc3NBY3RpdmF0b3IsIG51bGwsIFt7XG4gICAgICBrZXk6ICdpbnN0YW5jZScsXG4gICAgICB2YWx1ZTogbmV3IENsYXNzQWN0aXZhdG9yKCksXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENsYXNzQWN0aXZhdG9yO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQ2xhc3NBY3RpdmF0b3IgPSBDbGFzc0FjdGl2YXRvcjtcblxuICB2YXIgRmFjdG9yeUFjdGl2YXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmFjdG9yeUFjdGl2YXRvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGYWN0b3J5QWN0aXZhdG9yKTtcbiAgICB9XG5cbiAgICBGYWN0b3J5QWN0aXZhdG9yLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiBpbnZva2UoZm4sIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoRmFjdG9yeUFjdGl2YXRvciwgbnVsbCwgW3tcbiAgICAgIGtleTogJ2luc3RhbmNlJyxcbiAgICAgIHZhbHVlOiBuZXcgRmFjdG9yeUFjdGl2YXRvcigpLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH1dKTtcblxuICAgIHJldHVybiBGYWN0b3J5QWN0aXZhdG9yO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuRmFjdG9yeUFjdGl2YXRvciA9IEZhY3RvcnlBY3RpdmF0b3I7XG5cbiAgdmFyIGJhZEtleUVycm9yID0gJ2tleS92YWx1ZSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuIEFyZSB5b3UgdHJ5aW5nIHRvIGluamVjdC9yZWdpc3RlciBzb21ldGhpbmcgdGhhdCBkb2VzblxcJ3QgZXhpc3Qgd2l0aCBEST8nO1xuXG4gIF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEucmVnaXN0cmF0aW9uID0gJ2F1cmVsaWE6cmVnaXN0cmF0aW9uJztcbiAgX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5pbnN0YW5jZUFjdGl2YXRvciA9ICdhdXJlbGlhOmluc3RhbmNlLWFjdGl2YXRvcic7XG5cbiAgZnVuY3Rpb24gdGVzdCgpIHt9XG4gIGlmICghdGVzdC5uYW1lKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb25cXHMqKFxcUyopXFxzKlxcKC8pWzFdO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmFtZScsIHsgdmFsdWU6IG5hbWUgfSk7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGVtcHR5UGFyYW1ldGVycyA9IE9iamVjdC5mcmVlemUoW10pO1xuXG4gIGV4cG9ydHMuZW1wdHlQYXJhbWV0ZXJzID0gZW1wdHlQYXJhbWV0ZXJzO1xuXG4gIHZhciBDb250YWluZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lcihjb25zdHJ1Y3Rpb25JbmZvKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGFpbmVyKTtcblxuICAgICAgdGhpcy5jb25zdHJ1Y3Rpb25JbmZvID0gY29uc3RydWN0aW9uSW5mbyB8fCBuZXcgTWFwKCk7XG4gICAgICB0aGlzLmVudHJpZXMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIH1cblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUubWFrZUdsb2JhbCA9IGZ1bmN0aW9uIG1ha2VHbG9iYWwoKSB7XG4gICAgICBDb250YWluZXIuaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uIHJlZ2lzdGVySW5zdGFuY2Uoa2V5LCBpbnN0YW5jZSkge1xuICAgICAgdGhpcy5yZWdpc3RlckhhbmRsZXIoa2V5LCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZWdpc3RlclRyYW5zaWVudCA9IGZ1bmN0aW9uIHJlZ2lzdGVyVHJhbnNpZW50KGtleSwgZm4pIHtcbiAgICAgIGZuID0gZm4gfHwga2V5O1xuICAgICAgdGhpcy5yZWdpc3RlckhhbmRsZXIoa2V5LCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geC5pbnZva2UoZm4pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJTaW5nbGV0b24gPSBmdW5jdGlvbiByZWdpc3RlclNpbmdsZXRvbihrZXksIGZuKSB7XG4gICAgICB2YXIgc2luZ2xldG9uID0gbnVsbDtcbiAgICAgIGZuID0gZm4gfHwga2V5O1xuICAgICAgdGhpcy5yZWdpc3RlckhhbmRsZXIoa2V5LCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSB4Lmludm9rZShmbikpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuYXV0b1JlZ2lzdGVyID0gZnVuY3Rpb24gYXV0b1JlZ2lzdGVyKGZuLCBrZXkpIHtcbiAgICAgIHZhciByZWdpc3RyYXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChmbiA9PT0gbnVsbCB8fCBmbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihiYWRLZXlFcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVnaXN0cmF0aW9uID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXQoX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZWdpc3RyYXRpb24sIGZuKTtcblxuICAgICAgICBpZiAocmVnaXN0cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZWdpc3RyYXRpb24ucmVnaXN0ZXIodGhpcywga2V5IHx8IGZuLCBmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZWdpc3RlclNpbmdsZXRvbihrZXkgfHwgZm4sIGZuKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZWdpc3Rlckluc3RhbmNlKGZuLCBmbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuYXV0b1JlZ2lzdGVyQWxsID0gZnVuY3Rpb24gYXV0b1JlZ2lzdGVyQWxsKGZucykge1xuICAgICAgdmFyIGkgPSBmbnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0aGlzLmF1dG9SZWdpc3RlcihmbnNbaV0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlZ2lzdGVySGFuZGxlciA9IGZ1bmN0aW9uIHJlZ2lzdGVySGFuZGxlcihrZXksIGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX2dldE9yQ3JlYXRlRW50cnkoa2V5KS5wdXNoKGhhbmRsZXIpO1xuICAgIH07XG5cbiAgICBDb250YWluZXIucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKGtleSkge1xuICAgICAgdGhpcy5lbnRyaWVzWydkZWxldGUnXShrZXkpO1xuICAgIH07XG5cbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIHZhciBlbnRyeSA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYmFkS2V5RXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09PSBDb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgaW5zdGFuY2VvZiBSZXNvbHZlcikge1xuICAgICAgICByZXR1cm4ga2V5LmdldCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgZW50cnkgPSB0aGlzLmVudHJpZXMuZ2V0KGtleSk7XG5cbiAgICAgIGlmIChlbnRyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlbnRyeVswXSh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXQoa2V5KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hdXRvUmVnaXN0ZXIoa2V5KTtcbiAgICAgIGVudHJ5ID0gdGhpcy5lbnRyaWVzLmdldChrZXkpO1xuXG4gICAgICByZXR1cm4gZW50cnlbMF0odGhpcyk7XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gZ2V0QWxsKGtleSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBlbnRyeSA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYmFkS2V5RXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeSA9IHRoaXMuZW50cmllcy5nZXQoa2V5KTtcblxuICAgICAgaWYgKGVudHJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5Lm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiB4KF90aGlzMik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldEFsbChrZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW107XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuaGFzSGFuZGxlciA9IGZ1bmN0aW9uIGhhc0hhbmRsZXIoa2V5KSB7XG4gICAgICB2YXIgY2hlY2tQYXJlbnQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYmFkS2V5RXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5lbnRyaWVzLmhhcyhrZXkpIHx8IGNoZWNrUGFyZW50ICYmIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50Lmhhc0hhbmRsZXIoa2V5LCBjaGVja1BhcmVudCk7XG4gICAgfTtcblxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuY3JlYXRlQ2hpbGQgPSBmdW5jdGlvbiBjcmVhdGVDaGlsZCgpIHtcbiAgICAgIHZhciBjaGlsZENvbnRhaW5lciA9IG5ldyBDb250YWluZXIodGhpcy5jb25zdHJ1Y3Rpb25JbmZvKTtcbiAgICAgIGNoaWxkQ29udGFpbmVyLnBhcmVudCA9IHRoaXM7XG4gICAgICBjaGlsZENvbnRhaW5lci5yb290ID0gdGhpcy5yb290O1xuICAgICAgcmV0dXJuIGNoaWxkQ29udGFpbmVyO1xuICAgIH07XG5cbiAgICBDb250YWluZXIucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIGludm9rZShmbiwgZGVwcykge1xuICAgICAgdmFyIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgaSA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBpaSA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBrZXlzID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGFyZ3MgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGluZm8gPSB0aGlzLl9nZXRPckNyZWF0ZUNvbnN0cnVjdGlvbkluZm8oZm4pO1xuICAgICAgICBrZXlzID0gaW5mby5rZXlzO1xuICAgICAgICBhcmdzID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGtleXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIGFyZ3NbaV0gPSB0aGlzLmdldChrZXlzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhcmdzID0gYXJncy5jb25jYXQoZGVwcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5mby5hY3RpdmF0b3IuaW52b2tlKGZuLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIGFjdGl2YXRpbmdUZXh0ID0gaW5mbyAmJiBpbmZvLmFjdGl2YXRvciBpbnN0YW5jZW9mIENsYXNzQWN0aXZhdG9yID8gJ2luc3RhbnRpYXRpbmcnIDogJ2ludm9raW5nJztcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAnRXJyb3IgJyArIGFjdGl2YXRpbmdUZXh0ICsgJyAnICsgZm4ubmFtZSArICcuJztcbiAgICAgICAgaWYgKGkgPCBpaSkge1xuICAgICAgICAgIG1lc3NhZ2UgKz0gJyBUaGUgYXJndW1lbnQgYXQgaW5kZXggJyArIGkgKyAnIChrZXk6JyArIGtleXNbaV0gKyAnKSBjb3VsZCBub3QgYmUgc2F0aXNmaWVkLic7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNzYWdlICs9ICcgQ2hlY2sgdGhlIGlubmVyIGVycm9yIGZvciBkZXRhaWxzLic7XG5cbiAgICAgICAgdGhyb3cgbmV3IF9hdXJlbGlhTG9nZ2luZy5BZ2dyZWdhdGVFcnJvcihtZXNzYWdlLCBlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0T3JDcmVhdGVFbnRyeSA9IGZ1bmN0aW9uIF9nZXRPckNyZWF0ZUVudHJ5KGtleSkge1xuICAgICAgdmFyIGVudHJ5ID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigna2V5IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4gIChBcmUgeW91IHRyeWluZyB0byBpbmplY3Qgc29tZXRoaW5nIHRoYXQgZG9lc25cXCd0IGV4aXN0IHdpdGggREk/KScpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeSA9IHRoaXMuZW50cmllcy5nZXQoa2V5KTtcblxuICAgICAgaWYgKGVudHJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW50cnkgPSBbXTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldChrZXksIGVudHJ5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH07XG5cbiAgICBDb250YWluZXIucHJvdG90eXBlLl9nZXRPckNyZWF0ZUNvbnN0cnVjdGlvbkluZm8gPSBmdW5jdGlvbiBfZ2V0T3JDcmVhdGVDb25zdHJ1Y3Rpb25JbmZvKGZuKSB7XG4gICAgICB2YXIgaW5mbyA9IHRoaXMuY29uc3RydWN0aW9uSW5mby5nZXQoZm4pO1xuXG4gICAgICBpZiAoaW5mbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZm8gPSB0aGlzLl9jcmVhdGVDb25zdHJ1Y3Rpb25JbmZvKGZuKTtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rpb25JbmZvLnNldChmbiwgaW5mbyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH07XG5cbiAgICBDb250YWluZXIucHJvdG90eXBlLl9jcmVhdGVDb25zdHJ1Y3Rpb25JbmZvID0gZnVuY3Rpb24gX2NyZWF0ZUNvbnN0cnVjdGlvbkluZm8oZm4pIHtcbiAgICAgIHZhciBpbmZvID0geyBhY3RpdmF0b3I6IF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZ2V0T3duKF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuaW5zdGFuY2VBY3RpdmF0b3IsIGZuKSB8fCBDbGFzc0FjdGl2YXRvci5pbnN0YW5jZSB9O1xuXG4gICAgICBpZiAoZm4uaW5qZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbi5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBpbmZvLmtleXMgPSBmbi5pbmplY3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmZvLmtleXMgPSBmbi5pbmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgIH1cblxuICAgICAgaW5mby5rZXlzID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5wYXJhbVR5cGVzLCBmbikgfHwgZW1wdHlQYXJhbWV0ZXJzO1xuICAgICAgcmV0dXJuIGluZm87XG4gICAgfTtcblxuICAgIHJldHVybiBDb250YWluZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Db250YWluZXIgPSBDb250YWluZXI7XG5cbiAgZnVuY3Rpb24gYXV0b2luamVjdChwb3RlbnRpYWxUYXJnZXQpIHtcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uIGRlY28odGFyZ2V0KSB7XG4gICAgICB0YXJnZXQuaW5qZWN0ID0gX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5nZXRPd24oX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5wYXJhbVR5cGVzLCB0YXJnZXQpIHx8IGVtcHR5UGFyYW1ldGVycztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBvdGVudGlhbFRhcmdldCA/IGRlY28ocG90ZW50aWFsVGFyZ2V0KSA6IGRlY287XG4gIH1cblxuICBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHJlc3RbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldC5pbmplY3QgPSByZXN0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5kZWZpbmUoX2F1cmVsaWFNZXRhZGF0YS5NZXRhZGF0YS5yZWdpc3RyYXRpb24sIHZhbHVlLCB0YXJnZXQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2llbnQoa2V5KSB7XG4gICAgcmV0dXJuIHJlZ2lzdHJhdGlvbihuZXcgVHJhbnNpZW50UmVnaXN0cmF0aW9uKGtleSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luZ2xldG9uKGtleU9yUmVnaXN0ZXJJbkNoaWxkKSB7XG4gICAgdmFyIHJlZ2lzdGVySW5DaGlsZCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgcmV0dXJuIHJlZ2lzdHJhdGlvbihuZXcgU2luZ2xldG9uUmVnaXN0cmF0aW9uKGtleU9yUmVnaXN0ZXJJbkNoaWxkLCByZWdpc3RlckluQ2hpbGQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc3RhbmNlQWN0aXZhdG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZGVmaW5lKF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuaW5zdGFuY2VBY3RpdmF0b3IsIHZhbHVlLCB0YXJnZXQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmYWN0b3J5KCkge1xuICAgIHJldHVybiBpbnN0YW5jZUFjdGl2YXRvcihGYWN0b3J5QWN0aXZhdG9yLmluc3RhbmNlKTtcbiAgfVxuXG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUuc2ltcGxlRGVjb3JhdG9yKCdhdXRvaW5qZWN0JywgYXV0b2luamVjdCk7XG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUucGFyYW1ldGVyaXplZERlY29yYXRvcignaW5qZWN0JywgaW5qZWN0KTtcbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdyZWdpc3RyYXRpb24nLCByZWdpc3RyYXRpb24pO1xuICBfYXVyZWxpYU1ldGFkYXRhLkRlY29yYXRvcnMuY29uZmlndXJlLnBhcmFtZXRlcml6ZWREZWNvcmF0b3IoJ3RyYW5zaWVudCcsIHRyYW5zaWVudCk7XG4gIF9hdXJlbGlhTWV0YWRhdGEuRGVjb3JhdG9ycy5jb25maWd1cmUucGFyYW1ldGVyaXplZERlY29yYXRvcignc2luZ2xldG9uJywgc2luZ2xldG9uKTtcbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdpbnN0YW5jZUFjdGl2YXRvcicsIGluc3RhbmNlQWN0aXZhdG9yKTtcbiAgX2F1cmVsaWFNZXRhZGF0YS5EZWNvcmF0b3JzLmNvbmZpZ3VyZS5wYXJhbWV0ZXJpemVkRGVjb3JhdG9yKCdmYWN0b3J5JywgZmFjdG9yeSk7XG59KTsiLCIvKiAqLyBcbmRlZmluZShbJ2V4cG9ydHMnLCAnY29yZS1qcycsICdhdXJlbGlhLXBhdGgnLCAnYXVyZWxpYS1tZXRhZGF0YSddLCBmdW5jdGlvbiAoZXhwb3J0cywgX2NvcmVKcywgX2F1cmVsaWFQYXRoLCBfYXVyZWxpYU1ldGFkYXRhKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFRlbXBsYXRlRGVwZW5kZW5jeSA9IGZ1bmN0aW9uIFRlbXBsYXRlRGVwZW5kZW5jeShzcmMsIG5hbWUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGVtcGxhdGVEZXBlbmRlbmN5KTtcblxuICAgIHRoaXMuc3JjID0gc3JjO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH07XG5cbiAgZXhwb3J0cy5UZW1wbGF0ZURlcGVuZGVuY3kgPSBUZW1wbGF0ZURlcGVuZGVuY3k7XG5cbiAgdmFyIFRlbXBsYXRlUmVnaXN0cnlFbnRyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGVtcGxhdGVSZWdpc3RyeUVudHJ5KGFkZHJlc3MpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZW1wbGF0ZVJlZ2lzdHJ5RW50cnkpO1xuXG4gICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IG51bGw7XG4gICAgICB0aGlzLnJlc291cmNlcyA9IG51bGw7XG4gICAgICB0aGlzLmZhY3RvcnkgPSBudWxsO1xuICAgIH1cblxuICAgIFRlbXBsYXRlUmVnaXN0cnlFbnRyeS5wcm90b3R5cGUuc2V0VGVtcGxhdGUgPSBmdW5jdGlvbiBzZXRUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgdmFyIGFkZHJlc3MgPSB0aGlzLmFkZHJlc3M7XG4gICAgICB2YXIgdXNlUmVzb3VyY2VzID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgc3JjID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICB1c2VSZXNvdXJjZXMgPSB0ZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3JlcXVpcmUnKTtcbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gbmV3IEFycmF5KHVzZVJlc291cmNlcy5sZW5ndGgpO1xuXG4gICAgICBpZiAodXNlUmVzb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHVzZVJlc291cmNlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGN1cnJlbnQgPSB1c2VSZXNvdXJjZXNbaV07XG4gICAgICAgIHNyYyA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlKCdmcm9tJyk7XG5cbiAgICAgICAgaWYgKCFzcmMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxyZXF1aXJlPiBlbGVtZW50IGluICcgKyBhZGRyZXNzICsgJyBoYXMgbm8gXCJmcm9tXCIgYXR0cmlidXRlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXNbaV0gPSBuZXcgVGVtcGxhdGVEZXBlbmRlbmN5KF9hdXJlbGlhUGF0aC5yZWxhdGl2ZVRvRmlsZShzcmMsIGFkZHJlc3MpLCBjdXJyZW50LmdldEF0dHJpYnV0ZSgnYXMnKSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBUZW1wbGF0ZVJlZ2lzdHJ5RW50cnkucHJvdG90eXBlLmFkZERlcGVuZGVuY3kgPSBmdW5jdGlvbiBhZGREZXBlbmRlbmN5KHNyYywgbmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBzcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLnB1c2gobmV3IFRlbXBsYXRlRGVwZW5kZW5jeShfYXVyZWxpYVBhdGgucmVsYXRpdmVUb0ZpbGUoc3JjLCB0aGlzLmFkZHJlc3MpLCBuYW1lKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG9yaWdpbiA9IF9hdXJlbGlhTWV0YWRhdGEuT3JpZ2luLmdldChzcmMpO1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcy5wdXNoKG5ldyBUZW1wbGF0ZURlcGVuZGVuY3kob3JpZ2luLm1vZHVsZUlkLCBuYW1lKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRlbXBsYXRlUmVnaXN0cnlFbnRyeS5wcm90b3R5cGUuc2V0UmVzb3VyY2VzID0gZnVuY3Rpb24gc2V0UmVzb3VyY2VzKHJlc291cmNlcykge1xuICAgICAgdGhpcy5yZXNvdXJjZXMgPSByZXNvdXJjZXM7XG4gICAgfTtcblxuICAgIFRlbXBsYXRlUmVnaXN0cnlFbnRyeS5wcm90b3R5cGUuc2V0RmFjdG9yeSA9IGZ1bmN0aW9uIHNldEZhY3RvcnkoZmFjdG9yeSkge1xuICAgICAgdGhpcy5mYWN0b3J5ID0gZmFjdG9yeTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRlbXBsYXRlUmVnaXN0cnlFbnRyeSwgW3tcbiAgICAgIGtleTogJ3RlbXBsYXRlSXNMb2FkZWQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlICE9PSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2lzUmVhZHknLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnkgIT09IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRlbXBsYXRlUmVnaXN0cnlFbnRyeTtcbiAgfSkoKTtcblxuICBleHBvcnRzLlRlbXBsYXRlUmVnaXN0cnlFbnRyeSA9IFRlbXBsYXRlUmVnaXN0cnlFbnRyeTtcblxuICB2YXIgTG9hZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgdGhpcy50ZW1wbGF0ZVJlZ2lzdHJ5ID0ge307XG4gICAgfVxuXG4gICAgTG9hZGVyLnByb3RvdHlwZS5sb2FkTW9kdWxlID0gZnVuY3Rpb24gbG9hZE1vZHVsZShpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2FkZXJzIG11c3QgaW1wbGVtZW50IGxvYWRNb2R1bGUoaWQpLicpO1xuICAgIH07XG5cbiAgICBMb2FkZXIucHJvdG90eXBlLmxvYWRBbGxNb2R1bGVzID0gZnVuY3Rpb24gbG9hZEFsbE1vZHVsZXMoaWRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlciBtdXN0IGltcGxlbWVudCBsb2FkQWxsTW9kdWxlcyhpZHMpLicpO1xuICAgIH07XG5cbiAgICBMb2FkZXIucHJvdG90eXBlLmxvYWRUZW1wbGF0ZSA9IGZ1bmN0aW9uIGxvYWRUZW1wbGF0ZSh1cmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTG9hZGVyIG11c3QgaW1wbGVtZW50IGxvYWRUZW1wbGF0ZSh1cmwpLicpO1xuICAgIH07XG5cbiAgICBMb2FkZXIucHJvdG90eXBlLmxvYWRUZXh0ID0gZnVuY3Rpb24gbG9hZFRleHQodXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlciBtdXN0IGltcGxlbWVudCBsb2FkVGV4dCh1cmwpLicpO1xuICAgIH07XG5cbiAgICBMb2FkZXIucHJvdG90eXBlLmFwcGx5UGx1Z2luVG9VcmwgPSBmdW5jdGlvbiBhcHBseVBsdWdpblRvVXJsKHVybCwgcGx1Z2luTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2FkZXIgbXVzdCBpbXBsZW1lbnQgYXBwbHlQbHVnaW5Ub1VybCh1cmwsIHBsdWdpbk5hbWUpLicpO1xuICAgIH07XG5cbiAgICBMb2FkZXIucHJvdG90eXBlLmFkZFBsdWdpbiA9IGZ1bmN0aW9uIGFkZFBsdWdpbihwbHVnaW5OYW1lLCBpbXBsZW1lbnRhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2FkZXIgbXVzdCBpbXBsZW1lbnQgYWRkUGx1Z2luKHBsdWdpbk5hbWUsIGltcGxlbWVudGF0aW9uKS4nKTtcbiAgICB9O1xuXG4gICAgTG9hZGVyLnByb3RvdHlwZS5nZXRPckNyZWF0ZVRlbXBsYXRlUmVnaXN0cnlFbnRyeSA9IGZ1bmN0aW9uIGdldE9yQ3JlYXRlVGVtcGxhdGVSZWdpc3RyeUVudHJ5KGlkKSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLnRlbXBsYXRlUmVnaXN0cnlbaWRdO1xuXG4gICAgICBpZiAoZW50cnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVnaXN0cnlbaWRdID0gZW50cnkgPSBuZXcgVGVtcGxhdGVSZWdpc3RyeUVudHJ5KGlkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH07XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuTG9hZGVyID0gTG9hZGVyO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJywgJ2NvcmUtanMnLCAnYXVyZWxpYS10YXNrLXF1ZXVlJywgJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nLCAnYXVyZWxpYS1tZXRhZGF0YSddLCBmdW5jdGlvbiAoZXhwb3J0cywgX2NvcmVKcywgX2F1cmVsaWFUYXNrUXVldWUsIF9hdXJlbGlhRGVwZW5kZW5jeUluamVjdGlvbiwgX2F1cmVsaWFNZXRhZGF0YSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG4gIGV4cG9ydHMuY2FsY1NwbGljZXMgPSBjYWxjU3BsaWNlcztcbiAgZXhwb3J0cy5wcm9qZWN0QXJyYXlTcGxpY2VzID0gcHJvamVjdEFycmF5U3BsaWNlcztcbiAgZXhwb3J0cy5nZXRDaGFuZ2VSZWNvcmRzID0gZ2V0Q2hhbmdlUmVjb3JkcztcbiAgZXhwb3J0cy5nZXRBcnJheU9ic2VydmVyID0gX2dldEFycmF5T2JzZXJ2ZXI7XG4gIGV4cG9ydHMuZ2V0TWFwT2JzZXJ2ZXIgPSBfZ2V0TWFwT2JzZXJ2ZXI7XG4gIGV4cG9ydHMuaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMgPSBoYXNEZWNsYXJlZERlcGVuZGVuY2llcztcbiAgZXhwb3J0cy5kZWNsYXJlUHJvcGVydHlEZXBlbmRlbmNpZXMgPSBkZWNsYXJlUHJvcGVydHlEZXBlbmRlbmNpZXM7XG4gIGV4cG9ydHMuaXNTdGFuZGFyZFN2Z0F0dHJpYnV0ZSA9IGlzU3RhbmRhcmRTdmdBdHRyaWJ1dGU7XG4gIGV4cG9ydHMudmFsdWVDb252ZXJ0ZXIgPSB2YWx1ZUNvbnZlcnRlcjtcbiAgZXhwb3J0cy5jb21wdXRlZEZyb20gPSBjb21wdXRlZEZyb207XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgQWNjZXNzS2V5ZWRPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWNjZXNzS2V5ZWRPYnNlcnZlcihvYmplY3RJbmZvLCBrZXlJbmZvLCBvYnNlcnZlckxvY2F0b3IsIGV2YWx1YXRlKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjZXNzS2V5ZWRPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMub2JqZWN0SW5mbyA9IG9iamVjdEluZm87XG4gICAgICB0aGlzLmtleUluZm8gPSBrZXlJbmZvO1xuICAgICAgdGhpcy5ldmFsdWF0ZSA9IGV2YWx1YXRlO1xuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG5cbiAgICAgIGlmIChrZXlJbmZvLm9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZUtleSA9IGtleUluZm8ub2JzZXJ2ZXIuc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5vYmplY3RPcktleUNoYW5nZWQodW5kZWZpbmVkLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob2JqZWN0SW5mby5vYnNlcnZlcikge1xuICAgICAgICB0aGlzLmRpc3Bvc2VPYmplY3QgPSBvYmplY3RJbmZvLm9ic2VydmVyLnN1YnNjcmliZShmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMub2JqZWN0T3JLZXlDaGFuZ2VkKG5ld1ZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlUHJvcGVydHlTdWJzY3JpcHRpb24ob2JqZWN0SW5mby52YWx1ZSwga2V5SW5mby52YWx1ZSk7XG4gICAgfVxuXG4gICAgQWNjZXNzS2V5ZWRPYnNlcnZlci5wcm90b3R5cGUudXBkYXRlUHJvcGVydHlTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiB1cGRhdGVQcm9wZXJ0eVN1YnNjcmlwdGlvbihvYmplY3QsIGtleSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmRpc3Bvc2VQcm9wZXJ0eSkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VQcm9wZXJ0eSgpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VQcm9wZXJ0eSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZVByb3BlcnR5ID0gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0T2JzZXJ2ZXIob2JqZWN0LCBrZXkpLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5ub3RpZnkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEFjY2Vzc0tleWVkT2JzZXJ2ZXIucHJvdG90eXBlLm9iamVjdE9yS2V5Q2hhbmdlZCA9IGZ1bmN0aW9uIG9iamVjdE9yS2V5Q2hhbmdlZChvYmplY3QsIGtleSkge1xuICAgICAgdmFyIG9vID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGtvID0gdW5kZWZpbmVkO1xuICAgICAgb2JqZWN0ID0gb2JqZWN0IHx8ICgob28gPSB0aGlzLm9iamVjdEluZm8ub2JzZXJ2ZXIpICYmIG9vLmdldFZhbHVlID8gb28uZ2V0VmFsdWUoKSA6IHRoaXMub2JqZWN0SW5mby52YWx1ZSk7XG4gICAgICBrZXkgPSBrZXkgfHwgKChrbyA9IHRoaXMua2V5SW5mby5vYnNlcnZlcikgJiYga28uZ2V0VmFsdWUgPyBrby5nZXRWYWx1ZSgpIDogdGhpcy5rZXlJbmZvLnZhbHVlKTtcbiAgICAgIHRoaXMudXBkYXRlUHJvcGVydHlTdWJzY3JpcHRpb24ob2JqZWN0LCBrZXkpO1xuICAgICAgdGhpcy5ub3RpZnkoKTtcbiAgICB9O1xuXG4gICAgQWNjZXNzS2V5ZWRPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB0aGF0LmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGF0LmNhbGxiYWNrID0gbnVsbDtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIEFjY2Vzc0tleWVkT2JzZXJ2ZXIucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMuY2FsbGJhY2s7XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayh0aGlzLmV2YWx1YXRlKCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBBY2Nlc3NLZXllZE9ic2VydmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIHRoaXMub2JqZWN0SW5mbyA9IG51bGw7XG4gICAgICB0aGlzLmtleUluZm8gPSBudWxsO1xuICAgICAgdGhpcy5ldmFsdWF0ZSA9IG51bGw7XG4gICAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IG51bGw7XG4gICAgICBpZiAodGhpcy5kaXNwb3NlT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZU9iamVjdCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGlzcG9zZUtleSkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VLZXkoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRpc3Bvc2VQcm9wZXJ0eSkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VQcm9wZXJ0eSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQWNjZXNzS2V5ZWRPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkFjY2Vzc0tleWVkT2JzZXJ2ZXIgPSBBY2Nlc3NLZXllZE9ic2VydmVyO1xuXG4gIGZ1bmN0aW9uIGlzSW5kZXgocykge1xuICAgIHJldHVybiArcyA9PT0gcyA+Pj4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvTnVtYmVyKHMpIHtcbiAgICByZXR1cm4gK3M7XG4gIH1cblxuICBmdW5jdGlvbiBuZXdTcGxpY2UoaW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICAgIGFkZGVkQ291bnQ6IGFkZGVkQ291bnRcbiAgICB9O1xuICB9XG5cbiAgdmFyIEVESVRfTEVBVkUgPSAwO1xuICB2YXIgRURJVF9VUERBVEUgPSAxO1xuICB2YXIgRURJVF9BREQgPSAyO1xuICB2YXIgRURJVF9ERUxFVEUgPSAzO1xuXG4gIGZ1bmN0aW9uIEFycmF5U3BsaWNlKCkge31cblxuICBBcnJheVNwbGljZS5wcm90b3R5cGUgPSB7XG4gICAgY2FsY0VkaXREaXN0YW5jZXM6IGZ1bmN0aW9uIGNhbGNFZGl0RGlzdGFuY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gICAgICB2YXIgcm93Q291bnQgPSBvbGRFbmQgLSBvbGRTdGFydCArIDE7XG4gICAgICB2YXIgY29sdW1uQ291bnQgPSBjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0ICsgMTtcbiAgICAgIHZhciBkaXN0YW5jZXMgPSBuZXcgQXJyYXkocm93Q291bnQpO1xuICAgICAgdmFyIGksIGosIG5vcnRoLCB3ZXN0O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcm93Q291bnQ7ICsraSkge1xuICAgICAgICBkaXN0YW5jZXNbaV0gPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpO1xuICAgICAgICBkaXN0YW5jZXNbaV1bMF0gPSBpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgY29sdW1uQ291bnQ7ICsraikge1xuICAgICAgICBkaXN0YW5jZXNbMF1bal0gPSBqO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgcm93Q291bnQ7ICsraSkge1xuICAgICAgICBmb3IgKGogPSAxOyBqIDwgY29sdW1uQ291bnQ7ICsraikge1xuICAgICAgICAgIGlmICh0aGlzLmVxdWFscyhjdXJyZW50W2N1cnJlbnRTdGFydCArIGogLSAxXSwgb2xkW29sZFN0YXJ0ICsgaSAtIDFdKSkgZGlzdGFuY2VzW2ldW2pdID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07ZWxzZSB7XG4gICAgICAgICAgICBub3J0aCA9IGRpc3RhbmNlc1tpIC0gMV1bal0gKyAxO1xuICAgICAgICAgICAgd2VzdCA9IGRpc3RhbmNlc1tpXVtqIC0gMV0gKyAxO1xuICAgICAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gbm9ydGggPCB3ZXN0ID8gbm9ydGggOiB3ZXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlzdGFuY2VzO1xuICAgIH0sXG5cbiAgICBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXM6IGZ1bmN0aW9uIHNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyhkaXN0YW5jZXMpIHtcbiAgICAgIHZhciBpID0gZGlzdGFuY2VzLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaiA9IGRpc3RhbmNlc1swXS5sZW5ndGggLSAxO1xuICAgICAgdmFyIGN1cnJlbnQgPSBkaXN0YW5jZXNbaV1bal07XG4gICAgICB2YXIgZWRpdHMgPSBbXTtcbiAgICAgIHdoaWxlIChpID4gMCB8fCBqID4gMCkge1xuICAgICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICAgICAgai0tO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqID09IDApIHtcbiAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfREVMRVRFKTtcbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vcnRoV2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1baiAtIDFdO1xuICAgICAgICB2YXIgd2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1bal07XG4gICAgICAgIHZhciBub3J0aCA9IGRpc3RhbmNlc1tpXVtqIC0gMV07XG5cbiAgICAgICAgdmFyIG1pbjtcbiAgICAgICAgaWYgKHdlc3QgPCBub3J0aCkgbWluID0gd2VzdCA8IG5vcnRoV2VzdCA/IHdlc3QgOiBub3J0aFdlc3Q7ZWxzZSBtaW4gPSBub3J0aCA8IG5vcnRoV2VzdCA/IG5vcnRoIDogbm9ydGhXZXN0O1xuXG4gICAgICAgIGlmIChtaW4gPT0gbm9ydGhXZXN0KSB7XG4gICAgICAgICAgaWYgKG5vcnRoV2VzdCA9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfTEVBVkUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfVVBEQVRFKTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBub3J0aFdlc3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIGktLTtcbiAgICAgICAgICBqLS07XG4gICAgICAgIH0gZWxzZSBpZiAobWluID09IHdlc3QpIHtcbiAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfREVMRVRFKTtcbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY3VycmVudCA9IHdlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICAgICAgai0tO1xuICAgICAgICAgIGN1cnJlbnQgPSBub3J0aDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlZGl0cy5yZXZlcnNlKCk7XG4gICAgICByZXR1cm4gZWRpdHM7XG4gICAgfSxcblxuICAgIGNhbGNTcGxpY2VzOiBmdW5jdGlvbiBjYWxjU3BsaWNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkge1xuICAgICAgdmFyIHByZWZpeENvdW50ID0gMDtcbiAgICAgIHZhciBzdWZmaXhDb3VudCA9IDA7XG5cbiAgICAgIHZhciBtaW5MZW5ndGggPSBNYXRoLm1pbihjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0LCBvbGRFbmQgLSBvbGRTdGFydCk7XG4gICAgICBpZiAoY3VycmVudFN0YXJ0ID09IDAgJiYgb2xkU3RhcnQgPT0gMCkgcHJlZml4Q291bnQgPSB0aGlzLnNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCk7XG5cbiAgICAgIGlmIChjdXJyZW50RW5kID09IGN1cnJlbnQubGVuZ3RoICYmIG9sZEVuZCA9PSBvbGQubGVuZ3RoKSBzdWZmaXhDb3VudCA9IHRoaXMuc2hhcmVkU3VmZml4KGN1cnJlbnQsIG9sZCwgbWluTGVuZ3RoIC0gcHJlZml4Q291bnQpO1xuXG4gICAgICBjdXJyZW50U3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gICAgICBvbGRTdGFydCArPSBwcmVmaXhDb3VudDtcbiAgICAgIGN1cnJlbnRFbmQgLT0gc3VmZml4Q291bnQ7XG4gICAgICBvbGRFbmQgLT0gc3VmZml4Q291bnQ7XG5cbiAgICAgIGlmIChjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0ID09IDAgJiYgb2xkRW5kIC0gb2xkU3RhcnQgPT0gMCkgcmV0dXJuIFtdO1xuXG4gICAgICBpZiAoY3VycmVudFN0YXJ0ID09IGN1cnJlbnRFbmQpIHtcbiAgICAgICAgdmFyIHNwbGljZSA9IG5ld1NwbGljZShjdXJyZW50U3RhcnQsIFtdLCAwKTtcbiAgICAgICAgd2hpbGUgKG9sZFN0YXJ0IDwgb2xkRW5kKSBzcGxpY2UucmVtb3ZlZC5wdXNoKG9sZFtvbGRTdGFydCsrXSk7XG5cbiAgICAgICAgcmV0dXJuIFtzcGxpY2VdO1xuICAgICAgfSBlbHNlIGlmIChvbGRTdGFydCA9PSBvbGRFbmQpIHJldHVybiBbbmV3U3BsaWNlKGN1cnJlbnRTdGFydCwgW10sIGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQpXTtcblxuICAgICAgdmFyIG9wcyA9IHRoaXMuc3BsaWNlT3BlcmF0aW9uc0Zyb21FZGl0RGlzdGFuY2VzKHRoaXMuY2FsY0VkaXREaXN0YW5jZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpKTtcblxuICAgICAgdmFyIHNwbGljZSA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBzcGxpY2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSBjdXJyZW50U3RhcnQ7XG4gICAgICB2YXIgb2xkSW5kZXggPSBvbGRTdGFydDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHN3aXRjaCAob3BzW2ldKSB7XG4gICAgICAgICAgY2FzZSBFRElUX0xFQVZFOlxuICAgICAgICAgICAgaWYgKHNwbGljZSkge1xuICAgICAgICAgICAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgICAgICAgICAgICAgc3BsaWNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgRURJVF9VUERBVEU6XG4gICAgICAgICAgICBpZiAoIXNwbGljZSkgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG5cbiAgICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgICAgICBzcGxpY2UucmVtb3ZlZC5wdXNoKG9sZFtvbGRJbmRleF0pO1xuICAgICAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgRURJVF9BREQ6XG4gICAgICAgICAgICBpZiAoIXNwbGljZSkgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG5cbiAgICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBFRElUX0RFTEVURTpcbiAgICAgICAgICAgIGlmICghc3BsaWNlKSBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcblxuICAgICAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3BsaWNlKSB7XG4gICAgICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNwbGljZXM7XG4gICAgfSxcblxuICAgIHNoYXJlZFByZWZpeDogZnVuY3Rpb24gc2hhcmVkUHJlZml4KGN1cnJlbnQsIG9sZCwgc2VhcmNoTGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlYXJjaExlbmd0aDsgKytpKSBpZiAoIXRoaXMuZXF1YWxzKGN1cnJlbnRbaV0sIG9sZFtpXSkpIHJldHVybiBpO1xuICAgICAgcmV0dXJuIHNlYXJjaExlbmd0aDtcbiAgICB9LFxuXG4gICAgc2hhcmVkU3VmZml4OiBmdW5jdGlvbiBzaGFyZWRTdWZmaXgoY3VycmVudCwgb2xkLCBzZWFyY2hMZW5ndGgpIHtcbiAgICAgIHZhciBpbmRleDEgPSBjdXJyZW50Lmxlbmd0aDtcbiAgICAgIHZhciBpbmRleDIgPSBvbGQubGVuZ3RoO1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIHdoaWxlIChjb3VudCA8IHNlYXJjaExlbmd0aCAmJiB0aGlzLmVxdWFscyhjdXJyZW50Wy0taW5kZXgxXSwgb2xkWy0taW5kZXgyXSkpIGNvdW50Kys7XG5cbiAgICAgIHJldHVybiBjb3VudDtcbiAgICB9LFxuXG4gICAgY2FsY3VsYXRlU3BsaWNlczogZnVuY3Rpb24gY2FsY3VsYXRlU3BsaWNlcyhjdXJyZW50LCBwcmV2aW91cykge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsY1NwbGljZXMoY3VycmVudCwgMCwgY3VycmVudC5sZW5ndGgsIHByZXZpb3VzLCAwLCBwcmV2aW91cy5sZW5ndGgpO1xuICAgIH0sXG5cbiAgICBlcXVhbHM6IGZ1bmN0aW9uIGVxdWFscyhjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VmFsdWUgPT09IHByZXZpb3VzVmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhcnJheVNwbGljZSA9IG5ldyBBcnJheVNwbGljZSgpO1xuXG4gIGZ1bmN0aW9uIGNhbGNTcGxpY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gICAgcmV0dXJuIGFycmF5U3BsaWNlLmNhbGNTcGxpY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdChzdGFydDEsIGVuZDEsIHN0YXJ0MiwgZW5kMikge1xuICAgIGlmIChlbmQxIDwgc3RhcnQyIHx8IGVuZDIgPCBzdGFydDEpIHJldHVybiAtMTtcblxuICAgIGlmIChlbmQxID09IHN0YXJ0MiB8fCBlbmQyID09IHN0YXJ0MSkgcmV0dXJuIDA7XG5cbiAgICBpZiAoc3RhcnQxIDwgc3RhcnQyKSB7XG4gICAgICBpZiAoZW5kMSA8IGVuZDIpIHJldHVybiBlbmQxIC0gc3RhcnQyO2Vsc2UgcmV0dXJuIGVuZDIgLSBzdGFydDI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVuZDIgPCBlbmQxKSByZXR1cm4gZW5kMiAtIHN0YXJ0MTtlbHNlIHJldHVybiBlbmQxIC0gc3RhcnQxO1xuICAgICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VTcGxpY2Uoc3BsaWNlcywgaW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQpIHtcbiAgICB2YXIgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KTtcblxuICAgIHZhciBpbnNlcnRlZCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRpb25PZmZzZXQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHNwbGljZXNbaV07XG4gICAgICBjdXJyZW50LmluZGV4ICs9IGluc2VydGlvbk9mZnNldDtcblxuICAgICAgaWYgKGluc2VydGVkKSBjb250aW51ZTtcblxuICAgICAgdmFyIGludGVyc2VjdENvdW50ID0gaW50ZXJzZWN0KHNwbGljZS5pbmRleCwgc3BsaWNlLmluZGV4ICsgc3BsaWNlLnJlbW92ZWQubGVuZ3RoLCBjdXJyZW50LmluZGV4LCBjdXJyZW50LmluZGV4ICsgY3VycmVudC5hZGRlZENvdW50KTtcblxuICAgICAgaWYgKGludGVyc2VjdENvdW50ID49IDApIHtcblxuICAgICAgICBzcGxpY2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuXG4gICAgICAgIGluc2VydGlvbk9mZnNldCAtPSBjdXJyZW50LmFkZGVkQ291bnQgLSBjdXJyZW50LnJlbW92ZWQubGVuZ3RoO1xuXG4gICAgICAgIHNwbGljZS5hZGRlZENvdW50ICs9IGN1cnJlbnQuYWRkZWRDb3VudCAtIGludGVyc2VjdENvdW50O1xuICAgICAgICB2YXIgZGVsZXRlQ291bnQgPSBzcGxpY2UucmVtb3ZlZC5sZW5ndGggKyBjdXJyZW50LnJlbW92ZWQubGVuZ3RoIC0gaW50ZXJzZWN0Q291bnQ7XG5cbiAgICAgICAgaWYgKCFzcGxpY2UuYWRkZWRDb3VudCAmJiAhZGVsZXRlQ291bnQpIHtcbiAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlbW92ZWQgPSBjdXJyZW50LnJlbW92ZWQ7XG5cbiAgICAgICAgICBpZiAoc3BsaWNlLmluZGV4IDwgY3VycmVudC5pbmRleCkge1xuICAgICAgICAgICAgdmFyIHByZXBlbmQgPSBzcGxpY2UucmVtb3ZlZC5zbGljZSgwLCBjdXJyZW50LmluZGV4IC0gc3BsaWNlLmluZGV4KTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHByZXBlbmQsIHJlbW92ZWQpO1xuICAgICAgICAgICAgcmVtb3ZlZCA9IHByZXBlbmQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNwbGljZS5pbmRleCArIHNwbGljZS5yZW1vdmVkLmxlbmd0aCA+IGN1cnJlbnQuaW5kZXggKyBjdXJyZW50LmFkZGVkQ291bnQpIHtcbiAgICAgICAgICAgIHZhciBhcHBlbmQgPSBzcGxpY2UucmVtb3ZlZC5zbGljZShjdXJyZW50LmluZGV4ICsgY3VycmVudC5hZGRlZENvdW50IC0gc3BsaWNlLmluZGV4KTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJlbW92ZWQsIGFwcGVuZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3BsaWNlLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgICAgICAgIGlmIChjdXJyZW50LmluZGV4IDwgc3BsaWNlLmluZGV4KSB7XG4gICAgICAgICAgICBzcGxpY2UuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzcGxpY2UuaW5kZXggPCBjdXJyZW50LmluZGV4KSB7XG5cbiAgICAgICAgaW5zZXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAgIHNwbGljZXMuc3BsaWNlKGksIDAsIHNwbGljZSk7XG4gICAgICAgIGkrKztcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gc3BsaWNlLmFkZGVkQ291bnQgLSBzcGxpY2UucmVtb3ZlZC5sZW5ndGg7XG4gICAgICAgIGN1cnJlbnQuaW5kZXggKz0gb2Zmc2V0O1xuICAgICAgICBpbnNlcnRpb25PZmZzZXQgKz0gb2Zmc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaW5zZXJ0ZWQpIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFNwbGljZXMoYXJyYXksIGNoYW5nZVJlY29yZHMpIHtcbiAgICB2YXIgc3BsaWNlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2VSZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmVjb3JkID0gY2hhbmdlUmVjb3Jkc1tpXTtcbiAgICAgIHN3aXRjaCAocmVjb3JkLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgICBtZXJnZVNwbGljZShzcGxpY2VzLCByZWNvcmQuaW5kZXgsIHJlY29yZC5yZW1vdmVkLnNsaWNlKCksIHJlY29yZC5hZGRlZENvdW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICBpZiAoIWlzSW5kZXgocmVjb3JkLm5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgICB2YXIgaW5kZXggPSB0b051bWJlcihyZWNvcmQubmFtZSk7XG4gICAgICAgICAgaWYgKGluZGV4IDwgMCkgY29udGludWU7XG4gICAgICAgICAgbWVyZ2VTcGxpY2Uoc3BsaWNlcywgaW5kZXgsIFtyZWNvcmQub2xkVmFsdWVdLCByZWNvcmQudHlwZSA9PT0gJ2RlbGV0ZScgPyAwIDogMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCByZWNvcmQgdHlwZTogJyArIEpTT04uc3RyaW5naWZ5KHJlY29yZCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcGxpY2VzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvamVjdEFycmF5U3BsaWNlcyhhcnJheSwgY2hhbmdlUmVjb3Jkcykge1xuICAgIHZhciBzcGxpY2VzID0gW107XG5cbiAgICBjcmVhdGVJbml0aWFsU3BsaWNlcyhhcnJheSwgY2hhbmdlUmVjb3JkcykuZm9yRWFjaChmdW5jdGlvbiAoc3BsaWNlKSB7XG4gICAgICBpZiAoc3BsaWNlLmFkZGVkQ291bnQgPT0gMSAmJiBzcGxpY2UucmVtb3ZlZC5sZW5ndGggPT0gMSkge1xuICAgICAgICBpZiAoc3BsaWNlLnJlbW92ZWRbMF0gIT09IGFycmF5W3NwbGljZS5pbmRleF0pIHNwbGljZXMucHVzaChzcGxpY2UpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH07XG5cbiAgICAgIHNwbGljZXMgPSBzcGxpY2VzLmNvbmNhdChjYWxjU3BsaWNlcyhhcnJheSwgc3BsaWNlLmluZGV4LCBzcGxpY2UuaW5kZXggKyBzcGxpY2UuYWRkZWRDb3VudCwgc3BsaWNlLnJlbW92ZWQsIDAsIHNwbGljZS5yZW1vdmVkLmxlbmd0aCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNwbGljZXM7XG4gIH1cblxuICB2YXIgaGFzT2JqZWN0T2JzZXJ2ZSA9IChmdW5jdGlvbiBkZXRlY3RPYmplY3RPYnNlcnZlKCkge1xuICAgIGlmICh0eXBlb2YgT2JqZWN0Lm9ic2VydmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2socmVjcykge1xuICAgICAgcmVjb3JkcyA9IHJlY3M7XG4gICAgfVxuXG4gICAgdmFyIHRlc3QgPSB7fTtcbiAgICBPYmplY3Qub2JzZXJ2ZSh0ZXN0LCBjYWxsYmFjayk7XG4gICAgdGVzdC5pZCA9IDE7XG4gICAgdGVzdC5pZCA9IDI7XG4gICAgZGVsZXRlIHRlc3QuaWQ7XG5cbiAgICBPYmplY3QuZGVsaXZlckNoYW5nZVJlY29yZHMoY2FsbGJhY2spO1xuICAgIGlmIChyZWNvcmRzLmxlbmd0aCAhPT0gMykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHJlY29yZHNbMF0udHlwZSAhPSAnYWRkJyB8fCByZWNvcmRzWzFdLnR5cGUgIT0gJ3VwZGF0ZScgfHwgcmVjb3Jkc1syXS50eXBlICE9ICdkZWxldGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgT2JqZWN0LnVub2JzZXJ2ZSh0ZXN0LCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkoKTtcblxuICBleHBvcnRzLmhhc09iamVjdE9ic2VydmUgPSBoYXNPYmplY3RPYnNlcnZlO1xuICB2YXIgaGFzQXJyYXlPYnNlcnZlID0gKGZ1bmN0aW9uIGRldGVjdEFycmF5T2JzZXJ2ZSgpIHtcbiAgICBpZiAodHlwZW9mIEFycmF5Lm9ic2VydmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2socmVjcykge1xuICAgICAgcmVjb3JkcyA9IHJlY3M7XG4gICAgfVxuXG4gICAgdmFyIGFyciA9IFtdO1xuICAgIEFycmF5Lm9ic2VydmUoYXJyLCBjYWxsYmFjayk7XG4gICAgYXJyLnB1c2goMSwgMik7XG4gICAgYXJyLmxlbmd0aCA9IDA7XG5cbiAgICBPYmplY3QuZGVsaXZlckNoYW5nZVJlY29yZHMoY2FsbGJhY2spO1xuICAgIGlmIChyZWNvcmRzLmxlbmd0aCAhPT0gMikgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHJlY29yZHNbMF0udHlwZSAhPSAnc3BsaWNlJyB8fCByZWNvcmRzWzFdLnR5cGUgIT0gJ3NwbGljZScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBBcnJheS51bm9ic2VydmUoYXJyLCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkoKTtcblxuICBleHBvcnRzLmhhc0FycmF5T2JzZXJ2ZSA9IGhhc0FycmF5T2JzZXJ2ZTtcbiAgZnVuY3Rpb24gbmV3UmVjb3JkKHR5cGUsIG9iamVjdCwga2V5LCBvbGRWYWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgb2JqZWN0OiBvYmplY3QsXG4gICAgICBrZXk6IGtleSxcbiAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDaGFuZ2VSZWNvcmRzKG1hcCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gbWFwLmtleXMoKSwgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleSA9IF9yZWY7XG5cbiAgICAgIGVudHJpZXMucHVzaChuZXdSZWNvcmQoJ2FkZGVkJywgbWFwLCBrZXkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH1cblxuICB2YXIgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIodGFza1F1ZXVlLCBjb2xsZWN0aW9uKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyKTtcblxuICAgICAgdGhpcy50YXNrUXVldWUgPSB0YXNrUXVldWU7XG4gICAgICB0aGlzLnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbiAgICAgIHRoaXMuY2hhbmdlUmVjb3JkcyA9IFtdO1xuICAgICAgdGhpcy5vbGRDb2xsZWN0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICB0aGlzLmxlbmd0aFByb3BlcnR5TmFtZSA9IGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBNYXAgPyAnc2l6ZScgOiAnbGVuZ3RoJztcbiAgICB9XG5cbiAgICBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzO1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNwbGljZShjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayksIDEpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5hZGRDaGFuZ2VSZWNvcmQgPSBmdW5jdGlvbiBhZGRDaGFuZ2VSZWNvcmQoY2hhbmdlUmVjb3JkKSB7XG4gICAgICBpZiAodGhpcy5jYWxsYmFja3MubGVuZ3RoID09PSAwICYmICF0aGlzLmxlbmd0aE9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2VSZWNvcmRzLnB1c2goY2hhbmdlUmVjb3JkKTtcblxuICAgICAgaWYgKCF0aGlzLnF1ZXVlZCkge1xuICAgICAgICB0aGlzLnF1ZXVlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQob2xkQ29sbGVjdGlvbikge1xuICAgICAgaWYgKCF0aGlzLmNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9sZENvbGxlY3Rpb24gPSBvbGRDb2xsZWN0aW9uO1xuXG4gICAgICBpZiAoIXRoaXMucXVldWVkKSB7XG4gICAgICAgIHRoaXMucXVldWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50YXNrUXVldWUucXVldWVNaWNyb1Rhc2sodGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuZ2V0TGVuZ3RoT2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRMZW5ndGhPYnNlcnZlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aE9ic2VydmVyIHx8ICh0aGlzLmxlbmd0aE9ic2VydmVyID0gbmV3IENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlcih0aGlzLmNvbGxlY3Rpb24pKTtcbiAgICB9O1xuXG4gICAgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBjaGFuZ2VSZWNvcmRzID0gdGhpcy5jaGFuZ2VSZWNvcmRzLFxuICAgICAgICAgIG9sZENvbGxlY3Rpb24gPSB0aGlzLm9sZENvbGxlY3Rpb24sXG4gICAgICAgICAgcmVjb3JkcztcblxuICAgICAgdGhpcy5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hhbmdlUmVjb3JkcyA9IFtdO1xuICAgICAgdGhpcy5vbGRDb2xsZWN0aW9uID0gbnVsbDtcblxuICAgICAgaWYgKGkpIHtcbiAgICAgICAgaWYgKG9sZENvbGxlY3Rpb24pIHtcbiAgICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9uIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICByZWNvcmRzID0gZ2V0Q2hhbmdlUmVjb3JkcyhvbGRDb2xsZWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjb3JkcyA9IGNhbGNTcGxpY2VzKHRoaXMuY29sbGVjdGlvbiwgMCwgdGhpcy5jb2xsZWN0aW9uLmxlbmd0aCwgb2xkQ29sbGVjdGlvbiwgMCwgb2xkQ29sbGVjdGlvbi5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9uIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICByZWNvcmRzID0gY2hhbmdlUmVjb3JkcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjb3JkcyA9IHByb2plY3RBcnJheVNwbGljZXModGhpcy5jb2xsZWN0aW9uLCBjaGFuZ2VSZWNvcmRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgY2FsbGJhY2tzW2ldKHJlY29yZHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmxlbmd0aE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoT2JzZXJ2ZXIuY2FsbCh0aGlzLmNvbGxlY3Rpb25bdGhpcy5sZW5ndGhQcm9wZXJ0eU5hbWVdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIE1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLk1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlciA9IE1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlcjtcblxuICB2YXIgQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIoY29sbGVjdGlvbikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgdGhpcy5sZW5ndGhQcm9wZXJ0eU5hbWUgPSBjb2xsZWN0aW9uIGluc3RhbmNlb2YgTWFwID8gJ3NpemUnIDogJ2xlbmd0aCc7XG4gICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IGNvbGxlY3Rpb25bdGhpcy5sZW5ndGhQcm9wZXJ0eU5hbWVdO1xuICAgIH1cblxuICAgIENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb25bdGhpcy5sZW5ndGhQcm9wZXJ0eU5hbWVdO1xuICAgIH07XG5cbiAgICBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHRoaXMuY29sbGVjdGlvblt0aGlzLmxlbmd0aFByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcztcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spLCAxKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIGNhbGwobmV3VmFsdWUpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMuY3VycmVudFZhbHVlO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyID0gQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyO1xuXG4gIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIF9nZXRBcnJheU9ic2VydmVyKHRhc2tRdWV1ZSwgYXJyYXkpIHtcbiAgICBpZiAoaGFzQXJyYXlPYnNlcnZlKSB7XG4gICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2ZU9ic2VydmVyKGFycmF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE1vZGlmeUFycmF5T2JzZXJ2ZXIuY3JlYXRlKHRhc2tRdWV1ZSwgYXJyYXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBNb2RpZnlBcnJheU9ic2VydmVyID0gKGZ1bmN0aW9uIChfTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyKSB7XG4gICAgX2luaGVyaXRzKE1vZGlmeUFycmF5T2JzZXJ2ZXIsIF9Nb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIpO1xuXG4gICAgZnVuY3Rpb24gTW9kaWZ5QXJyYXlPYnNlcnZlcih0YXNrUXVldWUsIGFycmF5KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kaWZ5QXJyYXlPYnNlcnZlcik7XG5cbiAgICAgIF9Nb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIuY2FsbCh0aGlzLCB0YXNrUXVldWUsIGFycmF5KTtcbiAgICB9XG5cbiAgICBNb2RpZnlBcnJheU9ic2VydmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSh0YXNrUXVldWUsIGFycmF5KSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTW9kaWZ5QXJyYXlPYnNlcnZlcih0YXNrUXVldWUsIGFycmF5KTtcblxuICAgICAgYXJyYXlbJ3BvcCddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IGFycmF5UHJvdG9bJ3BvcCddLmFwcGx5KGFycmF5LCBhcmd1bWVudHMpO1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgIG9iamVjdDogYXJyYXksXG4gICAgICAgICAgbmFtZTogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG9sZFZhbHVlOiBtZXRob2RDYWxsUmVzdWx0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIGFycmF5WydwdXNoJ10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gYXJyYXlQcm90b1sncHVzaCddLmFwcGx5KGFycmF5LCBhcmd1bWVudHMpO1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdzcGxpY2UnLFxuICAgICAgICAgIG9iamVjdDogYXJyYXksXG4gICAgICAgICAgaW5kZXg6IGFycmF5Lmxlbmd0aCAtIGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgcmVtb3ZlZDogW10sXG4gICAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBhcnJheVsncmV2ZXJzZSddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2xkQXJyYXkgPSBhcnJheS5zbGljZSgpO1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IGFycmF5UHJvdG9bJ3JldmVyc2UnXS5hcHBseShhcnJheSwgYXJndW1lbnRzKTtcbiAgICAgICAgb2JzZXJ2ZXIucmVzZXQob2xkQXJyYXkpO1xuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIGFycmF5WydzaGlmdCddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IGFycmF5UHJvdG9bJ3NoaWZ0J10uYXBwbHkoYXJyYXksIGFyZ3VtZW50cyk7XG4gICAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgICAgb2JqZWN0OiBhcnJheSxcbiAgICAgICAgICBuYW1lOiAwLFxuICAgICAgICAgIG9sZFZhbHVlOiBtZXRob2RDYWxsUmVzdWx0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIGFycmF5Wydzb3J0J10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvbGRBcnJheSA9IGFycmF5LnNsaWNlKCk7XG4gICAgICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gYXJyYXlQcm90b1snc29ydCddLmFwcGx5KGFycmF5LCBhcmd1bWVudHMpO1xuICAgICAgICBvYnNlcnZlci5yZXNldChvbGRBcnJheSk7XG4gICAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgYXJyYXlbJ3NwbGljZSddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IGFycmF5UHJvdG9bJ3NwbGljZSddLmFwcGx5KGFycmF5LCBhcmd1bWVudHMpO1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdzcGxpY2UnLFxuICAgICAgICAgIG9iamVjdDogYXJyYXksXG4gICAgICAgICAgaW5kZXg6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICByZW1vdmVkOiBtZXRob2RDYWxsUmVzdWx0LFxuICAgICAgICAgIGFkZGVkQ291bnQ6IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzLmxlbmd0aCAtIDIgOiAwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIGFycmF5Wyd1bnNoaWZ0J10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gYXJyYXlQcm90b1sndW5zaGlmdCddLmFwcGx5KGFycmF5LCBhcmd1bWVudHMpO1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdzcGxpY2UnLFxuICAgICAgICAgIG9iamVjdDogYXJyYXksXG4gICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgcmVtb3ZlZDogW10sXG4gICAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gICAgfTtcblxuICAgIHJldHVybiBNb2RpZnlBcnJheU9ic2VydmVyO1xuICB9KShNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIpO1xuXG4gIHZhciBBcnJheU9ic2VydmVPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXJyYXlPYnNlcnZlT2JzZXJ2ZXIoYXJyYXkpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBcnJheU9ic2VydmVPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgQXJyYXlPYnNlcnZlT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcztcblxuICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VzLmJpbmQodGhpcyk7XG4gICAgICAgIEFycmF5Lm9ic2VydmUodGhpcy5hcnJheSwgdGhpcy5oYW5kbGVyKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKSwgMSk7XG4gICAgICAgIGlmIChjYWxsYmFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgQXJyYXkudW5vYnNlcnZlKF90aGlzMy5hcnJheSwgX3RoaXMzLmhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBBcnJheU9ic2VydmVPYnNlcnZlci5wcm90b3R5cGUuZ2V0TGVuZ3RoT2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRMZW5ndGhPYnNlcnZlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aE9ic2VydmVyIHx8ICh0aGlzLmxlbmd0aE9ic2VydmVyID0gbmV3IENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlcih0aGlzLmFycmF5KSk7XG4gICAgfTtcblxuICAgIEFycmF5T2JzZXJ2ZU9ic2VydmVyLnByb3RvdHlwZS5oYW5kbGVDaGFuZ2VzID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlcyhjaGFuZ2VSZWNvcmRzKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3MsXG4gICAgICAgICAgaSA9IGNhbGxiYWNrcy5sZW5ndGgsXG4gICAgICAgICAgc3BsaWNlcztcblxuICAgICAgaWYgKGkpIHtcbiAgICAgICAgc3BsaWNlcyA9IHByb2plY3RBcnJheVNwbGljZXModGhpcy5hcnJheSwgY2hhbmdlUmVjb3Jkcyk7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIGNhbGxiYWNrc1tpXShzcGxpY2VzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5sZW5ndGhPYnNlcnZlcikge1xuICAgICAgICB0aGlzLmxlbmd0aE9ic2VydmVyLmNhbGwodGhpcy5hcnJheS5sZW5ndGgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQXJyYXlPYnNlcnZlT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgdmFyIFBhdGhPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGF0aE9ic2VydmVyKGxlZnRPYnNlcnZlciwgZ2V0UmlnaHRPYnNlcnZlciwgdmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF0aE9ic2VydmVyKTtcblxuICAgICAgdGhpcy5sZWZ0T2JzZXJ2ZXIgPSBsZWZ0T2JzZXJ2ZXI7XG5cbiAgICAgIHRoaXMuZGlzcG9zZUxlZnQgPSBsZWZ0T2JzZXJ2ZXIuc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgbmV3UmlnaHRWYWx1ZSA9IF90aGlzNC51cGRhdGVSaWdodChnZXRSaWdodE9ic2VydmVyKG5ld1ZhbHVlKSk7XG4gICAgICAgIF90aGlzNC5ub3RpZnkobmV3UmlnaHRWYWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy51cGRhdGVSaWdodChnZXRSaWdodE9ic2VydmVyKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgUGF0aE9ic2VydmVyLnByb3RvdHlwZS51cGRhdGVSaWdodCA9IGZ1bmN0aW9uIHVwZGF0ZVJpZ2h0KG9ic2VydmVyKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdGhpcy5yaWdodE9ic2VydmVyID0gb2JzZXJ2ZXI7XG5cbiAgICAgIGlmICh0aGlzLmRpc3Bvc2VSaWdodCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VSaWdodCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRpc3Bvc2VSaWdodCA9IG9ic2VydmVyLnN1YnNjcmliZShmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNS5ub3RpZnkobmV3VmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXIuZ2V0VmFsdWUoKTtcbiAgICB9O1xuXG4gICAgUGF0aE9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHRoYXQuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQuY2FsbGJhY2sgPSBudWxsO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgUGF0aE9ic2VydmVyLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkobmV3VmFsdWUpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMuY2FsbGJhY2s7XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayhuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhdGhPYnNlcnZlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBpZiAodGhpcy5kaXNwb3NlTGVmdCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VMZWZ0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRpc3Bvc2VSaWdodCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VSaWdodCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gUGF0aE9ic2VydmVyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuUGF0aE9ic2VydmVyID0gUGF0aE9ic2VydmVyO1xuXG4gIHZhciBDb21wb3NpdGVPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tcG9zaXRlT2JzZXJ2ZXIob2JzZXJ2ZXJzLCBldmFsdWF0ZSkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb3NpdGVPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBBcnJheShvYnNlcnZlcnMubGVuZ3RoKTtcbiAgICAgIHRoaXMuZXZhbHVhdGUgPSBldmFsdWF0ZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gb2JzZXJ2ZXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldID0gb2JzZXJ2ZXJzW2ldLnN1YnNjcmliZShmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICBfdGhpczYubm90aWZ5KF90aGlzNi5ldmFsdWF0ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQ29tcG9zaXRlT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdGhhdC5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5jYWxsYmFjayA9IG51bGw7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBDb21wb3NpdGVPYnNlcnZlci5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrO1xuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb21wb3NpdGVPYnNlcnZlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucztcblxuICAgICAgdmFyIGkgPSBzdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uc1tpXSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQ29tcG9zaXRlT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Db21wb3NpdGVPYnNlcnZlciA9IENvbXBvc2l0ZU9ic2VydmVyO1xuXG4gIHZhciBFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFeHByZXNzaW9uKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4cHJlc3Npb24pO1xuXG4gICAgICB0aGlzLmlzQ2hhaW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgRXhwcmVzc2lvbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzLCBhcmdzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBldmFsdWF0ZSAnICsgdGhpcyk7XG4gICAgfTtcblxuICAgIEV4cHJlc3Npb24ucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihzY29wZSwgdmFsdWUsIHZhbHVlQ29udmVydGVycykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYXNzaWduIHRvICcgKyB0aGlzKTtcbiAgICB9O1xuXG4gICAgRXhwcmVzc2lvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBVbnBhcnNlci51bnBhcnNlKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gRXhwcmVzc2lvbjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkV4cHJlc3Npb24gPSBFeHByZXNzaW9uO1xuXG4gIHZhciBDaGFpbiA9IChmdW5jdGlvbiAoX0V4cHJlc3Npb24pIHtcbiAgICBfaW5oZXJpdHMoQ2hhaW4sIF9FeHByZXNzaW9uKTtcblxuICAgIGZ1bmN0aW9uIENoYWluKGV4cHJlc3Npb25zKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhaW4pO1xuXG4gICAgICBfRXhwcmVzc2lvbi5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XG4gICAgICB0aGlzLmlzQ2hhaW4gPSB0cnVlO1xuICAgIH1cblxuICAgIENoYWluLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSB0aGlzLmV4cHJlc3Npb25zLFxuICAgICAgICAgIGxlbmd0aCA9IGV4cHJlc3Npb25zLmxlbmd0aCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGxhc3Q7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBsYXN0ID0gZXhwcmVzc2lvbnNbaV0uZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycyk7XG5cbiAgICAgICAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQgPSBsYXN0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIENoYWluLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgICAgdmlzaXRvci52aXNpdENoYWluKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ2hhaW47XG4gIH0pKEV4cHJlc3Npb24pO1xuXG4gIGV4cG9ydHMuQ2hhaW4gPSBDaGFpbjtcblxuICB2YXIgVmFsdWVDb252ZXJ0ZXIgPSAoZnVuY3Rpb24gKF9FeHByZXNzaW9uMikge1xuICAgIF9pbmhlcml0cyhWYWx1ZUNvbnZlcnRlciwgX0V4cHJlc3Npb24yKTtcblxuICAgIGZ1bmN0aW9uIFZhbHVlQ29udmVydGVyKGV4cHJlc3Npb24sIG5hbWUsIGFyZ3MsIGFsbEFyZ3MpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWx1ZUNvbnZlcnRlcik7XG5cbiAgICAgIF9FeHByZXNzaW9uMi5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICB0aGlzLmFsbEFyZ3MgPSBhbGxBcmdzO1xuICAgIH1cblxuICAgIFZhbHVlQ29udmVydGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpIHtcbiAgICAgIHZhciBjb252ZXJ0ZXIgPSB2YWx1ZUNvbnZlcnRlcnModGhpcy5uYW1lKTtcbiAgICAgIGlmICghY29udmVydGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gVmFsdWVDb252ZXJ0ZXIgbmFtZWQgXCInICsgdGhpcy5uYW1lICsgJ1wiIHdhcyBmb3VuZCEnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCd0b1ZpZXcnIGluIGNvbnZlcnRlcikge1xuICAgICAgICByZXR1cm4gY29udmVydGVyLnRvVmlldy5hcHBseShjb252ZXJ0ZXIsIGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFsbEFyZ3MsIHZhbHVlQ29udmVydGVycykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5hbGxBcmdzWzBdLmV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpO1xuICAgIH07XG5cbiAgICBWYWx1ZUNvbnZlcnRlci5wcm90b3R5cGUuYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHNjb3BlLCB2YWx1ZSwgdmFsdWVDb252ZXJ0ZXJzKSB7XG4gICAgICB2YXIgY29udmVydGVyID0gdmFsdWVDb252ZXJ0ZXJzKHRoaXMubmFtZSk7XG4gICAgICBpZiAoIWNvbnZlcnRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFZhbHVlQ29udmVydGVyIG5hbWVkIFwiJyArIHRoaXMubmFtZSArICdcIiB3YXMgZm91bmQhJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICgnZnJvbVZpZXcnIGluIGNvbnZlcnRlcikge1xuICAgICAgICB2YWx1ZSA9IGNvbnZlcnRlci5mcm9tVmlldy5hcHBseShjb252ZXJ0ZXIsIFt2YWx1ZV0uY29uY2F0KGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIHZhbHVlQ29udmVydGVycykpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuYWxsQXJnc1swXS5hc3NpZ24oc2NvcGUsIHZhbHVlLCB2YWx1ZUNvbnZlcnRlcnMpO1xuICAgIH07XG5cbiAgICBWYWx1ZUNvbnZlcnRlci5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICAgIHZpc2l0b3IudmlzaXRWYWx1ZUNvbnZlcnRlcih0aGlzKTtcbiAgICB9O1xuXG4gICAgVmFsdWVDb252ZXJ0ZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIG9ic2VydmVyLFxuICAgICAgICAgIGNoaWxkT2JzZXJ2ZXJzID0gW10sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpaSxcbiAgICAgICAgICBleHAsXG4gICAgICAgICAgZXhwSW5mbztcblxuICAgICAgZm9yIChpID0gMCwgaWkgPSB0aGlzLmFsbEFyZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBleHAgPSB0aGlzLmFsbEFyZ3NbaV07XG4gICAgICAgIGV4cEluZm8gPSBleHAuY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG5cbiAgICAgICAgaWYgKGV4cEluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgICBjaGlsZE9ic2VydmVycy5wdXNoKGV4cEluZm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZE9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgQ29tcG9zaXRlT2JzZXJ2ZXIoY2hpbGRPYnNlcnZlcnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM3LmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbiksXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbHVlQ29udmVydGVyO1xuICB9KShFeHByZXNzaW9uKTtcblxuICBleHBvcnRzLlZhbHVlQ29udmVydGVyID0gVmFsdWVDb252ZXJ0ZXI7XG5cbiAgdmFyIEFzc2lnbiA9IChmdW5jdGlvbiAoX0V4cHJlc3Npb24zKSB7XG4gICAgX2luaGVyaXRzKEFzc2lnbiwgX0V4cHJlc3Npb24zKTtcblxuICAgIGZ1bmN0aW9uIEFzc2lnbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXNzaWduKTtcblxuICAgICAgX0V4cHJlc3Npb24zLmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIEFzc2lnbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzKSB7XG4gICAgICByZXR1cm4gdGhpcy50YXJnZXQuYXNzaWduKHNjb3BlLCB0aGlzLnZhbHVlLmV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpKTtcbiAgICB9O1xuXG4gICAgQXNzaWduLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzdG9yKSB7XG4gICAgICB2aXN0b3IudmlzaXRBc3NpZ24odGhpcyk7XG4gICAgfTtcblxuICAgIEFzc2lnbi5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICAgIHJldHVybiB7IHZhbHVlOiB0aGlzLmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pIH07XG4gICAgfTtcblxuICAgIHJldHVybiBBc3NpZ247XG4gIH0pKEV4cHJlc3Npb24pO1xuXG4gIGV4cG9ydHMuQXNzaWduID0gQXNzaWduO1xuXG4gIHZhciBDb25kaXRpb25hbCA9IChmdW5jdGlvbiAoX0V4cHJlc3Npb240KSB7XG4gICAgX2luaGVyaXRzKENvbmRpdGlvbmFsLCBfRXhwcmVzc2lvbjQpO1xuXG4gICAgZnVuY3Rpb24gQ29uZGl0aW9uYWwoY29uZGl0aW9uLCB5ZXMsIG5vKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uZGl0aW9uYWwpO1xuXG4gICAgICBfRXhwcmVzc2lvbjQuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICB0aGlzLnllcyA9IHllcztcbiAgICAgIHRoaXMubm8gPSBubztcbiAgICB9XG5cbiAgICBDb25kaXRpb25hbC5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmNvbmRpdGlvbi5ldmFsdWF0ZShzY29wZSkgPyB0aGlzLnllcy5ldmFsdWF0ZShzY29wZSkgOiB0aGlzLm5vLmV2YWx1YXRlKHNjb3BlKTtcbiAgICB9O1xuXG4gICAgQ29uZGl0aW9uYWwucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0Q29uZGl0aW9uYWwodGhpcyk7XG4gICAgfTtcblxuICAgIENvbmRpdGlvbmFsLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBjb25kaXRpb25JbmZvID0gdGhpcy5jb25kaXRpb24uY29ubmVjdChiaW5kaW5nLCBzY29wZSksXG4gICAgICAgICAgeWVzSW5mbyA9IHRoaXMueWVzLmNvbm5lY3QoYmluZGluZywgc2NvcGUpLFxuICAgICAgICAgIG5vSW5mbyA9IHRoaXMubm8uY29ubmVjdChiaW5kaW5nLCBzY29wZSksXG4gICAgICAgICAgY2hpbGRPYnNlcnZlcnMgPSBbXSxcbiAgICAgICAgICBvYnNlcnZlcjtcblxuICAgICAgaWYgKGNvbmRpdGlvbkluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgY2hpbGRPYnNlcnZlcnMucHVzaChjb25kaXRpb25JbmZvLm9ic2VydmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHllc0luZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgY2hpbGRPYnNlcnZlcnMucHVzaCh5ZXNJbmZvLm9ic2VydmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vSW5mby5vYnNlcnZlcikge1xuICAgICAgICBjaGlsZE9ic2VydmVycy5wdXNoKG5vSW5mby5vYnNlcnZlcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZE9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgQ29tcG9zaXRlT2JzZXJ2ZXIoY2hpbGRPYnNlcnZlcnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM4LmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6ICEhY29uZGl0aW9uSW5mby52YWx1ZSA/IHllc0luZm8udmFsdWUgOiBub0luZm8udmFsdWUsXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbmRpdGlvbmFsO1xuICB9KShFeHByZXNzaW9uKTtcblxuICBleHBvcnRzLkNvbmRpdGlvbmFsID0gQ29uZGl0aW9uYWw7XG5cbiAgdmFyIEFjY2Vzc1Njb3BlID0gKGZ1bmN0aW9uIChfRXhwcmVzc2lvbjUpIHtcbiAgICBfaW5oZXJpdHMoQWNjZXNzU2NvcGUsIF9FeHByZXNzaW9uNSk7XG5cbiAgICBmdW5jdGlvbiBBY2Nlc3NTY29wZShuYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjZXNzU2NvcGUpO1xuXG4gICAgICBfRXhwcmVzc2lvbjUuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBBY2Nlc3NTY29wZS5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzKSB7XG4gICAgICByZXR1cm4gc2NvcGVbdGhpcy5uYW1lXTtcbiAgICB9O1xuXG4gICAgQWNjZXNzU2NvcGUucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihzY29wZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBzY29wZVt0aGlzLm5hbWVdID0gdmFsdWU7XG4gICAgfTtcblxuICAgIEFjY2Vzc1Njb3BlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgICAgdmlzaXRvci52aXNpdEFjY2Vzc1Njb3BlKHRoaXMpO1xuICAgIH07XG5cbiAgICBBY2Nlc3NTY29wZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IGJpbmRpbmcuZ2V0T2JzZXJ2ZXIoc2NvcGUsIHRoaXMubmFtZSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBvYnNlcnZlci5nZXRWYWx1ZSgpLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBBY2Nlc3NTY29wZTtcbiAgfSkoRXhwcmVzc2lvbik7XG5cbiAgZXhwb3J0cy5BY2Nlc3NTY29wZSA9IEFjY2Vzc1Njb3BlO1xuXG4gIHZhciBBY2Nlc3NNZW1iZXIgPSAoZnVuY3Rpb24gKF9FeHByZXNzaW9uNikge1xuICAgIF9pbmhlcml0cyhBY2Nlc3NNZW1iZXIsIF9FeHByZXNzaW9uNik7XG5cbiAgICBmdW5jdGlvbiBBY2Nlc3NNZW1iZXIob2JqZWN0LCBuYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjZXNzTWVtYmVyKTtcblxuICAgICAgX0V4cHJlc3Npb242LmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBBY2Nlc3NNZW1iZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycykge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycyk7XG4gICAgICByZXR1cm4gaW5zdGFuY2UgPT09IG51bGwgfHwgaW5zdGFuY2UgPT09IHVuZGVmaW5lZCA/IGluc3RhbmNlIDogaW5zdGFuY2VbdGhpcy5uYW1lXTtcbiAgICB9O1xuXG4gICAgQWNjZXNzTWVtYmVyLnByb3RvdHlwZS5hc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24oc2NvcGUsIHZhbHVlKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSk7XG5cbiAgICAgIGlmIChpbnN0YW5jZSA9PT0gbnVsbCB8fCBpbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluc3RhbmNlID0ge307XG4gICAgICAgIHRoaXMub2JqZWN0LmFzc2lnbihzY29wZSwgaW5zdGFuY2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2VbdGhpcy5uYW1lXSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBBY2Nlc3NNZW1iZXIucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0QWNjZXNzTWVtYmVyKHRoaXMpO1xuICAgIH07XG5cbiAgICBBY2Nlc3NNZW1iZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgdmFyIGluZm8gPSB0aGlzLm9iamVjdC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKSxcbiAgICAgICAgICBvYmplY3RJbnN0YW5jZSA9IGluZm8udmFsdWUsXG4gICAgICAgICAgb2JqZWN0T2JzZXJ2ZXIgPSBpbmZvLm9ic2VydmVyLFxuICAgICAgICAgIG9ic2VydmVyO1xuXG4gICAgICBpZiAob2JqZWN0T2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgUGF0aE9ic2VydmVyKG9iamVjdE9ic2VydmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYmluZGluZy5nZXRPYnNlcnZlcih2YWx1ZSwgX3RoaXM5Lm5hbWUpO1xuICAgICAgICB9LCBvYmplY3RJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYnNlcnZlciA9IGJpbmRpbmcuZ2V0T2JzZXJ2ZXIob2JqZWN0SW5zdGFuY2UsIHRoaXMubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBvYmplY3RJbnN0YW5jZSA9PSBudWxsID8gbnVsbCA6IG9iamVjdEluc3RhbmNlW3RoaXMubmFtZV0sXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFjY2Vzc01lbWJlcjtcbiAgfSkoRXhwcmVzc2lvbik7XG5cbiAgZXhwb3J0cy5BY2Nlc3NNZW1iZXIgPSBBY2Nlc3NNZW1iZXI7XG5cbiAgdmFyIEFjY2Vzc0tleWVkID0gKGZ1bmN0aW9uIChfRXhwcmVzc2lvbjcpIHtcbiAgICBfaW5oZXJpdHMoQWNjZXNzS2V5ZWQsIF9FeHByZXNzaW9uNyk7XG5cbiAgICBmdW5jdGlvbiBBY2Nlc3NLZXllZChvYmplY3QsIGtleSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY2Vzc0tleWVkKTtcblxuICAgICAgX0V4cHJlc3Npb243LmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICB0aGlzLmlzQXNzaWduYWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgQWNjZXNzS2V5ZWQucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycykge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycyk7XG4gICAgICB2YXIgbG9va3VwID0gdGhpcy5rZXkuZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycyk7XG4gICAgICByZXR1cm4gZ2V0S2V5ZWQoaW5zdGFuY2UsIGxvb2t1cCk7XG4gICAgfTtcblxuICAgIEFjY2Vzc0tleWVkLnByb3RvdHlwZS5hc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24oc2NvcGUsIHZhbHVlKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSk7XG4gICAgICB2YXIgbG9va3VwID0gdGhpcy5rZXkuZXZhbHVhdGUoc2NvcGUpO1xuICAgICAgcmV0dXJuIHNldEtleWVkKGluc3RhbmNlLCBsb29rdXAsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgQWNjZXNzS2V5ZWQucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0QWNjZXNzS2V5ZWQodGhpcyk7XG4gICAgfTtcblxuICAgIEFjY2Vzc0tleWVkLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgb2JqZWN0SW5mbyA9IHRoaXMub2JqZWN0LmNvbm5lY3QoYmluZGluZywgc2NvcGUpLFxuICAgICAgICAgIGtleUluZm8gPSB0aGlzLmtleS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKSxcbiAgICAgICAgICBvYnNlcnZlciA9IG5ldyBBY2Nlc3NLZXllZE9ic2VydmVyKG9iamVjdEluZm8sIGtleUluZm8sIGJpbmRpbmcub2JzZXJ2ZXJMb2NhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczEwLmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB0aGlzLmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBBY2Nlc3NLZXllZDtcbiAgfSkoRXhwcmVzc2lvbik7XG5cbiAgZXhwb3J0cy5BY2Nlc3NLZXllZCA9IEFjY2Vzc0tleWVkO1xuXG4gIHZhciBDYWxsU2NvcGUgPSAoZnVuY3Rpb24gKF9FeHByZXNzaW9uOCkge1xuICAgIF9pbmhlcml0cyhDYWxsU2NvcGUsIF9FeHByZXNzaW9uOCk7XG5cbiAgICBmdW5jdGlvbiBDYWxsU2NvcGUobmFtZSwgYXJncykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGxTY29wZSk7XG5cbiAgICAgIF9FeHByZXNzaW9uOC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB9XG5cbiAgICBDYWxsU2NvcGUucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycywgYXJncykge1xuICAgICAgYXJncyA9IGFyZ3MgfHwgZXZhbExpc3Qoc2NvcGUsIHRoaXMuYXJncywgdmFsdWVDb252ZXJ0ZXJzKTtcbiAgICAgIHJldHVybiBlbnN1cmVGdW5jdGlvbkZyb21NYXAoc2NvcGUsIHRoaXMubmFtZSkuYXBwbHkoc2NvcGUsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBDYWxsU2NvcGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0Q2FsbFNjb3BlKHRoaXMpO1xuICAgIH07XG5cbiAgICBDYWxsU2NvcGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIHZhciBvYnNlcnZlcixcbiAgICAgICAgICBjaGlsZE9ic2VydmVycyA9IFtdLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWksXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGV4cEluZm87XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gdGhpcy5hcmdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgZXhwID0gdGhpcy5hcmdzW2ldO1xuICAgICAgICBleHBJbmZvID0gZXhwLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuXG4gICAgICAgIGlmIChleHBJbmZvLm9ic2VydmVyKSB7XG4gICAgICAgICAgY2hpbGRPYnNlcnZlcnMucHVzaChleHBJbmZvLm9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRPYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIG9ic2VydmVyID0gbmV3IENvbXBvc2l0ZU9ic2VydmVyKGNoaWxkT2JzZXJ2ZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTEuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdGhpcy5ldmFsdWF0ZShzY29wZSwgYmluZGluZy52YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uKSxcbiAgICAgICAgb2JzZXJ2ZXI6IG9ic2VydmVyXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gQ2FsbFNjb3BlO1xuICB9KShFeHByZXNzaW9uKTtcblxuICBleHBvcnRzLkNhbGxTY29wZSA9IENhbGxTY29wZTtcblxuICB2YXIgQ2FsbE1lbWJlciA9IChmdW5jdGlvbiAoX0V4cHJlc3Npb245KSB7XG4gICAgX2luaGVyaXRzKENhbGxNZW1iZXIsIF9FeHByZXNzaW9uOSk7XG5cbiAgICBmdW5jdGlvbiBDYWxsTWVtYmVyKG9iamVjdCwgbmFtZSwgYXJncykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGxNZW1iZXIpO1xuXG4gICAgICBfRXhwcmVzc2lvbjkuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB9XG5cbiAgICBDYWxsTWVtYmVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMsIGFyZ3MpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMub2JqZWN0LmV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpO1xuICAgICAgYXJncyA9IGFyZ3MgfHwgZXZhbExpc3Qoc2NvcGUsIHRoaXMuYXJncywgdmFsdWVDb252ZXJ0ZXJzKTtcbiAgICAgIHJldHVybiBlbnN1cmVGdW5jdGlvbkZyb21NYXAoaW5zdGFuY2UsIHRoaXMubmFtZSkuYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBDYWxsTWVtYmVyLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgICAgdmlzaXRvci52aXNpdENhbGxNZW1iZXIodGhpcyk7XG4gICAgfTtcblxuICAgIENhbGxNZW1iZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvYnNlcnZlcixcbiAgICAgICAgICBvYmplY3RJbmZvID0gdGhpcy5vYmplY3QuY29ubmVjdChiaW5kaW5nLCBzY29wZSksXG4gICAgICAgICAgY2hpbGRPYnNlcnZlcnMgPSBbXSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpLFxuICAgICAgICAgIGV4cCxcbiAgICAgICAgICBleHBJbmZvO1xuXG4gICAgICBpZiAob2JqZWN0SW5mby5vYnNlcnZlcikge1xuICAgICAgICBjaGlsZE9ic2VydmVycy5wdXNoKG9iamVjdEluZm8ub2JzZXJ2ZXIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IHRoaXMuYXJncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGV4cCA9IHRoaXMuYXJnc1tpXTtcbiAgICAgICAgZXhwSW5mbyA9IGV4cC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcblxuICAgICAgICBpZiAoZXhwSW5mby5vYnNlcnZlcikge1xuICAgICAgICAgIGNoaWxkT2JzZXJ2ZXJzLnB1c2goZXhwSW5mby5vYnNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkT2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICBvYnNlcnZlciA9IG5ldyBDb21wb3NpdGVPYnNlcnZlcihjaGlsZE9ic2VydmVycywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczEyLmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbiksXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENhbGxNZW1iZXI7XG4gIH0pKEV4cHJlc3Npb24pO1xuXG4gIGV4cG9ydHMuQ2FsbE1lbWJlciA9IENhbGxNZW1iZXI7XG5cbiAgdmFyIENhbGxGdW5jdGlvbiA9IChmdW5jdGlvbiAoX0V4cHJlc3Npb24xMCkge1xuICAgIF9pbmhlcml0cyhDYWxsRnVuY3Rpb24sIF9FeHByZXNzaW9uMTApO1xuXG4gICAgZnVuY3Rpb24gQ2FsbEZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYWxsRnVuY3Rpb24pO1xuXG4gICAgICBfRXhwcmVzc2lvbjEwLmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XG4gICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIH1cblxuICAgIENhbGxGdW5jdGlvbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzLCBhcmdzKSB7XG4gICAgICB2YXIgZnVuYyA9IHRoaXMuZnVuYy5ldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzKTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmZ1bmMgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzIHx8IGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIHZhbHVlQ29udmVydGVycykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDYWxsRnVuY3Rpb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0Q2FsbEZ1bmN0aW9uKHRoaXMpO1xuICAgIH07XG5cbiAgICBDYWxsRnVuY3Rpb24ucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvYnNlcnZlcixcbiAgICAgICAgICBmdW5jSW5mbyA9IHRoaXMuZnVuYy5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKSxcbiAgICAgICAgICBjaGlsZE9ic2VydmVycyA9IFtdLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWksXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGV4cEluZm87XG5cbiAgICAgIGlmIChmdW5jSW5mby5vYnNlcnZlcikge1xuICAgICAgICBjaGlsZE9ic2VydmVycy5wdXNoKGZ1bmNJbmZvLm9ic2VydmVyKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgaWkgPSB0aGlzLmFyZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBleHAgPSB0aGlzLmFyZ3NbaV07XG4gICAgICAgIGV4cEluZm8gPSBleHAuY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG5cbiAgICAgICAgaWYgKGV4cEluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgICBjaGlsZE9ic2VydmVycy5wdXNoKGV4cEluZm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZE9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgQ29tcG9zaXRlT2JzZXJ2ZXIoY2hpbGRPYnNlcnZlcnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMy5ldmFsdWF0ZShzY29wZSwgYmluZGluZy52YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB0aGlzLmV2YWx1YXRlKHNjb3BlLCBiaW5kaW5nLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBDYWxsRnVuY3Rpb247XG4gIH0pKEV4cHJlc3Npb24pO1xuXG4gIGV4cG9ydHMuQ2FsbEZ1bmN0aW9uID0gQ2FsbEZ1bmN0aW9uO1xuXG4gIHZhciBCaW5hcnkgPSAoZnVuY3Rpb24gKF9FeHByZXNzaW9uMTEpIHtcbiAgICBfaW5oZXJpdHMoQmluYXJ5LCBfRXhwcmVzc2lvbjExKTtcblxuICAgIGZ1bmN0aW9uIEJpbmFyeShvcGVyYXRpb24sIGxlZnQsIHJpZ2h0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmluYXJ5KTtcblxuICAgICAgX0V4cHJlc3Npb24xMS5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuXG4gICAgQmluYXJ5LnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpIHtcbiAgICAgIHZhciBsZWZ0ID0gdGhpcy5sZWZ0LmV2YWx1YXRlKHNjb3BlKTtcblxuICAgICAgc3dpdGNoICh0aGlzLm9wZXJhdGlvbikge1xuICAgICAgICBjYXNlICcmJic6XG4gICAgICAgICAgcmV0dXJuIGxlZnQgJiYgdGhpcy5yaWdodC5ldmFsdWF0ZShzY29wZSk7XG4gICAgICAgIGNhc2UgJ3x8JzpcbiAgICAgICAgICByZXR1cm4gbGVmdCB8fCB0aGlzLnJpZ2h0LmV2YWx1YXRlKHNjb3BlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5yaWdodC5ldmFsdWF0ZShzY29wZSk7XG5cbiAgICAgIHN3aXRjaCAodGhpcy5vcGVyYXRpb24pIHtcbiAgICAgICAgY2FzZSAnPT0nOlxuICAgICAgICAgIHJldHVybiBsZWZ0ID09IHJpZ2h0O1xuICAgICAgICBjYXNlICc9PT0nOlxuICAgICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodDtcbiAgICAgICAgY2FzZSAnIT0nOlxuICAgICAgICAgIHJldHVybiBsZWZ0ICE9IHJpZ2h0O1xuICAgICAgICBjYXNlICchPT0nOlxuICAgICAgICAgIHJldHVybiBsZWZ0ICE9PSByaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnQgPT09IG51bGwgfHwgcmlnaHQgPT09IG51bGwpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wZXJhdGlvbikge1xuICAgICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgaWYgKGxlZnQgIT0gbnVsbCkgcmV0dXJuIGxlZnQ7XG4gICAgICAgICAgICBpZiAocmlnaHQgIT0gbnVsbCkgcmV0dXJuIHJpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICBpZiAobGVmdCAhPSBudWxsKSByZXR1cm4gbGVmdDtcbiAgICAgICAgICAgIGlmIChyaWdodCAhPSBudWxsKSByZXR1cm4gMCAtIHJpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLm9wZXJhdGlvbikge1xuICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICByZXR1cm4gYXV0b0NvbnZlcnRBZGQobGVmdCwgcmlnaHQpO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0O1xuICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICByZXR1cm4gbGVmdCAqIHJpZ2h0O1xuICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICByZXR1cm4gbGVmdCAvIHJpZ2h0O1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICByZXR1cm4gbGVmdCAlIHJpZ2h0O1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICByZXR1cm4gbGVmdCA8IHJpZ2h0O1xuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICByZXR1cm4gbGVmdCA+IHJpZ2h0O1xuICAgICAgICBjYXNlICc8PSc6XG4gICAgICAgICAgcmV0dXJuIGxlZnQgPD0gcmlnaHQ7XG4gICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICByZXR1cm4gbGVmdCA+PSByaWdodDtcbiAgICAgICAgY2FzZSAnXic6XG4gICAgICAgICAgcmV0dXJuIGxlZnQgXiByaWdodDtcbiAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgcmV0dXJuIGxlZnQgJiByaWdodDtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBlcnJvciBbJyArIHRoaXMub3BlcmF0aW9uICsgJ10gbm90IGhhbmRsZWQnKTtcbiAgICB9O1xuXG4gICAgQmluYXJ5LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgICAgdmlzaXRvci52aXNpdEJpbmFyeSh0aGlzKTtcbiAgICB9O1xuXG4gICAgQmluYXJ5LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgICAgdmFyIF90aGlzMTQgPSB0aGlzO1xuXG4gICAgICB2YXIgbGVmdEluZm8gPSB0aGlzLmxlZnQuY29ubmVjdChiaW5kaW5nLCBzY29wZSksXG4gICAgICAgICAgcmlnaHRJbmZvID0gdGhpcy5yaWdodC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKSxcbiAgICAgICAgICBjaGlsZE9ic2VydmVycyA9IFtdLFxuICAgICAgICAgIG9ic2VydmVyO1xuXG4gICAgICBpZiAobGVmdEluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgY2hpbGRPYnNlcnZlcnMucHVzaChsZWZ0SW5mby5vYnNlcnZlcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodEluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgY2hpbGRPYnNlcnZlcnMucHVzaChyaWdodEluZm8ub2JzZXJ2ZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRPYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIG9ic2VydmVyID0gbmV3IENvbXBvc2l0ZU9ic2VydmVyKGNoaWxkT2JzZXJ2ZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTQuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdGhpcy5ldmFsdWF0ZShzY29wZSwgYmluZGluZy52YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uKSxcbiAgICAgICAgb2JzZXJ2ZXI6IG9ic2VydmVyXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gQmluYXJ5O1xuICB9KShFeHByZXNzaW9uKTtcblxuICBleHBvcnRzLkJpbmFyeSA9IEJpbmFyeTtcblxuICB2YXIgUHJlZml4Tm90ID0gKGZ1bmN0aW9uIChfRXhwcmVzc2lvbjEyKSB7XG4gICAgX2luaGVyaXRzKFByZWZpeE5vdCwgX0V4cHJlc3Npb24xMik7XG5cbiAgICBmdW5jdGlvbiBQcmVmaXhOb3Qob3BlcmF0aW9uLCBleHByZXNzaW9uKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJlZml4Tm90KTtcblxuICAgICAgX0V4cHJlc3Npb24xMi5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgUHJlZml4Tm90LnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpIHtcbiAgICAgIHJldHVybiAhdGhpcy5leHByZXNzaW9uLmV2YWx1YXRlKHNjb3BlKTtcbiAgICB9O1xuXG4gICAgUHJlZml4Tm90LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgICAgdmlzaXRvci52aXNpdFByZWZpeCh0aGlzKTtcbiAgICB9O1xuXG4gICAgUHJlZml4Tm90LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXG4gICAgICB2YXIgaW5mbyA9IHRoaXMuZXhwcmVzc2lvbi5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKSxcbiAgICAgICAgICBvYnNlcnZlcjtcblxuICAgICAgaWYgKGluZm8ub2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgQ29tcG9zaXRlT2JzZXJ2ZXIoW2luZm8ub2JzZXJ2ZXJdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTUuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogIWluZm8udmFsdWUsXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByZWZpeE5vdDtcbiAgfSkoRXhwcmVzc2lvbik7XG5cbiAgZXhwb3J0cy5QcmVmaXhOb3QgPSBQcmVmaXhOb3Q7XG5cbiAgdmFyIExpdGVyYWxQcmltaXRpdmUgPSAoZnVuY3Rpb24gKF9FeHByZXNzaW9uMTMpIHtcbiAgICBfaW5oZXJpdHMoTGl0ZXJhbFByaW1pdGl2ZSwgX0V4cHJlc3Npb24xMyk7XG5cbiAgICBmdW5jdGlvbiBMaXRlcmFsUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGl0ZXJhbFByaW1pdGl2ZSk7XG5cbiAgICAgIF9FeHByZXNzaW9uMTMuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIExpdGVyYWxQcmltaXRpdmUucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycykge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfTtcblxuICAgIExpdGVyYWxQcmltaXRpdmUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0TGl0ZXJhbFByaW1pdGl2ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgTGl0ZXJhbFByaW1pdGl2ZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICAgIHJldHVybiB7IHZhbHVlOiB0aGlzLnZhbHVlIH07XG4gICAgfTtcblxuICAgIHJldHVybiBMaXRlcmFsUHJpbWl0aXZlO1xuICB9KShFeHByZXNzaW9uKTtcblxuICBleHBvcnRzLkxpdGVyYWxQcmltaXRpdmUgPSBMaXRlcmFsUHJpbWl0aXZlO1xuXG4gIHZhciBMaXRlcmFsU3RyaW5nID0gKGZ1bmN0aW9uIChfRXhwcmVzc2lvbjE0KSB7XG4gICAgX2luaGVyaXRzKExpdGVyYWxTdHJpbmcsIF9FeHByZXNzaW9uMTQpO1xuXG4gICAgZnVuY3Rpb24gTGl0ZXJhbFN0cmluZyh2YWx1ZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpdGVyYWxTdHJpbmcpO1xuXG4gICAgICBfRXhwcmVzc2lvbjE0LmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBMaXRlcmFsU3RyaW5nLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG5cbiAgICBMaXRlcmFsU3RyaW5nLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgICAgdmlzaXRvci52aXNpdExpdGVyYWxTdHJpbmcodGhpcyk7XG4gICAgfTtcblxuICAgIExpdGVyYWxTdHJpbmcucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICByZXR1cm4geyB2YWx1ZTogdGhpcy52YWx1ZSB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gTGl0ZXJhbFN0cmluZztcbiAgfSkoRXhwcmVzc2lvbik7XG5cbiAgZXhwb3J0cy5MaXRlcmFsU3RyaW5nID0gTGl0ZXJhbFN0cmluZztcblxuICB2YXIgTGl0ZXJhbEFycmF5ID0gKGZ1bmN0aW9uIChfRXhwcmVzc2lvbjE1KSB7XG4gICAgX2luaGVyaXRzKExpdGVyYWxBcnJheSwgX0V4cHJlc3Npb24xNSk7XG5cbiAgICBmdW5jdGlvbiBMaXRlcmFsQXJyYXkoZWxlbWVudHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXRlcmFsQXJyYXkpO1xuXG4gICAgICBfRXhwcmVzc2lvbjE1LmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICB9XG5cbiAgICBMaXRlcmFsQXJyYXkucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycykge1xuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgICBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IGVsZW1lbnRzW2ldLmV2YWx1YXRlKHNjb3BlLCB2YWx1ZUNvbnZlcnRlcnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMaXRlcmFsQXJyYXkucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICB2aXNpdG9yLnZpc2l0TGl0ZXJhbEFycmF5KHRoaXMpO1xuICAgIH07XG5cbiAgICBMaXRlcmFsQXJyYXkucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7XG5cbiAgICAgIHZhciBvYnNlcnZlcixcbiAgICAgICAgICBjaGlsZE9ic2VydmVycyA9IFtdLFxuICAgICAgICAgIHJlc3VsdHMgPSBbXSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlpLFxuICAgICAgICAgIGV4cCxcbiAgICAgICAgICBleHBJbmZvO1xuXG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IHRoaXMuZWxlbWVudHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBleHAgPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgICAgICBleHBJbmZvID0gZXhwLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuXG4gICAgICAgIGlmIChleHBJbmZvLm9ic2VydmVyKSB7XG4gICAgICAgICAgY2hpbGRPYnNlcnZlcnMucHVzaChleHBJbmZvLm9ic2VydmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdHNbaV0gPSBleHBJbmZvLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRPYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIG9ic2VydmVyID0gbmV3IENvbXBvc2l0ZU9ic2VydmVyKGNoaWxkT2JzZXJ2ZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTYuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcmVzdWx0cyxcbiAgICAgICAgb2JzZXJ2ZXI6IG9ic2VydmVyXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gTGl0ZXJhbEFycmF5O1xuICB9KShFeHByZXNzaW9uKTtcblxuICBleHBvcnRzLkxpdGVyYWxBcnJheSA9IExpdGVyYWxBcnJheTtcblxuICB2YXIgTGl0ZXJhbE9iamVjdCA9IChmdW5jdGlvbiAoX0V4cHJlc3Npb24xNikge1xuICAgIF9pbmhlcml0cyhMaXRlcmFsT2JqZWN0LCBfRXhwcmVzc2lvbjE2KTtcblxuICAgIGZ1bmN0aW9uIExpdGVyYWxPYmplY3Qoa2V5cywgdmFsdWVzKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGl0ZXJhbE9iamVjdCk7XG5cbiAgICAgIF9FeHByZXNzaW9uMTYuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5rZXlzID0ga2V5cztcbiAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgIH1cblxuICAgIExpdGVyYWxPYmplY3QucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycykge1xuICAgICAgdmFyIGluc3RhbmNlID0ge30sXG4gICAgICAgICAga2V5cyA9IHRoaXMua2V5cyxcbiAgICAgICAgICB2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgICBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaW5zdGFuY2Vba2V5c1tpXV0gPSB2YWx1ZXNbaV0uZXZhbHVhdGUoc2NvcGUsIHZhbHVlQ29udmVydGVycyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgTGl0ZXJhbE9iamVjdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICAgIHZpc2l0b3IudmlzaXRMaXRlcmFsT2JqZWN0KHRoaXMpO1xuICAgIH07XG5cbiAgICBMaXRlcmFsT2JqZWN0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgICAgdmFyIF90aGlzMTcgPSB0aGlzO1xuXG4gICAgICB2YXIgb2JzZXJ2ZXIsXG4gICAgICAgICAgY2hpbGRPYnNlcnZlcnMgPSBbXSxcbiAgICAgICAgICBpbnN0YW5jZSA9IHt9LFxuICAgICAgICAgIGtleXMgPSB0aGlzLmtleXMsXG4gICAgICAgICAgdmFsdWVzID0gdGhpcy52YWx1ZXMsXG4gICAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICB2YWx1ZUluZm87XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB2YWx1ZUluZm8gPSB2YWx1ZXNbaV0uY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG5cbiAgICAgICAgaWYgKHZhbHVlSW5mby5vYnNlcnZlcikge1xuICAgICAgICAgIGNoaWxkT2JzZXJ2ZXJzLnB1c2godmFsdWVJbmZvLm9ic2VydmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RhbmNlW2tleXNbaV1dID0gdmFsdWVJbmZvLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRPYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIG9ic2VydmVyID0gbmV3IENvbXBvc2l0ZU9ic2VydmVyKGNoaWxkT2JzZXJ2ZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTcuZXZhbHVhdGUoc2NvcGUsIGJpbmRpbmcudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogaW5zdGFuY2UsXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIExpdGVyYWxPYmplY3Q7XG4gIH0pKEV4cHJlc3Npb24pO1xuXG4gIGV4cG9ydHMuTGl0ZXJhbE9iamVjdCA9IExpdGVyYWxPYmplY3Q7XG5cbiAgdmFyIFVucGFyc2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbnBhcnNlcihidWZmZXIpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbnBhcnNlcik7XG5cbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgIH1cblxuICAgIFVucGFyc2VyLnVucGFyc2UgPSBmdW5jdGlvbiB1bnBhcnNlKGV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBidWZmZXIgPSBbXSxcbiAgICAgICAgICB2aXNpdG9yID0gbmV3IFVucGFyc2VyKGJ1ZmZlcik7XG5cbiAgICAgIGV4cHJlc3Npb24uYWNjZXB0KHZpc2l0b3IpO1xuXG4gICAgICByZXR1cm4gYnVmZmVyLmpvaW4oJycpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSh0ZXh0KSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKHRleHQpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUud3JpdGVBcmdzID0gZnVuY3Rpb24gd3JpdGVBcmdzKGFyZ3MpIHtcbiAgICAgIHZhciBpLCBsZW5ndGg7XG5cbiAgICAgIHRoaXMud3JpdGUoJygnKTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJncy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMud3JpdGUoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3NbaV0uYWNjZXB0KHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLndyaXRlKCcpJyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdENoYWluID0gZnVuY3Rpb24gdmlzaXRDaGFpbihjaGFpbikge1xuICAgICAgdmFyIGV4cHJlc3Npb25zID0gY2hhaW4uZXhwcmVzc2lvbnMsXG4gICAgICAgICAgbGVuZ3RoID0gZXhwcmVzc2lvbnMubGVuZ3RoLFxuICAgICAgICAgIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMud3JpdGUoJzsnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cHJlc3Npb25zW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0VmFsdWVDb252ZXJ0ZXIgPSBmdW5jdGlvbiB2aXNpdFZhbHVlQ29udmVydGVyKGNvbnZlcnRlcikge1xuICAgICAgdmFyIGFyZ3MgPSBjb252ZXJ0ZXIuYXJncyxcbiAgICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBpO1xuXG4gICAgICB0aGlzLndyaXRlKCcoJyk7XG4gICAgICBjb252ZXJ0ZXIuZXhwcmVzc2lvbi5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCd8JyArIGNvbnZlcnRlci5uYW1lKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRoaXMud3JpdGUoJyA6Jyk7XG4gICAgICAgIGFyZ3NbaV0uYWNjZXB0KHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLndyaXRlKCcpJyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdEFzc2lnbiA9IGZ1bmN0aW9uIHZpc2l0QXNzaWduKGFzc2lnbikge1xuICAgICAgYXNzaWduLnRhcmdldC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCc9Jyk7XG4gICAgICBhc3NpZ24udmFsdWUuYWNjZXB0KHRoaXMpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRDb25kaXRpb25hbCA9IGZ1bmN0aW9uIHZpc2l0Q29uZGl0aW9uYWwoY29uZGl0aW9uYWwpIHtcbiAgICAgIGNvbmRpdGlvbmFsLmNvbmRpdGlvbi5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCc/Jyk7XG4gICAgICBjb25kaXRpb25hbC55ZXMuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZSgnOicpO1xuICAgICAgY29uZGl0aW9uYWwubm8uYWNjZXB0KHRoaXMpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRBY2Nlc3NTY29wZSA9IGZ1bmN0aW9uIHZpc2l0QWNjZXNzU2NvcGUoYWNjZXNzKSB7XG4gICAgICB0aGlzLndyaXRlKGFjY2Vzcy5uYW1lKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0QWNjZXNzTWVtYmVyID0gZnVuY3Rpb24gdmlzaXRBY2Nlc3NNZW1iZXIoYWNjZXNzKSB7XG4gICAgICBhY2Nlc3Mub2JqZWN0LmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJy4nICsgYWNjZXNzLm5hbWUpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRBY2Nlc3NLZXllZCA9IGZ1bmN0aW9uIHZpc2l0QWNjZXNzS2V5ZWQoYWNjZXNzKSB7XG4gICAgICBhY2Nlc3Mub2JqZWN0LmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJ1snKTtcbiAgICAgIGFjY2Vzcy5rZXkuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZSgnXScpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRDYWxsU2NvcGUgPSBmdW5jdGlvbiB2aXNpdENhbGxTY29wZShjYWxsKSB7XG4gICAgICB0aGlzLndyaXRlKGNhbGwubmFtZSk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRDYWxsRnVuY3Rpb24gPSBmdW5jdGlvbiB2aXNpdENhbGxGdW5jdGlvbihjYWxsKSB7XG4gICAgICBjYWxsLmZ1bmMuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZUFyZ3MoY2FsbC5hcmdzKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0Q2FsbE1lbWJlciA9IGZ1bmN0aW9uIHZpc2l0Q2FsbE1lbWJlcihjYWxsKSB7XG4gICAgICBjYWxsLm9iamVjdC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCcuJyArIGNhbGwubmFtZSk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRQcmVmaXggPSBmdW5jdGlvbiB2aXNpdFByZWZpeChwcmVmaXgpIHtcbiAgICAgIHRoaXMud3JpdGUoJygnICsgcHJlZml4Lm9wZXJhdGlvbik7XG4gICAgICBwcmVmaXguZXhwcmVzc2lvbi5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCcpJyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdEJpbmFyeSA9IGZ1bmN0aW9uIHZpc2l0QmluYXJ5KGJpbmFyeSkge1xuICAgICAgdGhpcy53cml0ZSgnKCcpO1xuICAgICAgYmluYXJ5LmxlZnQuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZShiaW5hcnkub3BlcmF0aW9uKTtcbiAgICAgIGJpbmFyeS5yaWdodC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCcpJyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdExpdGVyYWxQcmltaXRpdmUgPSBmdW5jdGlvbiB2aXNpdExpdGVyYWxQcmltaXRpdmUobGl0ZXJhbCkge1xuICAgICAgdGhpcy53cml0ZSgnJyArIGxpdGVyYWwudmFsdWUpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRMaXRlcmFsQXJyYXkgPSBmdW5jdGlvbiB2aXNpdExpdGVyYWxBcnJheShsaXRlcmFsKSB7XG4gICAgICB2YXIgZWxlbWVudHMgPSBsaXRlcmFsLmVsZW1lbnRzLFxuICAgICAgICAgIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBpO1xuXG4gICAgICB0aGlzLndyaXRlKCdbJyk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMud3JpdGUoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy53cml0ZSgnXScpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRMaXRlcmFsT2JqZWN0ID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsT2JqZWN0KGxpdGVyYWwpIHtcbiAgICAgIHZhciBrZXlzID0gbGl0ZXJhbC5rZXlzLFxuICAgICAgICAgIHZhbHVlcyA9IGxpdGVyYWwudmFsdWVzLFxuICAgICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICAgIGk7XG5cbiAgICAgIHRoaXMud3JpdGUoJ3snKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgdGhpcy53cml0ZSgnLCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53cml0ZSgnXFwnJyArIGtleXNbaV0gKyAnXFwnOicpO1xuICAgICAgICB2YWx1ZXNbaV0uYWNjZXB0KHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLndyaXRlKCd9Jyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdExpdGVyYWxTdHJpbmcgPSBmdW5jdGlvbiB2aXNpdExpdGVyYWxTdHJpbmcobGl0ZXJhbCkge1xuICAgICAgdmFyIGVzY2FwZWQgPSBsaXRlcmFsLnZhbHVlLnJlcGxhY2UoLycvZywgXCJcXCdcIik7XG4gICAgICB0aGlzLndyaXRlKCdcXCcnICsgZXNjYXBlZCArICdcXCcnKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFVucGFyc2VyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVW5wYXJzZXIgPSBVbnBhcnNlcjtcblxuICB2YXIgZXZhbExpc3RDYWNoZSA9IFtbXSwgWzBdLCBbMCwgMF0sIFswLCAwLCAwXSwgWzAsIDAsIDAsIDBdLCBbMCwgMCwgMCwgMCwgMF1dO1xuXG4gIGZ1bmN0aW9uIGV2YWxMaXN0KHNjb3BlLCBsaXN0LCB2YWx1ZUNvbnZlcnRlcnMpIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGgsXG4gICAgICAgIGNhY2hlTGVuZ3RoLFxuICAgICAgICBpO1xuXG4gICAgZm9yIChjYWNoZUxlbmd0aCA9IGV2YWxMaXN0Q2FjaGUubGVuZ3RoOyBjYWNoZUxlbmd0aCA8PSBsZW5ndGg7ICsrY2FjaGVMZW5ndGgpIHtcbiAgICAgIGV2YWxMaXN0Q2FjaGUucHVzaChbXSk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IGV2YWxMaXN0Q2FjaGVbbGVuZ3RoXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0W2ldID0gbGlzdFtpXS5ldmFsdWF0ZShzY29wZSwgdmFsdWVDb252ZXJ0ZXJzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gYXV0b0NvbnZlcnRBZGQoYSwgYikge1xuICAgIGlmIChhICE9IG51bGwgJiYgYiAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGEgPT0gJ3N0cmluZycgJiYgdHlwZW9mIGIgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGEgKyBiLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYSAhPSAnc3RyaW5nJyAmJiB0eXBlb2YgYiA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYS50b1N0cmluZygpICsgYjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGEgKyBiO1xuICAgIH1cblxuICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5zdXJlRnVuY3Rpb25Gcm9tTWFwKG9iaiwgbmFtZSkge1xuICAgIHZhciBmdW5jID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9XG5cbiAgICBpZiAoZnVuYyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmRlZmluZWQgZnVuY3Rpb24gJyArIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobmFtZSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRLZXllZChvYmosIGtleSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmpbcGFyc2VJbnQoa2V5KV07XG4gICAgfSBlbHNlIGlmIChvYmopIHtcbiAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9IGVsc2UgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY2Nlc3NpbmcgbnVsbCBvYmplY3QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEtleWVkKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGtleSk7XG5cbiAgICAgIGlmIChvYmoubGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgIG9iai5sZW5ndGggPSBpbmRleCArIDE7XG4gICAgICB9XG5cbiAgICAgIG9ialtpbmRleF0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB2YXIgYmluZGluZ01vZGUgPSB7XG4gICAgb25lVGltZTogMCxcbiAgICBvbmVXYXk6IDEsXG4gICAgdHdvV2F5OiAyXG4gIH07XG5cbiAgZXhwb3J0cy5iaW5kaW5nTW9kZSA9IGJpbmRpbmdNb2RlO1xuXG4gIHZhciBUb2tlbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9rZW4oaW5kZXgsIHRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb2tlbik7XG5cbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgfVxuXG4gICAgVG9rZW4ucHJvdG90eXBlLndpdGhPcCA9IGZ1bmN0aW9uIHdpdGhPcChvcCkge1xuICAgICAgdGhpcy5vcEtleSA9IG9wO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRva2VuLnByb3RvdHlwZS53aXRoR2V0dGVyU2V0dGVyID0gZnVuY3Rpb24gd2l0aEdldHRlclNldHRlcihrZXkpIHtcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRva2VuLnByb3RvdHlwZS53aXRoVmFsdWUgPSBmdW5jdGlvbiB3aXRoVmFsdWUodmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBUb2tlbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnVG9rZW4oJyArIHRoaXMudGV4dCArICcpJztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRva2VuO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVG9rZW4gPSBUb2tlbjtcblxuICB2YXIgTGV4ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExleGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExleGVyKTtcbiAgICB9XG5cbiAgICBMZXhlci5wcm90b3R5cGUubGV4ID0gZnVuY3Rpb24gbGV4KHRleHQpIHtcbiAgICAgIHZhciBzY2FubmVyID0gbmV3IFNjYW5uZXIodGV4dCk7XG4gICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgICB2YXIgdG9rZW4gPSBzY2FubmVyLnNjYW5Ub2tlbigpO1xuXG4gICAgICB3aGlsZSAodG9rZW4pIHtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhblRva2VuKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfTtcblxuICAgIHJldHVybiBMZXhlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkxleGVyID0gTGV4ZXI7XG5cbiAgdmFyIFNjYW5uZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjYW5uZXIoaW5wdXQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY2FubmVyKTtcblxuICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgICB0aGlzLnBlZWsgPSAwO1xuICAgICAgdGhpcy5pbmRleCA9IC0xO1xuXG4gICAgICB0aGlzLmFkdmFuY2UoKTtcbiAgICB9XG5cbiAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuVG9rZW4gPSBmdW5jdGlvbiBzY2FuVG9rZW4oKSB7XG4gICAgICB3aGlsZSAodGhpcy5wZWVrIDw9ICRTUEFDRSkge1xuICAgICAgICBpZiAoKyt0aGlzLmluZGV4ID49IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wZWVrID0gJEVPRjtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBlZWsgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHRoaXMucGVlaykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbklkZW50aWZpZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlnaXQodGhpcy5wZWVrKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2FuTnVtYmVyKHRoaXMuaW5kZXgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuXG4gICAgICBzd2l0Y2ggKHRoaXMucGVlaykge1xuICAgICAgICBjYXNlICRQRVJJT0Q6XG4gICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICAgICAgcmV0dXJuIGlzRGlnaXQodGhpcy5wZWVrKSA/IHRoaXMuc2Nhbk51bWJlcihzdGFydCkgOiBuZXcgVG9rZW4oc3RhcnQsICcuJyk7XG4gICAgICAgIGNhc2UgJExQQVJFTjpcbiAgICAgICAgY2FzZSAkUlBBUkVOOlxuICAgICAgICBjYXNlICRMQlJBQ0U6XG4gICAgICAgIGNhc2UgJFJCUkFDRTpcbiAgICAgICAgY2FzZSAkTEJSQUNLRVQ6XG4gICAgICAgIGNhc2UgJFJCUkFDS0VUOlxuICAgICAgICBjYXNlICRDT01NQTpcbiAgICAgICAgY2FzZSAkQ09MT046XG4gICAgICAgIGNhc2UgJFNFTUlDT0xPTjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuQ2hhcmFjdGVyKHN0YXJ0LCBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucGVlaykpO1xuICAgICAgICBjYXNlICRTUTpcbiAgICAgICAgY2FzZSAkRFE6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2NhblN0cmluZygpO1xuICAgICAgICBjYXNlICRQTFVTOlxuICAgICAgICBjYXNlICRNSU5VUzpcbiAgICAgICAgY2FzZSAkU1RBUjpcbiAgICAgICAgY2FzZSAkU0xBU0g6XG4gICAgICAgIGNhc2UgJFBFUkNFTlQ6XG4gICAgICAgIGNhc2UgJENBUkVUOlxuICAgICAgICBjYXNlICRRVUVTVElPTjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuT3BlcmF0b3Ioc3RhcnQsIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5wZWVrKSk7XG4gICAgICAgIGNhc2UgJExUOlxuICAgICAgICBjYXNlICRHVDpcbiAgICAgICAgY2FzZSAkQkFORzpcbiAgICAgICAgY2FzZSAkRVE6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkNvbXBsZXhPcGVyYXRvcihzdGFydCwgJEVRLCBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucGVlayksICc9Jyk7XG4gICAgICAgIGNhc2UgJEFNUEVSU0FORDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuQ29tcGxleE9wZXJhdG9yKHN0YXJ0LCAkQU1QRVJTQU5ELCAnJicsICcmJyk7XG4gICAgICAgIGNhc2UgJEJBUjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuQ29tcGxleE9wZXJhdG9yKHN0YXJ0LCAkQkFSLCAnfCcsICd8Jyk7XG4gICAgICAgIGNhc2UgJE5CU1A6XG4gICAgICAgICAgd2hpbGUgKGlzV2hpdGVzcGFjZSh0aGlzLnBlZWspKSB7XG4gICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuVG9rZW4oKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5wZWVrKTtcbiAgICAgIHRoaXMuZXJyb3IoJ1VuZXhwZWN0ZWQgY2hhcmFjdGVyIFsnICsgY2hhcmFjdGVyICsgJ10nKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuQ2hhcmFjdGVyID0gZnVuY3Rpb24gc2NhbkNoYXJhY3RlcihzdGFydCwgdGV4dCkge1xuICAgICAgYXNzZXJ0KHRoaXMucGVlayA9PT0gdGV4dC5jaGFyQ29kZUF0KDApKTtcbiAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgcmV0dXJuIG5ldyBUb2tlbihzdGFydCwgdGV4dCk7XG4gICAgfTtcblxuICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5PcGVyYXRvciA9IGZ1bmN0aW9uIHNjYW5PcGVyYXRvcihzdGFydCwgdGV4dCkge1xuICAgICAgYXNzZXJ0KHRoaXMucGVlayA9PT0gdGV4dC5jaGFyQ29kZUF0KDApKTtcbiAgICAgIGFzc2VydChPUEVSQVRPUlMuaW5kZXhPZih0ZXh0KSAhPT0gLTEpO1xuICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICByZXR1cm4gbmV3IFRva2VuKHN0YXJ0LCB0ZXh0KS53aXRoT3AodGV4dCk7XG4gICAgfTtcblxuICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5Db21wbGV4T3BlcmF0b3IgPSBmdW5jdGlvbiBzY2FuQ29tcGxleE9wZXJhdG9yKHN0YXJ0LCBjb2RlLCBvbmUsIHR3bykge1xuICAgICAgYXNzZXJ0KHRoaXMucGVlayA9PT0gb25lLmNoYXJDb2RlQXQoMCkpO1xuICAgICAgdGhpcy5hZHZhbmNlKCk7XG5cbiAgICAgIHZhciB0ZXh0ID0gb25lO1xuXG4gICAgICBpZiAodGhpcy5wZWVrID09PSBjb2RlKSB7XG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgICB0ZXh0ICs9IHR3bztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGVlayA9PT0gY29kZSkge1xuICAgICAgICB0aGlzLmFkdmFuY2UoKTtcbiAgICAgICAgdGV4dCArPSB0d287XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChPUEVSQVRPUlMuaW5kZXhPZih0ZXh0KSAhPSAtMSk7XG5cbiAgICAgIHJldHVybiBuZXcgVG9rZW4oc3RhcnQsIHRleHQpLndpdGhPcCh0ZXh0KTtcbiAgICB9O1xuXG4gICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhbklkZW50aWZpZXIgPSBmdW5jdGlvbiBzY2FuSWRlbnRpZmllcigpIHtcbiAgICAgIGFzc2VydChpc0lkZW50aWZpZXJTdGFydCh0aGlzLnBlZWspKTtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG5cbiAgICAgIHRoaXMuYWR2YW5jZSgpO1xuXG4gICAgICB3aGlsZSAoaXNJZGVudGlmaWVyUGFydCh0aGlzLnBlZWspKSB7XG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGV4dCA9IHRoaXMuaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgVG9rZW4oc3RhcnQsIHRleHQpO1xuXG4gICAgICBpZiAoT1BFUkFUT1JTLmluZGV4T2YodGV4dCkgIT09IC0xKSB7XG4gICAgICAgIHJlc3VsdC53aXRoT3AodGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQud2l0aEdldHRlclNldHRlcih0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgU2Nhbm5lci5wcm90b3R5cGUuc2Nhbk51bWJlciA9IGZ1bmN0aW9uIHNjYW5OdW1iZXIoc3RhcnQpIHtcbiAgICAgIGFzc2VydChpc0RpZ2l0KHRoaXMucGVlaykpO1xuICAgICAgdmFyIHNpbXBsZSA9IHRoaXMuaW5kZXggPT09IHN0YXJ0O1xuICAgICAgdGhpcy5hZHZhbmNlKCk7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpc0RpZ2l0KHRoaXMucGVlaykpIHt9IGVsc2UgaWYgKHRoaXMucGVlayA9PT0gJFBFUklPRCkge1xuICAgICAgICAgICAgc2ltcGxlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V4cG9uZW50U3RhcnQodGhpcy5wZWVrKSkge1xuICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG5cbiAgICAgICAgICAgIGlmIChpc0V4cG9uZW50U2lnbih0aGlzLnBlZWspKSB7XG4gICAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzRGlnaXQodGhpcy5wZWVrKSkge1xuICAgICAgICAgICAgICB0aGlzLmVycm9yKCdJbnZhbGlkIGV4cG9uZW50JywgLTEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaW1wbGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGV4dCA9IHRoaXMuaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHZhciB2YWx1ZSA9IHNpbXBsZSA/IHBhcnNlSW50KHRleHQpIDogcGFyc2VGbG9hdCh0ZXh0KTtcbiAgICAgIHJldHVybiBuZXcgVG9rZW4oc3RhcnQsIHRleHQpLndpdGhWYWx1ZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5TdHJpbmcgPSBmdW5jdGlvbiBzY2FuU3RyaW5nKCkge1xuICAgICAgYXNzZXJ0KHRoaXMucGVlayA9PT0gJFNRIHx8IHRoaXMucGVlayA9PT0gJERRKTtcblxuICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgIHZhciBxdW90ZSA9IHRoaXMucGVlaztcblxuICAgICAgdGhpcy5hZHZhbmNlKCk7XG5cbiAgICAgIHZhciBidWZmZXI7XG4gICAgICB2YXIgbWFya2VyID0gdGhpcy5pbmRleDtcblxuICAgICAgd2hpbGUgKHRoaXMucGVlayAhPT0gcXVvdGUpIHtcbiAgICAgICAgaWYgKHRoaXMucGVlayA9PT0gJEJBQ0tTTEFTSCkge1xuICAgICAgICAgIGlmIChidWZmZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJ1ZmZlci5wdXNoKHRoaXMuaW5wdXQuc3Vic3RyaW5nKG1hcmtlciwgdGhpcy5pbmRleCkpO1xuICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuXG4gICAgICAgICAgdmFyIHVuZXNjYXBlZDtcblxuICAgICAgICAgIGlmICh0aGlzLnBlZWsgPT09ICR1KSB7XG4gICAgICAgICAgICB2YXIgaGV4ID0gdGhpcy5pbnB1dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcblxuICAgICAgICAgICAgaWYgKCEvW0EtWjAtOV17NH0vLnRlc3QoaGV4KSkge1xuICAgICAgICAgICAgICB0aGlzLmVycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdScgKyBoZXggKyAnXScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1bmVzY2FwZWQgPSBwYXJzZUludChoZXgsIDE2KTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyArK2kpIHtcbiAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuZXNjYXBlZCA9IGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLnBlZWspO1xuICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnVmZmVyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1bmVzY2FwZWQpKTtcbiAgICAgICAgICBtYXJrZXIgPSB0aGlzLmluZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGVlayA9PT0gJEVPRikge1xuICAgICAgICAgIHRoaXMuZXJyb3IoJ1VudGVybWluYXRlZCBxdW90ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0ID0gdGhpcy5pbnB1dC5zdWJzdHJpbmcobWFya2VyLCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgdmFyIHRleHQgPSB0aGlzLmlucHV0LnN1YnN0cmluZyhzdGFydCwgdGhpcy5pbmRleCk7XG5cbiAgICAgIHZhciB1bmVzY2FwZWQgPSBsYXN0O1xuXG4gICAgICBpZiAoYnVmZmVyICE9IG51bGwpIHtcbiAgICAgICAgYnVmZmVyLnB1c2gobGFzdCk7XG4gICAgICAgIHVuZXNjYXBlZCA9IGJ1ZmZlci5qb2luKCcnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBUb2tlbihzdGFydCwgdGV4dCkud2l0aFZhbHVlKHVuZXNjYXBlZCk7XG4gICAgfTtcblxuICAgIFNjYW5uZXIucHJvdG90eXBlLmFkdmFuY2UgPSBmdW5jdGlvbiBhZHZhbmNlKCkge1xuICAgICAgaWYgKCsrdGhpcy5pbmRleCA+PSB0aGlzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnBlZWsgPSAkRU9GO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZWVrID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTY2FubmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyAwIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmluZGV4ICsgb2Zmc2V0O1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMZXhlciBFcnJvcjogJyArIG1lc3NhZ2UgKyAnIGF0IGNvbHVtbiAnICsgcG9zaXRpb24gKyAnIGluIGV4cHJlc3Npb24gWycgKyB0aGlzLmlucHV0ICsgJ10nKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNjYW5uZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5TY2FubmVyID0gU2Nhbm5lcjtcblxuICB2YXIgT1BFUkFUT1JTID0gWyd1bmRlZmluZWQnLCAnbnVsbCcsICd0cnVlJywgJ2ZhbHNlJywgJysnLCAnLScsICcqJywgJy8nLCAnJScsICdeJywgJz0nLCAnPT0nLCAnPT09JywgJyE9JywgJyE9PScsICc8JywgJz4nLCAnPD0nLCAnPj0nLCAnJiYnLCAnfHwnLCAnJicsICd8JywgJyEnLCAnPyddO1xuXG4gIHZhciAkRU9GID0gMDtcbiAgdmFyICRUQUIgPSA5O1xuICB2YXIgJExGID0gMTA7XG4gIHZhciAkVlRBQiA9IDExO1xuICB2YXIgJEZGID0gMTI7XG4gIHZhciAkQ1IgPSAxMztcbiAgdmFyICRTUEFDRSA9IDMyO1xuICB2YXIgJEJBTkcgPSAzMztcbiAgdmFyICREUSA9IDM0O1xuICB2YXIgJCQgPSAzNjtcbiAgdmFyICRQRVJDRU5UID0gMzc7XG4gIHZhciAkQU1QRVJTQU5EID0gMzg7XG4gIHZhciAkU1EgPSAzOTtcbiAgdmFyICRMUEFSRU4gPSA0MDtcbiAgdmFyICRSUEFSRU4gPSA0MTtcbiAgdmFyICRTVEFSID0gNDI7XG4gIHZhciAkUExVUyA9IDQzO1xuICB2YXIgJENPTU1BID0gNDQ7XG4gIHZhciAkTUlOVVMgPSA0NTtcbiAgdmFyICRQRVJJT0QgPSA0NjtcbiAgdmFyICRTTEFTSCA9IDQ3O1xuICB2YXIgJENPTE9OID0gNTg7XG4gIHZhciAkU0VNSUNPTE9OID0gNTk7XG4gIHZhciAkTFQgPSA2MDtcbiAgdmFyICRFUSA9IDYxO1xuICB2YXIgJEdUID0gNjI7XG4gIHZhciAkUVVFU1RJT04gPSA2MztcblxuICB2YXIgJDAgPSA0ODtcbiAgdmFyICQ5ID0gNTc7XG5cbiAgdmFyICRBID0gNjU7XG4gIHZhciAkRSA9IDY5O1xuICB2YXIgJFogPSA5MDtcblxuICB2YXIgJExCUkFDS0VUID0gOTE7XG4gIHZhciAkQkFDS1NMQVNIID0gOTI7XG4gIHZhciAkUkJSQUNLRVQgPSA5MztcbiAgdmFyICRDQVJFVCA9IDk0O1xuICB2YXIgJF8gPSA5NTtcblxuICB2YXIgJGEgPSA5NztcbiAgdmFyICRlID0gMTAxO1xuICB2YXIgJGYgPSAxMDI7XG4gIHZhciAkbiA9IDExMDtcbiAgdmFyICRyID0gMTE0O1xuICB2YXIgJHQgPSAxMTY7XG4gIHZhciAkdSA9IDExNztcbiAgdmFyICR2ID0gMTE4O1xuICB2YXIgJHogPSAxMjI7XG5cbiAgdmFyICRMQlJBQ0UgPSAxMjM7XG4gIHZhciAkQkFSID0gMTI0O1xuICB2YXIgJFJCUkFDRSA9IDEyNTtcbiAgdmFyICROQlNQID0gMTYwO1xuXG4gIGZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gJFRBQiAmJiBjb2RlIDw9ICRTUEFDRSB8fCBjb2RlID09PSAkTkJTUDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSWRlbnRpZmllclN0YXJ0KGNvZGUpIHtcbiAgICByZXR1cm4gJGEgPD0gY29kZSAmJiBjb2RlIDw9ICR6IHx8ICRBIDw9IGNvZGUgJiYgY29kZSA8PSAkWiB8fCBjb2RlID09PSAkXyB8fCBjb2RlID09PSAkJDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSWRlbnRpZmllclBhcnQoY29kZSkge1xuICAgIHJldHVybiAkYSA8PSBjb2RlICYmIGNvZGUgPD0gJHogfHwgJEEgPD0gY29kZSAmJiBjb2RlIDw9ICRaIHx8ICQwIDw9IGNvZGUgJiYgY29kZSA8PSAkOSB8fCBjb2RlID09PSAkXyB8fCBjb2RlID09PSAkJDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICAgIHJldHVybiAkMCA8PSBjb2RlICYmIGNvZGUgPD0gJDk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0V4cG9uZW50U3RhcnQoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSAkZSB8fCBjb2RlID09PSAkRTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRXhwb25lbnRTaWduKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gJE1JTlVTIHx8IGNvZGUgPT09ICRQTFVTO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5lc2NhcGUoY29kZSkge1xuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSAkbjpcbiAgICAgICAgcmV0dXJuICRMRjtcbiAgICAgIGNhc2UgJGY6XG4gICAgICAgIHJldHVybiAkRkY7XG4gICAgICBjYXNlICRyOlxuICAgICAgICByZXR1cm4gJENSO1xuICAgICAgY2FzZSAkdDpcbiAgICAgICAgcmV0dXJuICRUQUI7XG4gICAgICBjYXNlICR2OlxuICAgICAgICByZXR1cm4gJFZUQUI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHRocm93IG1lc3NhZ2UgfHwgXCJBc3NlcnRpb24gZmFpbGVkXCI7XG4gICAgfVxuICB9XG5cbiAgdmFyIEVPRiA9IG5ldyBUb2tlbigtMSwgbnVsbCk7XG5cbiAgdmFyIFBhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFyc2VyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhcnNlcik7XG5cbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIoKTtcbiAgICB9XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQgfHwgJyc7XG5cbiAgICAgIHJldHVybiB0aGlzLmNhY2hlW2lucHV0XSB8fCAodGhpcy5jYWNoZVtpbnB1dF0gPSBuZXcgUGFyc2VySW1wbGVtZW50YXRpb24odGhpcy5sZXhlciwgaW5wdXQpLnBhcnNlQ2hhaW4oKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBQYXJzZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG5cbiAgdmFyIFBhcnNlckltcGxlbWVudGF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJzZXJJbXBsZW1lbnRhdGlvbihsZXhlciwgaW5wdXQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXJzZXJJbXBsZW1lbnRhdGlvbik7XG5cbiAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgdGhpcy50b2tlbnMgPSBsZXhlci5sZXgoaW5wdXQpO1xuICAgIH1cblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUNoYWluID0gZnVuY3Rpb24gcGFyc2VDaGFpbigpIHtcbiAgICAgIHZhciBpc0NoYWluID0gZmFsc2UsXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKHRoaXMub3B0aW9uYWwoJzsnKSkge1xuICAgICAgICBpc0NoYWluID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVlay50ZXh0ID09PSAnKScgfHwgdGhpcy5wZWVrLnRleHQgPT09ICd9JyB8fCB0aGlzLnBlZWsudGV4dCA9PT0gJ10nKSB7XG4gICAgICAgICAgdGhpcy5lcnJvcignVW5jb25zdW1lZCB0b2tlbiAnICsgdGhpcy5wZWVrLnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlVmFsdWVDb252ZXJ0ZXIoKTtcbiAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHByKTtcblxuICAgICAgICB3aGlsZSAodGhpcy5vcHRpb25hbCgnOycpKSB7XG4gICAgICAgICAgaXNDaGFpbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNDaGFpbiAmJiBleHByIGluc3RhbmNlb2YgVmFsdWVDb252ZXJ0ZXIpIHtcbiAgICAgICAgICB0aGlzLmVycm9yKCdjYW5ub3QgaGF2ZSBhIHZhbHVlIGNvbnZlcnRlciBpbiBhIGNoYWluJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSA/IGV4cHJlc3Npb25zWzBdIDogbmV3IENoYWluKGV4cHJlc3Npb25zKTtcbiAgICB9O1xuXG4gICAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnBhcnNlVmFsdWVDb252ZXJ0ZXIgPSBmdW5jdGlvbiBwYXJzZVZhbHVlQ29udmVydGVyKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgIHdoaWxlICh0aGlzLm9wdGlvbmFsKCd8JykpIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnBlZWsudGV4dCxcbiAgICAgICAgICAgIGFyZ3MgPSBbXTtcblxuICAgICAgICB0aGlzLmFkdmFuY2UoKTtcblxuICAgICAgICB3aGlsZSAodGhpcy5vcHRpb25hbCgnOicpKSB7XG4gICAgICAgICAgYXJncy5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gbmV3IFZhbHVlQ29udmVydGVyKHJlc3VsdCwgbmFtZSwgYXJncywgW3Jlc3VsdF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnBhcnNlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMucGVlay5pbmRleCxcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLnBhcnNlQ29uZGl0aW9uYWwoKTtcblxuICAgICAgd2hpbGUgKHRoaXMucGVlay50ZXh0ID09PSAnPScpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQuaXNBc3NpZ25hYmxlKSB7XG4gICAgICAgICAgdmFyIGVuZCA9IHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGggPyB0aGlzLnBlZWsuaW5kZXggOiB0aGlzLmlucHV0Lmxlbmd0aDtcbiAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMuaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuXG4gICAgICAgICAgdGhpcy5lcnJvcignRXhwcmVzc2lvbiAnICsgZXhwcmVzc2lvbiArICcgaXMgbm90IGFzc2lnbmFibGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXhwZWN0KCc9Jyk7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBBc3NpZ24ocmVzdWx0LCB0aGlzLnBhcnNlQ29uZGl0aW9uYWwoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUNvbmRpdGlvbmFsID0gZnVuY3Rpb24gcGFyc2VDb25kaXRpb25hbCgpIHtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMucGVlay5pbmRleCxcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLnBhcnNlTG9naWNhbE9yKCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbmFsKCc/JykpIHtcbiAgICAgICAgdmFyIHllcyA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbmFsKCc6JykpIHtcbiAgICAgICAgICB2YXIgZW5kID0gdGhpcy5pbmRleCA8IHRoaXMudG9rZW5zLmxlbmd0aCA/IHRoaXMucGVlay5pbmRleCA6IHRoaXMuaW5wdXQubGVuZ3RoO1xuICAgICAgICAgIHZhciBleHByZXNzaW9uID0gdGhpcy5pbnB1dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XG5cbiAgICAgICAgICB0aGlzLmVycm9yKCdDb25kaXRpb25hbCBleHByZXNzaW9uICcgKyBleHByZXNzaW9uICsgJyByZXF1aXJlcyBhbGwgMyBleHByZXNzaW9ucycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5vID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgcmVzdWx0ID0gbmV3IENvbmRpdGlvbmFsKHJlc3VsdCwgeWVzLCBubyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUxvZ2ljYWxPciA9IGZ1bmN0aW9uIHBhcnNlTG9naWNhbE9yKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VMb2dpY2FsQW5kKCk7XG5cbiAgICAgIHdoaWxlICh0aGlzLm9wdGlvbmFsKCd8fCcpKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBCaW5hcnkoJ3x8JywgcmVzdWx0LCB0aGlzLnBhcnNlTG9naWNhbEFuZCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnBhcnNlTG9naWNhbEFuZCA9IGZ1bmN0aW9uIHBhcnNlTG9naWNhbEFuZCgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlRXF1YWxpdHkoKTtcblxuICAgICAgd2hpbGUgKHRoaXMub3B0aW9uYWwoJyYmJykpIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEJpbmFyeSgnJiYnLCByZXN1bHQsIHRoaXMucGFyc2VFcXVhbGl0eSgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnBhcnNlRXF1YWxpdHkgPSBmdW5jdGlvbiBwYXJzZUVxdWFsaXR5KCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VSZWxhdGlvbmFsKCk7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbmFsKCc9PScpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEJpbmFyeSgnPT0nLCByZXN1bHQsIHRoaXMucGFyc2VSZWxhdGlvbmFsKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJyE9JykpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQmluYXJ5KCchPScsIHJlc3VsdCwgdGhpcy5wYXJzZVJlbGF0aW9uYWwoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgnPT09JykpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQmluYXJ5KCc9PT0nLCByZXN1bHQsIHRoaXMucGFyc2VSZWxhdGlvbmFsKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJyE9PScpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEJpbmFyeSgnIT09JywgcmVzdWx0LCB0aGlzLnBhcnNlUmVsYXRpb25hbCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZVJlbGF0aW9uYWwgPSBmdW5jdGlvbiBwYXJzZVJlbGF0aW9uYWwoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZUFkZGl0aXZlKCk7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbmFsKCc8JykpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQmluYXJ5KCc8JywgcmVzdWx0LCB0aGlzLnBhcnNlQWRkaXRpdmUoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgnPicpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEJpbmFyeSgnPicsIHJlc3VsdCwgdGhpcy5wYXJzZUFkZGl0aXZlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJzw9JykpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQmluYXJ5KCc8PScsIHJlc3VsdCwgdGhpcy5wYXJzZUFkZGl0aXZlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJz49JykpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQmluYXJ5KCc+PScsIHJlc3VsdCwgdGhpcy5wYXJzZUFkZGl0aXZlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnBhcnNlQWRkaXRpdmUgPSBmdW5jdGlvbiBwYXJzZUFkZGl0aXZlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VNdWx0aXBsaWNhdGl2ZSgpO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25hbCgnKycpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEJpbmFyeSgnKycsIHJlc3VsdCwgdGhpcy5wYXJzZU11bHRpcGxpY2F0aXZlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJy0nKSkge1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBCaW5hcnkoJy0nLCByZXN1bHQsIHRoaXMucGFyc2VNdWx0aXBsaWNhdGl2ZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZU11bHRpcGxpY2F0aXZlID0gZnVuY3Rpb24gcGFyc2VNdWx0aXBsaWNhdGl2ZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlUHJlZml4KCk7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbmFsKCcqJykpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQmluYXJ5KCcqJywgcmVzdWx0LCB0aGlzLnBhcnNlUHJlZml4KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJyUnKSkge1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBCaW5hcnkoJyUnLCByZXN1bHQsIHRoaXMucGFyc2VQcmVmaXgoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgnLycpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEJpbmFyeSgnLycsIHJlc3VsdCwgdGhpcy5wYXJzZVByZWZpeCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZVByZWZpeCA9IGZ1bmN0aW9uIHBhcnNlUHJlZml4KCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9uYWwoJysnKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVByZWZpeCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbmFsKCctJykpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEJpbmFyeSgnLScsIG5ldyBMaXRlcmFsUHJpbWl0aXZlKDApLCB0aGlzLnBhcnNlUHJlZml4KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJyEnKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJlZml4Tm90KCchJywgdGhpcy5wYXJzZVByZWZpeCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUFjY2Vzc09yQ2FsbE1lbWJlcigpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUFjY2Vzc09yQ2FsbE1lbWJlciA9IGZ1bmN0aW9uIHBhcnNlQWNjZXNzT3JDYWxsTWVtYmVyKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VQcmltYXJ5KCk7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbmFsKCcuJykpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMucGVlay50ZXh0O1xuXG4gICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25hbCgnKCcpKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IHRoaXMucGFyc2VFeHByZXNzaW9uTGlzdCgnKScpO1xuICAgICAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYWxsTWVtYmVyKHJlc3VsdCwgbmFtZSwgYXJncyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBBY2Nlc3NNZW1iZXIocmVzdWx0LCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgnWycpKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgdGhpcy5leHBlY3QoJ10nKTtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQWNjZXNzS2V5ZWQocmVzdWx0LCBrZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uYWwoJygnKSkge1xuICAgICAgICAgIHZhciBhcmdzID0gdGhpcy5wYXJzZUV4cHJlc3Npb25MaXN0KCcpJyk7XG4gICAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FsbEZ1bmN0aW9uKHJlc3VsdCwgYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUucGFyc2VQcmltYXJ5ID0gZnVuY3Rpb24gcGFyc2VQcmltYXJ5KCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9uYWwoJygnKSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgnbnVsbCcpIHx8IHRoaXMub3B0aW9uYWwoJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGl0ZXJhbFByaW1pdGl2ZShudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgndHJ1ZScpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGl0ZXJhbFByaW1pdGl2ZSh0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25hbCgnZmFsc2UnKSkge1xuICAgICAgICByZXR1cm4gbmV3IExpdGVyYWxQcmltaXRpdmUoZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbmFsKCdbJykpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5wYXJzZUV4cHJlc3Npb25MaXN0KCddJyk7XG4gICAgICAgIHRoaXMuZXhwZWN0KCddJyk7XG4gICAgICAgIHJldHVybiBuZXcgTGl0ZXJhbEFycmF5KGVsZW1lbnRzKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrLnRleHQgPT0gJ3snKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT2JqZWN0KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGVlay5rZXkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUFjY2Vzc09yQ2FsbFNjb3BlKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGVlay52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucGVlay52YWx1ZTtcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICAgIHJldHVybiBpc05hTih2YWx1ZSkgPyBuZXcgTGl0ZXJhbFN0cmluZyh2YWx1ZSkgOiBuZXcgTGl0ZXJhbFByaW1pdGl2ZSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy50b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbjogJyArIHRoaXMuaW5wdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lcnJvcignVW5leHBlY3RlZCB0b2tlbiAnICsgdGhpcy5wZWVrLnRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUucGFyc2VBY2Nlc3NPckNhbGxTY29wZSA9IGZ1bmN0aW9uIHBhcnNlQWNjZXNzT3JDYWxsU2NvcGUoKSB7XG4gICAgICB2YXIgbmFtZSA9IHRoaXMucGVlay5rZXk7XG5cbiAgICAgIHRoaXMuYWR2YW5jZSgpO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9uYWwoJygnKSkge1xuICAgICAgICByZXR1cm4gbmV3IEFjY2Vzc1Njb3BlKG5hbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IHRoaXMucGFyc2VFeHByZXNzaW9uTGlzdCgnKScpO1xuICAgICAgdGhpcy5leHBlY3QoJyknKTtcbiAgICAgIHJldHVybiBuZXcgQ2FsbFNjb3BlKG5hbWUsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUucGFyc2VPYmplY3QgPSBmdW5jdGlvbiBwYXJzZU9iamVjdCgpIHtcbiAgICAgIHZhciBrZXlzID0gW10sXG4gICAgICAgICAgdmFsdWVzID0gW107XG5cbiAgICAgIHRoaXMuZXhwZWN0KCd7Jyk7XG5cbiAgICAgIGlmICh0aGlzLnBlZWsudGV4dCAhPT0gJ30nKSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBlZWsudmFsdWU7XG4gICAgICAgICAga2V5cy5wdXNoKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IHRoaXMucGVlay50ZXh0KTtcblxuICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgICAgIHRoaXMuZXhwZWN0KCc6Jyk7XG5cbiAgICAgICAgICB2YWx1ZXMucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5vcHRpb25hbCgnLCcpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3QoJ30nKTtcblxuICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsT2JqZWN0KGtleXMsIHZhbHVlcyk7XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb25MaXN0ID0gZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uTGlzdCh0ZXJtaW5hdG9yKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIGlmICh0aGlzLnBlZWsudGV4dCAhPSB0ZXJtaW5hdG9yKSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5vcHRpb25hbCgnLCcpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLm9wdGlvbmFsID0gZnVuY3Rpb24gb3B0aW9uYWwodGV4dCkge1xuICAgICAgaWYgKHRoaXMucGVlay50ZXh0ID09PSB0ZXh0KSB7XG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuZXhwZWN0ID0gZnVuY3Rpb24gZXhwZWN0KHRleHQpIHtcbiAgICAgIGlmICh0aGlzLnBlZWsudGV4dCA9PT0gdGV4dCkge1xuICAgICAgICB0aGlzLmFkdmFuY2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXJyb3IoJ01pc3NpbmcgZXhwZWN0ZWQgJyArIHRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuYWR2YW5jZSA9IGZ1bmN0aW9uIGFkdmFuY2UoKSB7XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfTtcblxuICAgIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGggPyAnYXQgY29sdW1uICcgKyAodGhpcy50b2tlbnNbdGhpcy5pbmRleF0uaW5kZXggKyAxKSArICcgaW4nIDogJ2F0IHRoZSBlbmQgb2YgdGhlIGV4cHJlc3Npb24nO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcnNlciBFcnJvcjogJyArIG1lc3NhZ2UgKyAnICcgKyBsb2NhdGlvbiArICcgWycgKyB0aGlzLmlucHV0ICsgJ10nKTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFBhcnNlckltcGxlbWVudGF0aW9uLCBbe1xuICAgICAga2V5OiAncGVlaycsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGggPyB0aGlzLnRva2Vuc1t0aGlzLmluZGV4XSA6IEVPRjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUGFyc2VySW1wbGVtZW50YXRpb247XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5QYXJzZXJJbXBsZW1lbnRhdGlvbiA9IFBhcnNlckltcGxlbWVudGF0aW9uO1xuXG4gIHZhciBtYXBQcm90byA9IE1hcC5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gX2dldE1hcE9ic2VydmVyKHRhc2tRdWV1ZSwgbWFwKSB7XG4gICAgcmV0dXJuIE1vZGlmeU1hcE9ic2VydmVyLmNyZWF0ZSh0YXNrUXVldWUsIG1hcCk7XG4gIH1cblxuICB2YXIgTW9kaWZ5TWFwT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKF9Nb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIyKSB7XG4gICAgX2luaGVyaXRzKE1vZGlmeU1hcE9ic2VydmVyLCBfTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyMik7XG5cbiAgICBmdW5jdGlvbiBNb2RpZnlNYXBPYnNlcnZlcih0YXNrUXVldWUsIG1hcCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGlmeU1hcE9ic2VydmVyKTtcblxuICAgICAgX01vZGlmeUNvbGxlY3Rpb25PYnNlcnZlcjIuY2FsbCh0aGlzLCB0YXNrUXVldWUsIG1hcCk7XG4gICAgfVxuXG4gICAgTW9kaWZ5TWFwT2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHRhc2tRdWV1ZSwgbWFwKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTW9kaWZ5TWFwT2JzZXJ2ZXIodGFza1F1ZXVlLCBtYXApO1xuXG4gICAgICBtYXBbJ3NldCddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBtYXAuZ2V0KGFyZ3VtZW50c1swXSk7XG4gICAgICAgIHZhciB0eXBlID0gb2xkVmFsdWUgPyAndXBkYXRlJyA6ICdhZGQnO1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IG1hcFByb3RvWydzZXQnXS5hcHBseShtYXAsIGFyZ3VtZW50cyk7XG4gICAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBvYmplY3Q6IG1hcCxcbiAgICAgICAgICBrZXk6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgbWFwWydkZWxldGUnXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gbWFwLmdldChhcmd1bWVudHNbMF0pO1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IG1hcFByb3RvWydkZWxldGUnXS5hcHBseShtYXAsIGFyZ3VtZW50cyk7XG4gICAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgICAgb2JqZWN0OiBtYXAsXG4gICAgICAgICAga2V5OiBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgb2xkVmFsdWU6IG9sZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIG1hcFsnY2xlYXInXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1ldGhvZENhbGxSZXN1bHQgPSBtYXBQcm90b1snY2xlYXInXS5hcHBseShtYXAsIGFyZ3VtZW50cyk7XG4gICAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgICAgdHlwZTogJ2NsZWFyJyxcbiAgICAgICAgICBvYmplY3Q6IG1hcFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gICAgfTtcblxuICAgIHJldHVybiBNb2RpZnlNYXBPYnNlcnZlcjtcbiAgfSkoTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyKTtcblxuICBmdW5jdGlvbiBmaW5kT3JpZ2luYWxFdmVudFRhcmdldChldmVudCkge1xuICAgIHJldHVybiBldmVudC5vcmlnaW5hbFRhcmdldCB8fCBldmVudC5wYXRoICYmIGV2ZW50LnBhdGhbMF0gfHwgZXZlbnQuZGVlcFBhdGggJiYgZXZlbnQuZGVlcFBhdGhbMF0gfHwgZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEZWxlZ2F0ZWRFdmVudChldmVudCkge1xuICAgIGV2ZW50ID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgdmFyIHRhcmdldCA9IGZpbmRPcmlnaW5hbEV2ZW50VGFyZ2V0KGV2ZW50KSxcbiAgICAgICAgY2FsbGJhY2s7XG5cbiAgICB3aGlsZSAodGFyZ2V0ICYmICFjYWxsYmFjaykge1xuICAgICAgaWYgKHRhcmdldC5kZWxlZ2F0ZWRDYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2sgPSB0YXJnZXQuZGVsZWdhdGVkQ2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBEZWxlZ2F0ZUhhbmRsZXJFbnRyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsZWdhdGVIYW5kbGVyRW50cnkoZXZlbnROYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVsZWdhdGVIYW5kbGVyRW50cnkpO1xuXG4gICAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgIH1cblxuICAgIERlbGVnYXRlSGFuZGxlckVudHJ5LnByb3RvdHlwZS5pbmNyZW1lbnQgPSBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gICAgICB0aGlzLmNvdW50Kys7XG5cbiAgICAgIGlmICh0aGlzLmNvdW50ID09PSAxKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIGhhbmRsZURlbGVnYXRlZEV2ZW50LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERlbGVnYXRlSGFuZGxlckVudHJ5LnByb3RvdHlwZS5kZWNyZW1lbnQgPSBmdW5jdGlvbiBkZWNyZW1lbnQoKSB7XG4gICAgICB0aGlzLmNvdW50LS07XG5cbiAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIGhhbmRsZURlbGVnYXRlZEV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIERlbGVnYXRlSGFuZGxlckVudHJ5O1xuICB9KSgpO1xuXG4gIHZhciBEZWZhdWx0RXZlbnRTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdEV2ZW50U3RyYXRlZ3koKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVmYXVsdEV2ZW50U3RyYXRlZ3kpO1xuICAgIH1cblxuICAgIERlZmF1bHRFdmVudFN0cmF0ZWd5LnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUodGFyZ2V0LCB0YXJnZXRFdmVudCwgY2FsbGJhY2ssIGRlbGVnYXRlKSB7XG4gICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgdmFyIF9yZXQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZWRIYW5kbGVycyA9IGRvY3VtZW50LmRlbGVnYXRlZEhhbmRsZXJzIHx8IChkb2N1bWVudC5kZWxlZ2F0ZWRIYW5kbGVycyA9IHt9KSxcbiAgICAgICAgICAgICAgaGFuZGxlckVudHJ5ID0gZGVsZWdhdGVkSGFuZGxlcnNbdGFyZ2V0RXZlbnRdIHx8IChkZWxlZ2F0ZWRIYW5kbGVyc1t0YXJnZXRFdmVudF0gPSBuZXcgRGVsZWdhdGVIYW5kbGVyRW50cnkodGFyZ2V0RXZlbnQpKSxcbiAgICAgICAgICAgICAgZGVsZWdhdGVkQ2FsbGJhY2tzID0gdGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrcyB8fCAodGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrcyA9IHt9KTtcblxuICAgICAgICAgIGhhbmRsZXJFbnRyeS5pbmNyZW1lbnQoKTtcbiAgICAgICAgICBkZWxlZ2F0ZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gY2FsbGJhY2s7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBoYW5kbGVyRW50cnkuZGVjcmVtZW50KCk7XG4gICAgICAgICAgICAgIGRlbGVnYXRlZENhbGxiYWNrc1t0YXJnZXRFdmVudF0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfcmV0ID09PSAnb2JqZWN0JykgcmV0dXJuIF9yZXQudjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRhcmdldEV2ZW50LCBjYWxsYmFjaywgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodGFyZ2V0RXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIERlZmF1bHRFdmVudFN0cmF0ZWd5O1xuICB9KSgpO1xuXG4gIHZhciBFdmVudE1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50TWFuYWdlcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudE1hbmFnZXIpO1xuXG4gICAgICB0aGlzLmVsZW1lbnRIYW5kbGVyTG9va3VwID0ge307XG4gICAgICB0aGlzLmV2ZW50U3RyYXRlZ3lMb29rdXAgPSB7fTtcblxuICAgICAgdGhpcy5yZWdpc3RlckVsZW1lbnRDb25maWcoe1xuICAgICAgICB0YWdOYW1lOiAnaW5wdXQnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgdmFsdWU6IFsnY2hhbmdlJywgJ2lucHV0J10sXG4gICAgICAgICAgY2hlY2tlZDogWydjaGFuZ2UnLCAnaW5wdXQnXSxcbiAgICAgICAgICBmaWxlczogWydjaGFuZ2UnLCAnaW5wdXQnXVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yZWdpc3RlckVsZW1lbnRDb25maWcoe1xuICAgICAgICB0YWdOYW1lOiAndGV4dGFyZWEnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgdmFsdWU6IFsnY2hhbmdlJywgJ2lucHV0J11cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMucmVnaXN0ZXJFbGVtZW50Q29uZmlnKHtcbiAgICAgICAgdGFnTmFtZTogJ3NlbGVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICB2YWx1ZTogWydjaGFuZ2UnXVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yZWdpc3RlckVsZW1lbnRDb25maWcoe1xuICAgICAgICB0YWdOYW1lOiAnY29udGVudCBlZGl0YWJsZScsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICB2YWx1ZTogWydjaGFuZ2UnLCAnaW5wdXQnLCAnYmx1cicsICdrZXl1cCcsICdwYXN0ZSddXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnJlZ2lzdGVyRWxlbWVudENvbmZpZyh7XG4gICAgICAgIHRhZ05hbWU6ICdzY3JvbGxhYmxlIGVsZW1lbnQnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgc2Nyb2xsVG9wOiBbJ3Njcm9sbCddLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IFsnc2Nyb2xsJ11cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZGVmYXVsdEV2ZW50U3RyYXRlZ3kgPSBuZXcgRGVmYXVsdEV2ZW50U3RyYXRlZ3koKTtcbiAgICB9XG5cbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyRWxlbWVudENvbmZpZyA9IGZ1bmN0aW9uIHJlZ2lzdGVyRWxlbWVudENvbmZpZyhjb25maWcpIHtcbiAgICAgIHZhciB0YWdOYW1lID0gY29uZmlnLnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICBwcm9wZXJ0aWVzID0gY29uZmlnLnByb3BlcnRpZXMsXG4gICAgICAgICAgcHJvcGVydHlOYW1lO1xuICAgICAgdGhpcy5lbGVtZW50SGFuZGxlckxvb2t1cFt0YWdOYW1lXSA9IHt9O1xuICAgICAgZm9yIChwcm9wZXJ0eU5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgdGhpcy5yZWdpc3RlckVsZW1lbnRQcm9wZXJ0eUNvbmZpZyh0YWdOYW1lLCBwcm9wZXJ0eU5hbWUsIHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlckVsZW1lbnRQcm9wZXJ0eUNvbmZpZyA9IGZ1bmN0aW9uIHJlZ2lzdGVyRWxlbWVudFByb3BlcnR5Q29uZmlnKHRhZ05hbWUsIHByb3BlcnR5TmFtZSwgZXZlbnRzKSB7XG4gICAgICB0aGlzLmVsZW1lbnRIYW5kbGVyTG9va3VwW3RhZ05hbWVdW3Byb3BlcnR5TmFtZV0gPSB7XG4gICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKHRhcmdldCwgY2FsbGJhY2spIHtcbiAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGNoYW5nZUV2ZW50LCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFuZ2VFdmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlckVsZW1lbnRIYW5kbGVyID0gZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50SGFuZGxlcih0YWdOYW1lLCBoYW5kbGVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnRIYW5kbGVyTG9va3VwW3RhZ05hbWUudG9Mb3dlckNhc2UoKV0gPSBoYW5kbGVyO1xuICAgIH07XG5cbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnRTdHJhdGVneSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRTdHJhdGVneShldmVudE5hbWUsIHN0cmF0ZWd5KSB7XG4gICAgICB0aGlzLmV2ZW50U3RyYXRlZ3lMb29rdXBbZXZlbnROYW1lXSA9IHN0cmF0ZWd5O1xuICAgIH07XG5cbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLmdldEVsZW1lbnRIYW5kbGVyID0gZnVuY3Rpb24gZ2V0RWxlbWVudEhhbmRsZXIodGFyZ2V0LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIHZhciB0YWdOYW1lLFxuICAgICAgICAgIGxvb2t1cCA9IHRoaXMuZWxlbWVudEhhbmRsZXJMb29rdXA7XG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgICAgdGFnTmFtZSA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChsb29rdXBbdGFnTmFtZV0gJiYgbG9va3VwW3RhZ05hbWVdW3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgICAgICByZXR1cm4gbG9va3VwW3RhZ05hbWVdW3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3RleHRDb250ZW50JyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb2t1cFsnY29udGVudCBlZGl0YWJsZSddWyd2YWx1ZSddO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdzY3JvbGxUb3AnIHx8IHByb3BlcnR5TmFtZSA9PT0gJ3Njcm9sbExlZnQnKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb2t1cFsnc2Nyb2xsYWJsZSBlbGVtZW50J11bcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0YXJnZXQsIHRhcmdldEV2ZW50LCBjYWxsYmFjaywgZGVsZWdhdGUpIHtcbiAgICAgIHJldHVybiAodGhpcy5ldmVudFN0cmF0ZWd5TG9va3VwW3RhcmdldEV2ZW50XSB8fCB0aGlzLmRlZmF1bHRFdmVudFN0cmF0ZWd5KS5zdWJzY3JpYmUodGFyZ2V0LCB0YXJnZXRFdmVudCwgY2FsbGJhY2ssIGRlbGVnYXRlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEV2ZW50TWFuYWdlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkV2ZW50TWFuYWdlciA9IEV2ZW50TWFuYWdlcjtcblxuICB2YXIgRGlydHlDaGVja2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaXJ0eUNoZWNrZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlydHlDaGVja2VyKTtcblxuICAgICAgdGhpcy50cmFja2VkID0gW107XG4gICAgICB0aGlzLmNoZWNrRGVsYXkgPSAxMjA7XG4gICAgfVxuXG4gICAgRGlydHlDaGVja2VyLnByb3RvdHlwZS5hZGRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGFkZFByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICB2YXIgdHJhY2tlZCA9IHRoaXMudHJhY2tlZDtcblxuICAgICAgdHJhY2tlZC5wdXNoKHByb3BlcnR5KTtcblxuICAgICAgaWYgKHRyYWNrZWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVEaXJ0eUNoZWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERpcnR5Q2hlY2tlci5wcm90b3R5cGUucmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdmFyIHRyYWNrZWQgPSB0aGlzLnRyYWNrZWQ7XG4gICAgICB0cmFja2VkLnNwbGljZSh0cmFja2VkLmluZGV4T2YocHJvcGVydHkpLCAxKTtcbiAgICB9O1xuXG4gICAgRGlydHlDaGVja2VyLnByb3RvdHlwZS5zY2hlZHVsZURpcnR5Q2hlY2sgPSBmdW5jdGlvbiBzY2hlZHVsZURpcnR5Q2hlY2soKSB7XG4gICAgICB2YXIgX3RoaXMxOCA9IHRoaXM7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMxOC5jaGVjaygpO1xuICAgICAgfSwgdGhpcy5jaGVja0RlbGF5KTtcbiAgICB9O1xuXG4gICAgRGlydHlDaGVja2VyLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkge1xuICAgICAgdmFyIHRyYWNrZWQgPSB0aGlzLnRyYWNrZWQsXG4gICAgICAgICAgaSA9IHRyYWNrZWQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdHJhY2tlZFtpXTtcblxuICAgICAgICBpZiAoY3VycmVudC5pc0RpcnR5KCkpIHtcbiAgICAgICAgICBjdXJyZW50LmNhbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHJhY2tlZC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZURpcnR5Q2hlY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIERpcnR5Q2hlY2tlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkRpcnR5Q2hlY2tlciA9IERpcnR5Q2hlY2tlcjtcblxuICB2YXIgRGlydHlDaGVja1Byb3BlcnR5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaXJ0eUNoZWNrUHJvcGVydHkoZGlydHlDaGVja2VyLCBvYmosIHByb3BlcnR5TmFtZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpcnR5Q2hlY2tQcm9wZXJ0eSk7XG5cbiAgICAgIHRoaXMuZGlydHlDaGVja2VyID0gZGlydHlDaGVja2VyO1xuICAgICAgdGhpcy5vYmogPSBvYmo7XG4gICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLmlzU1ZHID0gb2JqIGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbiAgICB9XG5cbiAgICBEaXJ0eUNoZWNrUHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vYmpbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICAgIH07XG5cbiAgICBEaXJ0eUNoZWNrUHJvcGVydHkucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmlzU1ZHKSB7XG4gICAgICAgIHRoaXMub2JqLnNldEF0dHJpYnV0ZU5TKG51bGwsIHRoaXMucHJvcGVydHlOYW1lLCBuZXdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRGlydHlDaGVja1Byb3BlcnR5LnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWUsXG4gICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgRGlydHlDaGVja1Byb3BlcnR5LnByb3RvdHlwZS5pc0RpcnR5ID0gZnVuY3Rpb24gaXNEaXJ0eSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9sZFZhbHVlICE9PSB0aGlzLmdldFZhbHVlKCk7XG4gICAgfTtcblxuICAgIERpcnR5Q2hlY2tQcm9wZXJ0eS5wcm90b3R5cGUuYmVnaW5UcmFja2luZyA9IGZ1bmN0aW9uIGJlZ2luVHJhY2tpbmcoKSB7XG4gICAgICB0aGlzLnRyYWNraW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLm5ld1ZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgdGhpcy5kaXJ0eUNoZWNrZXIuYWRkUHJvcGVydHkodGhpcyk7XG4gICAgfTtcblxuICAgIERpcnR5Q2hlY2tQcm9wZXJ0eS5wcm90b3R5cGUuZW5kVHJhY2tpbmcgPSBmdW5jdGlvbiBlbmRUcmFja2luZygpIHtcbiAgICAgIHRoaXMudHJhY2tpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGlydHlDaGVja2VyLnJlbW92ZVByb3BlcnR5KHRoaXMpO1xuICAgIH07XG5cbiAgICBEaXJ0eUNoZWNrUHJvcGVydHkucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzLFxuICAgICAgICAgIHRoYXQgPSB0aGlzO1xuXG4gICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cbiAgICAgIGlmICghdGhpcy50cmFja2luZykge1xuICAgICAgICB0aGlzLmJlZ2luVHJhY2tpbmcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNwbGljZShjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayksIDEpO1xuICAgICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoYXQuZW5kVHJhY2tpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIERpcnR5Q2hlY2tQcm9wZXJ0eTtcbiAgfSkoKTtcblxuICBleHBvcnRzLkRpcnR5Q2hlY2tQcm9wZXJ0eSA9IERpcnR5Q2hlY2tQcm9wZXJ0eTtcblxuICB2YXIgU2V0dGVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldHRlck9ic2VydmVyKHRhc2tRdWV1ZSwgb2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZXR0ZXJPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMudGFza1F1ZXVlID0gdGFza1F1ZXVlO1xuICAgICAgdGhpcy5vYmogPSBvYmo7XG4gICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5vYnNlcnZpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBTZXR0ZXJPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV07XG4gICAgfTtcblxuICAgIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgU2V0dGVyT2JzZXJ2ZXIucHJvdG90eXBlLmdldHRlclZhbHVlID0gZnVuY3Rpb24gZ2V0dGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VmFsdWU7XG4gICAgfTtcblxuICAgIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5zZXR0ZXJWYWx1ZSA9IGZ1bmN0aW9uIHNldHRlclZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMucXVldWVkKSB7XG4gICAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IG9sZFZhbHVlO1xuICAgICAgICAgIHRoaXMucXVldWVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWUsXG4gICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgdGhpcy5xdWV1ZWQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjYWxsYmFja3NbaV0obmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2V0dGVyT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzO1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICBpZiAoIXRoaXMub2JzZXJ2aW5nKSB7XG4gICAgICAgIHRoaXMuY29udmVydFByb3BlcnR5KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spLCAxKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5jb252ZXJ0UHJvcGVydHkgPSBmdW5jdGlvbiBjb252ZXJ0UHJvcGVydHkoKSB7XG4gICAgICB0aGlzLm9ic2VydmluZyA9IHRydWU7XG4gICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXTtcbiAgICAgIHRoaXMuc2V0VmFsdWUgPSB0aGlzLnNldHRlclZhbHVlO1xuICAgICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuZ2V0dGVyVmFsdWU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9iaiwgdGhpcy5wcm9wZXJ0eU5hbWUsIHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IHRoaXMuZ2V0VmFsdWUuYmluZCh0aGlzKSxcbiAgICAgICAgICBzZXQ6IHRoaXMuc2V0VmFsdWUuYmluZCh0aGlzKVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgfTtcblxuICAgIHJldHVybiBTZXR0ZXJPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlNldHRlck9ic2VydmVyID0gU2V0dGVyT2JzZXJ2ZXI7XG5cbiAgdmFyIE9vUHJvcGVydHlPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT29Qcm9wZXJ0eU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCBzdWJzY3JpYmUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPb1Byb3BlcnR5T2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLm9iaiA9IG9iajtcbiAgICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgICAgdGhpcy5zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgfVxuXG4gICAgT29Qcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXTtcbiAgICB9O1xuXG4gICAgT29Qcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE9vUHJvcGVydHlPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLk9vUHJvcGVydHlPYnNlcnZlciA9IE9vUHJvcGVydHlPYnNlcnZlcjtcblxuICB2YXIgT29PYmplY3RPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT29PYmplY3RPYnNlcnZlcihvYmosIG9ic2VydmVyTG9jYXRvcikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9vT2JqZWN0T2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLm9iaiA9IG9iajtcbiAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgICAgdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0ge307XG4gICAgICB0aGlzLmNhbGxiYWNrQ291bnQgPSAwO1xuICAgIH1cblxuICAgIE9vT2JqZWN0T2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShwcm9wZXJ0eU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAodGhpcy5jYWxsYmFja3NbcHJvcGVydHlOYW1lXSkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrc1twcm9wZXJ0eU5hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3NbcHJvcGVydHlOYW1lXSA9IFtjYWxsYmFja107XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzW3Byb3BlcnR5TmFtZV0ub2xkVmFsdWUgPSB0aGlzLm9ialtwcm9wZXJ0eU5hbWVdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jYWxsYmFja0NvdW50ID09PSAwKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IHRoaXMuaGFuZGxlQ2hhbmdlcy5iaW5kKHRoaXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIE9iamVjdC5vYnNlcnZlKHRoaXMub2JqLCB0aGlzLmhhbmRsZXIsIFsndXBkYXRlJywgJ2FkZCddKTtcbiAgICAgICAgfSBjYXRjaCAoXykge31cbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFja0NvdW50Kys7XG5cbiAgICAgIHJldHVybiB0aGlzLnVuc3Vic2NyaWJlLmJpbmQodGhpcywgcHJvcGVydHlOYW1lLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIE9vT2JqZWN0T2JzZXJ2ZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUocHJvcGVydHlOYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzW3Byb3BlcnR5TmFtZV0sXG4gICAgICAgICAgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjYWxsYmFja3Mub2xkVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLmNhbGxiYWNrc1twcm9wZXJ0eU5hbWVdID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFja0NvdW50LS07XG4gICAgICBpZiAodGhpcy5jYWxsYmFja0NvdW50ID09PSAwKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgT2JqZWN0LnVub2JzZXJ2ZSh0aGlzLm9iaiwgdGhpcy5oYW5kbGVyKTtcbiAgICAgICAgfSBjYXRjaCAoXykge31cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgT29PYmplY3RPYnNlcnZlci5wcm90b3R5cGUuZ2V0T2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRPYnNlcnZlcihwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgIHZhciBwcm9wZXJ0eU9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXTtcbiAgICAgIGlmICghcHJvcGVydHlPYnNlcnZlcikge1xuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgIHByb3BlcnR5T2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyc1twcm9wZXJ0eU5hbWVdID0gbmV3IE9vUHJvcGVydHlPYnNlcnZlcih0aGlzLm9iaiwgcHJvcGVydHlOYW1lLCB0aGlzLnN1YnNjcmliZS5iaW5kKHRoaXMsIHByb3BlcnR5TmFtZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BlcnR5T2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyc1twcm9wZXJ0eU5hbWVdID0gbmV3IFVuZGVmaW5lZFByb3BlcnR5T2JzZXJ2ZXIodGhpcywgdGhpcy5vYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eU9ic2VydmVyO1xuICAgIH07XG5cbiAgICBPb09iamVjdE9ic2VydmVyLnByb3RvdHlwZS5oYW5kbGVDaGFuZ2VzID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICB2YXIgcHJvcGVydGllcyA9IHt9LFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWksXG4gICAgICAgICAgY2hhbmdlLFxuICAgICAgICAgIHByb3BlcnR5TmFtZSxcbiAgICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBjYWxsYmFja3M7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hhbmdlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGNoYW5nZSA9IGNoYW5nZXNbaV07XG4gICAgICAgIHByb3BlcnRpZXNbY2hhbmdlLm5hbWVdID0gY2hhbmdlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKG5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgICBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrc1tuYW1lXTtcbiAgICAgICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGFuZ2UgPSBwcm9wZXJ0aWVzW25hbWVdO1xuICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5vYmplY3RbbmFtZV07XG4gICAgICAgIG9sZFZhbHVlID0gY2hhbmdlLm9sZFZhbHVlO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0obmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gT29PYmplY3RPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLk9vT2JqZWN0T2JzZXJ2ZXIgPSBPb09iamVjdE9ic2VydmVyO1xuXG4gIHZhciBVbmRlZmluZWRQcm9wZXJ0eU9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbmRlZmluZWRQcm9wZXJ0eU9ic2VydmVyKG93bmVyLCBvYmosIHByb3BlcnR5TmFtZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuZGVmaW5lZFByb3BlcnR5T2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLm93bmVyID0gb3duZXI7XG4gICAgICB0aGlzLm9iaiA9IG9iajtcbiAgICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgICAgdGhpcy5jYWxsYmFja01hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG5cbiAgICBVbmRlZmluZWRQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuYWN0dWFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdHVhbC5nZXRWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXTtcbiAgICB9O1xuXG4gICAgVW5kZWZpbmVkUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuYWN0dWFsKSB7XG4gICAgICAgIHRoaXMuYWN0dWFsLnNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcihuZXdWYWx1ZSwgdW5kZWZpbmVkKTtcbiAgICB9O1xuXG4gICAgVW5kZWZpbmVkUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB2YXIgY2FsbGJhY2s7XG5cbiAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdldE9ic2VydmVyKCk7XG5cbiAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLmNhbGxiYWNrTWFwLmtleXMoKSwgX2lzQXJyYXkyID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IyKSwgX2kyID0gMCwgX2l0ZXJhdG9yMiA9IF9pc0FycmF5MiA/IF9pdGVyYXRvcjIgOiBfaXRlcmF0b3IyW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICAgIGlmIChfaXNBcnJheTIpIHtcbiAgICAgICAgICBpZiAoX2kyID49IF9pdGVyYXRvcjIubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICBjYWxsYmFjayA9IF9pdGVyYXRvcjJbX2kyKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pMiA9IF9pdGVyYXRvcjIubmV4dCgpO1xuICAgICAgICAgIGlmIChfaTIuZG9uZSkgYnJlYWs7XG4gICAgICAgICAgY2FsbGJhY2sgPSBfaTIudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBVbmRlZmluZWRQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5nZXRPYnNlcnZlciA9IGZ1bmN0aW9uIGdldE9ic2VydmVyKCkge1xuICAgICAgdmFyIGNhbGxiYWNrLCBvYnNlcnZlckxvY2F0b3I7XG5cbiAgICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLm9iaiwgdGhpcy5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgb2JzZXJ2ZXJMb2NhdG9yID0gdGhpcy5vd25lci5vYnNlcnZlckxvY2F0b3I7XG4gICAgICBkZWxldGUgdGhpcy5vd25lci5vYnNlcnZlcnNbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICAgICAgZGVsZXRlIG9ic2VydmVyTG9jYXRvci5nZXRPckNyZWF0ZU9ic2VydmVyc0xvb2t1cCh0aGlzLm9iaiwgb2JzZXJ2ZXJMb2NhdG9yKVt0aGlzLnByb3BlcnR5TmFtZV07XG4gICAgICB0aGlzLmFjdHVhbCA9IG9ic2VydmVyTG9jYXRvci5nZXRPYnNlcnZlcih0aGlzLm9iaiwgdGhpcy5wcm9wZXJ0eU5hbWUpO1xuXG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gdGhpcy5jYWxsYmFja01hcC5rZXlzKCksIF9pc0FycmF5MyA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yMyksIF9pMyA9IDAsIF9pdGVyYXRvcjMgPSBfaXNBcnJheTMgPyBfaXRlcmF0b3IzIDogX2l0ZXJhdG9yM1tTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgICBpZiAoX2lzQXJyYXkzKSB7XG4gICAgICAgICAgaWYgKF9pMyA+PSBfaXRlcmF0b3IzLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgY2FsbGJhY2sgPSBfaXRlcmF0b3IzW19pMysrXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaTMgPSBfaXRlcmF0b3IzLm5leHQoKTtcbiAgICAgICAgICBpZiAoX2kzLmRvbmUpIGJyZWFrO1xuICAgICAgICAgIGNhbGxiYWNrID0gX2kzLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFja01hcC5zZXQoY2FsbGJhY2ssIHRoaXMuYWN0dWFsLnN1YnNjcmliZShjYWxsYmFjaykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBVbmRlZmluZWRQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczE5ID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLmFjdHVhbCkge1xuICAgICAgICB0aGlzLmdldE9ic2VydmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFjdHVhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3R1YWwuc3Vic2NyaWJlKGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMub3duZXIuc3Vic2NyaWJlKHRoaXMucHJvcGVydHlOYW1lLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbGJhY2tNYXAuc2V0KGNhbGxiYWNrLCBudWxsKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdHVhbERpc3Bvc2UgPSBfdGhpczE5LmNhbGxiYWNrTWFwLmdldChjYWxsYmFjayk7XG4gICAgICAgIGlmIChhY3R1YWxEaXNwb3NlKSBhY3R1YWxEaXNwb3NlKCk7XG4gICAgICAgIF90aGlzMTkuY2FsbGJhY2tNYXBbJ2RlbGV0ZSddKGNhbGxiYWNrKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBVbmRlZmluZWRQcm9wZXJ0eU9ic2VydmVyO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVW5kZWZpbmVkUHJvcGVydHlPYnNlcnZlciA9IFVuZGVmaW5lZFByb3BlcnR5T2JzZXJ2ZXI7XG5cbiAgdmFyIFhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIoZWxlbWVudCwgcHJvcGVydHlOYW1lLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWExpbmtBdHRyaWJ1dGVPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgfVxuXG4gICAgWExpbmtBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICAgIH07XG5cbiAgICBYTGlua0F0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgdGhpcy5hdHRyaWJ1dGVOYW1lLCBuZXdWYWx1ZSk7XG4gICAgfTtcblxuICAgIFhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYnNlcnZhdGlvbiBvZiBhIFwiJyArIHRoaXMuZWxlbWVudC5ub2RlTmFtZSArICdcIiBlbGVtZW50XFwncyBcIicgKyB0aGlzLnByb3BlcnR5TmFtZSArICdcIiBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWExpbmtBdHRyaWJ1dGVPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIgPSBYTGlua0F0dHJpYnV0ZU9ic2VydmVyO1xuXG4gIHZhciBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERhdGFBdHRyaWJ1dGVPYnNlcnZlcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgfVxuXG4gICAgRGF0YUF0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUodGhpcy5wcm9wZXJ0eU5hbWUpO1xuICAgIH07XG5cbiAgICBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMucHJvcGVydHlOYW1lLCBuZXdWYWx1ZSk7XG4gICAgfTtcblxuICAgIERhdGFBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ic2VydmF0aW9uIG9mIGEgXCInICsgdGhpcy5lbGVtZW50Lm5vZGVOYW1lICsgJ1wiIGVsZW1lbnRcXCdzIFwiJyArIHRoaXMucHJvcGVydHlOYW1lICsgJ1wiIHByb3BlcnR5IGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfTtcblxuICAgIHJldHVybiBEYXRhQXR0cmlidXRlT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5EYXRhQXR0cmlidXRlT2JzZXJ2ZXIgPSBEYXRhQXR0cmlidXRlT2JzZXJ2ZXI7XG5cbiAgdmFyIFN0eWxlT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0eWxlT2JzZXJ2ZXIoZWxlbWVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICB9XG5cbiAgICBTdHlsZU9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsZS5jc3NUZXh0O1xuICAgIH07XG5cbiAgICBTdHlsZU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmZsYXR0ZW5Dc3MobmV3VmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmNzc1RleHQgPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgU3R5bGVPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ic2VydmF0aW9uIG9mIGEgXCInICsgdGhpcy5lbGVtZW50Lm5vZGVOYW1lICsgJ1wiIGVsZW1lbnRcXCdzIFwiJyArIHRoaXMucHJvcGVydHlOYW1lICsgJ1wiIHByb3BlcnR5IGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfTtcblxuICAgIFN0eWxlT2JzZXJ2ZXIucHJvdG90eXBlLmZsYXR0ZW5Dc3MgPSBmdW5jdGlvbiBmbGF0dGVuQ3NzKG9iamVjdCkge1xuICAgICAgdmFyIHMgPSAnJztcbiAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcyArPSBwcm9wZXJ0eU5hbWUgKyAnOiAnICsgb2JqZWN0W3Byb3BlcnR5TmFtZV0gKyAnOyAnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5TdHlsZU9ic2VydmVyID0gU3R5bGVPYnNlcnZlcjtcblxuICB2YXIgVmFsdWVBdHRyaWJ1dGVPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsdWVBdHRyaWJ1dGVPYnNlcnZlcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyKTtcblxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgVmFsdWVBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICAgIH07XG5cbiAgICBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB0aGlzLmVsZW1lbnRbdGhpcy5wcm9wZXJ0eU5hbWVdID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBuZXdWYWx1ZSA9PT0gbnVsbCA/ICcnIDogbmV3VmFsdWU7XG5cbiAgICAgIHRoaXMuY2FsbCgpO1xuICAgIH07XG5cbiAgICBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWUsXG4gICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgVmFsdWVBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5kaXNwb3NlSGFuZGxlcikge1xuICAgICAgICB0aGlzLm9sZFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VIYW5kbGVyID0gdGhpcy5oYW5kbGVyLnN1YnNjcmliZSh0aGlzLmVsZW1lbnQsIHRoaXMuY2FsbC5iaW5kKHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiB0aGlzLnVuc3Vic2NyaWJlLmJpbmQodGhpcywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3M7XG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKSwgMSk7XG4gICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VIYW5kbGVyKCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZUhhbmRsZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVmFsdWVBdHRyaWJ1dGVPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlZhbHVlQXR0cmlidXRlT2JzZXJ2ZXIgPSBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyO1xuXG4gIHZhciBTZWxlY3RWYWx1ZU9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZWxlY3RWYWx1ZU9ic2VydmVyKGVsZW1lbnQsIGhhbmRsZXIsIG9ic2VydmVyTG9jYXRvcikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdFZhbHVlT2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIH1cblxuICAgIFNlbGVjdFZhbHVlT2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9O1xuXG4gICAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgdmFyIF90aGlzMjAgPSB0aGlzO1xuXG4gICAgICBpZiAobmV3VmFsdWUgIT09IG51bGwgJiYgbmV3VmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmVsZW1lbnQubXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBudWxsIG9yIEFycmF5IGluc3RhbmNlcyBjYW4gYmUgYm91bmQgdG8gYSBtdWx0aS1zZWxlY3QuJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy52YWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hcnJheVN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmFycmF5U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuYXJyYXlTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcnJheVN1YnNjcmlwdGlvbiA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldEFycmF5T2JzZXJ2ZXIobmV3VmFsdWUpLnN1YnNjcmliZSh0aGlzLnN5bmNocm9uaXplT3B0aW9ucy5iaW5kKHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5zeW5jaHJvbml6ZU9wdGlvbnMoKTtcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5vcHRpb25zLmxlbmd0aCA+IDAgJiYgIXRoaXMuaW5pdGlhbFN5bmMpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsU3luYyA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh7IGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyMC5zeW5jaHJvbml6ZU9wdGlvbnMoKTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS5zeW5jaHJvbml6ZU9wdGlvbnMgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZU9wdGlvbnMoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgIGksXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICBvcHRpb24sXG4gICAgICAgICAgb3B0aW9uVmFsdWUsXG4gICAgICAgICAgY2xlYXIsXG4gICAgICAgICAgaXNBcnJheTtcblxuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xlYXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpc0FycmF5ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IHRoaXMuZWxlbWVudC5vcHRpb25zO1xuICAgICAgaSA9IG9wdGlvbnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvcHRpb24gPSBvcHRpb25zLml0ZW0oaSk7XG4gICAgICAgIGlmIChjbGVhcikge1xuICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvblZhbHVlID0gb3B0aW9uLmhhc093blByb3BlcnR5KCdtb2RlbCcpID8gb3B0aW9uLm1vZGVsIDogb3B0aW9uLnZhbHVlO1xuICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2Yob3B0aW9uVmFsdWUpICE9PSAtMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZSA9PT0gb3B0aW9uVmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNlbGVjdFZhbHVlT2JzZXJ2ZXIucHJvdG90eXBlLnN5bmNocm9uaXplVmFsdWUgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZVZhbHVlKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmVsZW1lbnQub3B0aW9ucyxcbiAgICAgICAgICBvcHRpb24sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpaSxcbiAgICAgICAgICBjb3VudCA9IDAsXG4gICAgICAgICAgdmFsdWUgPSBbXTtcblxuICAgICAgZm9yIChpID0gMCwgaWkgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb3B0aW9uID0gb3B0aW9ucy5pdGVtKGkpO1xuICAgICAgICBpZiAoIW9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlW2NvdW50XSA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnbW9kZWwnKSA/IG9wdGlvbi5tb2RlbCA6IG9wdGlvbi52YWx1ZTtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmVsZW1lbnQubXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWVbMF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmNhbGwoKTtcbiAgICB9O1xuXG4gICAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3MsXG4gICAgICAgICAgaSA9IGNhbGxiYWNrcy5sZW5ndGgsXG4gICAgICAgICAgb2xkVmFsdWUgPSB0aGlzLm9sZFZhbHVlLFxuICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy52YWx1ZTtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjYWxsYmFja3NbaV0obmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIXRoaXMuY2FsbGJhY2tzKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuZGlzcG9zZUhhbmRsZXIgPSB0aGlzLmhhbmRsZXIuc3Vic2NyaWJlKHRoaXMuZWxlbWVudCwgdGhpcy5zeW5jaHJvbml6ZVZhbHVlLmJpbmQodGhpcywgZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICByZXR1cm4gdGhpcy51bnN1YnNjcmliZS5iaW5kKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzO1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayksIDEpO1xuICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlSGFuZGxlcigpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBfdGhpczIxID0gdGhpcztcblxuICAgICAgdGhpcy5kb21PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyMS5zeW5jaHJvbml6ZU9wdGlvbnMoKTtcbiAgICAgICAgX3RoaXMyMS5zeW5jaHJvbml6ZVZhbHVlKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB0aGlzLmRvbU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5hcnJheVN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmFycmF5U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuYXJyYXlTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gU2VsZWN0VmFsdWVPYnNlcnZlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLlNlbGVjdFZhbHVlT2JzZXJ2ZXIgPSBTZWxlY3RWYWx1ZU9ic2VydmVyO1xuXG4gIHZhciBDaGVja2VkT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENoZWNrZWRPYnNlcnZlcihlbGVtZW50LCBoYW5kbGVyLCBvYnNlcnZlckxvY2F0b3IpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGVja2VkT2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIH1cblxuICAgIENoZWNrZWRPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG5cbiAgICBDaGVja2VkT2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczIyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMudmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXJyYXlTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5hcnJheVN1YnNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLmFycmF5U3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC50eXBlID09PSAnY2hlY2tib3gnICYmIEFycmF5LmlzQXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXJyYXlTdWJzY3JpcHRpb24gPSB0aGlzLm9ic2VydmVyTG9jYXRvci5nZXRBcnJheU9ic2VydmVyKG5ld1ZhbHVlKS5zdWJzY3JpYmUodGhpcy5zeW5jaHJvbml6ZUVsZW1lbnQuYmluZCh0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuc3luY2hyb25pemVFbGVtZW50KCk7XG5cbiAgICAgIGlmICghdGhpcy5lbGVtZW50Lmhhc093blByb3BlcnR5KCdtb2RlbCcpICYmICF0aGlzLmluaXRpYWxTeW5jKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFN5bmMgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVyTG9jYXRvci50YXNrUXVldWUucXVldWVNaWNyb1Rhc2soeyBjYWxsOiBmdW5jdGlvbiBjYWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMjIuc3luY2hyb25pemVFbGVtZW50KCk7XG4gICAgICAgICAgfSB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5zeW5jaHJvbml6ZUVsZW1lbnQgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZUVsZW1lbnQoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgZWxlbWVudFZhbHVlID0gZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnbW9kZWwnKSA/IGVsZW1lbnQubW9kZWwgOiBlbGVtZW50LnZhbHVlLFxuICAgICAgICAgIGlzUmFkaW8gPSBlbGVtZW50LnR5cGUgPT09ICdyYWRpbyc7XG5cbiAgICAgIGVsZW1lbnQuY2hlY2tlZCA9IGlzUmFkaW8gJiYgdmFsdWUgPT09IGVsZW1lbnRWYWx1ZSB8fCAhaXNSYWRpbyAmJiB2YWx1ZSA9PT0gdHJ1ZSB8fCAhaXNSYWRpbyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKGVsZW1lbnRWYWx1ZSkgIT09IC0xO1xuICAgIH07XG5cbiAgICBDaGVja2VkT2JzZXJ2ZXIucHJvdG90eXBlLnN5bmNocm9uaXplVmFsdWUgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZVZhbHVlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSxcbiAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIGVsZW1lbnRWYWx1ZSA9IGVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ21vZGVsJykgPyBlbGVtZW50Lm1vZGVsIDogZWxlbWVudC52YWx1ZSxcbiAgICAgICAgICBpbmRleDtcblxuICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoZWxlbWVudFZhbHVlKTtcbiAgICAgICAgICBpZiAoZWxlbWVudC5jaGVja2VkICYmIGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdmFsdWUucHVzaChlbGVtZW50VmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQuY2hlY2tlZCAmJiBpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gZWxlbWVudC5jaGVja2VkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZSA9IGVsZW1lbnRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmNhbGwoKTtcbiAgICB9O1xuXG4gICAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcyxcbiAgICAgICAgICBpID0gY2FsbGJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWUsXG4gICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDaGVja2VkT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgaWYgKCF0aGlzLmNhbGxiYWNrcykge1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmRpc3Bvc2VIYW5kbGVyID0gdGhpcy5oYW5kbGVyLnN1YnNjcmliZSh0aGlzLmVsZW1lbnQsIHRoaXMuc3luY2hyb25pemVWYWx1ZS5iaW5kKHRoaXMsIGZhbHNlKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHRoaXMudW5zdWJzY3JpYmUuYmluZCh0aGlzLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIENoZWNrZWRPYnNlcnZlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzO1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayksIDEpO1xuICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlSGFuZGxlcigpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDaGVja2VkT2JzZXJ2ZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIGlmICh0aGlzLmFycmF5U3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuYXJyYXlTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5hcnJheVN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBDaGVja2VkT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5DaGVja2VkT2JzZXJ2ZXIgPSBDaGVja2VkT2JzZXJ2ZXI7XG5cbiAgdmFyIENsYXNzT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENsYXNzT2JzZXJ2ZXIoZWxlbWVudCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsYXNzT2JzZXJ2ZXIpO1xuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5kb05vdENhY2hlID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgfVxuXG4gICAgQ2xhc3NPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG5cbiAgICBDbGFzc09ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgbmFtZUluZGV4ID0gdGhpcy5uYW1lSW5kZXggfHwge30sXG4gICAgICAgICAgdmVyc2lvbiA9IHRoaXMudmVyc2lvbixcbiAgICAgICAgICBuYW1lcyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICBuYW1lcyA9IG5ld1ZhbHVlLnNwbGl0KCcgJyk7XG4gICAgICAgIGkgPSBuYW1lcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmFtZUluZGV4W25hbWVdID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLm5hbWVJbmRleCA9IG5hbWVJbmRleDtcbiAgICAgIHRoaXMudmVyc2lvbiArPSAxO1xuXG4gICAgICBpZiAodmVyc2lvbiA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZlcnNpb24gLT0gMTtcbiAgICAgIGZvciAobmFtZSBpbiBuYW1lSW5kZXgpIHtcbiAgICAgICAgaWYgKCFuYW1lSW5kZXguaGFzT3duUHJvcGVydHkobmFtZSkgfHwgbmFtZUluZGV4W25hbWVdICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENsYXNzT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYnNlcnZhdGlvbiBvZiBhIFwiJyArIHRoaXMuZWxlbWVudC5ub2RlTmFtZSArICdcIiBlbGVtZW50XFwncyBcImNsYXNzXCIgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENsYXNzT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5DbGFzc09ic2VydmVyID0gQ2xhc3NPYnNlcnZlcjtcblxuICB2YXIgQ29tcHV0ZWRQcm9wZXJ0eU9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21wdXRlZFByb3BlcnR5T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIG9ic2VydmVyTG9jYXRvcikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXB1dGVkUHJvcGVydHlPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMub2JqID0gb2JqO1xuICAgICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICB0aGlzLmRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIENvbXB1dGVkUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV07XG4gICAgfTtcblxuICAgIENvbXB1dGVkUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgdGhpcy5vYmpbdGhpcy5wcm9wZXJ0eU5hbWVdID0gbmV3VmFsdWU7XG4gICAgfTtcblxuICAgIENvbXB1dGVkUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3MsXG4gICAgICAgICAgaSA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbXB1dGVkUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSgpIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgIGlmICh0aGlzLm9sZFZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgdGhpcy50cmlnZ2VyKG5ld1ZhbHVlLCB0aGlzLm9sZFZhbHVlKTtcbiAgICAgIHRoaXMub2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgQ29tcHV0ZWRQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIzID0gdGhpcztcblxuICAgICAgdmFyIGRlcGVuZGVuY2llcywgaSwgaWk7XG5cbiAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICBpZiAodGhpcy5vbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuXG4gICAgICAgIGRlcGVuZGVuY2llcyA9IHRoaXMuZGVzY3JpcHRvci5nZXQuZGVwZW5kZW5jaWVzO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0T2JzZXJ2ZXIodGhpcy5vYmosIGRlcGVuZGVuY2llc1tpXSkuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIzLmV2YWx1YXRlKCk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMjMuY2FsbGJhY2tzLnNwbGljZShfdGhpczIzLmNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKSwgMSk7XG4gICAgICAgIGlmIChfdGhpczIzLmNhbGxiYWNrcy5sZW5ndGggPiAwKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChfdGhpczIzLnN1YnNjcmlwdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMyMy5zdWJzY3JpcHRpb25zLnBvcCgpKCk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMyMy5vbGRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBDb21wdXRlZFByb3BlcnR5T2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Db21wdXRlZFByb3BlcnR5T2JzZXJ2ZXIgPSBDb21wdXRlZFByb3BlcnR5T2JzZXJ2ZXI7XG5cbiAgZnVuY3Rpb24gaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMoZGVzY3JpcHRvcikge1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZ2V0ICYmIGRlc2NyaXB0b3IuZ2V0LmRlcGVuZGVuY2llcyAmJiBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY2xhcmVQcm9wZXJ0eURlcGVuZGVuY2llcyhjdG9yLCBwcm9wZXJ0eU5hbWUsIGRlcGVuZGVuY2llcykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdG9yLnByb3RvdHlwZSwgcHJvcGVydHlOYW1lKTtcbiAgICBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gIH1cblxuICB2YXIgZWxlbWVudHMgPSB7XG4gICAgYTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndGFyZ2V0JywgJ3RyYW5zZm9ybScsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBhbHRHbHlwaDogWydjbGFzcycsICdkeCcsICdkeScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2Zvcm1hdCcsICdnbHlwaFJlZicsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3JvdGF0ZScsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgYWx0R2x5cGhEZWY6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYWx0R2x5cGhJdGVtOiBbJ2lkJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFuaW1hdGU6IFsnYWNjdW11bGF0ZScsICdhZGRpdGl2ZScsICdhdHRyaWJ1dGVOYW1lJywgJ2F0dHJpYnV0ZVR5cGUnLCAnYmVnaW4nLCAnYnknLCAnY2FsY01vZGUnLCAnZHVyJywgJ2VuZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbGwnLCAnZnJvbScsICdpZCcsICdrZXlTcGxpbmVzJywgJ2tleVRpbWVzJywgJ21heCcsICdtaW4nLCAnb25iZWdpbicsICdvbmVuZCcsICdvbmxvYWQnLCAnb25yZXBlYXQnLCAncmVwZWF0Q291bnQnLCAncmVwZWF0RHVyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3Jlc3RhcnQnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAndmFsdWVzJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFuaW1hdGVDb2xvcjogWydhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2F0dHJpYnV0ZU5hbWUnLCAnYXR0cmlidXRlVHlwZScsICdiZWdpbicsICdieScsICdjYWxjTW9kZScsICdkdXInLCAnZW5kJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZmlsbCcsICdmcm9tJywgJ2lkJywgJ2tleVNwbGluZXMnLCAna2V5VGltZXMnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdzeXN0ZW1MYW5ndWFnZScsICd0bycsICd2YWx1ZXMnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYW5pbWF0ZU1vdGlvbjogWydhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2JlZ2luJywgJ2J5JywgJ2NhbGNNb2RlJywgJ2R1cicsICdlbmQnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWxsJywgJ2Zyb20nLCAnaWQnLCAna2V5UG9pbnRzJywgJ2tleVNwbGluZXMnLCAna2V5VGltZXMnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdvcmlnaW4nLCAncGF0aCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdyb3RhdGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAndmFsdWVzJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFuaW1hdGVUcmFuc2Zvcm06IFsnYWNjdW11bGF0ZScsICdhZGRpdGl2ZScsICdhdHRyaWJ1dGVOYW1lJywgJ2F0dHJpYnV0ZVR5cGUnLCAnYmVnaW4nLCAnYnknLCAnY2FsY01vZGUnLCAnZHVyJywgJ2VuZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbGwnLCAnZnJvbScsICdpZCcsICdrZXlTcGxpbmVzJywgJ2tleVRpbWVzJywgJ21heCcsICdtaW4nLCAnb25iZWdpbicsICdvbmVuZCcsICdvbmxvYWQnLCAnb25yZXBlYXQnLCAncmVwZWF0Q291bnQnLCAncmVwZWF0RHVyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3Jlc3RhcnQnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAndHlwZScsICd2YWx1ZXMnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgY2lyY2xlOiBbJ2NsYXNzJywgJ2N4JywgJ2N5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBjbGlwUGF0aDogWydjbGFzcycsICdjbGlwUGF0aFVuaXRzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgICdjb2xvci1wcm9maWxlJzogWydpZCcsICdsb2NhbCcsICduYW1lJywgJ3JlbmRlcmluZy1pbnRlbnQnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgY3Vyc29yOiBbJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGRlZnM6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBkZXNjOiBbJ2NsYXNzJywgJ2lkJywgJ3N0eWxlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGVsbGlwc2U6IFsnY2xhc3MnLCAnY3gnLCAnY3knLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3J4JywgJ3J5JywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUJsZW5kOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdpbjInLCAnbW9kZScsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlQ29sb3JNYXRyaXg6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ3Jlc3VsdCcsICdzdHlsZScsICd0eXBlJywgJ3ZhbHVlcycsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVDb21wb25lbnRUcmFuc2ZlcjogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZUNvbXBvc2l0ZTogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAnaW4yJywgJ2sxJywgJ2syJywgJ2szJywgJ2s0JywgJ29wZXJhdG9yJywgJ3Jlc3VsdCcsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVDb252b2x2ZU1hdHJpeDogWydiaWFzJywgJ2NsYXNzJywgJ2Rpdmlzb3InLCAnZWRnZU1vZGUnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ2tlcm5lbE1hdHJpeCcsICdrZXJuZWxVbml0TGVuZ3RoJywgJ29yZGVyJywgJ3ByZXNlcnZlQWxwaGEnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3RhcmdldFgnLCAndGFyZ2V0WScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVEaWZmdXNlTGlnaHRpbmc6IFsnY2xhc3MnLCAnZGlmZnVzZUNvbnN0YW50JywgJ2hlaWdodCcsICdpZCcsICdpbicsICdrZXJuZWxVbml0TGVuZ3RoJywgJ3Jlc3VsdCcsICdzdHlsZScsICdzdXJmYWNlU2NhbGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlRGlzcGxhY2VtZW50TWFwOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdpbjInLCAncmVzdWx0JywgJ3NjYWxlJywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneENoYW5uZWxTZWxlY3RvcicsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd5Q2hhbm5lbFNlbGVjdG9yJ10sXG4gICAgZmVEaXN0YW50TGlnaHQ6IFsnYXppbXV0aCcsICdlbGV2YXRpb24nLCAnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVGbG9vZDogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZUZ1bmNBOiBbJ2FtcGxpdHVkZScsICdleHBvbmVudCcsICdpZCcsICdpbnRlcmNlcHQnLCAnb2Zmc2V0JywgJ3Nsb3BlJywgJ3RhYmxlVmFsdWVzJywgJ3R5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVGdW5jQjogWydhbXBsaXR1ZGUnLCAnZXhwb25lbnQnLCAnaWQnLCAnaW50ZXJjZXB0JywgJ29mZnNldCcsICdzbG9wZScsICd0YWJsZVZhbHVlcycsICd0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGZlRnVuY0c6IFsnYW1wbGl0dWRlJywgJ2V4cG9uZW50JywgJ2lkJywgJ2ludGVyY2VwdCcsICdvZmZzZXQnLCAnc2xvcGUnLCAndGFibGVWYWx1ZXMnLCAndHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUZ1bmNSOiBbJ2FtcGxpdHVkZScsICdleHBvbmVudCcsICdpZCcsICdpbnRlcmNlcHQnLCAnb2Zmc2V0JywgJ3Nsb3BlJywgJ3RhYmxlVmFsdWVzJywgJ3R5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVHYXVzc2lhbkJsdXI6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ3Jlc3VsdCcsICdzdGREZXZpYXRpb24nLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlSW1hZ2U6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlTWVyZ2U6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ3Jlc3VsdCcsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVNZXJnZU5vZGU6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVNb3JwaG9sb2d5OiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdvcGVyYXRvcicsICdyYWRpdXMnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZU9mZnNldDogWydjbGFzcycsICdkeCcsICdkeScsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZVBvaW50TGlnaHQ6IFsnaWQnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd6J10sXG4gICAgZmVTcGVjdWxhckxpZ2h0aW5nOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdrZXJuZWxVbml0TGVuZ3RoJywgJ3Jlc3VsdCcsICdzcGVjdWxhckNvbnN0YW50JywgJ3NwZWN1bGFyRXhwb25lbnQnLCAnc3R5bGUnLCAnc3VyZmFjZVNjYWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZVNwb3RMaWdodDogWydpZCcsICdsaW1pdGluZ0NvbmVBbmdsZScsICdwb2ludHNBdFgnLCAncG9pbnRzQXRZJywgJ3BvaW50c0F0WicsICdzcGVjdWxhckV4cG9uZW50JywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knLCAneiddLFxuICAgIGZlVGlsZTogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZVR1cmJ1bGVuY2U6IFsnYmFzZUZyZXF1ZW5jeScsICdjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnbnVtT2N0YXZlcycsICdyZXN1bHQnLCAnc2VlZCcsICdzdGl0Y2hUaWxlcycsICdzdHlsZScsICd0eXBlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmaWx0ZXI6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWx0ZXJSZXMnLCAnZmlsdGVyVW5pdHMnLCAnaGVpZ2h0JywgJ2lkJywgJ3ByaW1pdGl2ZVVuaXRzJywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmb250OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaG9yaXotYWR2LXgnLCAnaG9yaXotb3JpZ2luLXgnLCAnaG9yaXotb3JpZ2luLXknLCAnaWQnLCAnc3R5bGUnLCAndmVydC1hZHYteScsICd2ZXJ0LW9yaWdpbi14JywgJ3ZlcnQtb3JpZ2luLXknLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZSc6IFsnYWNjZW50LWhlaWdodCcsICdhbHBoYWJldGljJywgJ2FzY2VudCcsICdiYm94JywgJ2NhcC1oZWlnaHQnLCAnZGVzY2VudCcsICdmb250LWZhbWlseScsICdmb250LXNpemUnLCAnZm9udC1zdHJldGNoJywgJ2ZvbnQtc3R5bGUnLCAnZm9udC12YXJpYW50JywgJ2ZvbnQtd2VpZ2h0JywgJ2hhbmdpbmcnLCAnaWQnLCAnaWRlb2dyYXBoaWMnLCAnbWF0aGVtYXRpY2FsJywgJ292ZXJsaW5lLXBvc2l0aW9uJywgJ292ZXJsaW5lLXRoaWNrbmVzcycsICdwYW5vc2UtMScsICdzbG9wZScsICdzdGVtaCcsICdzdGVtdicsICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJywgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJywgJ3VuZGVybGluZS1wb3NpdGlvbicsICd1bmRlcmxpbmUtdGhpY2tuZXNzJywgJ3VuaWNvZGUtcmFuZ2UnLCAndW5pdHMtcGVyLWVtJywgJ3YtYWxwaGFiZXRpYycsICd2LWhhbmdpbmcnLCAndi1pZGVvZ3JhcGhpYycsICd2LW1hdGhlbWF0aWNhbCcsICd3aWR0aHMnLCAneC1oZWlnaHQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZS1mb3JtYXQnOiBbJ2lkJywgJ3N0cmluZycsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICAnZm9udC1mYWNlLW5hbWUnOiBbJ2lkJywgJ25hbWUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZS1zcmMnOiBbJ2lkJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgICdmb250LWZhY2UtdXJpJzogWydpZCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmb3JlaWduT2JqZWN0OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBnOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZ2x5cGg6IFsnYXJhYmljLWZvcm0nLCAnY2xhc3MnLCAnZCcsICdnbHlwaC1uYW1lJywgJ2hvcml6LWFkdi14JywgJ2lkJywgJ2xhbmcnLCAnb3JpZW50YXRpb24nLCAnc3R5bGUnLCAndW5pY29kZScsICd2ZXJ0LWFkdi15JywgJ3ZlcnQtb3JpZ2luLXgnLCAndmVydC1vcmlnaW4teScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBnbHlwaFJlZjogWydjbGFzcycsICdkeCcsICdkeScsICdmb3JtYXQnLCAnZ2x5cGhSZWYnLCAnaWQnLCAnc3R5bGUnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGhrZXJuOiBbJ2cxJywgJ2cyJywgJ2lkJywgJ2snLCAndTEnLCAndTInLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgaW1hZ2U6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd3aWR0aCcsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgbGluZTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3gxJywgJ3gyJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5MScsICd5MiddLFxuICAgIGxpbmVhckdyYWRpZW50OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZ3JhZGllbnRUcmFuc2Zvcm0nLCAnZ3JhZGllbnRVbml0cycsICdpZCcsICdzcHJlYWRNZXRob2QnLCAnc3R5bGUnLCAneDEnLCAneDInLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneTEnLCAneTInXSxcbiAgICBtYXJrZXI6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdtYXJrZXJIZWlnaHQnLCAnbWFya2VyVW5pdHMnLCAnbWFya2VyV2lkdGgnLCAnb3JpZW50JywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAncmVmWCcsICdyZWZZJywgJ3N0eWxlJywgJ3ZpZXdCb3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgbWFzazogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdtYXNrQ29udGVudFVuaXRzJywgJ21hc2tVbml0cycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgbWV0YWRhdGE6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ21pc3NpbmctZ2x5cGgnOiBbJ2NsYXNzJywgJ2QnLCAnaG9yaXotYWR2LXgnLCAnaWQnLCAnc3R5bGUnLCAndmVydC1hZHYteScsICd2ZXJ0LW9yaWdpbi14JywgJ3ZlcnQtb3JpZ2luLXknLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgbXBhdGg6IFsnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBwYXRoOiBbJ2NsYXNzJywgJ2QnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3BhdGhMZW5ndGgnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIHBhdHRlcm46IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAncGF0dGVybkNvbnRlbnRVbml0cycsICdwYXR0ZXJuVHJhbnNmb3JtJywgJ3BhdHRlcm5Vbml0cycsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3ZpZXdCb3gnLCAnd2lkdGgnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIHBvbHlnb246IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3BvaW50cycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcG9seWxpbmU6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3BvaW50cycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcmFkaWFsR3JhZGllbnQ6IFsnY2xhc3MnLCAnY3gnLCAnY3knLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmeCcsICdmeScsICdncmFkaWVudFRyYW5zZm9ybScsICdncmFkaWVudFVuaXRzJywgJ2lkJywgJ3InLCAnc3ByZWFkTWV0aG9kJywgJ3N0eWxlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcmVjdDogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3J4JywgJ3J5JywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgc2NyaXB0OiBbJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAndHlwZScsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzZXQ6IFsnYXR0cmlidXRlTmFtZScsICdhdHRyaWJ1dGVUeXBlJywgJ2JlZ2luJywgJ2R1cicsICdlbmQnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWxsJywgJ2lkJywgJ21heCcsICdtaW4nLCAnb25iZWdpbicsICdvbmVuZCcsICdvbmxvYWQnLCAnb25yZXBlYXQnLCAncmVwZWF0Q291bnQnLCAncmVwZWF0RHVyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3Jlc3RhcnQnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgc3RvcDogWydjbGFzcycsICdpZCcsICdvZmZzZXQnLCAnc3R5bGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgc3R5bGU6IFsnaWQnLCAnbWVkaWEnLCAndGl0bGUnLCAndHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzdmc6IFsnYmFzZVByb2ZpbGUnLCAnY2xhc3MnLCAnY29udGVudFNjcmlwdFR5cGUnLCAnY29udGVudFN0eWxlVHlwZScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdvbmFib3J0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmVycm9yJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdvbnJlc2l6ZScsICdvbnNjcm9sbCcsICdvbnVubG9hZCcsICdvbnpvb20nLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd2ZXJzaW9uJywgJ3ZpZXdCb3gnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd6b29tQW5kUGFuJ10sXG4gICAgJ3N3aXRjaCc6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzeW1ib2w6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAnc3R5bGUnLCAndmlld0JveCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICB0ZXh0OiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnbGVuZ3RoQWRqdXN0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncm90YXRlJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAndHJhbnNmb3JtJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICB0ZXh0UGF0aDogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ2xlbmd0aEFkanVzdCcsICdtZXRob2QnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzcGFjaW5nJywgJ3N0YXJ0T2Zmc2V0JywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICB0aXRsZTogWydjbGFzcycsICdpZCcsICdzdHlsZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICB0cmVmOiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnbGVuZ3RoQWRqdXN0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncm90YXRlJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAneCcsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgdHNwYW46IFsnY2xhc3MnLCAnZHgnLCAnZHknLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdsZW5ndGhBZGp1c3QnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdyb3RhdGUnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndGV4dExlbmd0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgdXNlOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3dpZHRoJywgJ3gnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICB2aWV3OiBbJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICd2aWV3Qm94JywgJ3ZpZXdUYXJnZXQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3pvb21BbmRQYW4nXSxcbiAgICB2a2VybjogWydnMScsICdnMicsICdpZCcsICdrJywgJ3UxJywgJ3UyJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddXG4gIH07XG5cbiAgZXhwb3J0cy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICB2YXIgcHJlc2VudGF0aW9uRWxlbWVudHMgPSB7XG4gICAgJ2EnOiB0cnVlLFxuICAgICdhbHRHbHlwaCc6IHRydWUsXG4gICAgJ2FuaW1hdGUnOiB0cnVlLFxuICAgICdhbmltYXRlQ29sb3InOiB0cnVlLFxuICAgICdjaXJjbGUnOiB0cnVlLFxuICAgICdjbGlwUGF0aCc6IHRydWUsXG4gICAgJ2RlZnMnOiB0cnVlLFxuICAgICdlbGxpcHNlJzogdHJ1ZSxcbiAgICAnZmVCbGVuZCc6IHRydWUsXG4gICAgJ2ZlQ29sb3JNYXRyaXgnOiB0cnVlLFxuICAgICdmZUNvbXBvbmVudFRyYW5zZmVyJzogdHJ1ZSxcbiAgICAnZmVDb21wb3NpdGUnOiB0cnVlLFxuICAgICdmZUNvbnZvbHZlTWF0cml4JzogdHJ1ZSxcbiAgICAnZmVEaWZmdXNlTGlnaHRpbmcnOiB0cnVlLFxuICAgICdmZURpc3BsYWNlbWVudE1hcCc6IHRydWUsXG4gICAgJ2ZlRmxvb2QnOiB0cnVlLFxuICAgICdmZUdhdXNzaWFuQmx1cic6IHRydWUsXG4gICAgJ2ZlSW1hZ2UnOiB0cnVlLFxuICAgICdmZU1lcmdlJzogdHJ1ZSxcbiAgICAnZmVNb3JwaG9sb2d5JzogdHJ1ZSxcbiAgICAnZmVPZmZzZXQnOiB0cnVlLFxuICAgICdmZVNwZWN1bGFyTGlnaHRpbmcnOiB0cnVlLFxuICAgICdmZVRpbGUnOiB0cnVlLFxuICAgICdmZVR1cmJ1bGVuY2UnOiB0cnVlLFxuICAgICdmaWx0ZXInOiB0cnVlLFxuICAgICdmb250JzogdHJ1ZSxcbiAgICAnZm9yZWlnbk9iamVjdCc6IHRydWUsXG4gICAgJ2cnOiB0cnVlLFxuICAgICdnbHlwaCc6IHRydWUsXG4gICAgJ2dseXBoUmVmJzogdHJ1ZSxcbiAgICAnaW1hZ2UnOiB0cnVlLFxuICAgICdsaW5lJzogdHJ1ZSxcbiAgICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuICAgICdtYXJrZXInOiB0cnVlLFxuICAgICdtYXNrJzogdHJ1ZSxcbiAgICAnbWlzc2luZy1nbHlwaCc6IHRydWUsXG4gICAgJ3BhdGgnOiB0cnVlLFxuICAgICdwYXR0ZXJuJzogdHJ1ZSxcbiAgICAncG9seWdvbic6IHRydWUsXG4gICAgJ3BvbHlsaW5lJzogdHJ1ZSxcbiAgICAncmFkaWFsR3JhZGllbnQnOiB0cnVlLFxuICAgICdyZWN0JzogdHJ1ZSxcbiAgICAnc3RvcCc6IHRydWUsXG4gICAgJ3N2Zyc6IHRydWUsXG4gICAgJ3N3aXRjaCc6IHRydWUsXG4gICAgJ3N5bWJvbCc6IHRydWUsXG4gICAgJ3RleHQnOiB0cnVlLFxuICAgICd0ZXh0UGF0aCc6IHRydWUsXG4gICAgJ3RyZWYnOiB0cnVlLFxuICAgICd0c3Bhbic6IHRydWUsXG4gICAgJ3VzZSc6IHRydWVcbiAgfTtcblxuICBleHBvcnRzLnByZXNlbnRhdGlvbkVsZW1lbnRzID0gcHJlc2VudGF0aW9uRWxlbWVudHM7XG4gIHZhciBwcmVzZW50YXRpb25BdHRyaWJ1dGVzID0ge1xuICAgICdhbGlnbm1lbnQtYmFzZWxpbmUnOiB0cnVlLFxuICAgICdiYXNlbGluZS1zaGlmdCc6IHRydWUsXG4gICAgJ2NsaXAtcGF0aCc6IHRydWUsXG4gICAgJ2NsaXAtcnVsZSc6IHRydWUsXG4gICAgJ2NsaXAnOiB0cnVlLFxuICAgICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnOiB0cnVlLFxuICAgICdjb2xvci1pbnRlcnBvbGF0aW9uJzogdHJ1ZSxcbiAgICAnY29sb3ItcHJvZmlsZSc6IHRydWUsXG4gICAgJ2NvbG9yLXJlbmRlcmluZyc6IHRydWUsXG4gICAgJ2NvbG9yJzogdHJ1ZSxcbiAgICAnY3Vyc29yJzogdHJ1ZSxcbiAgICAnZGlyZWN0aW9uJzogdHJ1ZSxcbiAgICAnZGlzcGxheSc6IHRydWUsXG4gICAgJ2RvbWluYW50LWJhc2VsaW5lJzogdHJ1ZSxcbiAgICAnZW5hYmxlLWJhY2tncm91bmQnOiB0cnVlLFxuICAgICdmaWxsLW9wYWNpdHknOiB0cnVlLFxuICAgICdmaWxsLXJ1bGUnOiB0cnVlLFxuICAgICdmaWxsJzogdHJ1ZSxcbiAgICAnZmlsdGVyJzogdHJ1ZSxcbiAgICAnZmxvb2QtY29sb3InOiB0cnVlLFxuICAgICdmbG9vZC1vcGFjaXR5JzogdHJ1ZSxcbiAgICAnZm9udC1mYW1pbHknOiB0cnVlLFxuICAgICdmb250LXNpemUtYWRqdXN0JzogdHJ1ZSxcbiAgICAnZm9udC1zaXplJzogdHJ1ZSxcbiAgICAnZm9udC1zdHJldGNoJzogdHJ1ZSxcbiAgICAnZm9udC1zdHlsZSc6IHRydWUsXG4gICAgJ2ZvbnQtdmFyaWFudCc6IHRydWUsXG4gICAgJ2ZvbnQtd2VpZ2h0JzogdHJ1ZSxcbiAgICAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCc6IHRydWUsXG4gICAgJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJzogdHJ1ZSxcbiAgICAnaW1hZ2UtcmVuZGVyaW5nJzogdHJ1ZSxcbiAgICAna2VybmluZyc6IHRydWUsXG4gICAgJ2xldHRlci1zcGFjaW5nJzogdHJ1ZSxcbiAgICAnbGlnaHRpbmctY29sb3InOiB0cnVlLFxuICAgICdtYXJrZXItZW5kJzogdHJ1ZSxcbiAgICAnbWFya2VyLW1pZCc6IHRydWUsXG4gICAgJ21hcmtlci1zdGFydCc6IHRydWUsXG4gICAgJ21hc2snOiB0cnVlLFxuICAgICdvcGFjaXR5JzogdHJ1ZSxcbiAgICAnb3ZlcmZsb3cnOiB0cnVlLFxuICAgICdwb2ludGVyLWV2ZW50cyc6IHRydWUsXG4gICAgJ3NoYXBlLXJlbmRlcmluZyc6IHRydWUsXG4gICAgJ3N0b3AtY29sb3InOiB0cnVlLFxuICAgICdzdG9wLW9wYWNpdHknOiB0cnVlLFxuICAgICdzdHJva2UtZGFzaGFycmF5JzogdHJ1ZSxcbiAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiB0cnVlLFxuICAgICdzdHJva2UtbGluZWNhcCc6IHRydWUsXG4gICAgJ3N0cm9rZS1saW5lam9pbic6IHRydWUsXG4gICAgJ3N0cm9rZS1taXRlcmxpbWl0JzogdHJ1ZSxcbiAgICAnc3Ryb2tlLW9wYWNpdHknOiB0cnVlLFxuICAgICdzdHJva2Utd2lkdGgnOiB0cnVlLFxuICAgICdzdHJva2UnOiB0cnVlLFxuICAgICd0ZXh0LWFuY2hvcic6IHRydWUsXG4gICAgJ3RleHQtZGVjb3JhdGlvbic6IHRydWUsXG4gICAgJ3RleHQtcmVuZGVyaW5nJzogdHJ1ZSxcbiAgICAndW5pY29kZS1iaWRpJzogdHJ1ZSxcbiAgICAndmlzaWJpbGl0eSc6IHRydWUsXG4gICAgJ3dvcmQtc3BhY2luZyc6IHRydWUsXG4gICAgJ3dyaXRpbmctbW9kZSc6IHRydWVcbiAgfTtcblxuICBleHBvcnRzLnByZXNlbnRhdGlvbkF0dHJpYnV0ZXMgPSBwcmVzZW50YXRpb25BdHRyaWJ1dGVzO1xuXG4gIGZ1bmN0aW9uIGlzU3RhbmRhcmRTdmdBdHRyaWJ1dGUobm9kZU5hbWUsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gcHJlc2VudGF0aW9uRWxlbWVudHNbbm9kZU5hbWVdICYmIHByZXNlbnRhdGlvbkF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gfHwgZWxlbWVudHNbbm9kZU5hbWVdICYmIGVsZW1lbnRzW25vZGVOYW1lXS5pbmRleE9mKGF0dHJpYnV0ZU5hbWUpICE9PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoaHRtbCkge1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZGl2LmZpcnN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoY3JlYXRlRWxlbWVudCgnPHN2Zz48YWx0R2x5cGggLz48L3N2Zz4nKS5maXJzdEVsZW1lbnRDaGlsZC5ub2RlTmFtZSA9PT0gJ2FsdGdseXBoJykge1xuICAgIGVsZW1lbnRzLmFsdGdseXBoID0gZWxlbWVudHMuYWx0R2x5cGg7XG4gICAgZGVsZXRlIGVsZW1lbnRzLmFsdEdseXBoO1xuICAgIGVsZW1lbnRzLmFsdGdseXBoZGVmID0gZWxlbWVudHMuYWx0R2x5cGhEZWY7XG4gICAgZGVsZXRlIGVsZW1lbnRzLmFsdEdseXBoRGVmO1xuICAgIGVsZW1lbnRzLmFsdGdseXBoaXRlbSA9IGVsZW1lbnRzLmFsdEdseXBoSXRlbTtcbiAgICBkZWxldGUgZWxlbWVudHMuYWx0R2x5cGhJdGVtO1xuICAgIGVsZW1lbnRzLmdseXBocmVmID0gZWxlbWVudHMuZ2x5cGhSZWY7XG4gICAgZGVsZXRlIGVsZW1lbnRzLmdseXBoUmVmO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0UHJvcGVydHlEZXNjcmlwdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgT2JqZWN0LmdldFByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChzdWJqZWN0LCBuYW1lKSB7XG4gICAgICB2YXIgcGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN1YmplY3QsIG5hbWUpO1xuICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHN1YmplY3QpO1xuICAgICAgd2hpbGUgKHR5cGVvZiBwZCA9PT0gJ3VuZGVmaW5lZCcgJiYgcHJvdG8gIT09IG51bGwpIHtcbiAgICAgICAgcGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBuYW1lKTtcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBkO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlckxvb2t1cChvYmosIG9ic2VydmVyTG9jYXRvcikge1xuICAgIHZhciB2YWx1ZSA9IG5ldyBPb09iamVjdE9ic2VydmVyKG9iaiwgb2JzZXJ2ZXJMb2NhdG9yKTtcblxuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBcIl9fb2JzZXJ2ZXJfX1wiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoXykge31cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHZhciBPYnNlcnZlckxvY2F0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIE9ic2VydmVyTG9jYXRvci5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgICByZXR1cm4gW19hdXJlbGlhVGFza1F1ZXVlLlRhc2tRdWV1ZSwgRXZlbnRNYW5hZ2VyLCBEaXJ0eUNoZWNrZXIsIF9hdXJlbGlhRGVwZW5kZW5jeUluamVjdGlvbi5BbGwub2YoT2JqZWN0T2JzZXJ2YXRpb25BZGFwdGVyKV07XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIE9ic2VydmVyTG9jYXRvcih0YXNrUXVldWUsIGV2ZW50TWFuYWdlciwgZGlydHlDaGVja2VyLCBvYnNlcnZhdGlvbkFkYXB0ZXJzKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT2JzZXJ2ZXJMb2NhdG9yKTtcblxuICAgICAgdGhpcy50YXNrUXVldWUgPSB0YXNrUXVldWU7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgICAgIHRoaXMuZGlydHlDaGVja2VyID0gZGlydHlDaGVja2VyO1xuICAgICAgdGhpcy5vYnNlcnZhdGlvbkFkYXB0ZXJzID0gb2JzZXJ2YXRpb25BZGFwdGVycztcbiAgICB9XG5cbiAgICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmdldE9ic2VydmVyID0gZnVuY3Rpb24gZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIHZhciBvYnNlcnZlcnNMb29rdXAgPSBvYmouX19vYnNlcnZlcnNfXyxcbiAgICAgICAgICBvYnNlcnZlcjtcblxuICAgICAgaWYgKG9ic2VydmVyc0xvb2t1cCAmJiBwcm9wZXJ0eU5hbWUgaW4gb2JzZXJ2ZXJzTG9va3VwKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlcnNMb29rdXBbcHJvcGVydHlOYW1lXTtcbiAgICAgIH1cblxuICAgICAgb2JzZXJ2ZXIgPSB0aGlzLmNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuXG4gICAgICBpZiAoIW9ic2VydmVyLmRvTm90Q2FjaGUpIHtcbiAgICAgICAgaWYgKG9ic2VydmVyc0xvb2t1cCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb2JzZXJ2ZXJzTG9va3VwID0gdGhpcy5nZXRPckNyZWF0ZU9ic2VydmVyc0xvb2t1cChvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZXJzTG9va3VwW3Byb3BlcnR5TmFtZV0gPSBvYnNlcnZlcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9ic2VydmVyO1xuICAgIH07XG5cbiAgICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmdldE9yQ3JlYXRlT2JzZXJ2ZXJzTG9va3VwID0gZnVuY3Rpb24gZ2V0T3JDcmVhdGVPYnNlcnZlcnNMb29rdXAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqLl9fb2JzZXJ2ZXJzX18gfHwgdGhpcy5jcmVhdGVPYnNlcnZlcnNMb29rdXAob2JqKTtcbiAgICB9O1xuXG4gICAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5jcmVhdGVPYnNlcnZlcnNMb29rdXAgPSBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcnNMb29rdXAob2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSB7fTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgXCJfX29ic2VydmVyc19fXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChfKSB7fVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIE9ic2VydmVyTG9jYXRvci5wcm90b3R5cGUuZ2V0T2JzZXJ2YXRpb25BZGFwdGVyID0gZnVuY3Rpb24gZ2V0T2JzZXJ2YXRpb25BZGFwdGVyKG9iaiwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICB2YXIgaSwgaWksIG9ic2VydmF0aW9uQWRhcHRlcjtcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gdGhpcy5vYnNlcnZhdGlvbkFkYXB0ZXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb2JzZXJ2YXRpb25BZGFwdGVyID0gdGhpcy5vYnNlcnZhdGlvbkFkYXB0ZXJzW2ldO1xuICAgICAgICBpZiAob2JzZXJ2YXRpb25BZGFwdGVyLmhhbmRsZXNQcm9wZXJ0eShvYmosIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvcikpIHJldHVybiBvYnNlcnZhdGlvbkFkYXB0ZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5jcmVhdGVQcm9wZXJ0eU9ic2VydmVyID0gZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSkge1xuICAgICAgdmFyIG9ic2VydmVyTG9va3VwLCBkZXNjcmlwdG9yLCBoYW5kbGVyLCBvYnNlcnZhdGlvbkFkYXB0ZXIsIHhsaW5rUmVzdWx0O1xuXG4gICAgICBpZiAob2JqIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDbGFzc09ic2VydmVyKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3N0eWxlJyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdjc3MnKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBTdHlsZU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVyID0gdGhpcy5ldmVudE1hbmFnZXIuZ2V0RWxlbWVudEhhbmRsZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSAndmFsdWUnICYmIG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3RWYWx1ZU9ic2VydmVyKG9iaiwgaGFuZGxlciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ2NoZWNrZWQnICYmIG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IENoZWNrZWRPYnNlcnZlcihvYmosIGhhbmRsZXIsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICB4bGlua1Jlc3VsdCA9IC9eeGxpbms6KC4rKSQvLmV4ZWMocHJvcGVydHlOYW1lKTtcbiAgICAgICAgaWYgKHhsaW5rUmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBYTGlua0F0dHJpYnV0ZU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCB4bGlua1Jlc3VsdFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eXFx3Kzp8XmRhdGEtfF5hcmlhLS8udGVzdChwcm9wZXJ0eU5hbWUpIHx8IG9iaiBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgJiYgaXNTdGFuZGFyZFN2Z0F0dHJpYnV0ZShvYmoubm9kZU5hbWUsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IERhdGFBdHRyaWJ1dGVPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRQcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wZXJ0eU5hbWUpO1xuXG4gICAgICBpZiAoaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMoZGVzY3JpcHRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wdXRlZFByb3BlcnR5T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXhpc3RpbmdHZXR0ZXJPclNldHRlciA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChkZXNjcmlwdG9yICYmIChleGlzdGluZ0dldHRlck9yU2V0dGVyID0gZGVzY3JpcHRvci5nZXQgfHwgZGVzY3JpcHRvci5zZXQpKSB7XG4gICAgICAgIGlmIChleGlzdGluZ0dldHRlck9yU2V0dGVyLmdldE9ic2VydmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nR2V0dGVyT3JTZXR0ZXIuZ2V0T2JzZXJ2ZXIob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmF0aW9uQWRhcHRlciA9IHRoaXMuZ2V0T2JzZXJ2YXRpb25BZGFwdGVyKG9iaiwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgaWYgKG9ic2VydmF0aW9uQWRhcHRlcikgcmV0dXJuIG9ic2VydmF0aW9uQWRhcHRlci5nZXRPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvcik7XG4gICAgICAgIHJldHVybiBuZXcgRGlydHlDaGVja1Byb3BlcnR5KHRoaXMuZGlydHlDaGVja2VyLCBvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPYmplY3RPYnNlcnZlKSB7XG4gICAgICAgIG9ic2VydmVyTG9va3VwID0gb2JqLl9fb2JzZXJ2ZXJfXyB8fCBjcmVhdGVPYnNlcnZlckxvb2t1cChvYmosIHRoaXMpO1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXJMb29rdXAuZ2V0T2JzZXJ2ZXIocHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdsZW5ndGgnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXJyYXlPYnNlcnZlcihvYmopLmdldExlbmd0aE9ic2VydmVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEaXJ0eUNoZWNrUHJvcGVydHkodGhpcy5kaXJ0eUNoZWNrZXIsIG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3NpemUnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFwT2JzZXJ2ZXIob2JqKS5nZXRMZW5ndGhPYnNlcnZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBuZXcgRGlydHlDaGVja1Byb3BlcnR5KHRoaXMuZGlydHlDaGVja2VyLCBvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBTZXR0ZXJPYnNlcnZlcih0aGlzLnRhc2tRdWV1ZSwgb2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgIH07XG5cbiAgICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmdldEFycmF5T2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRBcnJheU9ic2VydmVyKGFycmF5KSB7XG4gICAgICBpZiAoJ19fYXJyYXlfb2JzZXJ2ZXJfXycgaW4gYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5Ll9fYXJyYXlfb2JzZXJ2ZXJfXztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycmF5Ll9fYXJyYXlfb2JzZXJ2ZXJfXyA9IF9nZXRBcnJheU9ic2VydmVyKHRoaXMudGFza1F1ZXVlLCBhcnJheSk7XG4gICAgfTtcblxuICAgIE9ic2VydmVyTG9jYXRvci5wcm90b3R5cGUuZ2V0TWFwT2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRNYXBPYnNlcnZlcihtYXApIHtcbiAgICAgIGlmICgnX19tYXBfb2JzZXJ2ZXJfXycgaW4gbWFwKSB7XG4gICAgICAgIHJldHVybiBtYXAuX19tYXBfb2JzZXJ2ZXJfXztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcC5fX21hcF9vYnNlcnZlcl9fID0gX2dldE1hcE9ic2VydmVyKHRoaXMudGFza1F1ZXVlLCBtYXApO1xuICAgIH07XG5cbiAgICByZXR1cm4gT2JzZXJ2ZXJMb2NhdG9yO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuT2JzZXJ2ZXJMb2NhdG9yID0gT2JzZXJ2ZXJMb2NhdG9yO1xuXG4gIHZhciBPYmplY3RPYnNlcnZhdGlvbkFkYXB0ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdE9ic2VydmF0aW9uQWRhcHRlcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPYmplY3RPYnNlcnZhdGlvbkFkYXB0ZXIpO1xuICAgIH1cblxuICAgIE9iamVjdE9ic2VydmF0aW9uQWRhcHRlci5wcm90b3R5cGUuaGFuZGxlc1Byb3BlcnR5ID0gZnVuY3Rpb24gaGFuZGxlc1Byb3BlcnR5KG9iamVjdCwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpbmRpbmdBZGFwdGVycyBtdXN0IGltcGxlbWVudCBoYW5kbGVzUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eU5hbWUpLicpO1xuICAgIH07XG5cbiAgICBPYmplY3RPYnNlcnZhdGlvbkFkYXB0ZXIucHJvdG90eXBlLmdldE9ic2VydmVyID0gZnVuY3Rpb24gZ2V0T2JzZXJ2ZXIob2JqZWN0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmluZGluZ0FkYXB0ZXJzIG11c3QgaW1wbGVtZW50IGNyZWF0ZU9ic2VydmVyKG9iamVjdCwgcHJvcGVydHlOYW1lKS4nKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE9iamVjdE9ic2VydmF0aW9uQWRhcHRlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLk9iamVjdE9ic2VydmF0aW9uQWRhcHRlciA9IE9iamVjdE9ic2VydmF0aW9uQWRhcHRlcjtcblxuICB2YXIgQmluZGluZ0V4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmdFeHByZXNzaW9uKG9ic2VydmVyTG9jYXRvciwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZUV4cHJlc3Npb24sIG1vZGUsIHZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24sIGF0dHJpYnV0ZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJpbmRpbmdFeHByZXNzaW9uKTtcblxuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gdGFyZ2V0UHJvcGVydHk7XG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICAgIHRoaXMudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbiA9IHZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb247XG4gICAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcbiAgICAgIHRoaXMuZGlzY3JldGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBCaW5kaW5nRXhwcmVzc2lvbi5wcm90b3R5cGUuY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmcodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IEJpbmRpbmcodGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMuc291cmNlRXhwcmVzc2lvbiwgdGFyZ2V0LCB0aGlzLnRhcmdldFByb3BlcnR5LCB0aGlzLm1vZGUsIHRoaXMudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgfTtcblxuICAgIEJpbmRpbmdFeHByZXNzaW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSh0YXJnZXRQcm9wZXJ0eSwgc291cmNlRXhwcmVzc2lvbikge1xuICAgICAgdmFyIG1vZGUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBiaW5kaW5nTW9kZS5vbmVXYXkgOiBhcmd1bWVudHNbMl07XG5cbiAgICAgIHZhciBwYXJzZXIgPSBfYXVyZWxpYURlcGVuZGVuY3lJbmplY3Rpb24uQ29udGFpbmVyLmluc3RhbmNlLmdldChQYXJzZXIpLFxuICAgICAgICAgIG9ic2VydmVyTG9jYXRvciA9IF9hdXJlbGlhRGVwZW5kZW5jeUluamVjdGlvbi5Db250YWluZXIuaW5zdGFuY2UuZ2V0KE9ic2VydmVyTG9jYXRvcik7XG5cbiAgICAgIHJldHVybiBuZXcgQmluZGluZ0V4cHJlc3Npb24ob2JzZXJ2ZXJMb2NhdG9yLCB0YXJnZXRQcm9wZXJ0eSwgcGFyc2VyLnBhcnNlKHNvdXJjZUV4cHJlc3Npb24pLCBtb2RlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJpbmRpbmdFeHByZXNzaW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuQmluZGluZ0V4cHJlc3Npb24gPSBCaW5kaW5nRXhwcmVzc2lvbjtcblxuICB2YXIgQmluZGluZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZyhvYnNlcnZlckxvY2F0b3IsIHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgdGFyZ2V0UHJvcGVydHksIG1vZGUsIHZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCaW5kaW5nKTtcblxuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgICAgdGhpcy50YXJnZXRQcm9wZXJ0eSA9IG9ic2VydmVyTG9jYXRvci5nZXRPYnNlcnZlcih0YXJnZXQsIHRhcmdldFByb3BlcnR5KTtcbiAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgICB0aGlzLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24gPSB2YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uO1xuICAgIH1cblxuICAgIEJpbmRpbmcucHJvdG90eXBlLmdldE9ic2VydmVyID0gZnVuY3Rpb24gZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm9ic2VydmVyTG9jYXRvci5nZXRPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgfTtcblxuICAgIEJpbmRpbmcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzMjQgPSB0aGlzO1xuXG4gICAgICB2YXIgdGFyZ2V0UHJvcGVydHkgPSB0aGlzLnRhcmdldFByb3BlcnR5LFxuICAgICAgICAgIGluZm87XG5cbiAgICAgIGlmICgnYmluZCcgaW4gdGFyZ2V0UHJvcGVydHkpIHtcbiAgICAgICAgdGFyZ2V0UHJvcGVydHkuYmluZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tb2RlID09IGJpbmRpbmdNb2RlLm9uZVdheSB8fCB0aGlzLm1vZGUgPT0gYmluZGluZ01vZGUudHdvV2F5KSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXNwb3NlT2JzZXJ2ZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5zb3VyY2UgPT09IHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmZvID0gdGhpcy5zb3VyY2VFeHByZXNzaW9uLmNvbm5lY3QodGhpcywgc291cmNlKTtcblxuICAgICAgICBpZiAoaW5mby5vYnNlcnZlcikge1xuICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VPYnNlcnZlciA9IGluZm8ub2JzZXJ2ZXIuc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdGFyZ2V0UHJvcGVydHkuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0UHJvcGVydHkuc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0UHJvcGVydHkuc2V0VmFsdWUoaW5mby52YWx1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PSBiaW5kaW5nTW9kZS50d29XYXkpIHtcbiAgICAgICAgICB0aGlzLl9kaXNwb3NlTGlzdGVuZXIgPSB0YXJnZXRQcm9wZXJ0eS5zdWJzY3JpYmUoZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpczI0LnNvdXJjZUV4cHJlc3Npb24uYXNzaWduKHNvdXJjZSwgbmV3VmFsdWUsIF90aGlzMjQudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZShzb3VyY2UsIHRoaXMudmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbik7XG4gICAgICAgIHRhcmdldFByb3BlcnR5LnNldFZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmluZGluZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgaWYgKCd1bmJpbmQnIGluIHRoaXMudGFyZ2V0UHJvcGVydHkpIHtcbiAgICAgICAgdGhpcy50YXJnZXRQcm9wZXJ0eS51bmJpbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9kaXNwb3NlT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zZU9ic2VydmVyKCk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VPYnNlcnZlciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9kaXNwb3NlTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zZUxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VMaXN0ZW5lciA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBCaW5kaW5nO1xuICB9KSgpO1xuXG4gIHZhciBDYWxsRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FsbEV4cHJlc3Npb24ob2JzZXJ2ZXJMb2NhdG9yLCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlRXhwcmVzc2lvbiwgdmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGxFeHByZXNzaW9uKTtcblxuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gdGFyZ2V0UHJvcGVydHk7XG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgICAgdGhpcy52YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uID0gdmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBDYWxsRXhwcmVzc2lvbi5wcm90b3R5cGUuY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmcodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IENhbGwodGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMuc291cmNlRXhwcmVzc2lvbiwgdGFyZ2V0LCB0aGlzLnRhcmdldFByb3BlcnR5LCB0aGlzLnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ2FsbEV4cHJlc3Npb247XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5DYWxsRXhwcmVzc2lvbiA9IENhbGxFeHByZXNzaW9uO1xuXG4gIHZhciBDYWxsID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYWxsKG9ic2VydmVyTG9jYXRvciwgc291cmNlRXhwcmVzc2lvbiwgdGFyZ2V0LCB0YXJnZXRQcm9wZXJ0eSwgdmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGwpO1xuXG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gb2JzZXJ2ZXJMb2NhdG9yLmdldE9ic2VydmVyKHRhcmdldCwgdGFyZ2V0UHJvcGVydHkpO1xuICAgICAgdGhpcy52YWx1ZUNvbnZlcnRlckxvb2t1cEZ1bmN0aW9uID0gdmFsdWVDb252ZXJ0ZXJMb29rdXBGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBDYWxsLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZChzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczI1ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aGlzLnRhcmdldFByb3BlcnR5LnNldFZhbHVlKGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICAgIHRlbXAgPSBzb3VyY2UuJGV2ZW50O1xuICAgICAgICBzb3VyY2UuJGV2ZW50ID0gJGV2ZW50O1xuICAgICAgICByZXN1bHQgPSBfdGhpczI1LnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUoc291cmNlLCBfdGhpczI1LnZhbHVlQ29udmVydGVyTG9va3VwRnVuY3Rpb24pO1xuICAgICAgICBzb3VyY2UuJGV2ZW50ID0gdGVtcDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDYWxsLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICAgICAgdGhpcy50YXJnZXRQcm9wZXJ0eS5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQ2FsbDtcbiAgfSkoKTtcblxuICBpZiAoIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKSkpIHtcblxuICAgIChmdW5jdGlvbiAodmlldykge1xuXG4gICAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgICAgaWYgKCEoJ0VsZW1lbnQnIGluIHZpZXcpKSByZXR1cm47XG5cbiAgICAgIHZhciBjbGFzc0xpc3RQcm9wID0gXCJjbGFzc0xpc3RcIixcbiAgICAgICAgICBwcm90b1Byb3AgPSBcInByb3RvdHlwZVwiLFxuICAgICAgICAgIGVsZW1DdHJQcm90byA9IHZpZXcuRWxlbWVudFtwcm90b1Byb3BdLFxuICAgICAgICAgIG9iakN0ciA9IE9iamVjdCxcbiAgICAgICAgICBzdHJUcmltID0gU3RyaW5nW3Byb3RvUHJvcF0udHJpbSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xuICAgICAgfSxcbiAgICAgICAgICBhcnJJbmRleE9mID0gQXJyYXlbcHJvdG9Qcm9wXS5pbmRleE9mIHx8IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSxcbiAgICAgICAgICBET01FeCA9IGZ1bmN0aW9uIERPTUV4KHR5cGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gdHlwZTtcbiAgICAgICAgdGhpcy5jb2RlID0gRE9NRXhjZXB0aW9uW3R5cGVdO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgfSxcbiAgICAgICAgICBjaGVja1Rva2VuQW5kR2V0SW5kZXggPSBmdW5jdGlvbiBjaGVja1Rva2VuQW5kR2V0SW5kZXgoY2xhc3NMaXN0LCB0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4gPT09IFwiXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRE9NRXgoXCJTWU5UQVhfRVJSXCIsIFwiQW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXFxzLy50ZXN0KHRva2VuKSkge1xuICAgICAgICAgIHRocm93IG5ldyBET01FeChcIklOVkFMSURfQ0hBUkFDVEVSX0VSUlwiLCBcIlN0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3RlclwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJySW5kZXhPZi5jYWxsKGNsYXNzTGlzdCwgdG9rZW4pO1xuICAgICAgfSxcbiAgICAgICAgICBDbGFzc0xpc3QgPSBmdW5jdGlvbiBDbGFzc0xpc3QoZWxlbSkge1xuICAgICAgICB2YXIgdHJpbW1lZENsYXNzZXMgPSBzdHJUcmltLmNhbGwoZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKSxcbiAgICAgICAgICAgIGNsYXNzZXMgPSB0cmltbWVkQ2xhc3NlcyA/IHRyaW1tZWRDbGFzc2VzLnNwbGl0KC9cXHMrLykgOiBbXSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgbGVuID0gY2xhc3Nlcy5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB0aGlzLnB1c2goY2xhc3Nlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy50b1N0cmluZygpKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICAgICAgY2xhc3NMaXN0UHJvdG8gPSBDbGFzc0xpc3RbcHJvdG9Qcm9wXSA9IFtdLFxuICAgICAgICAgIGNsYXNzTGlzdEdldHRlciA9IGZ1bmN0aW9uIGNsYXNzTGlzdEdldHRlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDbGFzc0xpc3QodGhpcyk7XG4gICAgICB9O1xuXG4gICAgICBET01FeFtwcm90b1Byb3BdID0gRXJyb3JbcHJvdG9Qcm9wXTtcbiAgICAgIGNsYXNzTGlzdFByb3RvLml0ZW0gPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gdGhpc1tpXSB8fCBudWxsO1xuICAgICAgfTtcbiAgICAgIGNsYXNzTGlzdFByb3RvLmNvbnRhaW5zID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIHRva2VuICs9IFwiXCI7XG4gICAgICAgIHJldHVybiBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pICE9PSAtMTtcbiAgICAgIH07XG4gICAgICBjbGFzc0xpc3RQcm90by5hZGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbnMgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIGwgPSB0b2tlbnMubGVuZ3RoLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICB1cGRhdGVkID0gZmFsc2U7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG4gICAgICAgICAgaWYgKGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgrK2kgPCBsKTtcblxuICAgICAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2xhc3NMaXN0UHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW5zID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBsID0gdG9rZW5zLmxlbmd0aCxcbiAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgdXBkYXRlZCA9IGZhbHNlLFxuICAgICAgICAgICAgaW5kZXg7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG4gICAgICAgICAgaW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuICAgICAgICAgIHdoaWxlIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKytpIDwgbCk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNsYXNzTGlzdFByb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uICh0b2tlbiwgZm9yY2UpIHtcbiAgICAgICAgdG9rZW4gKz0gXCJcIjtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb250YWlucyh0b2tlbiksXG4gICAgICAgICAgICBtZXRob2QgPSByZXN1bHQgPyBmb3JjZSAhPT0gdHJ1ZSAmJiBcInJlbW92ZVwiIDogZm9yY2UgIT09IGZhbHNlICYmIFwiYWRkXCI7XG5cbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgIHRoaXNbbWV0aG9kXSh0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9yY2UgPT09IHRydWUgfHwgZm9yY2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcmNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2xhc3NMaXN0UHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpvaW4oXCIgXCIpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9iakN0ci5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICB2YXIgY2xhc3NMaXN0UHJvcERlc2MgPSB7XG4gICAgICAgICAgZ2V0OiBjbGFzc0xpc3RHZXR0ZXIsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgaWYgKGV4Lm51bWJlciA9PT0gLTB4N0ZGNUVDNTQpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdFByb3BEZXNjLmVudW1lcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIG9iakN0ci5kZWZpbmVQcm9wZXJ0eShlbGVtQ3RyUHJvdG8sIGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdFByb3BEZXNjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob2JqQ3RyW3Byb3RvUHJvcF0uX19kZWZpbmVHZXR0ZXJfXykge1xuICAgICAgICBlbGVtQ3RyUHJvdG8uX19kZWZpbmVHZXR0ZXJfXyhjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RHZXR0ZXIpO1xuICAgICAgfVxuICAgIH0pKHNlbGYpO1xuICB9IGVsc2Uge1xuXG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKTtcblxuICAgICAgdGVzdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImMxXCIsIFwiYzJcIik7XG5cbiAgICAgIGlmICghdGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzJcIikpIHtcbiAgICAgICAgdmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZChtZXRob2QpIHtcbiAgICAgICAgICB2YXIgb3JpZ2luYWwgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlW21ldGhvZF07XG5cbiAgICAgICAgICBET01Ub2tlbkxpc3QucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICB0b2tlbiA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgb3JpZ2luYWwuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgY3JlYXRlTWV0aG9kKCdhZGQnKTtcbiAgICAgICAgY3JlYXRlTWV0aG9kKCdyZW1vdmUnKTtcbiAgICAgIH1cblxuICAgICAgdGVzdEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImMzXCIsIGZhbHNlKTtcblxuICAgICAgaWYgKHRlc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImMzXCIpKSB7XG4gICAgICAgIHZhciBfdG9nZ2xlID0gRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGU7XG5cbiAgICAgICAgRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAodG9rZW4sIGZvcmNlKSB7XG4gICAgICAgICAgaWYgKDEgaW4gYXJndW1lbnRzICYmICF0aGlzLmNvbnRhaW5zKHRva2VuKSA9PT0gIWZvcmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9yY2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfdG9nZ2xlLmNhbGwodGhpcywgdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGVzdEVsZW1lbnQgPSBudWxsO1xuICAgIH0pKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW1lbENhc2UobmFtZSkge1xuICAgIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgfVxuXG4gIHZhciBWYWx1ZUNvbnZlcnRlclJlc291cmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWYWx1ZUNvbnZlcnRlclJlc291cmNlKG5hbWUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWx1ZUNvbnZlcnRlclJlc291cmNlKTtcblxuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG5cbiAgICBWYWx1ZUNvbnZlcnRlclJlc291cmNlLmNvbnZlbnRpb24gPSBmdW5jdGlvbiBjb252ZW50aW9uKG5hbWUpIHtcbiAgICAgIGlmIChuYW1lLmVuZHNXaXRoKCdWYWx1ZUNvbnZlcnRlcicpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZShjYW1lbENhc2UobmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxNCkpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZS5wcm90b3R5cGUuYW5hbHl6ZSA9IGZ1bmN0aW9uIGFuYWx5emUoY29udGFpbmVyLCB0YXJnZXQpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBjb250YWluZXIuZ2V0KHRhcmdldCk7XG4gICAgfTtcblxuICAgIFZhbHVlQ29udmVydGVyUmVzb3VyY2UucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocmVnaXN0cnksIG5hbWUpIHtcbiAgICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyVmFsdWVDb252ZXJ0ZXIobmFtZSB8fCB0aGlzLm5hbWUsIHRoaXMuaW5zdGFuY2UpO1xuICAgIH07XG5cbiAgICBWYWx1ZUNvbnZlcnRlclJlc291cmNlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZChjb250YWluZXIsIHRhcmdldCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbHVlQ29udmVydGVyUmVzb3VyY2U7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WYWx1ZUNvbnZlcnRlclJlc291cmNlID0gVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZTtcblxuICBmdW5jdGlvbiB2YWx1ZUNvbnZlcnRlcihuYW1lT3JUYXJnZXQpIHtcbiAgICBpZiAobmFtZU9yVGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG5hbWVPclRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZGVmaW5lKF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEucmVzb3VyY2UsIG5ldyBWYWx1ZUNvbnZlcnRlclJlc291cmNlKG5hbWVPclRhcmdldCksIHRhcmdldCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEuZGVmaW5lKF9hdXJlbGlhTWV0YWRhdGEuTWV0YWRhdGEucmVzb3VyY2UsIG5ldyBWYWx1ZUNvbnZlcnRlclJlc291cmNlKCksIG5hbWVPclRhcmdldCk7XG4gIH1cblxuICBfYXVyZWxpYU1ldGFkYXRhLkRlY29yYXRvcnMuY29uZmlndXJlLnBhcmFtZXRlcml6ZWREZWNvcmF0b3IoJ3ZhbHVlQ29udmVydGVyJywgdmFsdWVDb252ZXJ0ZXIpO1xuXG4gIGZ1bmN0aW9uIGNvbXB1dGVkRnJvbSgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcmVzdFtfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMgPSByZXN0O1xuICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBMaXN0ZW5lckV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExpc3RlbmVyRXhwcmVzc2lvbihldmVudE1hbmFnZXIsIHRhcmdldEV2ZW50LCBzb3VyY2VFeHByZXNzaW9uLCBkZWxlZ2F0ZSwgcHJldmVudERlZmF1bHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0ZW5lckV4cHJlc3Npb24pO1xuXG4gICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgICAgIHRoaXMudGFyZ2V0RXZlbnQgPSB0YXJnZXRFdmVudDtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICB0aGlzLmRpc2NyZXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMucHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdDtcbiAgICB9XG5cbiAgICBMaXN0ZW5lckV4cHJlc3Npb24ucHJvdG90eXBlLmNyZWF0ZUJpbmRpbmcgPSBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nKHRhcmdldCkge1xuICAgICAgcmV0dXJuIG5ldyBMaXN0ZW5lcih0aGlzLmV2ZW50TWFuYWdlciwgdGhpcy50YXJnZXRFdmVudCwgdGhpcy5kZWxlZ2F0ZSwgdGhpcy5zb3VyY2VFeHByZXNzaW9uLCB0YXJnZXQsIHRoaXMucHJldmVudERlZmF1bHQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTGlzdGVuZXJFeHByZXNzaW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuTGlzdGVuZXJFeHByZXNzaW9uID0gTGlzdGVuZXJFeHByZXNzaW9uO1xuXG4gIHZhciBMaXN0ZW5lciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlzdGVuZXIoZXZlbnRNYW5hZ2VyLCB0YXJnZXRFdmVudCwgZGVsZWdhdGUsIHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgcHJldmVudERlZmF1bHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0ZW5lcik7XG5cbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gZXZlbnRNYW5hZ2VyO1xuICAgICAgdGhpcy50YXJnZXRFdmVudCA9IHRhcmdldEV2ZW50O1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgIH1cblxuICAgIExpc3RlbmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZChzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczI2ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VMaXN0ZW5lcikge1xuICAgICAgICBpZiAodGhpcy5zb3VyY2UgPT09IHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgdGhpcy5fZGlzcG9zZUxpc3RlbmVyID0gdGhpcy5ldmVudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRFdmVudCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBwcmV2RXZlbnQgPSBzb3VyY2UuJGV2ZW50O1xuICAgICAgICBzb3VyY2UuJGV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHZhciByZXN1bHQgPSBfdGhpczI2LnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUoc291cmNlKTtcbiAgICAgICAgc291cmNlLiRldmVudCA9IHByZXZFdmVudDtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSAmJiBfdGhpczI2LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwgdGhpcy5kZWxlZ2F0ZSk7XG4gICAgfTtcblxuICAgIExpc3RlbmVyLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBpZiAodGhpcy5fZGlzcG9zZUxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl9kaXNwb3NlTGlzdGVuZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gTGlzdGVuZXI7XG4gIH0pKCk7XG5cbiAgdmFyIE5hbWVFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOYW1lRXhwcmVzc2lvbihuYW1lLCBtb2RlKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmFtZUV4cHJlc3Npb24pO1xuXG4gICAgICB0aGlzLnByb3BlcnR5ID0gbmFtZTtcbiAgICAgIHRoaXMuZGlzY3JldGUgPSB0cnVlO1xuICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICB9XG5cbiAgICBOYW1lRXhwcmVzc2lvbi5wcm90b3R5cGUuY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmcodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IE5hbWVCaW5kZXIodGhpcy5wcm9wZXJ0eSwgdGFyZ2V0LCB0aGlzLm1vZGUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTmFtZUV4cHJlc3Npb247XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5OYW1lRXhwcmVzc2lvbiA9IE5hbWVFeHByZXNzaW9uO1xuXG4gIHZhciBOYW1lQmluZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOYW1lQmluZGVyKHByb3BlcnR5LCB0YXJnZXQsIG1vZGUpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYW1lQmluZGVyKTtcblxuICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSAnZWxlbWVudCc6XG4gICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ZpZXctbW9kZWwnOlxuICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0LnByaW1hcnlCZWhhdmlvci5iaW5kaW5nQ29udGV4dDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldFttb2RlXTtcblxuICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byByZWZlcmVuY2UgXCInICsgbW9kZSArICdcIiwgYnV0IGl0IHdhcyBub3QgZm91bmQgb24gdGhlIHRhcmdldCBlbGVtZW50LicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0LmJpbmRpbmdDb250ZXh0IHx8IHRoaXMudGFyZ2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIE5hbWVCaW5kZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKHNvdXJjZSkge1xuICAgICAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBzb3VyY2VbdGhpcy5wcm9wZXJ0eV0gPSB0aGlzLnRhcmdldDtcbiAgICB9O1xuXG4gICAgTmFtZUJpbmRlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgICAgIHRoaXMuc291cmNlW3RoaXMucHJvcGVydHldID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gTmFtZUJpbmRlcjtcbiAgfSkoKTtcbn0pOyIsIi8qICovIFxuZGVmaW5lKFsnZXhwb3J0cycsICdjb3JlLWpzJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfY29yZUpzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHZhciB0aGVHbG9iYWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gIH0pKCk7XG5cbiAgdmFyIGVtcHR5TWV0YWRhdGEgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgdmFyIG1ldGFkYXRhQ29udGFpbmVyS2V5ID0gJ19fbWV0YWRhdGFfXyc7XG5cbiAgaWYgKHR5cGVvZiB0aGVHbG9iYWwuU3lzdGVtID09PSAndW5kZWZpbmVkJykge1xuICAgIHRoZUdsb2JhbC5TeXN0ZW0gPSB7IGlzRmFrZTogdHJ1ZSB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGVHbG9iYWwuU3lzdGVtLmZvckVhY2hNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhlR2xvYmFsLlN5c3RlbS5mb3JFYWNoTW9kdWxlID0gZnVuY3Rpb24gKCkge307XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZUdsb2JhbC5SZWZsZWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHRoZUdsb2JhbC5SZWZsZWN0ID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZUdsb2JhbC5SZWZsZWN0LmdldE93bk1ldGFkYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgIFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAobWV0YWRhdGFLZXksIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgICByZXR1cm4gKCh0YXJnZXRbbWV0YWRhdGFDb250YWluZXJLZXldIHx8IGVtcHR5TWV0YWRhdGEpW3RhcmdldEtleV0gfHwgZW1wdHlNZXRhZGF0YSlbbWV0YWRhdGFLZXldO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZUdsb2JhbC5SZWZsZWN0LmRlZmluZU1ldGFkYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEgPSBmdW5jdGlvbiAobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgICB2YXIgbWV0YWRhdGFDb250YWluZXIgPSB0YXJnZXQuaGFzT3duUHJvcGVydHkobWV0YWRhdGFDb250YWluZXJLZXkpID8gdGFyZ2V0W21ldGFkYXRhQ29udGFpbmVyS2V5XSA6IHRhcmdldFttZXRhZGF0YUNvbnRhaW5lcktleV0gPSB7fTtcbiAgICAgIHZhciB0YXJnZXRDb250YWluZXIgPSBtZXRhZGF0YUNvbnRhaW5lclt0YXJnZXRLZXldIHx8IChtZXRhZGF0YUNvbnRhaW5lclt0YXJnZXRLZXldID0ge30pO1xuICAgICAgdGFyZ2V0Q29udGFpbmVyW21ldGFkYXRhS2V5XSA9IG1ldGFkYXRhVmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlR2xvYmFsLlJlZmxlY3QubWV0YWRhdGEgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgUmVmbGVjdC5tZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbnN1cmVEZWNvcmF0b3JzKHRhcmdldCkge1xuICAgIHZhciBhcHBsaWNhdG9yID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQuZGVjb3JhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXBwbGljYXRvciA9IHRhcmdldC5kZWNvcmF0b3JzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcGxpY2F0b3IgPSB0YXJnZXQuZGVjb3JhdG9ycztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFwcGxpY2F0b3IuX2RlY29yYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkZWxldGUgdGFyZ2V0LmRlY29yYXRvcnM7XG4gICAgICBhcHBsaWNhdG9yLl9kZWNvcmF0ZSh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSByZXR1cm4gdmFsdWUgb2YgeW91ciBkZWNvcmF0b3JcXCdzIG1ldGhvZCB3YXMgbm90IHZhbGlkLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBNZXRhZGF0YSA9IHtcbiAgICBnbG9iYWw6IHRoZUdsb2JhbCxcbiAgICBub29wOiBmdW5jdGlvbiBub29wKCkge30sXG4gICAgcmVzb3VyY2U6ICdhdXJlbGlhOnJlc291cmNlJyxcbiAgICBwYXJhbVR5cGVzOiAnZGVzaWduOnBhcmFtdHlwZXMnLFxuICAgIHByb3BlcnRpZXM6ICdkZXNpZ246cHJvcGVydGllcycsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQobWV0YWRhdGFLZXksIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gTWV0YWRhdGEuZ2V0T3duKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHRhcmdldEtleSk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBNZXRhZGF0YS5nZXQobWV0YWRhdGFLZXksIE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpLCB0YXJnZXRLZXkpIDogcmVzdWx0O1xuICAgIH0sXG4gICAgZ2V0T3duOiBmdW5jdGlvbiBnZXRPd24obWV0YWRhdGFLZXksIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Lmhhc093blByb3BlcnR5KCdkZWNvcmF0b3JzJykpIHtcbiAgICAgICAgZW5zdXJlRGVjb3JhdG9ycyh0YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCB0YXJnZXRLZXkpO1xuICAgIH0sXG4gICAgZGVmaW5lOiBmdW5jdGlvbiBkZWZpbmUobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSk7XG4gICAgfSxcbiAgICBnZXRPckNyZWF0ZU93bjogZnVuY3Rpb24gZ2V0T3JDcmVhdGVPd24obWV0YWRhdGFLZXksIFR5cGUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gTWV0YWRhdGEuZ2V0T3duKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHRhcmdldEtleSk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSBuZXcgVHlwZSgpO1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCByZXN1bHQsIHRhcmdldCwgdGFyZ2V0S2V5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG5cbiAgZXhwb3J0cy5NZXRhZGF0YSA9IE1ldGFkYXRhO1xuICB2YXIgb3JpZ2luU3RvcmFnZSA9IG5ldyBNYXAoKTtcbiAgdmFyIHVua25vd25PcmlnaW4gPSBPYmplY3QuZnJlZXplKHsgbW9kdWxlSWQ6IHVuZGVmaW5lZCwgbW9kdWxlTWVtYmVyOiB1bmRlZmluZWQgfSk7XG5cbiAgdmFyIE9yaWdpbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT3JpZ2luKG1vZHVsZUlkLCBtb2R1bGVNZW1iZXIpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmlnaW4pO1xuXG4gICAgICB0aGlzLm1vZHVsZUlkID0gbW9kdWxlSWQ7XG4gICAgICB0aGlzLm1vZHVsZU1lbWJlciA9IG1vZHVsZU1lbWJlcjtcbiAgICB9XG5cbiAgICBPcmlnaW4uZ2V0ID0gZnVuY3Rpb24gZ2V0KGZuKSB7XG4gICAgICB2YXIgb3JpZ2luID0gb3JpZ2luU3RvcmFnZS5nZXQoZm4pO1xuXG4gICAgICBpZiAob3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgU3lzdGVtLmZvckVhY2hNb2R1bGUoZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBmb3IgKHZhciBfbmFtZSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGV4cCA9IHZhbHVlW19uYW1lXTtcbiAgICAgICAgICAgIGlmIChleHAgPT09IGZuKSB7XG4gICAgICAgICAgICAgIG9yaWdpblN0b3JhZ2Uuc2V0KGZuLCBvcmlnaW4gPSBuZXcgT3JpZ2luKGtleSwgX25hbWUpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSBmbikge1xuICAgICAgICAgICAgb3JpZ2luU3RvcmFnZS5zZXQoZm4sIG9yaWdpbiA9IG5ldyBPcmlnaW4oa2V5LCAnZGVmYXVsdCcpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmlnaW4gfHwgdW5rbm93bk9yaWdpbjtcbiAgICB9O1xuXG4gICAgT3JpZ2luLnNldCA9IGZ1bmN0aW9uIHNldChmbiwgb3JpZ2luKSB7XG4gICAgICBvcmlnaW5TdG9yYWdlLnNldChmbiwgb3JpZ2luKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE9yaWdpbjtcbiAgfSkoKTtcblxuICBleHBvcnRzLk9yaWdpbiA9IE9yaWdpbjtcblxuICB2YXIgRGVjb3JhdG9yQXBwbGljYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVjb3JhdG9yQXBwbGljYXRvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZWNvcmF0b3JBcHBsaWNhdG9yKTtcblxuICAgICAgdGhpcy5fZmlyc3QgPSBudWxsO1xuICAgICAgdGhpcy5fc2Vjb25kID0gbnVsbDtcbiAgICAgIHRoaXMuX3RoaXJkID0gbnVsbDtcbiAgICAgIHRoaXMuX3Jlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIERlY29yYXRvckFwcGxpY2F0b3IucHJvdG90eXBlLmRlY29yYXRvciA9IChmdW5jdGlvbiAoX2RlY29yYXRvcikge1xuICAgICAgZnVuY3Rpb24gZGVjb3JhdG9yKF94KSB7XG4gICAgICAgIHJldHVybiBfZGVjb3JhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIGRlY29yYXRvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9kZWNvcmF0b3IudG9TdHJpbmcoKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBkZWNvcmF0b3I7XG4gICAgfSkoZnVuY3Rpb24gKGRlY29yYXRvcikge1xuICAgICAgaWYgKHRoaXMuX2ZpcnN0ID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2ZpcnN0ID0gZGVjb3JhdG9yO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3NlY29uZCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9zZWNvbmQgPSBkZWNvcmF0b3I7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fdGhpcmQgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdGhpcmQgPSBkZWNvcmF0b3I7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVzdCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9yZXN0ID0gW107XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Jlc3QucHVzaChkZWNvcmF0b3IpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9KTtcblxuICAgIERlY29yYXRvckFwcGxpY2F0b3IucHJvdG90eXBlLl9kZWNvcmF0ZSA9IGZ1bmN0aW9uIF9kZWNvcmF0ZSh0YXJnZXQpIHtcbiAgICAgIGlmICh0aGlzLl9maXJzdCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9maXJzdCh0YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fc2Vjb25kICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3NlY29uZCh0YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fdGhpcmQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdGhpcmQodGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3QgPSB0aGlzLl9yZXN0O1xuICAgICAgaWYgKHJlc3QgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVzdC5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgcmVzdFtpXSh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBEZWNvcmF0b3JBcHBsaWNhdG9yO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuRGVjb3JhdG9yQXBwbGljYXRvciA9IERlY29yYXRvckFwcGxpY2F0b3I7XG4gIHZhciBEZWNvcmF0b3JzID0ge1xuICAgIGNvbmZpZ3VyZToge1xuICAgICAgcGFyYW1ldGVyaXplZERlY29yYXRvcjogZnVuY3Rpb24gcGFyYW1ldGVyaXplZERlY29yYXRvcihuYW1lLCBkZWNvcmF0b3IpIHtcbiAgICAgICAgRGVjb3JhdG9yc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgYXBwbGljYXRvciA9IG5ldyBEZWNvcmF0b3JBcHBsaWNhdG9yKCk7XG4gICAgICAgICAgcmV0dXJuIGFwcGxpY2F0b3JbbmFtZV0uYXBwbHkoYXBwbGljYXRvciwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBEZWNvcmF0b3JBcHBsaWNhdG9yLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb3JhdG9yKHJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgc2ltcGxlRGVjb3JhdG9yOiBmdW5jdGlvbiBzaW1wbGVEZWNvcmF0b3IobmFtZSwgZGVjb3JhdG9yKSB7XG4gICAgICAgIERlY29yYXRvcnNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0b3JBcHBsaWNhdG9yKCkuZGVjb3JhdG9yKGRlY29yYXRvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgRGVjb3JhdG9yQXBwbGljYXRvci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb3JhdG9yKGRlY29yYXRvcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBleHBvcnRzLkRlY29yYXRvcnMgPSBEZWNvcmF0b3JzO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJywgJy4uL3ZhbGlkYXRpb24vdXRpbGl0aWVzJywgJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1sb2NhbGUnXSwgZnVuY3Rpb24gKGV4cG9ydHMsIF92YWxpZGF0aW9uVXRpbGl0aWVzLCBfdmFsaWRhdGlvblZhbGlkYXRpb25Mb2NhbGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24oY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbik7XG5cbiAgICAgIHRoaXMuaXNSZXF1aXJlZCA9IGNvbmZpZyA/IGNvbmZpZy5nZXRWYWx1ZSgnYWxsUHJvcGVydGllc0FyZU1hbmRhdG9yeScpIDogZmFsc2U7XG4gICAgICB0aGlzLnZhbGlkYXRpb25SdWxlcyA9IFtdO1xuICAgICAgdGhpcy52YWxpZGF0aW9uQ29sbGVjdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMuaXNSZXF1aXJlZE1lc3NhZ2UgPSBudWxsO1xuICAgIH1cblxuICAgIFZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUobmV3VmFsdWUsIGxvY2FsZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKGxvY2FsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvY2FsZSA9IF92YWxpZGF0aW9uVmFsaWRhdGlvbkxvY2FsZS5WYWxpZGF0aW9uTG9jYWxlLlJlcG9zaXRvcnlbJ2RlZmF1bHQnXTtcbiAgICAgIH1cbiAgICAgIG5ld1ZhbHVlID0gX3ZhbGlkYXRpb25VdGlsaXRpZXMuVXRpbGl0aWVzLmdldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgIHZhciBleGVjdXRlUnVsZXMgPSB0cnVlO1xuXG4gICAgICBpZiAoX3ZhbGlkYXRpb25VdGlsaXRpZXMuVXRpbGl0aWVzLmlzRW1wdHlWYWx1ZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZXF1aXJlZCkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmlzUmVxdWlyZWRNZXNzYWdlID8gdHlwZW9mIHRoaXMuaXNSZXF1aXJlZE1lc3NhZ2UgPT09ICdmdW5jdGlvbicgPyB0aGlzLmlzUmVxdWlyZWRNZXNzYWdlKG5ld1ZhbHVlKSA6IHRoaXMuaXNSZXF1aXJlZE1lc3NhZ2UgOiBsb2NhbGUudHJhbnNsYXRlKCdpc1JlcXVpcmVkJyksXG4gICAgICAgICAgICBmYWlsaW5nUnVsZTogJ2lzUmVxdWlyZWQnLFxuICAgICAgICAgICAgbGF0ZXN0VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhlY3V0ZVJ1bGVzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNoZWNrcyA9IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGlzVmFsaWQ6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgICBmYWlsaW5nUnVsZTogbnVsbCxcbiAgICAgICAgbGF0ZXN0VmFsdWU6IG5ld1ZhbHVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKGV4ZWN1dGVSdWxlcykge1xuICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHZhciBydWxlID0gX3RoaXMudmFsaWRhdGlvblJ1bGVzW2ldO1xuICAgICAgICAgIGNoZWNrcyA9IGNoZWNrcy50aGVuKGZ1bmN0aW9uIChwcmV2aW91c1J1bGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1J1bGVSZXN1bHQuaXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzUnVsZVJlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBydWxlLnZhbGlkYXRlKG5ld1ZhbHVlLCBsb2NhbGUpLnRoZW4oZnVuY3Rpb24gKHRoaXNSdWxlUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNSdWxlUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJ1bGUuZXhwbGFpbigpLFxuICAgICAgICAgICAgICAgICAgICBmYWlsaW5nUnVsZTogcnVsZS5ydWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIXByZXZpb3VzUnVsZVJlc3VsdC5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnZhbGlkYXRlIGNhdWdodCBhbiB1bmV4cGVjdGVkIHJlc3VsdCB3aGlsZSB2YWxpZGF0aW5nIGl0XFwncyBjaGFpbiBvZiBydWxlcy4nKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1J1bGVSZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudmFsaWRhdGlvblJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgX2xvb3AoaSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciB2YWxpZGF0aW9uQ29sbGVjdGlvbiA9IF90aGlzLnZhbGlkYXRpb25Db2xsZWN0aW9uc1tpXTtcbiAgICAgICAgY2hlY2tzID0gY2hlY2tzLnRoZW4oZnVuY3Rpb24gKHByZXZpb3VzVmFsaWRhdGlvblJlc3VsdCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c1ZhbGlkYXRpb25SZXN1bHQuaXNWYWxpZCkgcmV0dXJuIHZhbGlkYXRpb25Db2xsZWN0aW9uLnZhbGlkYXRlKG5ld1ZhbHVlLCBsb2NhbGUpO2Vsc2UgcmV0dXJuIHByZXZpb3VzVmFsaWRhdGlvblJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudmFsaWRhdGlvbkNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9sb29wMihpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoZWNrcztcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkVmFsaWRhdGlvblJ1bGUgPSBmdW5jdGlvbiBhZGRWYWxpZGF0aW9uUnVsZSh2YWxpZGF0aW9uUnVsZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb25SdWxlLnZhbGlkYXRlID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignVGhhdFxcJ3Mgbm90IGEgdmFsaWQgdmFsaWRhdGlvblJ1bGUnKTtcbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVzLnB1c2godmFsaWRhdGlvblJ1bGUpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRWYWxpZGF0aW9uUnVsZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiBhZGRWYWxpZGF0aW9uUnVsZUNvbGxlY3Rpb24odmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbikge1xuICAgICAgdGhpcy52YWxpZGF0aW9uQ29sbGVjdGlvbnMucHVzaCh2YWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuaXNOb3RFbXB0eSA9IGZ1bmN0aW9uIGlzTm90RW1wdHkoKSB7XG4gICAgICB0aGlzLmlzUmVxdWlyZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jYW5CZUVtcHR5ID0gZnVuY3Rpb24gY2FuQmVFbXB0eSgpIHtcbiAgICAgIHRoaXMuaXNSZXF1aXJlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS53aXRoTWVzc2FnZSA9IGZ1bmN0aW9uIHdpdGhNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25SdWxlcy5sZW5ndGggPT09IDApIHRoaXMuaXNSZXF1aXJlZE1lc3NhZ2UgPSBtZXNzYWdlO2Vsc2UgdGhpcy52YWxpZGF0aW9uUnVsZXNbdGhpcy52YWxpZGF0aW9uUnVsZXMubGVuZ3RoIC0gMV0ud2l0aE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uO1xuICB9KSgpO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbiA9IFZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb247XG5cbiAgdmFyIFN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTd2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbihjb25kaXRpb25FeHByZXNzaW9uLCBjb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbik7XG5cbiAgICAgIHRoaXMuY29uZGl0aW9uRXhwcmVzc2lvbiA9IGNvbmRpdGlvbkV4cHJlc3Npb247XG4gICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgIHRoaXMuaW5uZXJDb2xsZWN0aW9ucyA9IFtdO1xuICAgICAgdGhpcy5kZWZhdWx0Q29sbGVjdGlvbiA9IG5ldyBWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uKHRoaXMuY29uZmlnKTtcbiAgICAgIHRoaXMuY2FzZUxhYmVsID0gJyc7XG4gICAgICB0aGlzLmRlZmF1bHRDYXNlTGFiZWwgPSB7IGRlc2NyaXB0aW9uOiAndGhpcyBpcyB0aGUgY2FzZSBsYWJlbCBmb3IgXFwnZGVmYXVsdFxcJycgfTtcbiAgICB9XG5cbiAgICBTd2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbi5wcm90b3R5cGVbJ2Nhc2UnXSA9IGZ1bmN0aW9uIF9jYXNlKGNhc2VMYWJlbCkge1xuICAgICAgdGhpcy5jYXNlTGFiZWwgPSBjYXNlTGFiZWw7XG4gICAgICB0aGlzLmdldEN1cnJlbnRDb2xsZWN0aW9uKGNhc2VMYWJlbCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIFN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZVsnZGVmYXVsdCddID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICB0aGlzLmNhc2VMYWJlbCA9IHRoaXMuZGVmYXVsdENhc2VMYWJlbDtcbiAgICB9O1xuXG4gICAgU3dpdGNoQ2FzZVZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmdldEN1cnJlbnRDb2xsZWN0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudENvbGxlY3Rpb24oY2FzZUxhYmVsKSB7XG4gICAgICB2YXIgY3JlYXRlSWZOb3RFeGlzdHMgPSBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICBpZiAoY2FzZUxhYmVsID09PSB0aGlzLmRlZmF1bHRDYXNlTGFiZWwpIHJldHVybiB0aGlzLmRlZmF1bHRDb2xsZWN0aW9uO1xuICAgICAgdmFyIGN1cnJlbnRDb2xsZWN0aW9uID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pbm5lckNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnRDb2xsZWN0aW9uID0gdGhpcy5pbm5lckNvbGxlY3Rpb25zW2ldO1xuICAgICAgICBpZiAoY3VycmVudENvbGxlY3Rpb24uY2FzZUxhYmVsID09PSBjYXNlTGFiZWwpIHJldHVybiBjdXJyZW50Q29sbGVjdGlvbi5jb2xsZWN0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKGNyZWF0ZUlmTm90RXhpc3RzKSB7XG4gICAgICAgIGN1cnJlbnRDb2xsZWN0aW9uID0ge1xuICAgICAgICAgIGNhc2VMYWJlbDogY2FzZUxhYmVsLFxuICAgICAgICAgIGNvbGxlY3Rpb246IG5ldyBWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uKHRoaXMuY29uZmlnKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlubmVyQ29sbGVjdGlvbnMucHVzaChjdXJyZW50Q29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiBjdXJyZW50Q29sbGVjdGlvbi5jb2xsZWN0aW9uO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIFN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKG5ld1ZhbHVlLCBsb2NhbGUpIHtcbiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcy5nZXRDdXJyZW50Q29sbGVjdGlvbih0aGlzLmNvbmRpdGlvbkV4cHJlc3Npb24obmV3VmFsdWUpKTtcbiAgICAgIGlmIChjb2xsZWN0aW9uICE9PSBudWxsKSByZXR1cm4gY29sbGVjdGlvbi52YWxpZGF0ZShuZXdWYWx1ZSwgbG9jYWxlKTtlbHNlIHJldHVybiB0aGlzLmRlZmF1bHRDb2xsZWN0aW9uLnZhbGlkYXRlKG5ld1ZhbHVlLCBsb2NhbGUpO1xuICAgIH07XG5cbiAgICBTd2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkVmFsaWRhdGlvblJ1bGUgPSBmdW5jdGlvbiBhZGRWYWxpZGF0aW9uUnVsZSh2YWxpZGF0aW9uUnVsZSkge1xuICAgICAgdmFyIGN1cnJlbnRDb2xsZWN0aW9uID0gdGhpcy5nZXRDdXJyZW50Q29sbGVjdGlvbih0aGlzLmNhc2VMYWJlbCwgdHJ1ZSk7XG4gICAgICBjdXJyZW50Q29sbGVjdGlvbi5hZGRWYWxpZGF0aW9uUnVsZSh2YWxpZGF0aW9uUnVsZSk7XG4gICAgfTtcblxuICAgIFN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRWYWxpZGF0aW9uUnVsZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiBhZGRWYWxpZGF0aW9uUnVsZUNvbGxlY3Rpb24odmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbikge1xuICAgICAgdmFyIGN1cnJlbnRDb2xsZWN0aW9uID0gdGhpcy5nZXRDdXJyZW50Q29sbGVjdGlvbih0aGlzLmNhc2VMYWJlbCwgdHJ1ZSk7XG4gICAgICBjdXJyZW50Q29sbGVjdGlvbi5hZGRWYWxpZGF0aW9uUnVsZUNvbGxlY3Rpb24odmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbik7XG4gICAgfTtcblxuICAgIFN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5pc05vdEVtcHR5ID0gZnVuY3Rpb24gaXNOb3RFbXB0eSgpIHtcbiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcy5nZXRDdXJyZW50Q29sbGVjdGlvbih0aGlzLmNhc2VMYWJlbCk7XG4gICAgICBpZiAoY29sbGVjdGlvbiAhPT0gbnVsbCkgY29sbGVjdGlvbi5pc05vdEVtcHR5KCk7ZWxzZSB0aGlzLmRlZmF1bHRDb2xsZWN0aW9uLmlzTm90RW1wdHkoKTtcbiAgICB9O1xuXG4gICAgU3dpdGNoQ2FzZVZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNhbkJlRW1wdHkgPSBmdW5jdGlvbiBjYW5CZUVtcHR5KCkge1xuICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzLmdldEN1cnJlbnRDb2xsZWN0aW9uKHRoaXMuY2FzZUxhYmVsKTtcbiAgICAgIGlmIChjb2xsZWN0aW9uICE9PSBudWxsKSBjb2xsZWN0aW9uLmNhbkJlRW1wdHkoKTtlbHNlIHRoaXMuZGVmYXVsdENvbGxlY3Rpb24uY2FuQmVFbXB0eSgpO1xuICAgIH07XG5cbiAgICBTd2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbi5wcm90b3R5cGUud2l0aE1lc3NhZ2UgPSBmdW5jdGlvbiB3aXRoTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXMuZ2V0Q3VycmVudENvbGxlY3Rpb24odGhpcy5jYXNlTGFiZWwpO1xuICAgICAgaWYgKGNvbGxlY3Rpb24gIT09IG51bGwpIGNvbGxlY3Rpb24ud2l0aE1lc3NhZ2UobWVzc2FnZSk7ZWxzZSB0aGlzLmRlZmF1bHRDb2xsZWN0aW9uLndpdGhNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3dpdGNoQ2FzZVZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb247XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5Td2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbiA9IFN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uO1xufSk7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJywgJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1ydWxlcycsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcnVsZXMtY29sbGVjdGlvbicsICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcHJvcGVydHknLCAnLi4vdmFsaWRhdGlvbi92YWxpZGF0aW9uLWNvbmZpZyddLCBmdW5jdGlvbiAoZXhwb3J0cywgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMsIF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbiwgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUHJvcGVydHksIF92YWxpZGF0aW9uVmFsaWRhdGlvbkNvbmZpZykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuICB2YXIgVmFsaWRhdGlvbkdyb3VwQnVpbGRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkdyb3VwQnVpbGRlcihvYnNlcnZlckxvY2F0b3IsIHZhbGlkYXRpb25Hcm91cCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIpO1xuXG4gICAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IG9ic2VydmVyTG9jYXRvcjtcbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9ucyA9IFtdO1xuICAgICAgdGhpcy52YWxpZGF0aW9uR3JvdXAgPSB2YWxpZGF0aW9uR3JvdXA7XG4gICAgfVxuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuZW5zdXJlID0gZnVuY3Rpb24gZW5zdXJlKHByb3BlcnR5TmFtZSwgY29uZmlndXJhdGlvbkNhbGxiYWNrKSB7XG4gICAgICB2YXIgbmV3VmFsaWRhdGlvblByb3BlcnR5ID0gbnVsbDtcbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9ucyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudmFsaWRhdGlvbkdyb3VwLnZhbGlkYXRpb25Qcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25Hcm91cC52YWxpZGF0aW9uUHJvcGVydGllc1tpXS5wcm9wZXJ0eU5hbWUgPT09IHByb3BlcnR5TmFtZSkge1xuICAgICAgICAgIG5ld1ZhbGlkYXRpb25Qcm9wZXJ0eSA9IHRoaXMudmFsaWRhdGlvbkdyb3VwLnZhbGlkYXRpb25Qcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY29uZmlndXJhdGlvbkNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2hlbiBjcmVhdGluZyB2YWxpZGF0aW9uIHJ1bGVzIG9uIGJpbmRpbmcgcGF0aCAnICsgcHJvcGVydHlOYW1lICsgJyBhIGNvbmZpZ3VyYXRpb24gY2FsbGJhY2sgZnVuY3Rpb24gd2FzIHByb3ZpZGVkLCBidXQgdmFsaWRhdGlvbiBydWxlcyBoYXZlIHByZXZpb3VzbHkgYWxyZWFkeSBiZWVuIGluc3RhbnRpYXRlZCBmb3IgdGhpcyBiaW5kaW5nIHBhdGgnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWxpZGF0aW9uUHJvcGVydHkgPT09IG51bGwpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5UmVzdWx0ID0gdGhpcy52YWxpZGF0aW9uR3JvdXAucmVzdWx0LmFkZFByb3BlcnR5KHByb3BlcnR5TmFtZSk7XG4gICAgICAgIHZhciBjb25maWcgPSBuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uQ29uZmlnLlZhbGlkYXRpb25Db25maWcodGhpcy52YWxpZGF0aW9uR3JvdXAuY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb25DYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjb25maWd1cmF0aW9uQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb25maWd1cmF0aW9uQ2FsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdWYWxpZGF0aW9uUHJvcGVydHkgPSBuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUHJvcGVydHkuVmFsaWRhdGlvblByb3BlcnR5KHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCBwcm9wZXJ0eU5hbWUsIHRoaXMudmFsaWRhdGlvbkdyb3VwLCBwcm9wZXJ0eVJlc3VsdCwgY29uZmlnKTtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uR3JvdXAudmFsaWRhdGlvblByb3BlcnRpZXMucHVzaChuZXdWYWxpZGF0aW9uUHJvcGVydHkpO1xuICAgICAgfVxuICAgICAgdGhpcy52YWxpZGF0aW9uUnVsZUNvbGxlY3Rpb25zLnVuc2hpZnQobmV3VmFsaWRhdGlvblByb3BlcnR5LmNvbGxlY3Rpb25PZlZhbGlkYXRpb25SdWxlcyk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uR3JvdXA7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmlzTm90RW1wdHkgPSBmdW5jdGlvbiBpc05vdEVtcHR5KCkge1xuICAgICAgdGhpcy52YWxpZGF0aW9uUnVsZUNvbGxlY3Rpb25zWzBdLmlzTm90RW1wdHkoKTtcbiAgICAgIHRoaXMuY2hlY2tMYXN0KCk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uR3JvdXA7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmNhbkJlRW1wdHkgPSBmdW5jdGlvbiBjYW5CZUVtcHR5KCkge1xuICAgICAgdGhpcy52YWxpZGF0aW9uUnVsZUNvbGxlY3Rpb25zWzBdLmNhbkJlRW1wdHkoKTtcbiAgICAgIHRoaXMuY2hlY2tMYXN0KCk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uR3JvdXA7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmlzR3JlYXRlclRoYW4gPSBmdW5jdGlvbiBpc0dyZWF0ZXJUaGFuKG1pbmltdW1WYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuTWluaW11bVZhbHVlVmFsaWRhdGlvblJ1bGUobWluaW11bVZhbHVlKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmlzR3JlYXRlclRoYW5PckVxdWFsVG8gPSBmdW5jdGlvbiBpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvKG1pbmltdW1WYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuTWluaW11bUluY2x1c2l2ZVZhbHVlVmFsaWRhdGlvblJ1bGUobWluaW11bVZhbHVlKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmlzQmV0d2VlbiA9IGZ1bmN0aW9uIGlzQmV0d2VlbihtaW5pbXVtVmFsdWUsIG1heGltdW1WYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuQmV0d2VlblZhbHVlVmFsaWRhdGlvblJ1bGUobWluaW11bVZhbHVlLCBtYXhpbXVtVmFsdWUpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuaXNJbiA9IGZ1bmN0aW9uIGlzSW4oY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuSW5Db2xsZWN0aW9uVmFsaWRhdGlvblJ1bGUoY29sbGVjdGlvbikpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5pc0xlc3NUaGFuID0gZnVuY3Rpb24gaXNMZXNzVGhhbihtYXhpbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLk1heGltdW1WYWx1ZVZhbGlkYXRpb25SdWxlKG1heGltdW1WYWx1ZSkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5pc0xlc3NUaGFuT3JFcXVhbFRvID0gZnVuY3Rpb24gaXNMZXNzVGhhbk9yRXF1YWxUbyhtYXhpbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLk1heGltdW1JbmNsdXNpdmVWYWx1ZVZhbGlkYXRpb25SdWxlKG1heGltdW1WYWx1ZSkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5pc0VxdWFsVG8gPSBmdW5jdGlvbiBpc0VxdWFsVG8ob3RoZXJWYWx1ZSwgb3RoZXJWYWx1ZUxhYmVsKSB7XG4gICAgICBpZiAoIW90aGVyVmFsdWVMYWJlbCkgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuRXF1YWxpdHlWYWxpZGF0aW9uUnVsZShvdGhlclZhbHVlKSk7ZWxzZSByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5FcXVhbGl0eVdpdGhPdGhlckxhYmVsVmFsaWRhdGlvblJ1bGUob3RoZXJWYWx1ZSwgb3RoZXJWYWx1ZUxhYmVsKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmlzTm90RXF1YWxUbyA9IGZ1bmN0aW9uIGlzTm90RXF1YWxUbyhvdGhlclZhbHVlLCBvdGhlclZhbHVlTGFiZWwpIHtcbiAgICAgIGlmICghb3RoZXJWYWx1ZUxhYmVsKSByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5JbkVxdWFsaXR5VmFsaWRhdGlvblJ1bGUob3RoZXJWYWx1ZSkpO2Vsc2UgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuSW5FcXVhbGl0eVdpdGhPdGhlckxhYmVsVmFsaWRhdGlvblJ1bGUob3RoZXJWYWx1ZSwgb3RoZXJWYWx1ZUxhYmVsKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmlzRW1haWwgPSBmdW5jdGlvbiBpc0VtYWlsKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuRW1haWxWYWxpZGF0aW9uUnVsZSgpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuaXNVUkwgPSBmdW5jdGlvbiBpc1VSTCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLlVSTFZhbGlkYXRpb25SdWxlKCkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5oYXNNaW5MZW5ndGggPSBmdW5jdGlvbiBoYXNNaW5MZW5ndGgobWluaW11bVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5NaW5pbXVtTGVuZ3RoVmFsaWRhdGlvblJ1bGUobWluaW11bVZhbHVlKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmhhc01heExlbmd0aCA9IGZ1bmN0aW9uIGhhc01heExlbmd0aChtYXhpbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLk1heGltdW1MZW5ndGhWYWxpZGF0aW9uUnVsZShtYXhpbXVtVmFsdWUpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuaGFzTGVuZ3RoQmV0d2VlbiA9IGZ1bmN0aW9uIGhhc0xlbmd0aEJldHdlZW4obWluaW11bVZhbHVlLCBtYXhpbXVtVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLkJldHdlZW5MZW5ndGhWYWxpZGF0aW9uUnVsZShtaW5pbXVtVmFsdWUsIG1heGltdW1WYWx1ZSkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5pc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuTnVtZXJpY1ZhbGlkYXRpb25SdWxlKCkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5jb250YWluc05vU3BhY2VzID0gZnVuY3Rpb24gY29udGFpbnNOb1NwYWNlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLk5vU3BhY2VzVmFsaWRhdGlvblJ1bGUoKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmNvbnRhaW5zT25seURpZ2l0cyA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seURpZ2l0cygpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLkRpZ2l0VmFsaWRhdGlvblJ1bGUoKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLmNvbnRhaW5zT25seUFscGhhID0gZnVuY3Rpb24gY29udGFpbnNPbmx5QWxwaGEoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5BbHBoYVZhbGlkYXRpb25SdWxlKCkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5jb250YWluc09ubHlBbHBoYU9yV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seUFscGhhT3JXaGl0ZXNwYWNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuQWxwaGFPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZSgpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuY29udGFpbnNPbmx5QWxwaGFudW1lcmljcyA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seUFscGhhbnVtZXJpY3MoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5BbHBoYU51bWVyaWNWYWxpZGF0aW9uUnVsZSgpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuY29udGFpbnNPbmx5QWxwaGFudW1lcmljc09yV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIGNvbnRhaW5zT25seUFscGhhbnVtZXJpY3NPcldoaXRlc3BhY2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5BbHBoYU51bWVyaWNPcldoaXRlc3BhY2VWYWxpZGF0aW9uUnVsZSgpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuaXNTdHJvbmdQYXNzd29yZCA9IGZ1bmN0aW9uIGlzU3Ryb25nUGFzc3dvcmQobWluaW11bUNvbXBsZXhpdHlMZXZlbCkge1xuICAgICAgaWYgKG1pbmltdW1Db21wbGV4aXR5TGV2ZWwgPT09IDQpIHJldHVybiB0aGlzLnBhc3Nlc1J1bGUobmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzLlN0cm9uZ1Bhc3N3b3JkVmFsaWRhdGlvblJ1bGUoKSk7ZWxzZSByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5NZWRpdW1QYXNzd29yZFZhbGlkYXRpb25SdWxlKG1pbmltdW1Db21wbGV4aXR5TGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGUuY29udGFpbnNPbmx5ID0gZnVuY3Rpb24gY29udGFpbnNPbmx5KHJlZ2V4KSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzZXNSdWxlKG5ldyBfdmFsaWRhdGlvblZhbGlkYXRpb25SdWxlcy5Db250YWluc09ubHlWYWxpZGF0aW9uUnVsZShyZWdleCkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlcyhyZWdleCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuUmVnZXhWYWxpZGF0aW9uUnVsZShyZWdleCkpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5wYXNzZXMgPSBmdW5jdGlvbiBwYXNzZXMoY3VzdG9tRnVuY3Rpb24sIHRocmVzaG9sZCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFzc2VzUnVsZShuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXMuQ3VzdG9tRnVuY3Rpb25WYWxpZGF0aW9uUnVsZShjdXN0b21GdW5jdGlvbiwgdGhyZXNob2xkKSk7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlLnBhc3Nlc1J1bGUgPSBmdW5jdGlvbiBwYXNzZXNSdWxlKHZhbGlkYXRpb25SdWxlKSB7XG5cbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9uc1swXS5hZGRWYWxpZGF0aW9uUnVsZSh2YWxpZGF0aW9uUnVsZSk7XG4gICAgICB0aGlzLmNoZWNrTGFzdCgpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkdyb3VwO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5jaGVja0xhc3QgPSBmdW5jdGlvbiBjaGVja0xhc3QoKSB7XG4gICAgICB2YXIgdmFsaWRhdGlvblByb3BlcnR5ID0gdGhpcy52YWxpZGF0aW9uR3JvdXAudmFsaWRhdGlvblByb3BlcnRpZXNbdGhpcy52YWxpZGF0aW9uR3JvdXAudmFsaWRhdGlvblByb3BlcnRpZXMubGVuZ3RoIC0gMV07XG4gICAgICB2YWxpZGF0aW9uUHJvcGVydHkudmFsaWRhdGVDdXJyZW50VmFsdWUoZmFsc2UpO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS53aXRoTWVzc2FnZSA9IGZ1bmN0aW9uIHdpdGhNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9uc1swXS53aXRoTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgIHRoaXMuY2hlY2tMYXN0KCk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uR3JvdXA7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlWydpZiddID0gZnVuY3Rpb24gX2lmKGNvbmRpdGlvbkV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBjb25kaXRpb25hbENvbGxlY3Rpb24gPSBuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLlN3aXRjaENhc2VWYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uKGNvbmRpdGlvbkV4cHJlc3Npb24pO1xuICAgICAgY29uZGl0aW9uYWxDb2xsZWN0aW9uWydjYXNlJ10odHJ1ZSk7XG4gICAgICB0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnNbMF0uYWRkVmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9uKGNvbmRpdGlvbmFsQ29sbGVjdGlvbik7XG4gICAgICB0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnMudW5zaGlmdChjb25kaXRpb25hbENvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkdyb3VwO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZVsnZWxzZSddID0gZnVuY3Rpb24gX2Vsc2UoKSB7XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9uc1swXVsnZGVmYXVsdCddKSB0aHJvdyAnSW52YWxpZCBzdGF0ZW1lbnQ6IFxcJ2Vsc2VcXCcnO1xuXG4gICAgICB0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnNbMF1bJ2RlZmF1bHQnXSgpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkdyb3VwO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5lbmRJZiA9IGZ1bmN0aW9uIGVuZElmKCkge1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnNbMF1bJ2RlZmF1bHQnXSkgdGhyb3cgJ0ludmFsaWQgc3RhdGVtZW50OiBcXCdlbmRJZlxcJyc7XG4gICAgICB0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnMuc2hpZnQoKTtcbiAgICAgIHRoaXMuY2hlY2tMYXN0KCk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uR3JvdXA7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlWydzd2l0Y2gnXSA9IGZ1bmN0aW9uIF9zd2l0Y2goY29uZGl0aW9uRXhwcmVzc2lvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbkV4cHJlc3Npb247XG4gICAgICBpZiAoY29uZGl0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfdGhpcy52YWxpZGF0aW9uR3JvdXAudmFsaWRhdGlvblByb3BlcnRpZXNbX3RoaXMudmFsaWRhdGlvbkdyb3VwLnZhbGlkYXRpb25Qcm9wZXJ0aWVzLmxlbmd0aCAtIDFdLm9ic2VydmVyO1xuICAgICAgICAgIGNvbmRpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5nZXRWYWx1ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG4gICAgICB2YXIgY29uZGl0aW9uYWxDb2xsZWN0aW9uID0gbmV3IF92YWxpZGF0aW9uVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbi5Td2l0Y2hDYXNlVmFsaWRhdGlvblJ1bGVzQ29sbGVjdGlvbihjb25kaXRpb24pO1xuICAgICAgdGhpcy52YWxpZGF0aW9uUnVsZUNvbGxlY3Rpb25zWzBdLmFkZFZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbihjb25kaXRpb25hbENvbGxlY3Rpb24pO1xuICAgICAgdGhpcy52YWxpZGF0aW9uUnVsZUNvbGxlY3Rpb25zLnVuc2hpZnQoY29uZGl0aW9uYWxDb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25Hcm91cDtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvbkdyb3VwQnVpbGRlci5wcm90b3R5cGVbJ2Nhc2UnXSA9IGZ1bmN0aW9uIF9jYXNlKGNhc2VMYWJlbCkge1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnNbMF1bJ2RlZmF1bHQnXSkgdGhyb3cgJ0ludmFsaWQgc3RhdGVtZW50OiBcXCdjYXNlXFwnJztcbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9uc1swXVsnY2FzZSddKGNhc2VMYWJlbCk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uR3JvdXA7XG4gICAgfTtcblxuICAgIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXIucHJvdG90eXBlWydkZWZhdWx0J10gPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgIGlmICghdGhpcy52YWxpZGF0aW9uUnVsZUNvbGxlY3Rpb25zWzBdWydkZWZhdWx0J10pIHRocm93ICdJbnZhbGlkIHN0YXRlbWVudDogXFwnY2FzZVxcJyc7XG4gICAgICB0aGlzLnZhbGlkYXRpb25SdWxlQ29sbGVjdGlvbnNbMF1bJ2RlZmF1bHQnXSgpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkdyb3VwO1xuICAgIH07XG5cbiAgICBWYWxpZGF0aW9uR3JvdXBCdWlsZGVyLnByb3RvdHlwZS5lbmRTd2l0Y2ggPSBmdW5jdGlvbiBlbmRTd2l0Y2goKSB7XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9uc1swXVsnZGVmYXVsdCddKSB0aHJvdyAnSW52YWxpZCBzdGF0ZW1lbnQ6IFxcJ2VuZElmXFwnJztcbiAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVDb2xsZWN0aW9ucy5zaGlmdCgpO1xuICAgICAgdGhpcy5jaGVja0xhc3QoKTtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25Hcm91cDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25Hcm91cEJ1aWxkZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5WYWxpZGF0aW9uR3JvdXBCdWlsZGVyID0gVmFsaWRhdGlvbkdyb3VwQnVpbGRlcjtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImdpdGh1Yjp6bG9pcm9jay9jb3JlLWpzQDAuOC40L2luZGV4XCIpOyIsIi8qICovIFxucmVxdWlyZShcIi4vbW9kdWxlcy9lczVcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zeW1ib2xcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2ZcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXNcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYubnVtYmVyLnN0YXRpY3NcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5yYXdcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3JcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGhcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXNcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0XCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbVwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5Lm9mXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3JcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW5cIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXhcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWdleHBcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5wcm9taXNlXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYubWFwXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYuc2V0XCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczYud2Vhay1tYXBcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi53ZWFrLXNldFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnJlZmxlY3RcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlc1wiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnN0cmluZy5hdFwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnN0cmluZy5scGFkXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczcuc3RyaW5nLnJwYWRcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5yZWdleHAuZXNjYXBlXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5vYmplY3QudG8tYXJyYXlcIik7XG5yZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvblwiKTtcbnJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnNldC50by1qc29uXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy9qcy5hcnJheS5zdGF0aWNzXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy93ZWIudGltZXJzXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlXCIpO1xucmVxdWlyZShcIi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9tb2R1bGVzLyRcIikuY29yZTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIGN0eCA9IHJlcXVpcmUoXCIuLyQuY3R4XCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBhc3NpZ24gPSByZXF1aXJlKFwiLi8kLmFzc2lnblwiKSxcbiAgICBrZXlPZiA9IHJlcXVpcmUoXCIuLyQua2V5b2ZcIiksXG4gICAgSVRFUiA9IHJlcXVpcmUoXCIuLyQudWlkXCIpLnNhZmUoJ2l0ZXInKSxcbiAgICBhc3NlcnQgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKSxcbiAgICAkaXRlciA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKSxcbiAgICBmb3JPZiA9IHJlcXVpcmUoXCIuLyQuZm9yLW9mXCIpLFxuICAgIHN0ZXAgPSAkaXRlci5zdGVwLFxuICAgIGdldEtleXMgPSAkLmdldEtleXMsXG4gICAgdG9PYmplY3QgPSAkLnRvT2JqZWN0LFxuICAgIGhhcyA9ICQuaGFzO1xuZnVuY3Rpb24gRGljdChpdGVyYWJsZSkge1xuICB2YXIgZGljdCA9ICQuY3JlYXRlKG51bGwpO1xuICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCRpdGVyLmlzKGl0ZXJhYmxlKSkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIHRydWUsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgZGljdFtrZXldID0gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9IGVsc2VcbiAgICAgIGFzc2lnbihkaWN0LCBpdGVyYWJsZSk7XG4gIH1cbiAgcmV0dXJuIGRpY3Q7XG59XG5EaWN0LnByb3RvdHlwZSA9IG51bGw7XG5mdW5jdGlvbiBEaWN0SXRlcmF0b3IoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgJC5zZXQodGhpcywgSVRFUiwge1xuICAgIG86IHRvT2JqZWN0KGl0ZXJhdGVkKSxcbiAgICBhOiBnZXRLZXlzKGl0ZXJhdGVkKSxcbiAgICBpOiAwLFxuICAgIGs6IGtpbmRcbiAgfSk7XG59XG4kaXRlci5jcmVhdGUoRGljdEl0ZXJhdG9yLCAnRGljdCcsIGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlciA9IHRoaXNbSVRFUl0sXG4gICAgICBPID0gaXRlci5vLFxuICAgICAga2V5cyA9IGl0ZXIuYSxcbiAgICAgIGtpbmQgPSBpdGVyLmssXG4gICAgICBrZXk7XG4gIGRvIHtcbiAgICBpZiAoaXRlci5pID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpdGVyLm8gPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICB9XG4gIH0gd2hpbGUgKCFoYXMoTywga2V5ID0ga2V5c1tpdGVyLmkrK10pKTtcbiAgaWYgKGtpbmQgPT0gJ2tleXMnKVxuICAgIHJldHVybiBzdGVwKDAsIGtleSk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKVxuICAgIHJldHVybiBzdGVwKDAsIE9ba2V5XSk7XG4gIHJldHVybiBzdGVwKDAsIFtrZXksIE9ba2V5XV0pO1xufSk7XG5mdW5jdGlvbiBjcmVhdGVEaWN0SXRlcihraW5kKSB7XG4gIHJldHVybiBmdW5jdGlvbihpdCkge1xuICAgIHJldHVybiBuZXcgRGljdEl0ZXJhdG9yKGl0LCBraW5kKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdlbmVyaWMoQSwgQikge1xuICByZXR1cm4gdHlwZW9mIEEgPT0gJ2Z1bmN0aW9uJyA/IEEgOiBCO1xufVxuZnVuY3Rpb24gY3JlYXRlRGljdE1ldGhvZChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDEsXG4gICAgICBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpLFxuICAgICAgICBPID0gdG9PYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcmVzdWx0ID0gSVNfTUFQIHx8IFRZUEUgPT0gNyB8fCBUWVBFID09IDIgPyBuZXcgKGdlbmVyaWModGhpcywgRGljdCkpIDogdW5kZWZpbmVkLFxuICAgICAgICBrZXksXG4gICAgICAgIHZhbCxcbiAgICAgICAgcmVzO1xuICAgIGZvciAoa2V5IGluIE8pXG4gICAgICBpZiAoaGFzKE8sIGtleSkpIHtcbiAgICAgICAgdmFsID0gT1trZXldO1xuICAgICAgICByZXMgPSBmKHZhbCwga2V5LCBvYmplY3QpO1xuICAgICAgICBpZiAoVFlQRSkge1xuICAgICAgICAgIGlmIChJU19NQVApXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHJlcztcbiAgICAgICAgICBlbHNlIGlmIChyZXMpXG4gICAgICAgICAgICBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHJlc3VsdFtyZXNbMF1dID0gcmVzWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKElTX0VWRVJZKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgcmV0dXJuIFRZUEUgPT0gMyB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlRGljdFJlZHVjZShJU19UVVJOKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIG1hcGZuLCBpbml0KSB7XG4gICAgYXNzZXJ0LmZuKG1hcGZuKTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KG9iamVjdCksXG4gICAgICAgIGtleXMgPSBnZXRLZXlzKE8pLFxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIG1lbW8sXG4gICAgICAgIGtleSxcbiAgICAgICAgcmVzdWx0O1xuICAgIGlmIChJU19UVVJOKSB7XG4gICAgICBtZW1vID0gaW5pdCA9PSB1bmRlZmluZWQgPyBuZXcgKGdlbmVyaWModGhpcywgRGljdCkpIDogT2JqZWN0KGluaXQpO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgIGFzc2VydChsZW5ndGgsICdSZWR1Y2Ugb2YgZW1wdHkgb2JqZWN0IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgbWVtbyA9IE9ba2V5c1tpKytdXTtcbiAgICB9IGVsc2VcbiAgICAgIG1lbW8gPSBPYmplY3QoaW5pdCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpXG4gICAgICBpZiAoaGFzKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgICAgcmVzdWx0ID0gbWFwZm4obWVtbywgT1trZXldLCBrZXksIG9iamVjdCk7XG4gICAgICAgIGlmIChJU19UVVJOKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgbWVtbyA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn1cbnZhciBmaW5kS2V5ID0gY3JlYXRlRGljdE1ldGhvZCg2KTtcbiRkZWYoJGRlZi5HICsgJGRlZi5GLCB7RGljdDogRGljdH0pO1xuJGRlZigkZGVmLlMsICdEaWN0Jywge1xuICBrZXlzOiBjcmVhdGVEaWN0SXRlcigna2V5cycpLFxuICB2YWx1ZXM6IGNyZWF0ZURpY3RJdGVyKCd2YWx1ZXMnKSxcbiAgZW50cmllczogY3JlYXRlRGljdEl0ZXIoJ2VudHJpZXMnKSxcbiAgZm9yRWFjaDogY3JlYXRlRGljdE1ldGhvZCgwKSxcbiAgbWFwOiBjcmVhdGVEaWN0TWV0aG9kKDEpLFxuICBmaWx0ZXI6IGNyZWF0ZURpY3RNZXRob2QoMiksXG4gIHNvbWU6IGNyZWF0ZURpY3RNZXRob2QoMyksXG4gIGV2ZXJ5OiBjcmVhdGVEaWN0TWV0aG9kKDQpLFxuICBmaW5kOiBjcmVhdGVEaWN0TWV0aG9kKDUpLFxuICBmaW5kS2V5OiBmaW5kS2V5LFxuICBtYXBQYWlyczogY3JlYXRlRGljdE1ldGhvZCg3KSxcbiAgcmVkdWNlOiBjcmVhdGVEaWN0UmVkdWNlKGZhbHNlKSxcbiAgdHVybjogY3JlYXRlRGljdFJlZHVjZSh0cnVlKSxcbiAga2V5T2Y6IGtleU9mLFxuICBpbmNsdWRlczogZnVuY3Rpb24ob2JqZWN0LCBlbCkge1xuICAgIHJldHVybiAoZWwgPT0gZWwgPyBrZXlPZihvYmplY3QsIGVsKSA6IGZpbmRLZXkob2JqZWN0LCBmdW5jdGlvbihpdCkge1xuICAgICAgcmV0dXJuIGl0ICE9IGl0O1xuICAgIH0pKSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuICBoYXM6IGhhcyxcbiAgZ2V0OiBmdW5jdGlvbihvYmplY3QsIGtleSkge1xuICAgIGlmIChoYXMob2JqZWN0LCBrZXkpKVxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9LFxuICBzZXQ6ICQuZGVmLFxuICBpc0RpY3Q6IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuICQuaXNPYmplY3QoaXQpICYmICQuZ2V0UHJvdG8oaXQpID09PSBEaWN0LnByb3RvdHlwZTtcbiAgfVxufSk7XG4iLCIvKiAqLyBcbnZhciBjb3JlID0gcmVxdWlyZShcIi4vJFwiKS5jb3JlLFxuICAgICRpdGVyID0gcmVxdWlyZShcIi4vJC5pdGVyXCIpO1xuY29yZS5pc0l0ZXJhYmxlID0gJGl0ZXIuaXM7XG5jb3JlLmdldEl0ZXJhdG9yID0gJGl0ZXIuZ2V0O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgY3R4ID0gcmVxdWlyZShcIi4vJC5jdHhcIiksXG4gICAgc2FmZSA9IHJlcXVpcmUoXCIuLyQudWlkXCIpLnNhZmUsXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgICRpdGVyID0gcmVxdWlyZShcIi4vJC5pdGVyXCIpLFxuICAgIGZvck9mID0gcmVxdWlyZShcIi4vJC5mb3Itb2ZcIiksXG4gICAgRU5UUklFUyA9IHNhZmUoJ2VudHJpZXMnKSxcbiAgICBGTiA9IHNhZmUoJ2ZuJyksXG4gICAgSVRFUiA9IHNhZmUoJ2l0ZXInKSxcbiAgICBjYWxsID0gcmVxdWlyZShcIi4vJC5pdGVyLWNhbGxcIiksXG4gICAgZ2V0SXRlcmF0b3IgPSAkaXRlci5nZXQsXG4gICAgc2V0SXRlcmF0b3IgPSAkaXRlci5zZXQsXG4gICAgY3JlYXRlSXRlcmF0b3IgPSAkaXRlci5jcmVhdGU7XG5mdW5jdGlvbiAkZm9yKGl0ZXJhYmxlLCBlbnRyaWVzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiAkZm9yKSlcbiAgICByZXR1cm4gbmV3ICRmb3IoaXRlcmFibGUsIGVudHJpZXMpO1xuICB0aGlzW0lURVJdID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICB0aGlzW0VOVFJJRVNdID0gISFlbnRyaWVzO1xufVxuY3JlYXRlSXRlcmF0b3IoJGZvciwgJ1dyYXBwZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXNbSVRFUl0ubmV4dCgpO1xufSk7XG52YXIgJGZvclByb3RvID0gJGZvci5wcm90b3R5cGU7XG5zZXRJdGVyYXRvcigkZm9yUHJvdG8sIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpc1tJVEVSXTtcbn0pO1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5JdGVyYXRvcihuZXh0KSB7XG4gIGZ1bmN0aW9uIEl0ZXJhdG9yKGl0ZXIsIGZuLCB0aGF0KSB7XG4gICAgdGhpc1tJVEVSXSA9IGdldEl0ZXJhdG9yKGl0ZXIpO1xuICAgIHRoaXNbRU5UUklFU10gPSBpdGVyW0VOVFJJRVNdO1xuICAgIHRoaXNbRk5dID0gY3R4KGZuLCB0aGF0LCBpdGVyW0VOVFJJRVNdID8gMiA6IDEpO1xuICB9XG4gIGNyZWF0ZUl0ZXJhdG9yKEl0ZXJhdG9yLCAnQ2hhaW4nLCBuZXh0LCAkZm9yUHJvdG8pO1xuICBzZXRJdGVyYXRvcihJdGVyYXRvci5wcm90b3R5cGUsICQudGhhdCk7XG4gIHJldHVybiBJdGVyYXRvcjtcbn1cbnZhciBNYXBJdGVyID0gY3JlYXRlQ2hhaW5JdGVyYXRvcihmdW5jdGlvbigpIHtcbiAgdmFyIHN0ZXAgPSB0aGlzW0lURVJdLm5leHQoKTtcbiAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiAkaXRlci5zdGVwKDAsIGNhbGwodGhpc1tJVEVSXSwgdGhpc1tGTl0sIHN0ZXAudmFsdWUsIHRoaXNbRU5UUklFU10pKTtcbn0pO1xudmFyIEZpbHRlckl0ZXIgPSBjcmVhdGVDaGFpbkl0ZXJhdG9yKGZ1bmN0aW9uKCkge1xuICBmb3IgKDsgOyApIHtcbiAgICB2YXIgc3RlcCA9IHRoaXNbSVRFUl0ubmV4dCgpO1xuICAgIGlmIChzdGVwLmRvbmUgfHwgY2FsbCh0aGlzW0lURVJdLCB0aGlzW0ZOXSwgc3RlcC52YWx1ZSwgdGhpc1tFTlRSSUVTXSkpXG4gICAgICByZXR1cm4gc3RlcDtcbiAgfVxufSk7XG5yZXF1aXJlKFwiLi8kLm1peFwiKSgkZm9yUHJvdG8sIHtcbiAgb2Y6IGZ1bmN0aW9uKGZuLCB0aGF0KSB7XG4gICAgZm9yT2YodGhpcywgdGhpc1tFTlRSSUVTXSwgZm4sIHRoYXQpO1xuICB9LFxuICBhcnJheTogZnVuY3Rpb24oZm4sIHRoYXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yT2YoZm4gIT0gdW5kZWZpbmVkID8gdGhpcy5tYXAoZm4sIHRoYXQpIDogdGhpcywgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIGZpbHRlcjogZnVuY3Rpb24oZm4sIHRoYXQpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlckl0ZXIodGhpcywgZm4sIHRoYXQpO1xuICB9LFxuICBtYXA6IGZ1bmN0aW9uKGZuLCB0aGF0KSB7XG4gICAgcmV0dXJuIG5ldyBNYXBJdGVyKHRoaXMsIGZuLCB0aGF0KTtcbiAgfVxufSk7XG4kZm9yLmlzSXRlcmFibGUgPSAkaXRlci5pcztcbiRmb3IuZ2V0SXRlcmF0b3IgPSBnZXRJdGVyYXRvcjtcbiRkZWYoJGRlZi5HICsgJGRlZi5GLCB7JGZvcjogJGZvcn0pO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgIHBhcnRpYWwgPSByZXF1aXJlKFwiLi8kLnBhcnRpYWxcIik7XG4kZGVmKCRkZWYuRyArICRkZWYuRiwge2RlbGF5OiBmdW5jdGlvbih0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyAoJC5jb3JlLlByb21pc2UgfHwgJC5nLlByb21pc2UpKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHNldFRpbWVvdXQocGFydGlhbC5jYWxsKHJlc29sdmUsIHRydWUpLCB0aW1lKTtcbiAgICB9KTtcbiAgfX0pO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpO1xuJC5jb3JlLl8gPSAkLnBhdGguXyA9ICQucGF0aC5fIHx8IHt9O1xuJGRlZigkZGVmLlAgKyAkZGVmLkYsICdGdW5jdGlvbicsIHtwYXJ0OiByZXF1aXJlKFwiLi8kLnBhcnRpYWxcIil9KTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBvd25LZXlzID0gcmVxdWlyZShcIi4vJC5vd24ta2V5c1wiKTtcbmZ1bmN0aW9uIGRlZmluZSh0YXJnZXQsIG1peGluKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cygkLnRvT2JqZWN0KG1peGluKSksXG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgIGkgPSAwLFxuICAgICAga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaSlcbiAgICAkLnNldERlc2ModGFyZ2V0LCBrZXkgPSBrZXlzW2krK10sICQuZ2V0RGVzYyhtaXhpbiwga2V5KSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG4kZGVmKCRkZWYuUyArICRkZWYuRiwgJ09iamVjdCcsIHtcbiAgaXNPYmplY3Q6ICQuaXNPYmplY3QsXG4gIGNsYXNzb2Y6IHJlcXVpcmUoXCIuLyQuY29mXCIpLmNsYXNzb2YsXG4gIGRlZmluZTogZGVmaW5lLFxuICBtYWtlOiBmdW5jdGlvbihwcm90bywgbWl4aW4pIHtcbiAgICByZXR1cm4gZGVmaW5lKCQuY3JlYXRlKHByb3RvKSwgbWl4aW4pO1xuICB9XG59KTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBhc3NlcnRGdW5jdGlvbiA9IHJlcXVpcmUoXCIuLyQuYXNzZXJ0XCIpLmZuO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYsICdBcnJheScsIHt0dXJuOiBmdW5jdGlvbihmbiwgdGFyZ2V0KSB7XG4gICAgYXNzZXJ0RnVuY3Rpb24oZm4pO1xuICAgIHZhciBtZW1vID0gdGFyZ2V0ID09IHVuZGVmaW5lZCA/IFtdIDogT2JqZWN0KHRhcmdldCksXG4gICAgICAgIE8gPSAkLkVTNU9iamVjdCh0aGlzKSxcbiAgICAgICAgbGVuZ3RoID0gJC50b0xlbmd0aChPLmxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gMDtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpXG4gICAgICBpZiAoZm4obWVtbywgT1tpbmRleF0sIGluZGV4KyssIHRoaXMpID09PSBmYWxzZSlcbiAgICAgICAgYnJlYWs7XG4gICAgcmV0dXJuIG1lbW87XG4gIH19KTtcbnJlcXVpcmUoXCIuLyQudW5zY29wZVwiKSgndHVybicpO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgSVRFUiA9IHJlcXVpcmUoXCIuLyQudWlkXCIpLnNhZmUoJ2l0ZXInKTtcbnJlcXVpcmUoXCIuLyQuaXRlci1kZWZpbmVcIikoTnVtYmVyLCAnTnVtYmVyJywgZnVuY3Rpb24oaXRlcmF0ZWQpIHtcbiAgJC5zZXQodGhpcywgSVRFUiwge1xuICAgIGw6ICQudG9MZW5ndGgoaXRlcmF0ZWQpLFxuICAgIGk6IDBcbiAgfSk7XG59LCBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZXIgPSB0aGlzW0lURVJdLFxuICAgICAgaSA9IGl0ZXIuaSsrLFxuICAgICAgZG9uZSA9IGkgPj0gaXRlci5sO1xuICByZXR1cm4ge1xuICAgIGRvbmU6IGRvbmUsXG4gICAgdmFsdWU6IGRvbmUgPyB1bmRlZmluZWQgOiBpXG4gIH07XG59KTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBpbnZva2UgPSByZXF1aXJlKFwiLi8kLmludm9rZVwiKSxcbiAgICBtZXRob2RzID0ge307XG5tZXRob2RzLnJhbmRvbSA9IGZ1bmN0aW9uKGxpbSkge1xuICB2YXIgYSA9ICt0aGlzLFxuICAgICAgYiA9IGxpbSA9PSB1bmRlZmluZWQgPyAwIDogK2xpbSxcbiAgICAgIG0gPSBNYXRoLm1pbihhLCBiKTtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAoTWF0aC5tYXgoYSwgYikgLSBtKSArIG07XG59O1xuaWYgKCQuRlcpXG4gICQuZWFjaC5jYWxsKCgncm91bmQsZmxvb3IsY2VpbCxhYnMsc2luLGFzaW4sY29zLGFjb3MsdGFuLGF0YW4sZXhwLHNxcnQsbWF4LG1pbixwb3csYXRhbjIsJyArICdhY29zaCxhc2luaCxhdGFuaCxjYnJ0LGNsejMyLGNvc2gsZXhwbTEsaHlwb3QsaW11bCxsb2cxcCxsb2cxMCxsb2cyLHNpZ24sc2luaCx0YW5oLHRydW5jJykuc3BsaXQoJywnKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGZuID0gTWF0aFtrZXldO1xuICAgIGlmIChmbilcbiAgICAgIG1ldGhvZHNba2V5XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFsrdGhpc10sXG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKVxuICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MpO1xuICAgICAgfTtcbiAgfSk7XG4kZGVmKCRkZWYuUCArICRkZWYuRiwgJ051bWJlcicsIG1ldGhvZHMpO1xuIiwiLyogKi8gXG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgIHJlcGxhY2VyID0gcmVxdWlyZShcIi4vJC5yZXBsYWNlclwiKTtcbnZhciBlc2NhcGVIVE1MRGljdCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyZhcG9zOydcbn0sXG4gICAgdW5lc2NhcGVIVE1MRGljdCA9IHt9LFxuICAgIGtleTtcbmZvciAoa2V5IGluIGVzY2FwZUhUTUxEaWN0KVxuICB1bmVzY2FwZUhUTUxEaWN0W2VzY2FwZUhUTUxEaWN0W2tleV1dID0ga2V5O1xuJGRlZigkZGVmLlAgKyAkZGVmLkYsICdTdHJpbmcnLCB7XG4gIGVzY2FwZUhUTUw6IHJlcGxhY2VyKC9bJjw+XCInXS9nLCBlc2NhcGVIVE1MRGljdCksXG4gIHVuZXNjYXBlSFRNTDogcmVwbGFjZXIoLyYoPzphbXB8bHR8Z3R8cXVvdHxhcG9zKTsvZywgdW5lc2NhcGVIVE1MRGljdClcbn0pO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgIGNvcmUgPSAkLmNvcmUsXG4gICAgZm9ybWF0UmVnRXhwID0gL1xcYlxcd1xcdz9cXGIvZyxcbiAgICBmbGV4aW9SZWdFeHAgPSAvOiguKilcXHwoLiopJC8sXG4gICAgbG9jYWxlcyA9IHt9LFxuICAgIGN1cnJlbnQgPSAnZW4nLFxuICAgIFNFQ09ORFMgPSAnU2Vjb25kcycsXG4gICAgTUlOVVRFUyA9ICdNaW51dGVzJyxcbiAgICBIT1VSUyA9ICdIb3VycycsXG4gICAgREFURSA9ICdEYXRlJyxcbiAgICBNT05USCA9ICdNb250aCcsXG4gICAgWUVBUiA9ICdGdWxsWWVhcic7XG5mdW5jdGlvbiBseihudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtYXQocHJlZml4KSB7XG4gIHJldHVybiBmdW5jdGlvbih0ZW1wbGF0ZSwgbG9jYWxlKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICBkaWN0ID0gbG9jYWxlc1skLmhhcyhsb2NhbGVzLCBsb2NhbGUpID8gbG9jYWxlIDogY3VycmVudF07XG4gICAgZnVuY3Rpb24gZ2V0KHVuaXQpIHtcbiAgICAgIHJldHVybiB0aGF0W3ByZWZpeCArIHVuaXRdKCk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodGVtcGxhdGUpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICBzd2l0Y2ggKHBhcnQpIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgcmV0dXJuIGdldChTRUNPTkRTKTtcbiAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgIHJldHVybiBseihnZXQoU0VDT05EUykpO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICByZXR1cm4gZ2V0KE1JTlVURVMpO1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgcmV0dXJuIGx6KGdldChNSU5VVEVTKSk7XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgIHJldHVybiBnZXQoSE9VUlMpO1xuICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgcmV0dXJuIGx6KGdldChIT1VSUykpO1xuICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICByZXR1cm4gZ2V0KERBVEUpO1xuICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgcmV0dXJuIGx6KGdldChEQVRFKSk7XG4gICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgIHJldHVybiBkaWN0WzBdW2dldCgnRGF5JyldO1xuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICByZXR1cm4gZ2V0KE1PTlRIKSArIDE7XG4gICAgICAgIGNhc2UgJ05OJzpcbiAgICAgICAgICByZXR1cm4gbHooZ2V0KE1PTlRIKSArIDEpO1xuICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICByZXR1cm4gZGljdFsyXVtnZXQoTU9OVEgpXTtcbiAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgIHJldHVybiBkaWN0WzFdW2dldChNT05USCldO1xuICAgICAgICBjYXNlICdZJzpcbiAgICAgICAgICByZXR1cm4gZ2V0KFlFQVIpO1xuICAgICAgICBjYXNlICdZWSc6XG4gICAgICAgICAgcmV0dXJuIGx6KGdldChZRUFSKSAlIDEwMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFydDtcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGFkZExvY2FsZShsYW5nLCBsb2NhbGUpIHtcbiAgZnVuY3Rpb24gc3BsaXQoaW5kZXgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgJC5lYWNoLmNhbGwobG9jYWxlLm1vbnRocy5zcGxpdCgnLCcpLCBmdW5jdGlvbihpdCkge1xuICAgICAgcmVzdWx0LnB1c2goaXQucmVwbGFjZShmbGV4aW9SZWdFeHAsICckJyArIGluZGV4KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsb2NhbGVzW2xhbmddID0gW2xvY2FsZS53ZWVrZGF5cy5zcGxpdCgnLCcpLCBzcGxpdCgxKSwgc3BsaXQoMildO1xuICByZXR1cm4gY29yZTtcbn1cbiRkZWYoJGRlZi5QICsgJGRlZi5GLCBEQVRFLCB7XG4gIGZvcm1hdDogY3JlYXRlRm9ybWF0KCdnZXQnKSxcbiAgZm9ybWF0VVRDOiBjcmVhdGVGb3JtYXQoJ2dldFVUQycpXG59KTtcbmFkZExvY2FsZShjdXJyZW50LCB7XG4gIHdlZWtkYXlzOiAnU3VuZGF5LE1vbmRheSxUdWVzZGF5LFdlZG5lc2RheSxUaHVyc2RheSxGcmlkYXksU2F0dXJkYXknLFxuICBtb250aHM6ICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJ1xufSk7XG5hZGRMb2NhbGUoJ3J1Jywge1xuICB3ZWVrZGF5czogJ9CS0L7RgdC60YDQtdGB0LXQvdGM0LUs0J/QvtC90LXQtNC10LvRjNC90LjQuizQktGC0L7RgNC90LjQuizQodGA0LXQtNCwLNCn0LXRgtCy0LXRgNCzLNCf0Y/RgtC90LjRhtCwLNCh0YPQsdCx0L7RgtCwJyxcbiAgbW9udGhzOiAn0K/QvdCy0LDRgDrRj3zRjCzQpNC10LLRgNCw0Ls60Y980Yws0JzQsNGA0YI60LB8LNCQ0L/RgNC10Ls60Y980Yws0JzQsDrRj3zQuSzQmNGO0L060Y980YwsJyArICfQmNGO0Ls60Y980Yws0JDQstCz0YPRgdGCOtCwfCzQodC10L3RgtGP0LHRgDrRj3zRjCzQntC60YLRj9Cx0YA60Y980Yws0J3QvtGP0LHRgDrRj3zRjCzQlNC10LrQsNCx0YA60Y980YwnXG59KTtcbmNvcmUubG9jYWxlID0gZnVuY3Rpb24obG9jYWxlKSB7XG4gIHJldHVybiAkLmhhcyhsb2NhbGVzLCBsb2NhbGUpID8gY3VycmVudCA9IGxvY2FsZSA6IGN1cnJlbnQ7XG59O1xuY29yZS5hZGRMb2NhbGUgPSBhZGRMb2NhbGU7XG4iLCIvKiAqLyBcbnZhciAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIik7XG4kZGVmKCRkZWYuRyArICRkZWYuRiwge2dsb2JhbDogcmVxdWlyZShcIi4vJFwiKS5nfSk7XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgbG9nID0ge30sXG4gICAgZW5hYmxlZCA9IHRydWU7XG4kLmVhY2guY2FsbCgoJ2Fzc2VydCxjbGVhcixjb3VudCxkZWJ1ZyxkaXIsZGlyeG1sLGVycm9yLGV4Y2VwdGlvbiwnICsgJ2dyb3VwLGdyb3VwQ29sbGFwc2VkLGdyb3VwRW5kLGluZm8saXNJbmRlcGVuZGVudGx5Q29tcG9zZWQsbG9nLCcgKyAnbWFya1RpbWVsaW5lLHByb2ZpbGUscHJvZmlsZUVuZCx0YWJsZSx0aW1lLHRpbWVFbmQsdGltZWxpbmUsJyArICd0aW1lbGluZUVuZCx0aW1lU3RhbXAsdHJhY2Usd2FybicpLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGtleSkge1xuICBsb2dba2V5XSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChlbmFibGVkICYmICQuZy5jb25zb2xlICYmICQuaXNGdW5jdGlvbihjb25zb2xlW2tleV0pKSB7XG4gICAgICByZXR1cm4gRnVuY3Rpb24uYXBwbHkuY2FsbChjb25zb2xlW2tleV0sIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufSk7XG4kZGVmKCRkZWYuRyArICRkZWYuRiwge2xvZzogcmVxdWlyZShcIi4vJC5hc3NpZ25cIikobG9nLmxvZywgbG9nLCB7XG4gICAgZW5hYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICB9KX0pO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKSxcbiAgICBjb3JlID0ge30sXG4gICAgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBjZWlsID0gTWF0aC5jZWlsLFxuICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICBtYXggPSBNYXRoLm1heCxcbiAgICBtaW4gPSBNYXRoLm1pbjtcbnZhciBERVNDID0gISFmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgfX0pLmEgPT0gMjtcbiAgfSBjYXRjaCAoZSkge31cbn0oKTtcbnZhciBoaWRlID0gY3JlYXRlRGVmaW5lcigxKTtcbmZ1bmN0aW9uIHRvSW50ZWdlcihpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn1cbmZ1bmN0aW9uIGRlc2MoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gc2ltcGxlU2V0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufVxuZnVuY3Rpb24gY3JlYXRlRGVmaW5lcihiaXRtYXApIHtcbiAgcmV0dXJuIERFU0MgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gJC5zZXREZXNjKG9iamVjdCwga2V5LCBkZXNjKGJpdG1hcCwgdmFsdWUpKTtcbiAgfSA6IHNpbXBsZVNldDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0KSB7XG4gIHJldHVybiBpdCAhPT0gbnVsbCAmJiAodHlwZW9mIGl0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBpdCA9PSAnZnVuY3Rpb24nKTtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufVxudmFyICQgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLyQuZndcIikoe1xuICBnOiBnbG9iYWwsXG4gIGNvcmU6IGNvcmUsXG4gIGh0bWw6IGdsb2JhbC5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgdGhhdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHRvSW50ZWdlcjogdG9JbnRlZ2VyLFxuICB0b0xlbmd0aDogZnVuY3Rpb24oaXQpIHtcbiAgICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDtcbiAgfSxcbiAgdG9JbmRleDogZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCkge1xuICAgIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbihpdCwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG4gIH0sXG4gIGNyZWF0ZTogT2JqZWN0LmNyZWF0ZSxcbiAgZ2V0UHJvdG86IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgREVTQzogREVTQyxcbiAgZGVzYzogZGVzYyxcbiAgZ2V0RGVzYzogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgc2V0RGVzYzogZGVmaW5lUHJvcGVydHksXG4gIHNldERlc2NzOiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyxcbiAgZ2V0S2V5czogT2JqZWN0LmtleXMsXG4gIGdldE5hbWVzOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgZ2V0U3ltYm9sczogT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgYXNzZXJ0RGVmaW5lZDogYXNzZXJ0RGVmaW5lZCxcbiAgRVM1T2JqZWN0OiBPYmplY3QsXG4gIHRvT2JqZWN0OiBmdW5jdGlvbihpdCkge1xuICAgIHJldHVybiAkLkVTNU9iamVjdChhc3NlcnREZWZpbmVkKGl0KSk7XG4gIH0sXG4gIGhpZGU6IGhpZGUsXG4gIGRlZjogY3JlYXRlRGVmaW5lcigwKSxcbiAgc2V0OiBnbG9iYWwuU3ltYm9sID8gc2ltcGxlU2V0IDogaGlkZSxcbiAgZWFjaDogW10uZm9yRWFjaFxufSk7XG5pZiAodHlwZW9mIF9fZSAhPSAndW5kZWZpbmVkJylcbiAgX19lID0gY29yZTtcbmlmICh0eXBlb2YgX19nICE9ICd1bmRlZmluZWQnKVxuICBfX2cgPSBnbG9iYWw7XG4iLCJyZXF1aXJlKCcuL3NoaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9jb3JlLmRpY3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9jb3JlLml0ZXItaGVscGVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2NvcmUuJGZvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2NvcmUuZGVsYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9jb3JlLmJpbmRpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9jb3JlLm9iamVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2NvcmUuYXJyYXkudHVybicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2NvcmUubnVtYmVyLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvY29yZS5udW1iZXIubWF0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2NvcmUuc3RyaW5nLmVzY2FwZS1odG1sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvY29yZS5kYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvY29yZS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9jb3JlLmxvZycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvJCcpLmNvcmU7IiwiLyogKi8gXG5kZWZpbmUoWydleHBvcnRzJywgJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1ydWxlcy1jb2xsZWN0aW9uJywgJy4uL3ZhbGlkYXRpb24vcGF0aC1vYnNlcnZlcicsICcuLi92YWxpZGF0aW9uL2RlYm91bmNlciddLCBmdW5jdGlvbiAoZXhwb3J0cywgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLCBfdmFsaWRhdGlvblBhdGhPYnNlcnZlciwgX3ZhbGlkYXRpb25EZWJvdW5jZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFZhbGlkYXRpb25Qcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvblByb3BlcnR5KG9ic2VydmVyTG9jYXRvciwgcHJvcGVydHlOYW1lLCB2YWxpZGF0aW9uR3JvdXAsIHByb3BlcnR5UmVzdWx0LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWxpZGF0aW9uUHJvcGVydHkpO1xuXG4gICAgICB0aGlzLnByb3BlcnR5UmVzdWx0ID0gcHJvcGVydHlSZXN1bHQ7XG4gICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgIHRoaXMudmFsaWRhdGlvbkdyb3VwID0gdmFsaWRhdGlvbkdyb3VwO1xuICAgICAgdGhpcy5jb2xsZWN0aW9uT2ZWYWxpZGF0aW9uUnVsZXMgPSBuZXcgX3ZhbGlkYXRpb25WYWxpZGF0aW9uUnVsZXNDb2xsZWN0aW9uLlZhbGlkYXRpb25SdWxlc0NvbGxlY3Rpb24oY29uZmlnKTtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgdGhpcy5sYXRlc3RWYWx1ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBfdmFsaWRhdGlvblBhdGhPYnNlcnZlci5QYXRoT2JzZXJ2ZXIob2JzZXJ2ZXJMb2NhdG9yLCB2YWxpZGF0aW9uR3JvdXAuc3ViamVjdCwgcHJvcGVydHlOYW1lKS5nZXRPYnNlcnZlcigpO1xuXG4gICAgICB0aGlzLmRlYm91bmNlciA9IG5ldyBfdmFsaWRhdGlvbkRlYm91bmNlci5EZWJvdW5jZXIoY29uZmlnLmdldERlYm91bmNlVGltZW91dCgpKTtcblxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLm9ic2VydmVyLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmRlYm91bmNlci5kZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gX3RoaXMub2JzZXJ2ZXIuZ2V0VmFsdWUoKTtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IF90aGlzLmxhdGVzdFZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy52YWxpZGF0ZShuZXdWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmRlcGVuZGVuY3lPYnNlcnZlcnMgPSBbXTtcbiAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSB0aGlzLmNvbmZpZy5nZXREZXBlbmRlbmNpZXMoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXBlbmRlbmN5T2JzZXJ2ZXIgPSBuZXcgX3ZhbGlkYXRpb25QYXRoT2JzZXJ2ZXIuUGF0aE9ic2VydmVyKG9ic2VydmVyTG9jYXRvciwgdmFsaWRhdGlvbkdyb3VwLnN1YmplY3QsIGRlcGVuZGVuY2llc1tpXSkuZ2V0T2JzZXJ2ZXIoKTtcbiAgICAgICAgZGVwZW5kZW5jeU9ic2VydmVyLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuZGVib3VuY2VyLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnZhbGlkYXRlQ3VycmVudFZhbHVlKHRydWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZXBlbmRlbmN5T2JzZXJ2ZXJzLnB1c2goZGVwZW5kZW5jeU9ic2VydmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBWYWxpZGF0aW9uUHJvcGVydHkucHJvdG90eXBlLmFkZFZhbGlkYXRpb25SdWxlID0gZnVuY3Rpb24gYWRkVmFsaWRhdGlvblJ1bGUodmFsaWRhdGlvblJ1bGUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uUnVsZS52YWxpZGF0ZSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ1RoYXRcXCdzIG5vdCBhIHZhbGlkIHZhbGlkYXRpb25SdWxlJyk7XG4gICAgICB0aGlzLmNvbGxlY3Rpb25PZlZhbGlkYXRpb25SdWxlcy5hZGRWYWxpZGF0aW9uUnVsZSh2YWxpZGF0aW9uUnVsZSk7XG4gICAgICB0aGlzLnZhbGlkYXRlQ3VycmVudFZhbHVlKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblByb3BlcnR5LnByb3RvdHlwZS52YWxpZGF0ZUN1cnJlbnRWYWx1ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlQ3VycmVudFZhbHVlKGZvcmNlRGlydHksIGZvcmNlRXhlY3V0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZSh0aGlzLm9ic2VydmVyLmdldFZhbHVlKCksIGZvcmNlRGlydHksIGZvcmNlRXhlY3V0aW9uKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblByb3BlcnR5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5sYXRlc3RWYWx1ZSA9IHRoaXMub2JzZXJ2ZXIuZ2V0VmFsdWUoKTtcbiAgICAgIHRoaXMucHJvcGVydHlSZXN1bHQuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblByb3BlcnR5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24oKTtcbiAgICB9O1xuXG4gICAgVmFsaWRhdGlvblByb3BlcnR5LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKG5ld1ZhbHVlLCBzaG91bGRCZURpcnR5LCBmb3JjZUV4ZWN1dGlvbikge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5wcm9wZXJ0eVJlc3VsdC5pc0RpcnR5ICYmIHNob3VsZEJlRGlydHkgfHwgdGhpcy5sYXRlc3RWYWx1ZSAhPT0gbmV3VmFsdWUgfHwgZm9yY2VFeGVjdXRpb24pIHtcbiAgICAgICAgdGhpcy5sYXRlc3RWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcubG9jYWxlKCkudGhlbihmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5jb2xsZWN0aW9uT2ZWYWxpZGF0aW9uUnVsZXMudmFsaWRhdGUobmV3VmFsdWUsIGxvY2FsZSkudGhlbihmdW5jdGlvbiAodmFsaWRhdGlvblJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMyLmxhdGVzdFZhbHVlID09PSB2YWxpZGF0aW9uUmVzcG9uc2UubGF0ZXN0VmFsdWUpIF90aGlzMi5wcm9wZXJ0eVJlc3VsdC5zZXRWYWxpZGl0eSh2YWxpZGF0aW9uUmVzcG9uc2UsIHNob3VsZEJlRGlydHkpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25SZXNwb25zZS5pc1ZhbGlkO1xuICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmV4cGVjdGVkIGJlaGF2aW9yOiBhIHZhbGlkYXRpb24tcnVsZXMtY29sbGVjdGlvbiBzaG91bGQgYWx3YXlzIGZ1bGZpbCcsIGVycik7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignVW5leHBlY3RlZCBiZWhhdmlvcjogYSB2YWxpZGF0aW9uLXJ1bGVzLWNvbGxlY3Rpb24gc2hvdWxkIGFsd2F5cyBmdWxmaWwnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRocm93IEVycm9yKCdBbiBleGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIGxvYWQgdGhlIGxvY2FsZScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25Qcm9wZXJ0eTtcbiAgfSkoKTtcblxuICBleHBvcnRzLlZhbGlkYXRpb25Qcm9wZXJ0eSA9IFZhbGlkYXRpb25Qcm9wZXJ0eTtcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnN0YXRpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZ2V4cC5lc2NhcGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnRvLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvanMuYXJyYXkuc3RhdGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvJCcpLmNvcmU7IiwidmFyICQgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjdHggICAgICA9IHJlcXVpcmUoJy4vJC5jdHgnKVxuICAsICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgYXNzaWduICAgPSByZXF1aXJlKCcuLyQuYXNzaWduJylcbiAgLCBrZXlPZiAgICA9IHJlcXVpcmUoJy4vJC5rZXlvZicpXG4gICwgSVRFUiAgICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZSgnaXRlcicpXG4gICwgYXNzZXJ0ICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCAkaXRlciAgICA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBzdGVwICAgICA9ICRpdGVyLnN0ZXBcbiAgLCBnZXRLZXlzICA9ICQuZ2V0S2V5c1xuICAsIHRvT2JqZWN0ID0gJC50b09iamVjdFxuICAsIGhhcyAgICAgID0gJC5oYXM7XG5cbmZ1bmN0aW9uIERpY3QoaXRlcmFibGUpe1xuICB2YXIgZGljdCA9ICQuY3JlYXRlKG51bGwpO1xuICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpe1xuICAgIGlmKCRpdGVyLmlzKGl0ZXJhYmxlKSl7XG4gICAgICAkaXRlci5mb3JPZihpdGVyYWJsZSwgdHJ1ZSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICAgIGRpY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGFzc2lnbihkaWN0LCBpdGVyYWJsZSk7XG4gIH1cbiAgcmV0dXJuIGRpY3Q7XG59XG5EaWN0LnByb3RvdHlwZSA9IG51bGw7XG5cbmZ1bmN0aW9uIERpY3RJdGVyYXRvcihpdGVyYXRlZCwga2luZCl7XG4gICQuc2V0KHRoaXMsIElURVIsIHtvOiB0b09iamVjdChpdGVyYXRlZCksIGE6IGdldEtleXMoaXRlcmF0ZWQpLCBpOiAwLCBrOiBraW5kfSk7XG59XG4kaXRlci5jcmVhdGUoRGljdEl0ZXJhdG9yLCAnRGljdCcsIGZ1bmN0aW9uKCl7XG4gIHZhciBpdGVyID0gdGhpc1tJVEVSXVxuICAgICwgTyAgICA9IGl0ZXIub1xuICAgICwga2V5cyA9IGl0ZXIuYVxuICAgICwga2luZCA9IGl0ZXIua1xuICAgICwga2V5O1xuICBkbyB7XG4gICAgaWYoaXRlci5pID49IGtleXMubGVuZ3RoKXtcbiAgICAgIGl0ZXIubyA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgIH1cbiAgfSB3aGlsZSghaGFzKE8sIGtleSA9IGtleXNbaXRlci5pKytdKSk7XG4gIGlmKGtpbmQgPT0gJ2tleScgIClyZXR1cm4gc3RlcCgwLCBrZXkpO1xuICBpZihraW5kID09ICd2YWx1ZScpcmV0dXJuIHN0ZXAoMCwgT1trZXldKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2tleSwgT1trZXldXSk7XG59KTtcbmZ1bmN0aW9uIGNyZWF0ZURpY3RJdGVyKGtpbmQpe1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBuZXcgRGljdEl0ZXJhdG9yKGl0LCBraW5kKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdlbmVyaWMoQSwgQil7XG4gIC8vIHN0cmFuZ2UgSUUgcXVpcmtzIG1vZGUgYnVnIC0+IHVzZSB0eXBlb2YgaW5zdGVhZCBvZiBpc0Z1bmN0aW9uXG4gIHJldHVybiB0eXBlb2YgQSA9PSAnZnVuY3Rpb24nID8gQSA6IEI7XG59XG5cbi8vIDAgLT4gRGljdC5mb3JFYWNoXG4vLyAxIC0+IERpY3QubWFwXG4vLyAyIC0+IERpY3QuZmlsdGVyXG4vLyAzIC0+IERpY3Quc29tZVxuLy8gNCAtPiBEaWN0LmV2ZXJ5XG4vLyA1IC0+IERpY3QuZmluZFxuLy8gNiAtPiBEaWN0LmZpbmRLZXlcbi8vIDcgLT4gRGljdC5tYXBQYWlyc1xuZnVuY3Rpb24gY3JlYXRlRGljdE1ldGhvZChUWVBFKXtcbiAgdmFyIElTX01BUCAgID0gVFlQRSA9PSAxXG4gICAgLCBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2tmbiwgdGhhdCAvKiA9IHVuZGVmaW5lZCAqLyl7XG4gICAgdmFyIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBPICAgICAgPSB0b09iamVjdChvYmplY3QpXG4gICAgICAsIHJlc3VsdCA9IElTX01BUCB8fCBUWVBFID09IDcgfHwgVFlQRSA9PSAyID8gbmV3IChnZW5lcmljKHRoaXMsIERpY3QpKSA6IHVuZGVmaW5lZFxuICAgICAgLCBrZXksIHZhbCwgcmVzO1xuICAgIGZvcihrZXkgaW4gTylpZihoYXMoTywga2V5KSl7XG4gICAgICB2YWwgPSBPW2tleV07XG4gICAgICByZXMgPSBmKHZhbCwga2V5LCBvYmplY3QpO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRba2V5XSA9IHJlczsgICAgICAgICAgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZihyZXMpc3dpdGNoKFRZUEUpe1xuICAgICAgICAgIGNhc2UgMjogcmVzdWx0W2tleV0gPSB2YWw7IGJyZWFrOyAgICAgLy8gZmlsdGVyXG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4ga2V5OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kS2V5XG4gICAgICAgICAgY2FzZSA3OiByZXN1bHRbcmVzWzBdXSA9IHJlc1sxXTsgICAgICAvLyBtYXBQYWlyc1xuICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFRZUEUgPT0gMyB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufVxuXG4vLyB0cnVlICAtPiBEaWN0LnR1cm5cbi8vIGZhbHNlIC0+IERpY3QucmVkdWNlXG5mdW5jdGlvbiBjcmVhdGVEaWN0UmVkdWNlKElTX1RVUk4pe1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBtYXBmbiwgaW5pdCl7XG4gICAgYXNzZXJ0LmZuKG1hcGZuKTtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3Qob2JqZWN0KVxuICAgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGkgICAgICA9IDBcbiAgICAgICwgbWVtbywga2V5LCByZXN1bHQ7XG4gICAgaWYoSVNfVFVSTil7XG4gICAgICBtZW1vID0gaW5pdCA9PSB1bmRlZmluZWQgPyBuZXcgKGdlbmVyaWModGhpcywgRGljdCkpIDogT2JqZWN0KGluaXQpO1xuICAgIH0gZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoIDwgMyl7XG4gICAgICBhc3NlcnQobGVuZ3RoLCAnUmVkdWNlIG9mIGVtcHR5IG9iamVjdCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIG1lbW8gPSBPW2tleXNbaSsrXV07XG4gICAgfSBlbHNlIG1lbW8gPSBPYmplY3QoaW5pdCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0ga2V5c1tpKytdKSl7XG4gICAgICByZXN1bHQgPSBtYXBmbihtZW1vLCBPW2tleV0sIGtleSwgb2JqZWN0KTtcbiAgICAgIGlmKElTX1RVUk4pe1xuICAgICAgICBpZihyZXN1bHQgPT09IGZhbHNlKWJyZWFrO1xuICAgICAgfSBlbHNlIG1lbW8gPSByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufVxudmFyIGZpbmRLZXkgPSBjcmVhdGVEaWN0TWV0aG9kKDYpO1xuXG4kZGVmKCRkZWYuRyArICRkZWYuRiwge0RpY3Q6ICQubWl4KERpY3QsIHtcbiAga2V5czogICAgIGNyZWF0ZURpY3RJdGVyKCdrZXknKSxcbiAgdmFsdWVzOiAgIGNyZWF0ZURpY3RJdGVyKCd2YWx1ZScpLFxuICBlbnRyaWVzOiAgY3JlYXRlRGljdEl0ZXIoJ2tleSt2YWx1ZScpLFxuICBmb3JFYWNoOiAgY3JlYXRlRGljdE1ldGhvZCgwKSxcbiAgbWFwOiAgICAgIGNyZWF0ZURpY3RNZXRob2QoMSksXG4gIGZpbHRlcjogICBjcmVhdGVEaWN0TWV0aG9kKDIpLFxuICBzb21lOiAgICAgY3JlYXRlRGljdE1ldGhvZCgzKSxcbiAgZXZlcnk6ICAgIGNyZWF0ZURpY3RNZXRob2QoNCksXG4gIGZpbmQ6ICAgICBjcmVhdGVEaWN0TWV0aG9kKDUpLFxuICBmaW5kS2V5OiAgZmluZEtleSxcbiAgbWFwUGFpcnM6IGNyZWF0ZURpY3RNZXRob2QoNyksXG4gIHJlZHVjZTogICBjcmVhdGVEaWN0UmVkdWNlKGZhbHNlKSxcbiAgdHVybjogICAgIGNyZWF0ZURpY3RSZWR1Y2UodHJ1ZSksXG4gIGtleU9mOiAgICBrZXlPZixcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICAgIHJldHVybiAoZWwgPT0gZWwgPyBrZXlPZihvYmplY3QsIGVsKSA6IGZpbmRLZXkob2JqZWN0LCBmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gaXQgIT0gaXQ7XG4gICAgfSkpICE9PSB1bmRlZmluZWQ7XG4gIH0sXG4gIC8vIEhhcyAvIGdldCAvIHNldCBvd24gcHJvcGVydHlcbiAgaGFzOiBoYXMsXG4gIGdldDogZnVuY3Rpb24ob2JqZWN0LCBrZXkpe1xuICAgIGlmKGhhcyhvYmplY3QsIGtleSkpcmV0dXJuIG9iamVjdFtrZXldO1xuICB9LFxuICBzZXQ6ICQuZGVmLFxuICBpc0RpY3Q6IGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gJC5pc09iamVjdChpdCkgJiYgJC5nZXRQcm90byhpdCkgPT09IERpY3QucHJvdG90eXBlO1xuICB9XG59KX0pOyIsInZhciBjb3JlICA9IHJlcXVpcmUoJy4vJCcpLmNvcmVcbiAgLCAkaXRlciA9IHJlcXVpcmUoJy4vJC5pdGVyJyk7XG5jb3JlLmlzSXRlcmFibGUgID0gJGl0ZXIuaXM7XG5jb3JlLmdldEl0ZXJhdG9yID0gJGl0ZXIuZ2V0OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjdHggICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgc2FmZSAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlXG4gICwgJGRlZiAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRpdGVyICAgPSByZXF1aXJlKCcuLyQuaXRlcicpXG4gICwgRU5UUklFUyA9IHNhZmUoJ2VudHJpZXMnKVxuICAsIEZOICAgICAgPSBzYWZlKCdmbicpXG4gICwgSVRFUiAgICA9IHNhZmUoJ2l0ZXInKVxuICAsIGZvck9mICAgICAgICAgID0gJGl0ZXIuZm9yT2ZcbiAgLCBzdGVwQ2FsbCAgICAgICA9ICRpdGVyLnN0ZXBDYWxsXG4gICwgZ2V0SXRlcmF0b3IgICAgPSAkaXRlci5nZXRcbiAgLCBzZXRJdGVyYXRvciAgICA9ICRpdGVyLnNldFxuICAsIGNyZWF0ZUl0ZXJhdG9yID0gJGl0ZXIuY3JlYXRlO1xuZnVuY3Rpb24gJGZvcihpdGVyYWJsZSwgZW50cmllcyl7XG4gIGlmKCEodGhpcyBpbnN0YW5jZW9mICRmb3IpKXJldHVybiBuZXcgJGZvcihpdGVyYWJsZSwgZW50cmllcyk7XG4gIHRoaXNbSVRFUl0gICAgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gIHRoaXNbRU5UUklFU10gPSAhIWVudHJpZXM7XG59XG5cbmNyZWF0ZUl0ZXJhdG9yKCRmb3IsICdXcmFwcGVyJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXNbSVRFUl0ubmV4dCgpO1xufSk7XG52YXIgJGZvclByb3RvID0gJGZvci5wcm90b3R5cGU7XG5zZXRJdGVyYXRvcigkZm9yUHJvdG8sIGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzW0lURVJdOyAvLyB1bndyYXBcbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbkl0ZXJhdG9yKG5leHQpe1xuICBmdW5jdGlvbiBJdGVyYXRvcihpdGVyLCBmbiwgdGhhdCl7XG4gICAgdGhpc1tJVEVSXSAgICA9IGdldEl0ZXJhdG9yKGl0ZXIpO1xuICAgIHRoaXNbRU5UUklFU10gPSBpdGVyW0VOVFJJRVNdO1xuICAgIHRoaXNbRk5dICAgICAgPSBjdHgoZm4sIHRoYXQsIGl0ZXJbRU5UUklFU10gPyAyIDogMSk7XG4gIH1cbiAgY3JlYXRlSXRlcmF0b3IoSXRlcmF0b3IsICdDaGFpbicsIG5leHQsICRmb3JQcm90byk7XG4gIHNldEl0ZXJhdG9yKEl0ZXJhdG9yLnByb3RvdHlwZSwgJC50aGF0KTsgLy8gb3ZlcnJpZGUgJGZvclByb3RvIGl0ZXJhdG9yXG4gIHJldHVybiBJdGVyYXRvcjtcbn1cblxudmFyIE1hcEl0ZXIgPSBjcmVhdGVDaGFpbkl0ZXJhdG9yKGZ1bmN0aW9uKCl7XG4gIHZhciBzdGVwID0gdGhpc1tJVEVSXS5uZXh0KCk7XG4gIHJldHVybiBzdGVwLmRvbmVcbiAgICA/IHN0ZXBcbiAgICA6ICRpdGVyLnN0ZXAoMCwgc3RlcENhbGwodGhpc1tJVEVSXSwgdGhpc1tGTl0sIHN0ZXAudmFsdWUsIHRoaXNbRU5UUklFU10pKTtcbn0pO1xuXG52YXIgRmlsdGVySXRlciA9IGNyZWF0ZUNoYWluSXRlcmF0b3IoZnVuY3Rpb24oKXtcbiAgZm9yKDs7KXtcbiAgICB2YXIgc3RlcCA9IHRoaXNbSVRFUl0ubmV4dCgpO1xuICAgIGlmKHN0ZXAuZG9uZSB8fCBzdGVwQ2FsbCh0aGlzW0lURVJdLCB0aGlzW0ZOXSwgc3RlcC52YWx1ZSwgdGhpc1tFTlRSSUVTXSkpcmV0dXJuIHN0ZXA7XG4gIH1cbn0pO1xuXG4kLm1peCgkZm9yUHJvdG8sIHtcbiAgb2Y6IGZ1bmN0aW9uKGZuLCB0aGF0KXtcbiAgICBmb3JPZih0aGlzLCB0aGlzW0VOVFJJRVNdLCBmbiwgdGhhdCk7XG4gIH0sXG4gIGFycmF5OiBmdW5jdGlvbihmbiwgdGhhdCl7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvck9mKGZuICE9IHVuZGVmaW5lZCA/IHRoaXMubWFwKGZuLCB0aGF0KSA6IHRoaXMsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBmaWx0ZXI6IGZ1bmN0aW9uKGZuLCB0aGF0KXtcbiAgICByZXR1cm4gbmV3IEZpbHRlckl0ZXIodGhpcywgZm4sIHRoYXQpO1xuICB9LFxuICBtYXA6IGZ1bmN0aW9uKGZuLCB0aGF0KXtcbiAgICByZXR1cm4gbmV3IE1hcEl0ZXIodGhpcywgZm4sIHRoYXQpO1xuICB9XG59KTtcblxuJGZvci5pc0l0ZXJhYmxlICA9ICRpdGVyLmlzO1xuJGZvci5nZXRJdGVyYXRvciA9IGdldEl0ZXJhdG9yO1xuXG4kZGVmKCRkZWYuRyArICRkZWYuRiwgeyRmb3I6ICRmb3J9KTsiLCJ2YXIgJCAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIHBhcnRpYWwgPSByZXF1aXJlKCcuLyQucGFydGlhbCcpO1xuLy8gaHR0cHM6Ly9lc2Rpc2N1c3Mub3JnL3RvcGljL3Byb21pc2UtcmV0dXJuaW5nLWRlbGF5LWZ1bmN0aW9uXG4kZGVmKCRkZWYuRyArICRkZWYuRiwge1xuICBkZWxheTogZnVuY3Rpb24odGltZSl7XG4gICAgcmV0dXJuIG5ldyAoJC5jb3JlLlByb21pc2UgfHwgJC5nLlByb21pc2UpKGZ1bmN0aW9uKHJlc29sdmUpe1xuICAgICAgc2V0VGltZW91dChwYXJ0aWFsLmNhbGwocmVzb2x2ZSwgdHJ1ZSksIHRpbWUpO1xuICAgIH0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjdHggICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCAkZGVmICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBpbnZva2UgPSByZXF1aXJlKCcuLyQuaW52b2tlJylcbiAgLCBoaWRlICAgPSAkLmhpZGVcbiAgLCBhc3NlcnRGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5mblxuICAvLyBJRTgtIGRpcnR5IGhhY2sgLSByZWRlZmluZWQgdG9Mb2NhbGVTdHJpbmcgaXMgbm90IGVudW1lcmFibGVcbiAgLCBfID0gJC5ERVNDID8gcmVxdWlyZSgnLi8kLnVpZCcpKCd0aWUnKSA6ICd0b0xvY2FsZVN0cmluZydcbiAgLCB0b0xvY2FsZVN0cmluZyA9IHt9LnRvTG9jYWxlU3RyaW5nO1xuXG4vLyBQbGFjZWhvbGRlclxuJC5jb3JlLl8gPSAkLnBhdGguXyA9ICQucGF0aC5fIHx8IHt9O1xuXG4kZGVmKCRkZWYuUCArICRkZWYuRiwgJ0Z1bmN0aW9uJywge1xuICBwYXJ0OiByZXF1aXJlKCcuLyQucGFydGlhbCcpLFxuICBvbmx5OiBmdW5jdGlvbihudW1iZXJBcmd1bWVudHMsIHRoYXQgLyogPSBAICovKXtcbiAgICB2YXIgZm4gICAgID0gYXNzZXJ0RnVuY3Rpb24odGhpcylcbiAgICAgICwgbiAgICAgID0gJC50b0xlbmd0aChudW1iZXJBcmd1bWVudHMpXG4gICAgICAsIGlzVGhhdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxO1xuICAgIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihuLCBhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAsIGFyZ3MgICA9IEFycmF5KGxlbmd0aClcbiAgICAgICAgLCBpICAgICAgPSAwO1xuICAgICAgd2hpbGUobGVuZ3RoID4gaSlhcmdzW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCBpc1RoYXQgPyB0aGF0IDogdGhpcyk7XG4gICAgfTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRpZShrZXkpe1xuICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgLCBib3VuZCA9IHt9O1xuICByZXR1cm4gaGlkZSh0aGF0LCBfLCBmdW5jdGlvbihrZXkpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNoYWRvd1xuICAgIGlmKGtleSA9PT0gdW5kZWZpbmVkIHx8ICEoa2V5IGluIHRoYXQpKXJldHVybiB0b0xvY2FsZVN0cmluZy5jYWxsKHRoYXQpO1xuICAgIHJldHVybiAkLmhhcyhib3VuZCwga2V5KSA/IGJvdW5kW2tleV0gOiBib3VuZFtrZXldID0gY3R4KHRoYXRba2V5XSwgdGhhdCwgLTEpO1xuICB9KVtfXShrZXkpO1xufVxuXG5oaWRlKCQucGF0aC5fLCAndG9TdHJpbmcnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gXztcbn0pO1xuXG5oaWRlKE9iamVjdC5wcm90b3R5cGUsIF8sIHRpZSk7XG4kLkRFU0MgfHwgaGlkZShBcnJheS5wcm90b3R5cGUsIF8sIHRpZSk7IiwidmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBvd25LZXlzID0gcmVxdWlyZSgnLi8kLm93bi1rZXlzJyk7XG5mdW5jdGlvbiBkZWZpbmUodGFyZ2V0LCBtaXhpbil7XG4gIHZhciBrZXlzICAgPSBvd25LZXlzKCQudG9PYmplY3QobWl4aW4pKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGkpJC5zZXREZXNjKHRhcmdldCwga2V5ID0ga2V5c1tpKytdLCAkLmdldERlc2MobWl4aW4sIGtleSkpO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuJGRlZigkZGVmLlMgKyAkZGVmLkYsICdPYmplY3QnLCB7XG4gIGlzT2JqZWN0OiAkLmlzT2JqZWN0LFxuICBjbGFzc29mOiByZXF1aXJlKCcuLyQuY29mJykuY2xhc3NvZixcbiAgZGVmaW5lOiBkZWZpbmUsXG4gIG1ha2U6IGZ1bmN0aW9uKHByb3RvLCBtaXhpbil7XG4gICAgcmV0dXJuIGRlZmluZSgkLmNyZWF0ZShwcm90byksIG1peGluKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGFzc2VydEZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpLmZuO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYsICdBcnJheScsIHtcbiAgdHVybjogZnVuY3Rpb24oZm4sIHRhcmdldCAvKiA9IFtdICovKXtcbiAgICBhc3NlcnRGdW5jdGlvbihmbik7XG4gICAgdmFyIG1lbW8gICA9IHRhcmdldCA9PSB1bmRlZmluZWQgPyBbXSA6IE9iamVjdCh0YXJnZXQpXG4gICAgICAsIE8gICAgICA9ICQuRVM1T2JqZWN0KHRoaXMpXG4gICAgICAsIGxlbmd0aCA9ICQudG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoZm4obWVtbywgT1tpbmRleF0sIGluZGV4KyssIHRoaXMpID09PSBmYWxzZSlicmVhaztcbiAgICByZXR1cm4gbWVtbztcbiAgfVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCd0dXJuJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIElURVIgICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZSgnaXRlcicpXG4gICwgJGl0ZXIgICA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBzdGVwICAgID0gJGl0ZXIuc3RlcFxuICAsIE5VTUJFUiAgPSAnTnVtYmVyJztcbmZ1bmN0aW9uIE51bWJlckl0ZXJhdG9yKGl0ZXJhdGVkKXtcbiAgJC5zZXQodGhpcywgSVRFUiwge2w6ICQudG9MZW5ndGgoaXRlcmF0ZWQpLCBpOiAwfSk7XG59XG4kaXRlci5jcmVhdGUoTnVtYmVySXRlcmF0b3IsIE5VTUJFUiwgZnVuY3Rpb24oKXtcbiAgdmFyIGl0ZXIgPSB0aGlzW0lURVJdXG4gICAgLCBpICAgID0gaXRlci5pKys7XG4gIHJldHVybiBpIDwgaXRlci5sID8gc3RlcCgwLCBpKSA6IHN0ZXAoMSk7XG59KTtcbiRpdGVyLmRlZmluZShOdW1iZXIsIE5VTUJFUiwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBOdW1iZXJJdGVyYXRvcih0aGlzKTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgaW52b2tlICA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKVxuICAsIG1ldGhvZHMgPSB7fTtcblxubWV0aG9kcy5yYW5kb20gPSBmdW5jdGlvbihsaW0gLyogPSAwICovKXtcbiAgdmFyIGEgPSArdGhpc1xuICAgICwgYiA9IGxpbSA9PSB1bmRlZmluZWQgPyAwIDogK2xpbVxuICAgICwgbSA9IE1hdGgubWluKGEsIGIpO1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChNYXRoLm1heChhLCBiKSAtIG0pICsgbTtcbn07XG5cbmlmKCQuRlcpJC5lYWNoLmNhbGwoKFxuICAgIC8vIEVTMzpcbiAgICAncm91bmQsZmxvb3IsY2VpbCxhYnMsc2luLGFzaW4sY29zLGFjb3MsdGFuLGF0YW4sZXhwLHNxcnQsbWF4LG1pbixwb3csYXRhbjIsJyArXG4gICAgLy8gRVM2OlxuICAgICdhY29zaCxhc2luaCxhdGFuaCxjYnJ0LGNsejMyLGNvc2gsZXhwbTEsaHlwb3QsaW11bCxsb2cxcCxsb2cxMCxsb2cyLHNpZ24sc2luaCx0YW5oLHRydW5jJ1xuICApLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGZuID0gTWF0aFtrZXldO1xuICAgIGlmKGZuKW1ldGhvZHNba2V5XSA9IGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgICAgLy8gaWU5LSBkb250IHN1cHBvcnQgc3RyaWN0IG1vZGUgJiBjb252ZXJ0IGB0aGlzYCB0byBvYmplY3QgLT4gY29udmVydCBpdCB0byBudW1iZXJcbiAgICAgIHZhciBhcmdzID0gWyt0aGlzXVxuICAgICAgICAsIGkgICAgPSAwO1xuICAgICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MpO1xuICAgIH07XG4gIH1cbik7XG5cbiRkZWYoJGRlZi5QICsgJGRlZi5GLCAnTnVtYmVyJywgbWV0aG9kcyk7IiwidmFyICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgcmVwbGFjZXIgPSByZXF1aXJlKCcuLyQucmVwbGFjZXInKTtcbnZhciBlc2NhcGVIVE1MRGljdCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyZhcG9zOydcbn0sIHVuZXNjYXBlSFRNTERpY3QgPSB7fSwga2V5O1xuZm9yKGtleSBpbiBlc2NhcGVIVE1MRGljdCl1bmVzY2FwZUhUTUxEaWN0W2VzY2FwZUhUTUxEaWN0W2tleV1dID0ga2V5O1xuJGRlZigkZGVmLlAgKyAkZGVmLkYsICdTdHJpbmcnLCB7XG4gIGVzY2FwZUhUTUw6ICAgcmVwbGFjZXIoL1smPD5cIiddL2csIGVzY2FwZUhUTUxEaWN0KSxcbiAgdW5lc2NhcGVIVE1MOiByZXBsYWNlcigvJig/OmFtcHxsdHxndHxxdW90fGFwb3MpOy9nLCB1bmVzY2FwZUhUTUxEaWN0KVxufSk7IiwidmFyICQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgY29yZSAgICAgICAgID0gJC5jb3JlXG4gICwgZm9ybWF0UmVnRXhwID0gL1xcYlxcd1xcdz9cXGIvZ1xuICAsIGZsZXhpb1JlZ0V4cCA9IC86KC4qKVxcfCguKikkL1xuICAsIGxvY2FsZXMgICAgICA9IHt9XG4gICwgY3VycmVudCAgICAgID0gJ2VuJ1xuICAsIFNFQ09ORFMgICAgICA9ICdTZWNvbmRzJ1xuICAsIE1JTlVURVMgICAgICA9ICdNaW51dGVzJ1xuICAsIEhPVVJTICAgICAgICA9ICdIb3VycydcbiAgLCBEQVRFICAgICAgICAgPSAnRGF0ZSdcbiAgLCBNT05USCAgICAgICAgPSAnTW9udGgnXG4gICwgWUVBUiAgICAgICAgID0gJ0Z1bGxZZWFyJztcbmZ1bmN0aW9uIGx6KG51bSl7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufVxuZnVuY3Rpb24gY3JlYXRlRm9ybWF0KHByZWZpeCl7XG4gIHJldHVybiBmdW5jdGlvbih0ZW1wbGF0ZSwgbG9jYWxlIC8qID0gY3VycmVudCAqLyl7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAsIGRpY3QgPSBsb2NhbGVzWyQuaGFzKGxvY2FsZXMsIGxvY2FsZSkgPyBsb2NhbGUgOiBjdXJyZW50XTtcbiAgICBmdW5jdGlvbiBnZXQodW5pdCl7XG4gICAgICByZXR1cm4gdGhhdFtwcmVmaXggKyB1bml0XSgpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKHRlbXBsYXRlKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24ocGFydCl7XG4gICAgICBzd2l0Y2gocGFydCl7XG4gICAgICAgIGNhc2UgJ3MnICA6IHJldHVybiBnZXQoU0VDT05EUyk7ICAgICAgICAgICAgICAgICAgLy8gU2Vjb25kcyA6IDAtNTlcbiAgICAgICAgY2FzZSAnc3MnIDogcmV0dXJuIGx6KGdldChTRUNPTkRTKSk7ICAgICAgICAgICAgICAvLyBTZWNvbmRzIDogMDAtNTlcbiAgICAgICAgY2FzZSAnbScgIDogcmV0dXJuIGdldChNSU5VVEVTKTsgICAgICAgICAgICAgICAgICAvLyBNaW51dGVzIDogMC01OVxuICAgICAgICBjYXNlICdtbScgOiByZXR1cm4gbHooZ2V0KE1JTlVURVMpKTsgICAgICAgICAgICAgIC8vIE1pbnV0ZXMgOiAwMC01OVxuICAgICAgICBjYXNlICdoJyAgOiByZXR1cm4gZ2V0KEhPVVJTKTsgICAgICAgICAgICAgICAgICAgIC8vIEhvdXJzICAgOiAwLTIzXG4gICAgICAgIGNhc2UgJ2hoJyA6IHJldHVybiBseihnZXQoSE9VUlMpKTsgICAgICAgICAgICAgICAgLy8gSG91cnMgICA6IDAwLTIzXG4gICAgICAgIGNhc2UgJ0QnICA6IHJldHVybiBnZXQoREFURSk7ICAgICAgICAgICAgICAgICAgICAgLy8gRGF0ZSAgICA6IDEtMzFcbiAgICAgICAgY2FzZSAnREQnIDogcmV0dXJuIGx6KGdldChEQVRFKSk7ICAgICAgICAgICAgICAgICAvLyBEYXRlICAgIDogMDEtMzFcbiAgICAgICAgY2FzZSAnVycgIDogcmV0dXJuIGRpY3RbMF1bZ2V0KCdEYXknKV07ICAgICAgICAgICAvLyBEYXkgICAgIDog0J/QvtC90LXQtNC10LvRjNC90LjQulxuICAgICAgICBjYXNlICdOJyAgOiByZXR1cm4gZ2V0KE1PTlRIKSArIDE7ICAgICAgICAgICAgICAgIC8vIE1vbnRoICAgOiAxLTEyXG4gICAgICAgIGNhc2UgJ05OJyA6IHJldHVybiBseihnZXQoTU9OVEgpICsgMSk7ICAgICAgICAgICAgLy8gTW9udGggICA6IDAxLTEyXG4gICAgICAgIGNhc2UgJ00nICA6IHJldHVybiBkaWN0WzJdW2dldChNT05USCldOyAgICAgICAgICAgLy8gTW9udGggICA6INCv0L3QstCw0YDRjFxuICAgICAgICBjYXNlICdNTScgOiByZXR1cm4gZGljdFsxXVtnZXQoTU9OVEgpXTsgICAgICAgICAgIC8vIE1vbnRoICAgOiDQr9C90LLQsNGA0Y9cbiAgICAgICAgY2FzZSAnWScgIDogcmV0dXJuIGdldChZRUFSKTsgICAgICAgICAgICAgICAgICAgICAvLyBZZWFyICAgIDogMjAxNFxuICAgICAgICBjYXNlICdZWScgOiByZXR1cm4gbHooZ2V0KFlFQVIpICUgMTAwKTsgICAgICAgICAgIC8vIFllYXIgICAgOiAxNFxuICAgICAgfSByZXR1cm4gcGFydDtcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGFkZExvY2FsZShsYW5nLCBsb2NhbGUpe1xuICBmdW5jdGlvbiBzcGxpdChpbmRleCl7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICQuZWFjaC5jYWxsKGxvY2FsZS5tb250aHMuc3BsaXQoJywnKSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmVzdWx0LnB1c2goaXQucmVwbGFjZShmbGV4aW9SZWdFeHAsICckJyArIGluZGV4KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsb2NhbGVzW2xhbmddID0gW2xvY2FsZS53ZWVrZGF5cy5zcGxpdCgnLCcpLCBzcGxpdCgxKSwgc3BsaXQoMildO1xuICByZXR1cm4gY29yZTtcbn1cbiRkZWYoJGRlZi5QICsgJGRlZi5GLCBEQVRFLCB7XG4gIGZvcm1hdDogICAgY3JlYXRlRm9ybWF0KCdnZXQnKSxcbiAgZm9ybWF0VVRDOiBjcmVhdGVGb3JtYXQoJ2dldFVUQycpXG59KTtcbmFkZExvY2FsZShjdXJyZW50LCB7XG4gIHdlZWtkYXlzOiAnU3VuZGF5LE1vbmRheSxUdWVzZGF5LFdlZG5lc2RheSxUaHVyc2RheSxGcmlkYXksU2F0dXJkYXknLFxuICBtb250aHM6ICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJ1xufSk7XG5hZGRMb2NhbGUoJ3J1Jywge1xuICB3ZWVrZGF5czogJ9CS0L7RgdC60YDQtdGB0LXQvdGM0LUs0J/QvtC90LXQtNC10LvRjNC90LjQuizQktGC0L7RgNC90LjQuizQodGA0LXQtNCwLNCn0LXRgtCy0LXRgNCzLNCf0Y/RgtC90LjRhtCwLNCh0YPQsdCx0L7RgtCwJyxcbiAgbW9udGhzOiAn0K/QvdCy0LDRgDrRj3zRjCzQpNC10LLRgNCw0Ls60Y980Yws0JzQsNGA0YI60LB8LNCQ0L/RgNC10Ls60Y980Yws0JzQsDrRj3zQuSzQmNGO0L060Y980YwsJyArXG4gICAgICAgICAgJ9CY0Y7QuzrRj3zRjCzQkNCy0LPRg9GB0YI60LB8LNCh0LXQvdGC0Y/QsdGAOtGPfNGMLNCe0LrRgtGP0LHRgDrRj3zRjCzQndC+0Y/QsdGAOtGPfNGMLNCU0LXQutCw0LHRgDrRj3zRjCdcbn0pO1xuY29yZS5sb2NhbGUgPSBmdW5jdGlvbihsb2NhbGUpe1xuICByZXR1cm4gJC5oYXMobG9jYWxlcywgbG9jYWxlKSA/IGN1cnJlbnQgPSBsb2NhbGUgOiBjdXJyZW50O1xufTtcbmNvcmUuYWRkTG9jYWxlID0gYWRkTG9jYWxlOyIsInZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLkcgKyAkZGVmLkYsIHtnbG9iYWw6IHJlcXVpcmUoJy4vJCcpLmd9KTsiLCJ2YXIgJCAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGxvZyAgPSB7fVxuICAsIGVuYWJsZWQgPSB0cnVlO1xuLy8gTWV0aG9kcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZlbG9wZXJUb29sc1dHL2NvbnNvbGUtb2JqZWN0L2Jsb2IvbWFzdGVyL2FwaS5tZFxuJC5lYWNoLmNhbGwoKCdhc3NlcnQsY2xlYXIsY291bnQsZGVidWcsZGlyLGRpcnhtbCxlcnJvcixleGNlcHRpb24sJyArXG4gICAgJ2dyb3VwLGdyb3VwQ29sbGFwc2VkLGdyb3VwRW5kLGluZm8saXNJbmRlcGVuZGVudGx5Q29tcG9zZWQsbG9nLCcgK1xuICAgICdtYXJrVGltZWxpbmUscHJvZmlsZSxwcm9maWxlRW5kLHRhYmxlLHRpbWUsdGltZUVuZCx0aW1lbGluZSwnICtcbiAgICAndGltZWxpbmVFbmQsdGltZVN0YW1wLHRyYWNlLHdhcm4nKS5zcGxpdCgnLCcpLCBmdW5jdGlvbihrZXkpe1xuICBsb2dba2V5XSA9IGZ1bmN0aW9uKCl7XG4gICAgaWYoZW5hYmxlZCAmJiAkLmcuY29uc29sZSAmJiAkLmlzRnVuY3Rpb24oY29uc29sZVtrZXldKSl7XG4gICAgICByZXR1cm4gRnVuY3Rpb24uYXBwbHkuY2FsbChjb25zb2xlW2tleV0sIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufSk7XG4kZGVmKCRkZWYuRyArICRkZWYuRiwge2xvZzogcmVxdWlyZSgnLi8kLmFzc2lnbicpKGxvZy5sb2csIGxvZywge1xuICBlbmFibGU6IGZ1bmN0aW9uKCl7XG4gICAgZW5hYmxlZCA9IHRydWU7XG4gIH0sXG4gIGRpc2FibGU6IGZ1bmN0aW9uKCl7XG4gICAgZW5hYmxlZCA9IGZhbHNlO1xuICB9XG59KX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpXG4gICwgY29yZSAgID0ge31cbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHlcbiAgLCBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vclxuICAsIG1heCAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICA9IE1hdGgubWluO1xuLy8gVGhlIGVuZ2luZSB3b3JrcyBmaW5lIHdpdGggZGVzY3JpcHRvcnM/IFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkuXG52YXIgREVTQyA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDI7IH19KS5hID09IDI7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcbnZhciBoaWRlID0gY3JlYXRlRGVmaW5lcigxKTtcbi8vIDcuMS40IFRvSW50ZWdlclxuZnVuY3Rpb24gdG9JbnRlZ2VyKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59XG5mdW5jdGlvbiBkZXNjKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn1cbmZ1bmN0aW9uIHNpbXBsZVNldChvYmplY3QsIGtleSwgdmFsdWUpe1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufVxuZnVuY3Rpb24gY3JlYXRlRGVmaW5lcihiaXRtYXApe1xuICByZXR1cm4gREVTQyA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuICQuc2V0RGVzYyhvYmplY3QsIGtleSwgZGVzYyhiaXRtYXAsIHZhbHVlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgfSA6IHNpbXBsZVNldDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoaXQpe1xuICByZXR1cm4gaXQgIT09IG51bGwgJiYgKHR5cGVvZiBpdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2YgaXQgPT0gJ2Z1bmN0aW9uJyk7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZChpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn1cblxudmFyICQgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5mdycpKHtcbiAgZzogZ2xvYmFsLFxuICBjb3JlOiBjb3JlLFxuICBodG1sOiBnbG9iYWwuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9jb3JlLWpzLWlzb2JqZWN0XG4gIGlzT2JqZWN0OiAgIGlzT2JqZWN0LFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpdDogZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdDtcbiAgfSxcbiAgdGhhdDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLy8gNy4xLjQgVG9JbnRlZ2VyXG4gIHRvSW50ZWdlcjogdG9JbnRlZ2VyLFxuICAvLyA3LjEuMTUgVG9MZW5ndGhcbiAgdG9MZW5ndGg6IGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxuICB9LFxuICB0b0luZGV4OiBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gICAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG4gIH0sXG4gIGhhczogZnVuY3Rpb24oaXQsIGtleSl7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG4gIH0sXG4gIGNyZWF0ZTogICAgIE9iamVjdC5jcmVhdGUsXG4gIGdldFByb3RvOiAgIE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgREVTQzogICAgICAgREVTQyxcbiAgZGVzYzogICAgICAgZGVzYyxcbiAgZ2V0RGVzYzogICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgc2V0RGVzYzogICAgZGVmaW5lUHJvcGVydHksXG4gIGdldEtleXM6ICAgIE9iamVjdC5rZXlzLFxuICBnZXROYW1lczogICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgZ2V0U3ltYm9sczogT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgLy8gRHVtbXksIGZpeCBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZyBpbiBlczUgbW9kdWxlXG4gIGFzc2VydERlZmluZWQ6IGFzc2VydERlZmluZWQsXG4gIEVTNU9iamVjdDogT2JqZWN0LFxuICB0b09iamVjdDogZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiAkLkVTNU9iamVjdChhc3NlcnREZWZpbmVkKGl0KSk7XG4gIH0sXG4gIGhpZGU6IGhpZGUsXG4gIGRlZjogY3JlYXRlRGVmaW5lcigwKSxcbiAgc2V0OiBnbG9iYWwuU3ltYm9sID8gc2ltcGxlU2V0IDogaGlkZSxcbiAgbWl4OiBmdW5jdGlvbih0YXJnZXQsIHNyYyl7XG4gICAgZm9yKHZhciBrZXkgaW4gc3JjKWhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9LFxuICBlYWNoOiBbXS5mb3JFYWNoXG59KTtcbmlmKHR5cGVvZiBfX2UgIT0gJ3VuZGVmaW5lZCcpX19lID0gY29yZTtcbmlmKHR5cGVvZiBfX2cgIT0gJ3VuZGVmaW5lZCcpX19nID0gZ2xvYmFsOyIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIGNlbCA9IHJlcXVpcmUoXCIuLyQuZG9tLWNyZWF0ZVwiKSxcbiAgICBjb2YgPSByZXF1aXJlKFwiLi8kLmNvZlwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgaW52b2tlID0gcmVxdWlyZShcIi4vJC5pbnZva2VcIiksXG4gICAgYXJyYXlNZXRob2QgPSByZXF1aXJlKFwiLi8kLmFycmF5LW1ldGhvZHNcIiksXG4gICAgSUVfUFJPVE8gPSByZXF1aXJlKFwiLi8kLnVpZFwiKS5zYWZlKCdfX3Byb3RvX18nKSxcbiAgICBhc3NlcnQgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKSxcbiAgICBhc3NlcnRPYmplY3QgPSBhc3NlcnQub2JqLFxuICAgIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICBodG1sID0gJC5odG1sLFxuICAgIEEgPSBbXSxcbiAgICBfc2xpY2UgPSBBLnNsaWNlLFxuICAgIF9qb2luID0gQS5qb2luLFxuICAgIGNsYXNzb2YgPSBjb2YuY2xhc3NvZixcbiAgICBoYXMgPSAkLmhhcyxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9ICQuc2V0RGVzYyxcbiAgICBnZXRPd25EZXNjcmlwdG9yID0gJC5nZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnRpZXMgPSAkLnNldERlc2NzLFxuICAgIGlzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb24sXG4gICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LFxuICAgIHRvT2JqZWN0ID0gJC50b09iamVjdCxcbiAgICB0b0xlbmd0aCA9ICQudG9MZW5ndGgsXG4gICAgdG9JbmRleCA9ICQudG9JbmRleCxcbiAgICBJRThfRE9NX0RFRklORSA9IGZhbHNlLFxuICAgICRpbmRleE9mID0gcmVxdWlyZShcIi4vJC5hcnJheS1pbmNsdWRlc1wiKShmYWxzZSksXG4gICAgJGZvckVhY2ggPSBhcnJheU1ldGhvZCgwKSxcbiAgICAkbWFwID0gYXJyYXlNZXRob2QoMSksXG4gICAgJGZpbHRlciA9IGFycmF5TWV0aG9kKDIpLFxuICAgICRzb21lID0gYXJyYXlNZXRob2QoMyksXG4gICAgJGV2ZXJ5ID0gYXJyYXlNZXRob2QoNCk7XG5pZiAoISQuREVTQykge1xuICB0cnkge1xuICAgIElFOF9ET01fREVGSU5FID0gZGVmaW5lUHJvcGVydHkoY2VsKCdkaXYnKSwgJ3gnLCB7Z2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDg7XG4gICAgICB9fSkueCA9PSA4O1xuICB9IGNhdGNoIChlKSB7fVxuICAkLnNldERlc2MgPSBmdW5jdGlvbihPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gICAgaWYgKElFOF9ET01fREVGSU5FKVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKVxuICAgICAgYXNzZXJ0T2JqZWN0KE8pW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICByZXR1cm4gTztcbiAgfTtcbiAgJC5nZXREZXNjID0gZnVuY3Rpb24oTywgUCkge1xuICAgIGlmIChJRThfRE9NX0RFRklORSlcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBnZXRPd25EZXNjcmlwdG9yKE8sIFApO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoaGFzKE8sIFApKVxuICAgICAgcmV0dXJuICQuZGVzYyghT2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChPLCBQKSwgT1tQXSk7XG4gIH07XG4gICQuc2V0RGVzY3MgPSBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24oTywgUHJvcGVydGllcykge1xuICAgIGFzc2VydE9iamVjdChPKTtcbiAgICB2YXIga2V5cyA9ICQuZ2V0S2V5cyhQcm9wZXJ0aWVzKSxcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGgsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBQO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKVxuICAgICAgJC5zZXREZXNjKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICAgIHJldHVybiBPO1xuICB9O1xufVxuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhJC5ERVNDLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICQuZ2V0RGVzYyxcbiAgZGVmaW5lUHJvcGVydHk6ICQuc2V0RGVzYyxcbiAgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllc1xufSk7XG52YXIga2V5czEgPSAoJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsJyArICd0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJykuc3BsaXQoJywnKSxcbiAgICBrZXlzMiA9IGtleXMxLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpLFxuICAgIGtleXNMZW4xID0ga2V5czEubGVuZ3RoO1xudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlmcmFtZSA9IGNlbCgnaWZyYW1lJyksXG4gICAgICBpID0ga2V5c0xlbjEsXG4gICAgICBndCA9ICc+JyxcbiAgICAgIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JztcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZSgnPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDwvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pXG4gICAgZGVsZXRlIGNyZWF0ZURpY3QucHJvdG90eXBlW2tleXMxW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVHZXRLZXlzKG5hbWVzLCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9PYmplY3Qob2JqZWN0KSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICBrZXk7XG4gICAgZm9yIChrZXkgaW4gTylcbiAgICAgIGlmIChrZXkgIT0gSUVfUFJPVE8pXG4gICAgICAgIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpXG4gICAgICBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgICAgIH4kaW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuZnVuY3Rpb24gRW1wdHkoKSB7fVxuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiAkLmdldFByb3RvID0gJC5nZXRQcm90byB8fCBmdW5jdGlvbihPKSB7XG4gICAgTyA9IE9iamVjdChhc3NlcnQuZGVmKE8pKTtcbiAgICBpZiAoaGFzKE8sIElFX1BST1RPKSlcbiAgICAgIHJldHVybiBPW0lFX1BST1RPXTtcbiAgICBpZiAoaXNGdW5jdGlvbihPLmNvbnN0cnVjdG9yKSAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIH1cbiAgICByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbiAgfSxcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJC5nZXROYW1lcyA9ICQuZ2V0TmFtZXMgfHwgY3JlYXRlR2V0S2V5cyhrZXlzMiwga2V5czIubGVuZ3RoLCB0cnVlKSxcbiAgY3JlYXRlOiAkLmNyZWF0ZSA9ICQuY3JlYXRlIHx8IGZ1bmN0aW9uKE8sIFByb3BlcnRpZXMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChPICE9PSBudWxsKSB7XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSBhc3NlcnRPYmplY3QoTyk7XG4gICAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgICB9IGVsc2VcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xuICB9LFxuICBrZXlzOiAkLmdldEtleXMgPSAkLmdldEtleXMgfHwgY3JlYXRlR2V0S2V5cyhrZXlzMSwga2V5c0xlbjEsIGZhbHNlKSxcbiAgc2VhbDogZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiBpdDtcbiAgfSxcbiAgZnJlZXplOiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gaXQ7XG4gIH0sXG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiBpdDtcbiAgfSxcbiAgaXNTZWFsZWQ6IGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuICFpc09iamVjdChpdCk7XG4gIH0sXG4gIGlzRnJvemVuOiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiAhaXNPYmplY3QoaXQpO1xuICB9LFxuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCk7XG4gIH1cbn0pO1xuJGRlZigkZGVmLlAsICdGdW5jdGlvbicsIHtiaW5kOiBmdW5jdGlvbih0aGF0KSB7XG4gICAgdmFyIGZuID0gYXNzZXJ0LmZuKHRoaXMpLFxuICAgICAgICBwYXJ0QXJncyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgZnVuY3Rpb24gYm91bmQoKSB7XG4gICAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChfc2xpY2UuY2FsbChhcmd1bWVudHMpKSxcbiAgICAgICAgICBjb25zdHIgPSB0aGlzIGluc3RhbmNlb2YgYm91bmQsXG4gICAgICAgICAgY3R4ID0gY29uc3RyID8gJC5jcmVhdGUoZm4ucHJvdG90eXBlKSA6IHRoYXQsXG4gICAgICAgICAgcmVzdWx0ID0gaW52b2tlKGZuLCBhcmdzLCBjdHgpO1xuICAgICAgcmV0dXJuIGNvbnN0ciA/IGN0eCA6IHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKGZuLnByb3RvdHlwZSlcbiAgICAgIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH19KTtcbmlmICghKDAgaW4gT2JqZWN0KCd6JykgJiYgJ3onWzBdID09ICd6JykpIHtcbiAgJC5FUzVPYmplY3QgPSBmdW5jdGlvbihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbiAgfTtcbn1cbnZhciBidWdneVNsaWNlID0gdHJ1ZTtcbnRyeSB7XG4gIGlmIChodG1sKVxuICAgIF9zbGljZS5jYWxsKGh0bWwpO1xuICBidWdneVNsaWNlID0gZmFsc2U7XG59IGNhdGNoIChlKSB7fVxuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBidWdneVNsaWNlLCAnQXJyYXknLCB7c2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpLFxuICAgICAgICBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JylcbiAgICAgIHJldHVybiBfc2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0luZGV4KGJlZ2luLCBsZW4pLFxuICAgICAgICB1cFRvID0gdG9JbmRleChlbmQsIGxlbiksXG4gICAgICAgIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpLFxuICAgICAgICBjbG9uZWQgPSBBcnJheShzaXplKSxcbiAgICAgICAgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspXG4gICAgICBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJyA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSkgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfX0pO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiAoJC5FUzVPYmplY3QgIT0gT2JqZWN0KSwgJ0FycmF5Jywge2pvaW46IGZ1bmN0aW9uIGpvaW4oKSB7XG4gICAgcmV0dXJuIF9qb2luLmFwcGx5KCQuRVM1T2JqZWN0KHRoaXMpLCBhcmd1bWVudHMpO1xuICB9fSk7XG4kZGVmKCRkZWYuUywgJ0FycmF5Jywge2lzQXJyYXk6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xuICB9fSk7XG5mdW5jdGlvbiBjcmVhdGVBcnJheVJlZHVjZShpc1JpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjYWxsYmFja2ZuLCBtZW1vKSB7XG4gICAgYXNzZXJ0LmZuKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyksXG4gICAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSxcbiAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDAsXG4gICAgICAgIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMilcbiAgICAgIGZvciAoOyA7ICkge1xuICAgICAgICBpZiAoaW5kZXggaW4gTykge1xuICAgICAgICAgIG1lbW8gPSBPW2luZGV4XTtcbiAgICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGFzc2VydChpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4LCAnUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgfVxuICAgIGZvciAoOyBpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKVxuICAgICAgaWYgKGluZGV4IGluIE8pIHtcbiAgICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgT1tpbmRleF0sIGluZGV4LCB0aGlzKTtcbiAgICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn1cbiRkZWYoJGRlZi5QLCAnQXJyYXknLCB7XG4gIGZvckVhY2g6ICQuZWFjaCA9ICQuZWFjaCB8fCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfSxcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbikge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9LFxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfSxcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIHJlZHVjZTogY3JlYXRlQXJyYXlSZWR1Y2UoZmFsc2UpLFxuICByZWR1Y2VSaWdodDogY3JlYXRlQXJyYXlSZWR1Y2UodHJ1ZSksXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2YoZWwpIHtcbiAgICByZXR1cm4gJGluZGV4T2YodGhpcywgZWwsIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbihlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKSxcbiAgICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLFxuICAgICAgICBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKVxuICAgICAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgJC50b0ludGVnZXIoZnJvbUluZGV4KSk7XG4gICAgaWYgKGluZGV4IDwgMClcbiAgICAgIGluZGV4ID0gdG9MZW5ndGgobGVuZ3RoICsgaW5kZXgpO1xuICAgIGZvciAoOyBpbmRleCA+PSAwOyBpbmRleC0tKVxuICAgICAgaWYgKGluZGV4IGluIE8pXG4gICAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpXG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHt0cmltOiByZXF1aXJlKFwiLi8kLnJlcGxhY2VyXCIpKC9eXFxzKihbXFxzXFxTXSpcXFMpP1xccyokLywgJyQxJyl9KTtcbiRkZWYoJGRlZi5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiArbmV3IERhdGU7XG4gIH19KTtcbmZ1bmN0aW9uIGx6KG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn1cbnZhciBkYXRlID0gbmV3IERhdGUoLTVlMTMgLSAxKSxcbiAgICBicm9rZW5EYXRlID0gIShkYXRlLnRvSVNPU3RyaW5nICYmIGRhdGUudG9JU09TdHJpbmcoKSA9PSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJyAmJiByZXF1aXJlKFwiLi8kLnRocm93c1wiKShmdW5jdGlvbigpIHtcbiAgICAgIG5ldyBEYXRlKE5hTikudG9JU09TdHJpbmcoKTtcbiAgICB9KSk7XG4kZGVmKCRkZWYuUCArICRkZWYuRiAqIGJyb2tlbkRhdGUsICdEYXRlJywge3RvSVNPU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWlzRmluaXRlKHRoaXMpKVxuICAgICAgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gICAgdmFyIGQgPSB0aGlzLFxuICAgICAgICB5ID0gZC5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKSxcbiAgICAgICAgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICsgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xuICB9fSk7XG5pZiAoY2xhc3NvZihmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cztcbn0oKSkgPT0gJ09iamVjdCcpXG4gIGNvZi5jbGFzc29mID0gZnVuY3Rpb24oaXQpIHtcbiAgICB2YXIgdGFnID0gY2xhc3NvZihpdCk7XG4gICAgcmV0dXJuIHRhZyA9PSAnT2JqZWN0JyAmJiBpc0Z1bmN0aW9uKGl0LmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHRhZztcbiAgfTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIHNldFRhZyA9IHJlcXVpcmUoXCIuLyQuY29mXCIpLnNldCxcbiAgICB1aWQgPSByZXF1aXJlKFwiLi8kLnVpZFwiKSxcbiAgICBzaGFyZWQgPSByZXF1aXJlKFwiLi8kLnNoYXJlZFwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgJHJlZGVmID0gcmVxdWlyZShcIi4vJC5yZWRlZlwiKSxcbiAgICBrZXlPZiA9IHJlcXVpcmUoXCIuLyQua2V5b2ZcIiksXG4gICAgZW51bUtleXMgPSByZXF1aXJlKFwiLi8kLmVudW0ta2V5c1wiKSxcbiAgICBhc3NlcnRPYmplY3QgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKS5vYmosXG4gICAgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgIERFU0MgPSAkLkRFU0MsXG4gICAgaGFzID0gJC5oYXMsXG4gICAgJGNyZWF0ZSA9ICQuY3JlYXRlLFxuICAgIGdldERlc2MgPSAkLmdldERlc2MsXG4gICAgc2V0RGVzYyA9ICQuc2V0RGVzYyxcbiAgICBkZXNjID0gJC5kZXNjLFxuICAgICRuYW1lcyA9IHJlcXVpcmUoXCIuLyQuZ2V0LW5hbWVzXCIpLFxuICAgIGdldE5hbWVzID0gJG5hbWVzLmdldCxcbiAgICB0b09iamVjdCA9ICQudG9PYmplY3QsXG4gICAgJFN5bWJvbCA9ICQuZy5TeW1ib2wsXG4gICAgc2V0dGVyID0gZmFsc2UsXG4gICAgVEFHID0gdWlkKCd0YWcnKSxcbiAgICBISURERU4gPSB1aWQoJ2hpZGRlbicpLFxuICAgIF9wcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKSxcbiAgICBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyksXG4gICAgdXNlTmF0aXZlID0gJC5pc0Z1bmN0aW9uKCRTeW1ib2wpO1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDID8gZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRjcmVhdGUoc2V0RGVzYyh7fSwgSElEREVOLCB7Z2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNldERlc2ModGhpcywgSElEREVOLCB7dmFsdWU6IGZhbHNlfSlbSElEREVOXTtcbiAgICAgIH19KSlbSElEREVOXSB8fCBzZXREZXNjO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGl0LCBrZXksIEQpIHtcbiAgICAgIHZhciBwcm90b0Rlc2MgPSBnZXREZXNjKE9iamVjdFByb3RvLCBrZXkpO1xuICAgICAgaWYgKHByb3RvRGVzYylcbiAgICAgICAgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gICAgICBzZXREZXNjKGl0LCBrZXksIEQpO1xuICAgICAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pXG4gICAgICAgIHNldERlc2MoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbiAgICB9O1xuICB9XG59KCkgOiBzZXREZXNjO1xuZnVuY3Rpb24gd3JhcCh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9ICQuc2V0KCRjcmVhdGUoJFN5bWJvbC5wcm90b3R5cGUpLCBUQUcsIHRhZyk7XG4gIERFU0MgJiYgc2V0dGVyICYmIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSlcbiAgICAgICAgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBkZXNjKDEsIHZhbHVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN5bTtcbn1cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpXG4gICAgICAgIHNldERlc2MoaXQsIEhJRERFTiwgZGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pXG4gICAgICAgIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9ICRjcmVhdGUoRCwge2VudW1lcmFibGU6IGRlc2MoMCwgZmFsc2UpfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9XG4gIHJldHVybiBzZXREZXNjKGl0LCBrZXksIEQpO1xufVxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhc3NlcnRPYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b09iamVjdChQKSksXG4gICAgICBpID0gMCxcbiAgICAgIGwgPSBrZXlzLmxlbmd0aCxcbiAgICAgIGtleTtcbiAgd2hpbGUgKGwgPiBpKVxuICAgIGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gJGNyZWF0ZShpdCkgOiBkZWZpbmVQcm9wZXJ0aWVzKCRjcmVhdGUoaXQpLCBQKTtcbn1cbmZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IF9wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIGtleSk7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn1cbmZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIHZhciBEID0gZ2V0RGVzYyhpdCA9IHRvT2JqZWN0KGl0KSwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlcbiAgICBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn1cbmZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ2V0TmFtZXModG9PYmplY3QoaXQpKSxcbiAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgaSA9IDAsXG4gICAgICBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKVxuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4pXG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdldE5hbWVzKHRvT2JqZWN0KGl0KSksXG4gICAgICByZXN1bHQgPSBbXSxcbiAgICAgIGkgPSAwLFxuICAgICAga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSlcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pKVxuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmlmICghdXNlTmF0aXZlKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICByZXR1cm4gd3JhcCh1aWQoYXJndW1lbnRzWzBdKSk7XG4gIH07XG4gICRyZWRlZigkU3ltYm9sLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbVEFHXTtcbiAgfSk7XG4gICQuY3JlYXRlID0gY3JlYXRlO1xuICAkLnNldERlc2MgPSBkZWZpbmVQcm9wZXJ0eTtcbiAgJC5nZXREZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkLnNldERlc2NzID0gZGVmaW5lUHJvcGVydGllcztcbiAgJC5nZXROYW1lcyA9ICRuYW1lcy5nZXQgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAkLmdldFN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gIGlmICgkLkRFU0MgJiYgJC5GVylcbiAgICAkcmVkZWYoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsIHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbn1cbnZhciBzeW1ib2xTdGF0aWNzID0ge1xuICAnZm9yJzogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKSA/IFN5bWJvbFJlZ2lzdHJ5W2tleV0gOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpIHtcbiAgICByZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKSB7XG4gICAgc2V0dGVyID0gdHJ1ZTtcbiAgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpIHtcbiAgICBzZXR0ZXIgPSBmYWxzZTtcbiAgfVxufTtcbiQuZWFjaC5jYWxsKCgnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLCcgKyAnc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcycpLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGl0KSB7XG4gIHZhciBzeW0gPSByZXF1aXJlKFwiLi8kLndrc1wiKShpdCk7XG4gIHN5bWJvbFN0YXRpY3NbaXRdID0gdXNlTmF0aXZlID8gc3ltIDogd3JhcChzeW0pO1xufSk7XG5zZXR0ZXIgPSB0cnVlO1xuJGRlZigkZGVmLkcgKyAkZGVmLlcsIHtTeW1ib2w6ICRTeW1ib2x9KTtcbiRkZWYoJGRlZi5TLCAnU3ltYm9sJywgc3ltYm9sU3RhdGljcyk7XG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICF1c2VOYXRpdmUsICdPYmplY3QnLCB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHksXG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXMsXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5zZXRUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuc2V0VGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG5zZXRUYWcoJC5nLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvKiAqLyBcbnZhciAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIik7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoXCIuLyQuYXNzaWduXCIpfSk7XG4iLCIvKiAqLyBcbnZhciAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIik7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtpczogcmVxdWlyZShcIi4vJC5zYW1lXCIpfSk7XG4iLCIvKiAqLyBcbnZhciAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIik7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZShcIi4vJC5zZXQtcHJvdG9cIikuc2V0fSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBjb2YgPSByZXF1aXJlKFwiLi8kLmNvZlwiKSxcbiAgICB0bXAgPSB7fTtcbnRtcFtyZXF1aXJlKFwiLi8kLndrc1wiKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAocmVxdWlyZShcIi4vJFwiKS5GVyAmJiBjb2YodG1wKSAhPSAneicpIHtcbiAgcmVxdWlyZShcIi4vJC5yZWRlZlwiKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNvZi5jbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBpc09iamVjdCA9ICQuaXNPYmplY3QsXG4gICAgdG9PYmplY3QgPSAkLnRvT2JqZWN0O1xuJC5lYWNoLmNhbGwoKCdmcmVlemUsc2VhbCxwcmV2ZW50RXh0ZW5zaW9ucyxpc0Zyb3plbixpc1NlYWxlZCxpc0V4dGVuc2libGUsJyArICdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsZ2V0UHJvdG90eXBlT2Ysa2V5cyxnZXRPd25Qcm9wZXJ0eU5hbWVzJykuc3BsaXQoJywnKSwgZnVuY3Rpb24oS0VZLCBJRCkge1xuICB2YXIgZm4gPSAoJC5jb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXSxcbiAgICAgIGZvcmNlZCA9IDAsXG4gICAgICBtZXRob2QgPSB7fTtcbiAgbWV0aG9kW0tFWV0gPSBJRCA9PSAwID8gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IGl0O1xuICB9IDogSUQgPT0gMSA/IGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogaXQ7XG4gIH0gOiBJRCA9PSAyID8gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogaXQ7XG4gIH0gOiBJRCA9PSAzID8gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogdHJ1ZTtcbiAgfSA6IElEID09IDQgPyBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiB0cnVlO1xuICB9IDogSUQgPT0gNSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBmYWxzZTtcbiAgfSA6IElEID09IDYgPyBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBmbih0b09iamVjdChpdCksIGtleSk7XG4gIH0gOiBJRCA9PSA3ID8gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gZm4oT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZChpdCkpKTtcbiAgfSA6IElEID09IDggPyBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIGZuKHRvT2JqZWN0KGl0KSk7XG4gIH0gOiByZXF1aXJlKFwiLi8kLmdldC1uYW1lc1wiKS5nZXQ7XG4gIHRyeSB7XG4gICAgZm4oJ3onKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGZvcmNlZCA9IDE7XG4gIH1cbiAgJGRlZigkZGVmLlMgKyAkZGVmLkYgKiBmb3JjZWQsICdPYmplY3QnLCBtZXRob2QpO1xufSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBOQU1FID0gJ25hbWUnLFxuICAgIHNldERlc2MgPSAkLnNldERlc2MsXG4gICAgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbk5BTUUgaW4gRnVuY3Rpb25Qcm90byB8fCAkLkZXICYmICQuREVTQyAmJiBzZXREZXNjKEZ1bmN0aW9uUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtYXRjaCA9IFN0cmluZyh0aGlzKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoW14gKF0qKS8pLFxuICAgICAgICBuYW1lID0gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnO1xuICAgICQuaGFzKHRoaXMsIE5BTUUpIHx8IHNldERlc2ModGhpcywgTkFNRSwgJC5kZXNjKDUsIG5hbWUpKTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICQuaGFzKHRoaXMsIE5BTUUpIHx8IHNldERlc2ModGhpcywgTkFNRSwgJC5kZXNjKDAsIHZhbHVlKSk7XG4gIH1cbn0pO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgSEFTX0lOU1RBTkNFID0gcmVxdWlyZShcIi4vJC53a3NcIikoJ2hhc0luc3RhbmNlJyksXG4gICAgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSlcbiAgJC5zZXREZXNjKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwge3ZhbHVlOiBmdW5jdGlvbihPKSB7XG4gICAgICBpZiAoISQuaXNGdW5jdGlvbih0aGlzKSB8fCAhJC5pc09iamVjdChPKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCEkLmlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSlcbiAgICAgICAgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAgICAgd2hpbGUgKE8gPSAkLmdldFByb3RvKE8pKVxuICAgICAgICBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfX0pO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LFxuICAgIGlzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb24sXG4gICAgTlVNQkVSID0gJ051bWJlcicsXG4gICAgJE51bWJlciA9ICQuZ1tOVU1CRVJdLFxuICAgIEJhc2UgPSAkTnVtYmVyLFxuICAgIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZShpdCkge1xuICB2YXIgZm4sXG4gICAgICB2YWw7XG4gIGlmIChpc0Z1bmN0aW9uKGZuID0gaXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlcbiAgICByZXR1cm4gdmFsO1xuICBpZiAoaXNGdW5jdGlvbihmbiA9IGl0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKVxuICAgIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIG51bWJlclwiKTtcbn1cbmZ1bmN0aW9uIHRvTnVtYmVyKGl0KSB7XG4gIGlmIChpc09iamVjdChpdCkpXG4gICAgaXQgPSB0b1ByaW1pdGl2ZShpdCk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMiAmJiBpdC5jaGFyQ29kZUF0KDApID09IDQ4KSB7XG4gICAgdmFyIGJpbmFyeSA9IGZhbHNlO1xuICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgY2FzZSA2NjpcbiAgICAgIGNhc2UgOTg6XG4gICAgICAgIGJpbmFyeSA9IHRydWU7XG4gICAgICBjYXNlIDc5OlxuICAgICAgY2FzZSAxMTE6XG4gICAgICAgIHJldHVybiBwYXJzZUludChpdC5zbGljZSgyKSwgYmluYXJ5ID8gMiA6IDgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gK2l0O1xufVxuaWYgKCQuRlcgJiYgISgkTnVtYmVyKCcwbzEnKSAmJiAkTnVtYmVyKCcwYjEnKSkpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcihpdCkge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgJE51bWJlciA/IG5ldyBCYXNlKHRvTnVtYmVyKGl0KSkgOiB0b051bWJlcihpdCk7XG4gIH07XG4gICQuZWFjaC5jYWxsKCQuREVTQyA/ICQuZ2V0TmFtZXMoQmFzZSkgOiAoJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgKyAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgKyAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcicpLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgkLmhhcyhCYXNlLCBrZXkpICYmICEkLmhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICAkLnNldERlc2MoJE51bWJlciwga2V5LCAkLmdldERlc2MoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9KTtcbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKFwiLi8kLnJlZGVmXCIpKCQuZywgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBhYnMgPSBNYXRoLmFicyxcbiAgICBmbG9vciA9IE1hdGguZmxvb3IsXG4gICAgX2lzRmluaXRlID0gJC5nLmlzRmluaXRlLFxuICAgIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmO1xuZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhJC5pc09iamVjdChpdCkgJiYgX2lzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufVxuJGRlZigkZGVmLlMsICdOdW1iZXInLCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01MiksXG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfSxcbiAgaXNJbnRlZ2VyOiBpc0ludGVnZXIsXG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfSxcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgfSxcbiAgTUFYX1NBRkVfSU5URUdFUjogTUFYX1NBRkVfSU5URUdFUixcbiAgTUlOX1NBRkVfSU5URUdFUjogLU1BWF9TQUZFX0lOVEVHRVIsXG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXQsXG4gIHBhcnNlSW50OiBwYXJzZUludFxufSk7XG4iLCIvKiAqLyBcbnZhciBJbmZpbml0eSA9IDEgLyAwLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBFID0gTWF0aC5FLFxuICAgIHBvdyA9IE1hdGgucG93LFxuICAgIGFicyA9IE1hdGguYWJzLFxuICAgIGV4cCA9IE1hdGguZXhwLFxuICAgIGxvZyA9IE1hdGgubG9nLFxuICAgIHNxcnQgPSBNYXRoLnNxcnQsXG4gICAgY2VpbCA9IE1hdGguY2VpbCxcbiAgICBmbG9vciA9IE1hdGguZmxvb3IsXG4gICAgRVBTSUxPTiA9IHBvdygyLCAtNTIpLFxuICAgIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpLFxuICAgIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMiksXG4gICAgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5mdW5jdGlvbiByb3VuZFRpZXNUb0V2ZW4obikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59XG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufVxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IGxvZyh4ICsgc3FydCh4ICogeCArIDEpKTtcbn1cbmZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IGV4cCh4KSAtIDE7XG59XG4kZGVmKCRkZWYuUywgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IGlzRmluaXRlKHgpID8gbG9nKHggLyBFICsgc3FydCh4ICsgMSkgKiBzcXJ0KHggLSAxKSAvIEUpICsgMSA6IHg7XG4gIH0sXG4gIGFzaW5oOiBhc2luaCxcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBsb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfSxcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIHBvdyhhYnMoeCksIDEgLyAzKTtcbiAgfSxcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gZmxvb3IobG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfSxcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfSxcbiAgZXhwbTE6IGV4cG0xLFxuICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gICAgdmFyICRhYnMgPSBhYnMoeCksXG4gICAgICAgICRzaWduID0gc2lnbih4KSxcbiAgICAgICAgYSxcbiAgICAgICAgcmVzdWx0O1xuICAgIGlmICgkYWJzIDwgTUlOMzIpXG4gICAgICByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdClcbiAgICAgIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfSxcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgdmFyIHN1bSA9IDAsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBsYXJnID0gMCxcbiAgICAgICAgYXJnLFxuICAgICAgICBkaXY7XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2VcbiAgICAgICAgc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogc3FydChzdW0pO1xuICB9LFxuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUludDE2ID0gMHhmZmZmLFxuICAgICAgICB4biA9ICt4LFxuICAgICAgICB5biA9ICt5LFxuICAgICAgICB4bCA9IFVJbnQxNiAmIHhuLFxuICAgICAgICB5bCA9IFVJbnQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUludDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUludDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH0sXG4gIGxvZzFwOiBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogbG9nKDEgKyB4KTtcbiAgfSxcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTWF0aC5MTjEwO1xuICB9LFxuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTWF0aC5MTjI7XG4gIH0sXG4gIHNpZ246IHNpZ24sXG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBhYnMoeCA9ICt4KSA8IDEgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMiA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKEUgLyAyKTtcbiAgfSxcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpLFxuICAgICAgICBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH0sXG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiLyogKi8gXG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgIHRvSW5kZXggPSByZXF1aXJlKFwiLi8kXCIpLnRvSW5kZXgsXG4gICAgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcbiAgICAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7ZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIHJlcyA9IFtdLFxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgY29kZTtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSlcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMCA/IGZyb21DaGFyQ29kZShjb2RlKSA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfX0pO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpO1xuJGRlZigkZGVmLlMsICdTdHJpbmcnLCB7cmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gJC50b09iamVjdChjYWxsU2l0ZS5yYXcpLFxuICAgICAgICBsZW4gPSAkLnRvTGVuZ3RoKHRwbC5sZW5ndGgpLFxuICAgICAgICBzbG4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICByZXMgPSBbXSxcbiAgICAgICAgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBzbG4pXG4gICAgICAgIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfX0pO1xuIiwiLyogKi8gXG52YXIgc2V0ID0gcmVxdWlyZShcIi4vJFwiKS5zZXQsXG4gICAgJGF0ID0gcmVxdWlyZShcIi4vJC5zdHJpbmctYXRcIikodHJ1ZSksXG4gICAgSVRFUiA9IHJlcXVpcmUoXCIuLyQudWlkXCIpLnNhZmUoJ2l0ZXInKSxcbiAgICAkaXRlciA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKSxcbiAgICBzdGVwID0gJGl0ZXIuc3RlcDtcbnJlcXVpcmUoXCIuLyQuaXRlci1kZWZpbmVcIikoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpIHtcbiAgc2V0KHRoaXMsIElURVIsIHtcbiAgICBvOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGk6IDBcbiAgfSk7XG59LCBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZXIgPSB0aGlzW0lURVJdLFxuICAgICAgTyA9IGl0ZXIubyxcbiAgICAgIGluZGV4ID0gaXRlci5pLFxuICAgICAgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aClcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICBpdGVyLmkgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4gc3RlcCgwLCBwb2ludCk7XG59KTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICAkYXQgPSByZXF1aXJlKFwiLi8kLnN0cmluZy1hdFwiKShmYWxzZSk7XG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9fSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBjb2YgPSByZXF1aXJlKFwiLi8kLmNvZlwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgdG9MZW5ndGggPSAkLnRvTGVuZ3RoO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiAhcmVxdWlyZShcIi4vJC50aHJvd3NcIikoZnVuY3Rpb24oKSB7XG4gICdxJy5lbmRzV2l0aCgvLi8pO1xufSksICdTdHJpbmcnLCB7ZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZykge1xuICAgIGlmIChjb2Yoc2VhcmNoU3RyaW5nKSA9PSAnUmVnRXhwJylcbiAgICAgIHRocm93IFR5cGVFcnJvcigpO1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSksXG4gICAgICAgIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzWzFdLFxuICAgICAgICBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCksXG4gICAgICAgIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgc2VhcmNoU3RyaW5nICs9ICcnO1xuICAgIHJldHVybiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaFN0cmluZy5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaFN0cmluZztcbiAgfX0pO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgY29mID0gcmVxdWlyZShcIi4vJC5jb2ZcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7aW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZykge1xuICAgIGlmIChjb2Yoc2VhcmNoU3RyaW5nKSA9PSAnUmVnRXhwJylcbiAgICAgIHRocm93IFR5cGVFcnJvcigpO1xuICAgIHJldHVybiAhIX5TdHJpbmcoJC5hc3NlcnREZWZpbmVkKHRoaXMpKS5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzWzFdKTtcbiAgfX0pO1xuIiwiLyogKi8gXG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7cmVwZWF0OiByZXF1aXJlKFwiLi8kLnN0cmluZy1yZXBlYXRcIil9KTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIGNvZiA9IHJlcXVpcmUoXCIuLyQuY29mXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKTtcbiRkZWYoJGRlZi5QICsgJGRlZi5GICogIXJlcXVpcmUoXCIuLyQudGhyb3dzXCIpKGZ1bmN0aW9uKCkge1xuICAncScuc3RhcnRzV2l0aCgvLi8pO1xufSksICdTdHJpbmcnLCB7c3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcpIHtcbiAgICBpZiAoY29mKHNlYXJjaFN0cmluZykgPT0gJ1JlZ0V4cCcpXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICB2YXIgdGhhdCA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhpcykpLFxuICAgICAgICBpbmRleCA9ICQudG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzWzFdLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHNlYXJjaFN0cmluZyArPSAnJztcbiAgICByZXR1cm4gdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2hTdHJpbmcubGVuZ3RoKSA9PT0gc2VhcmNoU3RyaW5nO1xuICB9fSk7XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBjdHggPSByZXF1aXJlKFwiLi8kLmN0eFwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgJGl0ZXIgPSByZXF1aXJlKFwiLi8kLml0ZXJcIiksXG4gICAgY2FsbCA9IHJlcXVpcmUoXCIuLyQuaXRlci1jYWxsXCIpO1xuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhcmVxdWlyZShcIi4vJC5pdGVyLWRldGVjdFwiKShmdW5jdGlvbihpdGVyKSB7XG4gIEFycmF5LmZyb20oaXRlcik7XG59KSwgJ0FycmF5Jywge2Zyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlKSB7XG4gICAgdmFyIE8gPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKGFycmF5TGlrZSkpLFxuICAgICAgICBtYXBmbiA9IGFyZ3VtZW50c1sxXSxcbiAgICAgICAgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQsXG4gICAgICAgIGYgPSBtYXBwaW5nID8gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpIDogdW5kZWZpbmVkLFxuICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgIGxlbmd0aCxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBzdGVwLFxuICAgICAgICBpdGVyYXRvcjtcbiAgICBpZiAoJGl0ZXIuaXMoTykpIHtcbiAgICAgIGl0ZXJhdG9yID0gJGl0ZXIuZ2V0KE8pO1xuICAgICAgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KTtcbiAgICAgIGZvciAoOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBmLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkobGVuZ3RoID0gJC50b0xlbmd0aChPLmxlbmd0aCkpO1xuICAgICAgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBtYXBwaW5nID8gZihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9fSk7XG4iLCIvKiAqLyBcbnZhciAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIik7XG4kZGVmKCRkZWYuUywgJ0FycmF5Jywge29mOiBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KVxuICAgICAgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH19KTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIHNldFVuc2NvcGUgPSByZXF1aXJlKFwiLi8kLnVuc2NvcGVcIiksXG4gICAgSVRFUiA9IHJlcXVpcmUoXCIuLyQudWlkXCIpLnNhZmUoJ2l0ZXInKSxcbiAgICAkaXRlciA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKSxcbiAgICBzdGVwID0gJGl0ZXIuc3RlcCxcbiAgICBJdGVyYXRvcnMgPSAkaXRlci5JdGVyYXRvcnM7XG5yZXF1aXJlKFwiLi8kLml0ZXItZGVmaW5lXCIpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCkge1xuICAkLnNldCh0aGlzLCBJVEVSLCB7XG4gICAgbzogJC50b09iamVjdChpdGVyYXRlZCksXG4gICAgaTogMCxcbiAgICBrOiBraW5kXG4gIH0pO1xufSwgZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVyID0gdGhpc1tJVEVSXSxcbiAgICAgIE8gPSBpdGVyLm8sXG4gICAgICBraW5kID0gaXRlci5rLFxuICAgICAgaW5kZXggPSBpdGVyLmkrKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgaXRlci5vID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJylcbiAgICByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKVxuICAgIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcbnNldFVuc2NvcGUoJ2tleXMnKTtcbnNldFVuc2NvcGUoJ3ZhbHVlcycpO1xuc2V0VW5zY29wZSgnZW50cmllcycpO1xuIiwiLyogKi8gXG5yZXF1aXJlKFwiLi8kLnNwZWNpZXNcIikoQXJyYXkpO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgIHRvSW5kZXggPSAkLnRvSW5kZXg7XG4kZGVmKCRkZWYuUCwgJ0FycmF5Jywge2NvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCkge1xuICAgIHZhciBPID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSksXG4gICAgICAgIGxlbiA9ICQudG9MZW5ndGgoTy5sZW5ndGgpLFxuICAgICAgICB0byA9IHRvSW5kZXgodGFyZ2V0LCBsZW4pLFxuICAgICAgICBmcm9tID0gdG9JbmRleChzdGFydCwgbGVuKSxcbiAgICAgICAgZW5kID0gYXJndW1lbnRzWzJdLFxuICAgICAgICBmaW4gPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pLFxuICAgICAgICBjb3VudCA9IE1hdGgubWluKGZpbiAtIGZyb20sIGxlbiAtIHRvKSxcbiAgICAgICAgaW5jID0gMTtcbiAgICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgICBpbmMgPSAtMTtcbiAgICAgIGZyb20gPSBmcm9tICsgY291bnQgLSAxO1xuICAgICAgdG8gPSB0byArIGNvdW50IC0gMTtcbiAgICB9XG4gICAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgICBpZiAoZnJvbSBpbiBPKVxuICAgICAgICBPW3RvXSA9IE9bZnJvbV07XG4gICAgICBlbHNlXG4gICAgICAgIGRlbGV0ZSBPW3RvXTtcbiAgICAgIHRvICs9IGluYztcbiAgICAgIGZyb20gKz0gaW5jO1xuICAgIH1cbiAgICByZXR1cm4gTztcbiAgfX0pO1xucmVxdWlyZShcIi4vJC51bnNjb3BlXCIpKCdjb3B5V2l0aGluJyk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgdG9JbmRleCA9ICQudG9JbmRleDtcbiRkZWYoJGRlZi5QLCAnQXJyYXknLCB7ZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSkge1xuICAgIHZhciBPID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSksXG4gICAgICAgIGxlbmd0aCA9ICQudG9MZW5ndGgoTy5sZW5ndGgpLFxuICAgICAgICBpbmRleCA9IHRvSW5kZXgoYXJndW1lbnRzWzFdLCBsZW5ndGgpLFxuICAgICAgICBlbmQgPSBhcmd1bWVudHNbMl0sXG4gICAgICAgIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KVxuICAgICAgT1tpbmRleCsrXSA9IHZhbHVlO1xuICAgIHJldHVybiBPO1xuICB9fSk7XG5yZXF1aXJlKFwiLi8kLnVuc2NvcGVcIikoJ2ZpbGwnKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIEtFWSA9ICdmaW5kJyxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgZm9yY2VkID0gdHJ1ZSxcbiAgICAkZmluZCA9IHJlcXVpcmUoXCIuLyQuYXJyYXktbWV0aG9kc1wiKSg1KTtcbmlmIChLRVkgaW4gW10pXG4gIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKSB7XG4gICAgZm9yY2VkID0gZmFsc2U7XG4gIH0pO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBmb3JjZWQsICdBcnJheScsIHtmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfX0pO1xucmVxdWlyZShcIi4vJC51bnNjb3BlXCIpKEtFWSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBLRVkgPSAnZmluZEluZGV4JyxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgZm9yY2VkID0gdHJ1ZSxcbiAgICAkZmluZCA9IHJlcXVpcmUoXCIuLyQuYXJyYXktbWV0aG9kc1wiKSg2KTtcbmlmIChLRVkgaW4gW10pXG4gIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKSB7XG4gICAgZm9yY2VkID0gZmFsc2U7XG4gIH0pO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBmb3JjZWQsICdBcnJheScsIHtmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH19KTtcbnJlcXVpcmUoXCIuLyQudW5zY29wZVwiKShLRVkpO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgY29mID0gcmVxdWlyZShcIi4vJC5jb2ZcIiksXG4gICAgJFJlZ0V4cCA9ICQuZy5SZWdFeHAsXG4gICAgQmFzZSA9ICRSZWdFeHAsXG4gICAgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZSxcbiAgICByZSA9IC9hL2csXG4gICAgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZSkgIT09IHJlLFxuICAgIEFMTE9XU19SRV9XSVRIX0ZMQUdTID0gZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gJFJlZ0V4cChyZSwgJ2knKSA9PSAnL2EvaSc7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKTtcbmlmICgkLkZXICYmICQuREVTQykge1xuICBpZiAoIUNPUlJFQ1RfTkVXIHx8ICFBTExPV1NfUkVfV0lUSF9GTEFHUykge1xuICAgICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBjb2YocGF0dGVybikgPT0gJ1JlZ0V4cCcsXG4gICAgICAgICAgZmxhZ3NJc1VuZGVmaW5lZCA9IGZsYWdzID09PSB1bmRlZmluZWQ7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cCkgJiYgcGF0dGVybklzUmVnRXhwICYmIGZsYWdzSXNVbmRlZmluZWQpXG4gICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgcmV0dXJuIENPUlJFQ1RfTkVXID8gbmV3IEJhc2UocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0lzVW5kZWZpbmVkID8gcGF0dGVybi5zb3VyY2UgOiBwYXR0ZXJuLCBmbGFncykgOiBuZXcgQmFzZShwYXR0ZXJuSXNSZWdFeHAgPyBwYXR0ZXJuLnNvdXJjZSA6IHBhdHRlcm4sIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0lzVW5kZWZpbmVkID8gcGF0dGVybi5mbGFncyA6IGZsYWdzKTtcbiAgICB9O1xuICAgICQuZWFjaC5jYWxsKCQuZ2V0TmFtZXMoQmFzZSksIGZ1bmN0aW9uKGtleSkge1xuICAgICAga2V5IGluICRSZWdFeHAgfHwgJC5zZXREZXNjKCRSZWdFeHAsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIEJhc2Vba2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbihpdCkge1xuICAgICAgICAgIEJhc2Vba2V5XSA9IGl0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgICByZXF1aXJlKFwiLi8kLnJlZGVmXCIpKCQuZywgJ1JlZ0V4cCcsICRSZWdFeHApO1xuICB9XG4gIGlmICgvLi9nLmZsYWdzICE9ICdnJylcbiAgICAkLnNldERlc2MocHJvdG8sICdmbGFncycsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogcmVxdWlyZShcIi4vJC5yZXBsYWNlclwiKSgvXi4qXFwvKFxcdyopJC8sICckMScpXG4gICAgfSk7XG59XG5yZXF1aXJlKFwiLi8kLnNwZWNpZXNcIikoJFJlZ0V4cCk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICAgY3R4ID0gcmVxdWlyZShcIi4vJC5jdHhcIiksXG4gICAgICBjb2YgPSByZXF1aXJlKFwiLi8kLmNvZlwiKSxcbiAgICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICAgIGFzc2VydCA9IHJlcXVpcmUoXCIuLyQuYXNzZXJ0XCIpLFxuICAgICAgZm9yT2YgPSByZXF1aXJlKFwiLi8kLmZvci1vZlwiKSxcbiAgICAgIHNldFByb3RvID0gcmVxdWlyZShcIi4vJC5zZXQtcHJvdG9cIikuc2V0LFxuICAgICAgc2FtZSA9IHJlcXVpcmUoXCIuLyQuc2FtZVwiKSxcbiAgICAgIHNwZWNpZXMgPSByZXF1aXJlKFwiLi8kLnNwZWNpZXNcIiksXG4gICAgICBTUEVDSUVTID0gcmVxdWlyZShcIi4vJC53a3NcIikoJ3NwZWNpZXMnKSxcbiAgICAgIFJFQ09SRCA9IHJlcXVpcmUoXCIuLyQudWlkXCIpLnNhZmUoJ3JlY29yZCcpLFxuICAgICAgUFJPTUlTRSA9ICdQcm9taXNlJyxcbiAgICAgIGdsb2JhbCA9ICQuZyxcbiAgICAgIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcyxcbiAgICAgIGlzTm9kZSA9IGNvZihwcm9jZXNzKSA9PSAncHJvY2VzcycsXG4gICAgICBhc2FwID0gcHJvY2VzcyAmJiBwcm9jZXNzLm5leHRUaWNrIHx8IHJlcXVpcmUoXCIuLyQudGFza1wiKS5zZXQsXG4gICAgICBQID0gZ2xvYmFsW1BST01JU0VdLFxuICAgICAgaXNGdW5jdGlvbiA9ICQuaXNGdW5jdGlvbixcbiAgICAgIGlzT2JqZWN0ID0gJC5pc09iamVjdCxcbiAgICAgIGFzc2VydEZ1bmN0aW9uID0gYXNzZXJ0LmZuLFxuICAgICAgYXNzZXJ0T2JqZWN0ID0gYXNzZXJ0Lm9iaixcbiAgICAgIFdyYXBwZXI7XG4gIGZ1bmN0aW9uIHRlc3RSZXNvbHZlKHN1Yikge1xuICAgIHZhciB0ZXN0ID0gbmV3IFAoZnVuY3Rpb24oKSB7fSk7XG4gICAgaWYgKHN1YilcbiAgICAgIHRlc3QuY29uc3RydWN0b3IgPSBPYmplY3Q7XG4gICAgcmV0dXJuIFAucmVzb2x2ZSh0ZXN0KSA9PT0gdGVzdDtcbiAgfVxuICB2YXIgdXNlTmF0aXZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHdvcmtzID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gUDIoeCkge1xuICAgICAgdmFyIHNlbGYgPSBuZXcgUCh4KTtcbiAgICAgIHNldFByb3RvKHNlbGYsIFAyLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHdvcmtzID0gaXNGdW5jdGlvbihQKSAmJiBpc0Z1bmN0aW9uKFAucmVzb2x2ZSkgJiYgdGVzdFJlc29sdmUoKTtcbiAgICAgIHNldFByb3RvKFAyLCBQKTtcbiAgICAgIFAyLnByb3RvdHlwZSA9ICQuY3JlYXRlKFAucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHt2YWx1ZTogUDJ9fSk7XG4gICAgICBpZiAoIShQMi5yZXNvbHZlKDUpLnRoZW4oZnVuY3Rpb24oKSB7fSkgaW5zdGFuY2VvZiBQMikpIHtcbiAgICAgICAgd29ya3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh3b3JrcyAmJiAkLkRFU0MpIHtcbiAgICAgICAgdmFyIHRoZW5hYmxlVGhlbkdvdHRlbiA9IGZhbHNlO1xuICAgICAgICBQLnJlc29sdmUoJC5zZXREZXNjKHt9LCAndGhlbicsIHtnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhlbmFibGVUaGVuR290dGVuID0gdHJ1ZTtcbiAgICAgICAgICB9fSkpO1xuICAgICAgICB3b3JrcyA9IHRoZW5hYmxlVGhlbkdvdHRlbjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3b3JrcyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gd29ya3M7XG4gIH0oKTtcbiAgZnVuY3Rpb24gaXNQcm9taXNlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAodXNlTmF0aXZlID8gY29mLmNsYXNzb2YoaXQpID09ICdQcm9taXNlJyA6IFJFQ09SRCBpbiBpdCk7XG4gIH1cbiAgZnVuY3Rpb24gc2FtZUNvbnN0cnVjdG9yKGEsIGIpIHtcbiAgICBpZiAoISQuRlcgJiYgYSA9PT0gUCAmJiBiID09PSBXcmFwcGVyKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHNhbWUoYSwgYik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3IoQykge1xuICAgIHZhciBTID0gYXNzZXJ0T2JqZWN0KEMpW1NQRUNJRVNdO1xuICAgIHJldHVybiBTICE9IHVuZGVmaW5lZCA/IFMgOiBDO1xuICB9XG4gIGZ1bmN0aW9uIGlzVGhlbmFibGUoaXQpIHtcbiAgICB2YXIgdGhlbjtcbiAgICBpZiAoaXNPYmplY3QoaXQpKVxuICAgICAgdGhlbiA9IGl0LnRoZW47XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGhlbikgPyB0aGVuIDogZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gbm90aWZ5KHJlY29yZCkge1xuICAgIHZhciBjaGFpbiA9IHJlY29yZC5jO1xuICAgIGlmIChjaGFpbi5sZW5ndGgpXG4gICAgICBhc2FwLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVjb3JkLnYsXG4gICAgICAgICAgICBvayA9IHJlY29yZC5zID09IDEsXG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgZnVuY3Rpb24gcnVuKHJlYWN0KSB7XG4gICAgICAgICAgdmFyIGNiID0gb2sgPyByZWFjdC5vayA6IHJlYWN0LmZhaWwsXG4gICAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgICAgdGhlbjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgIGlmICghb2spXG4gICAgICAgICAgICAgICAgcmVjb3JkLmggPSB0cnVlO1xuICAgICAgICAgICAgICByZXQgPSBjYiA9PT0gdHJ1ZSA/IHZhbHVlIDogY2IodmFsdWUpO1xuICAgICAgICAgICAgICBpZiAocmV0ID09PSByZWFjdC5QKSB7XG4gICAgICAgICAgICAgICAgcmVhY3QucmVqKFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXQpKSB7XG4gICAgICAgICAgICAgICAgdGhlbi5jYWxsKHJldCwgcmVhY3QucmVzLCByZWFjdC5yZWopO1xuICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICByZWFjdC5yZXMocmV0KTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICByZWFjdC5yZWoodmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVhY3QucmVqKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKVxuICAgICAgICAgIHJ1bihjaGFpbltpKytdKTtcbiAgICAgICAgY2hhaW4ubGVuZ3RoID0gMDtcbiAgICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGlzVW5oYW5kbGVkKHByb21pc2UpIHtcbiAgICB2YXIgcmVjb3JkID0gcHJvbWlzZVtSRUNPUkRdLFxuICAgICAgICBjaGFpbiA9IHJlY29yZC5hIHx8IHJlY29yZC5jLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcmVhY3Q7XG4gICAgaWYgKHJlY29yZC5oKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSB7XG4gICAgICByZWFjdCA9IGNoYWluW2krK107XG4gICAgICBpZiAocmVhY3QuZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3QuUCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gJHJlamVjdCh2YWx1ZSkge1xuICAgIHZhciByZWNvcmQgPSB0aGlzLFxuICAgICAgICBwcm9taXNlO1xuICAgIGlmIChyZWNvcmQuZClcbiAgICAgIHJldHVybjtcbiAgICByZWNvcmQuZCA9IHRydWU7XG4gICAgcmVjb3JkID0gcmVjb3JkLnIgfHwgcmVjb3JkO1xuICAgIHJlY29yZC52ID0gdmFsdWU7XG4gICAgcmVjb3JkLnMgPSAyO1xuICAgIHJlY29yZC5hID0gcmVjb3JkLmMuc2xpY2UoKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYXNhcC5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpc1VuaGFuZGxlZChwcm9taXNlID0gcmVjb3JkLnApKSB7XG4gICAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChnbG9iYWwuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlY29yZC5hID0gdW5kZWZpbmVkO1xuICAgICAgfSk7XG4gICAgfSwgMSk7XG4gICAgbm90aWZ5KHJlY29yZCk7XG4gIH1cbiAgZnVuY3Rpb24gJHJlc29sdmUodmFsdWUpIHtcbiAgICB2YXIgcmVjb3JkID0gdGhpcyxcbiAgICAgICAgdGhlbjtcbiAgICBpZiAocmVjb3JkLmQpXG4gICAgICByZXR1cm47XG4gICAgcmVjb3JkLmQgPSB0cnVlO1xuICAgIHJlY29yZCA9IHJlY29yZC5yIHx8IHJlY29yZDtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgICBhc2FwLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd3JhcHBlciA9IHtcbiAgICAgICAgICAgIHI6IHJlY29yZCxcbiAgICAgICAgICAgIGQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjb3JkLnYgPSB2YWx1ZTtcbiAgICAgICAgcmVjb3JkLnMgPSAxO1xuICAgICAgICBub3RpZnkocmVjb3JkKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAkcmVqZWN0LmNhbGwoe1xuICAgICAgICByOiByZWNvcmQsXG4gICAgICAgIGQ6IGZhbHNlXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH1cbiAgaWYgKCF1c2VOYXRpdmUpIHtcbiAgICBQID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgICAgYXNzZXJ0RnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgICAgdmFyIHJlY29yZCA9IHtcbiAgICAgICAgcDogYXNzZXJ0Lmluc3QodGhpcywgUCwgUFJPTUlTRSksXG4gICAgICAgIGM6IFtdLFxuICAgICAgICBhOiB1bmRlZmluZWQsXG4gICAgICAgIHM6IDAsXG4gICAgICAgIGQ6IGZhbHNlLFxuICAgICAgICB2OiB1bmRlZmluZWQsXG4gICAgICAgIGg6IGZhbHNlXG4gICAgICB9O1xuICAgICAgJC5oaWRlKHRoaXMsIFJFQ09SRCwgcmVjb3JkKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgcmVjb3JkLCAxKSwgY3R4KCRyZWplY3QsIHJlY29yZCwgMSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICRyZWplY3QuY2FsbChyZWNvcmQsIGVycik7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXF1aXJlKFwiLi8kLm1peFwiKShQLnByb3RvdHlwZSwge1xuICAgICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgUyA9IGFzc2VydE9iamVjdChhc3NlcnRPYmplY3QodGhpcykuY29uc3RydWN0b3IpW1NQRUNJRVNdO1xuICAgICAgICB2YXIgcmVhY3QgPSB7XG4gICAgICAgICAgb2s6IGlzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiB0cnVlLFxuICAgICAgICAgIGZhaWw6IGlzRnVuY3Rpb24ob25SZWplY3RlZCkgPyBvblJlamVjdGVkIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByb21pc2UgPSByZWFjdC5QID0gbmV3IChTICE9IHVuZGVmaW5lZCA/IFMgOiBQKShmdW5jdGlvbihyZXMsIHJlaikge1xuICAgICAgICAgIHJlYWN0LnJlcyA9IGFzc2VydEZ1bmN0aW9uKHJlcyk7XG4gICAgICAgICAgcmVhY3QucmVqID0gYXNzZXJ0RnVuY3Rpb24ocmVqKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZWNvcmQgPSB0aGlzW1JFQ09SRF07XG4gICAgICAgIHJlY29yZC5jLnB1c2gocmVhY3QpO1xuICAgICAgICBpZiAocmVjb3JkLmEpXG4gICAgICAgICAgcmVjb3JkLmEucHVzaChyZWFjdCk7XG4gICAgICAgIGlmIChyZWNvcmQucylcbiAgICAgICAgICBub3RpZnkocmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9LFxuICAgICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgJGRlZigkZGVmLkcgKyAkZGVmLlcgKyAkZGVmLkYgKiAhdXNlTmF0aXZlLCB7UHJvbWlzZTogUH0pO1xuICBjb2Yuc2V0KFAsIFBST01JU0UpO1xuICBzcGVjaWVzKFApO1xuICBzcGVjaWVzKFdyYXBwZXIgPSAkLmNvcmVbUFJPTUlTRV0pO1xuICAkZGVmKCRkZWYuUyArICRkZWYuRiAqICF1c2VOYXRpdmUsIFBST01JU0UsIHtyZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgICByZXR1cm4gbmV3IChnZXRDb25zdHJ1Y3Rvcih0aGlzKSkoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAgICAgcmVqKHIpO1xuICAgICAgfSk7XG4gICAgfX0pO1xuICAkZGVmKCRkZWYuUyArICRkZWYuRiAqICghdXNlTmF0aXZlIHx8IHRlc3RSZXNvbHZlKHRydWUpKSwgUFJPTUlTRSwge3Jlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgICAgcmV0dXJuIGlzUHJvbWlzZSh4KSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykgPyB4IDogbmV3IHRoaXMoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIHJlcyh4KTtcbiAgICAgIH0pO1xuICAgIH19KTtcbiAgJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhKHVzZU5hdGl2ZSAmJiByZXF1aXJlKFwiLi8kLml0ZXItZGV0ZWN0XCIpKGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICBQLmFsbChpdGVyKVsnY2F0Y2gnXShmdW5jdGlvbigpIHt9KTtcbiAgfSkpLCBQUk9NSVNFLCB7XG4gICAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICAgIHZhciBDID0gZ2V0Q29uc3RydWN0b3IodGhpcyksXG4gICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCB2YWx1ZXMucHVzaCwgdmFsdWVzKTtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHRzID0gQXJyYXkocmVtYWluaW5nKTtcbiAgICAgICAgaWYgKHJlbWFpbmluZylcbiAgICAgICAgICAkLmVhY2guY2FsbCh2YWx1ZXMsIGZ1bmN0aW9uKHByb21pc2UsIGluZGV4KSB7XG4gICAgICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXMocmVzdWx0cyk7XG4gICAgICAgICAgICB9LCByZWopO1xuICAgICAgICAgIH0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVzKHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgQyA9IGdldENvbnN0cnVjdG9yKHRoaXMpO1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKHJlcywgcmVqKSB7XG4gICAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKHJlcywgcmVqKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSkocmVxdWlyZShcInByb2Nlc3NcIikpO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZShcIi4vJC5jb2xsZWN0aW9uLXN0cm9uZ1wiKTtcbnJlcXVpcmUoXCIuLyQuY29sbGVjdGlvblwiKSgnTWFwJywgZnVuY3Rpb24oZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHNbMF0pO1xuICB9O1xufSwge1xuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoXCIuLyQuY29sbGVjdGlvbi1zdHJvbmdcIik7XG5yZXF1aXJlKFwiLi8kLmNvbGxlY3Rpb25cIikoJ1NldCcsIGZ1bmN0aW9uKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzWzBdKTtcbiAgfTtcbn0sIHthZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfX0sIHN0cm9uZyk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICB3ZWFrID0gcmVxdWlyZShcIi4vJC5jb2xsZWN0aW9uLXdlYWtcIiksXG4gICAgbGVha1N0b3JlID0gd2Vhay5sZWFrU3RvcmUsXG4gICAgSUQgPSB3ZWFrLklELFxuICAgIFdFQUsgPSB3ZWFrLldFQUssXG4gICAgaGFzID0gJC5oYXMsXG4gICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LFxuICAgIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgaXNPYmplY3QsXG4gICAgdG1wID0ge307XG52YXIgJFdlYWtNYXAgPSByZXF1aXJlKFwiLi8kLmNvbGxlY3Rpb25cIikoJ1dlYWtNYXAnLCBmdW5jdGlvbihnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHNbMF0pO1xuICB9O1xufSwge1xuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgaWYgKCFpc0V4dGVuc2libGUoa2V5KSlcbiAgICAgICAgcmV0dXJuIGxlYWtTdG9yZSh0aGlzKS5nZXQoa2V5KTtcbiAgICAgIGlmIChoYXMoa2V5LCBXRUFLKSlcbiAgICAgICAgcmV0dXJuIGtleVtXRUFLXVt0aGlzW0lEXV07XG4gICAgfVxuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9XG59LCB3ZWFrLCB0cnVlLCB0cnVlKTtcbmlmIChuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KSB7XG4gICQuZWFjaC5jYWxsKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZSxcbiAgICAgICAgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZXF1aXJlKFwiLi8kLnJlZGVmXCIpKHByb3RvLCBrZXksIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBsZWFrU3RvcmUodGhpcylba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoXCIuLyQuY29sbGVjdGlvbi13ZWFrXCIpO1xucmVxdWlyZShcIi4vJC5jb2xsZWN0aW9uXCIpKCdXZWFrU2V0JywgZnVuY3Rpb24oZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzWzBdKTtcbiAgfTtcbn0sIHthZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gIH19LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgc2V0UHJvdG8gPSByZXF1aXJlKFwiLi8kLnNldC1wcm90b1wiKSxcbiAgICAkaXRlciA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKSxcbiAgICBJVEVSQVRPUiA9IHJlcXVpcmUoXCIuLyQud2tzXCIpKCdpdGVyYXRvcicpLFxuICAgIElURVIgPSByZXF1aXJlKFwiLi8kLnVpZFwiKS5zYWZlKCdpdGVyJyksXG4gICAgc3RlcCA9ICRpdGVyLnN0ZXAsXG4gICAgYXNzZXJ0ID0gcmVxdWlyZShcIi4vJC5hc3NlcnRcIiksXG4gICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LFxuICAgIGdldFByb3RvID0gJC5nZXRQcm90byxcbiAgICAkUmVmbGVjdCA9ICQuZy5SZWZsZWN0LFxuICAgIF9hcHBseSA9IEZ1bmN0aW9uLmFwcGx5LFxuICAgIGFzc2VydE9iamVjdCA9IGFzc2VydC5vYmosXG4gICAgX2lzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgaXNPYmplY3QsXG4gICAgX3ByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zLFxuICAgIGJ1Z2d5RW51bWVyYXRlID0gISgkUmVmbGVjdCAmJiAkUmVmbGVjdC5lbnVtZXJhdGUgJiYgSVRFUkFUT1IgaW4gJFJlZmxlY3QuZW51bWVyYXRlKHt9KSk7XG5mdW5jdGlvbiBFbnVtZXJhdGUoaXRlcmF0ZWQpIHtcbiAgJC5zZXQodGhpcywgSVRFUiwge1xuICAgIG86IGl0ZXJhdGVkLFxuICAgIGs6IHVuZGVmaW5lZCxcbiAgICBpOiAwXG4gIH0pO1xufVxuJGl0ZXIuY3JlYXRlKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlciA9IHRoaXNbSVRFUl0sXG4gICAgICBrZXlzID0gaXRlci5rLFxuICAgICAga2V5O1xuICBpZiAoa2V5cyA9PSB1bmRlZmluZWQpIHtcbiAgICBpdGVyLmsgPSBrZXlzID0gW107XG4gICAgZm9yIChrZXkgaW4gaXRlci5vKVxuICAgICAga2V5cy5wdXNoKGtleSk7XG4gIH1cbiAgZG8ge1xuICAgIGlmIChpdGVyLmkgPj0ga2V5cy5sZW5ndGgpXG4gICAgICByZXR1cm4gc3RlcCgxKTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1tpdGVyLmkrK10pIGluIGl0ZXIubykpO1xuICByZXR1cm4gc3RlcCgwLCBrZXkpO1xufSk7XG52YXIgcmVmbGVjdCA9IHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgcmV0dXJuIF9hcHBseS5jYWxsKHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KTtcbiAgfSxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIHByb3RvID0gYXNzZXJ0LmZuKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdKS5wcm90b3R5cGUsXG4gICAgICAgIGluc3RhbmNlID0gJC5jcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKSxcbiAgICAgICAgcmVzdWx0ID0gX2FwcGx5LmNhbGwodGFyZ2V0LCBpbnN0YW5jZSwgYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfSxcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhc3NlcnRPYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgJC5zZXREZXNjKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9ICQuZ2V0RGVzYyhhc3NlcnRPYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXSxcbiAgICAgICAgZGVzYyA9ICQuZ2V0RGVzYyhhc3NlcnRPYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpLFxuICAgICAgICBwcm90bztcbiAgICBpZiAoZGVzYylcbiAgICAgIHJldHVybiAkLmhhcyhkZXNjLCAndmFsdWUnKSA/IGRlc2MudmFsdWUgOiBkZXNjLmdldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KSkgPyBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gJC5nZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH0sXG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYXNzZXJ0T2JqZWN0KHRhcmdldCkpO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfSxcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIF9pc0V4dGVuc2libGUoYXNzZXJ0T2JqZWN0KHRhcmdldCkpO1xuICB9LFxuICBvd25LZXlzOiByZXF1aXJlKFwiLi8kLm93bi1rZXlzXCIpLFxuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYXNzZXJ0T2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChfcHJldmVudEV4dGVuc2lvbnMpXG4gICAgICAgIF9wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgVikge1xuICAgIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdLFxuICAgICAgICBvd25EZXNjID0gJC5nZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSksXG4gICAgICAgIGV4aXN0aW5nRGVzY3JpcHRvcixcbiAgICAgICAgcHJvdG87XG4gICAgaWYgKCFvd25EZXNjKSB7XG4gICAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90byh0YXJnZXQpKSkge1xuICAgICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgICAgfVxuICAgICAgb3duRGVzYyA9ICQuZGVzYygwKTtcbiAgICB9XG4gICAgaWYgKCQuaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gJC5nZXREZXNjKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgJC5kZXNjKDApO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgICQuc2V0RGVzYyhyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG4gIH1cbn07XG5pZiAoc2V0UHJvdG8pXG4gIHJlZmxlY3Quc2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4kZGVmKCRkZWYuRywge1JlZmxlY3Q6IHt9fSk7XG4kZGVmKCRkZWYuUyArICRkZWYuRiAqIGJ1Z2d5RW51bWVyYXRlLCAnUmVmbGVjdCcsIHtlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZShhc3NlcnRPYmplY3QodGFyZ2V0KSk7XG4gIH19KTtcbiRkZWYoJGRlZi5TLCAnUmVmbGVjdCcsIHJlZmxlY3QpO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgICRpbmNsdWRlcyA9IHJlcXVpcmUoXCIuLyQuYXJyYXktaW5jbHVkZXNcIikodHJ1ZSk7XG4kZGVmKCRkZWYuUCwgJ0FycmF5Jywge2luY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCkge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50c1sxXSk7XG4gIH19KTtcbnJlcXVpcmUoXCIuLyQudW5zY29wZVwiKSgnaW5jbHVkZXMnKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICAkYXQgPSByZXF1aXJlKFwiLi8kLnN0cmluZy1hdFwiKSh0cnVlKTtcbiRkZWYoJGRlZi5QLCAnU3RyaW5nJywge2F0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH19KTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICAkcGFkID0gcmVxdWlyZShcIi4vJC5zdHJpbmctcGFkXCIpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7bHBhZDogZnVuY3Rpb24gbHBhZChuKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbiwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfX0pO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgICRwYWQgPSByZXF1aXJlKFwiLi8kLnN0cmluZy1wYWRcIik7XG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtycGFkOiBmdW5jdGlvbiBycGFkKG4pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBuLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfX0pO1xuIiwiLyogKi8gXG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpO1xuJGRlZigkZGVmLlMsICdSZWdFeHAnLCB7ZXNjYXBlOiByZXF1aXJlKFwiLi8kLnJlcGxhY2VyXCIpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicsIHRydWUpfSk7XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgb3duS2V5cyA9IHJlcXVpcmUoXCIuLyQub3duLWtleXNcIik7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gJC50b09iamVjdChvYmplY3QpLFxuICAgICAgICByZXN1bHQgPSB7fTtcbiAgICAkLmVhY2guY2FsbChvd25LZXlzKE8pLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICQuc2V0RGVzYyhyZXN1bHQsIGtleSwgJC5kZXNjKDAsICQuZ2V0RGVzYyhPLCBrZXkpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfX0pO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpO1xuZnVuY3Rpb24gY3JlYXRlT2JqZWN0VG9BcnJheShpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBPID0gJC50b09iamVjdChvYmplY3QpLFxuICAgICAgICBrZXlzID0gJC5nZXRLZXlzKE8pLFxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGtleTtcbiAgICBpZiAoaXNFbnRyaWVzKVxuICAgICAgd2hpbGUgKGxlbmd0aCA+IGkpXG4gICAgICAgIHJlc3VsdFtpXSA9IFtrZXkgPSBrZXlzW2krK10sIE9ba2V5XV07XG4gICAgZWxzZVxuICAgICAgd2hpbGUgKGxlbmd0aCA+IGkpXG4gICAgICAgIHJlc3VsdFtpXSA9IE9ba2V5c1tpKytdXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogY3JlYXRlT2JqZWN0VG9BcnJheShmYWxzZSksXG4gIGVudHJpZXM6IGNyZWF0ZU9iamVjdFRvQXJyYXkodHJ1ZSlcbn0pO1xuIiwiLyogKi8gXG5yZXF1aXJlKFwiLi8kLmNvbGxlY3Rpb24tdG8tanNvblwiKSgnTWFwJyk7XG4iLCIvKiAqLyBcbnJlcXVpcmUoXCIuLyQuY29sbGVjdGlvbi10by1qc29uXCIpKCdTZXQnKTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICAkQXJyYXkgPSAkLmNvcmUuQXJyYXkgfHwgQXJyYXksXG4gICAgc3RhdGljcyA9IHt9O1xuZnVuY3Rpb24gc2V0U3RhdGljcyhrZXlzLCBsZW5ndGgpIHtcbiAgJC5lYWNoLmNhbGwoa2V5cy5zcGxpdCgnLCcpLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAobGVuZ3RoID09IHVuZGVmaW5lZCAmJiBrZXkgaW4gJEFycmF5KVxuICAgICAgc3RhdGljc1trZXldID0gJEFycmF5W2tleV07XG4gICAgZWxzZSBpZiAoa2V5IGluIFtdKVxuICAgICAgc3RhdGljc1trZXldID0gcmVxdWlyZShcIi4vJC5jdHhcIikoRnVuY3Rpb24uY2FsbCwgW11ba2V5XSwgbGVuZ3RoKTtcbiAgfSk7XG59XG5zZXRTdGF0aWNzKCdwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzJywgMSk7XG5zZXRTdGF0aWNzKCdpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzJywgMyk7XG5zZXRTdGF0aWNzKCdqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YsJyArICdyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsLHR1cm4nKTtcbiRkZWYoJGRlZi5TLCAnQXJyYXknLCBzdGF0aWNzKTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBpbnZva2UgPSByZXF1aXJlKFwiLi8kLmludm9rZVwiKSxcbiAgICBwYXJ0aWFsID0gcmVxdWlyZShcIi4vJC5wYXJ0aWFsXCIpLFxuICAgIG5hdmlnYXRvciA9ICQuZy5uYXZpZ2F0b3IsXG4gICAgTVNJRSA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5mdW5jdGlvbiB3cmFwKHNldCkge1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lKSB7XG4gICAgcmV0dXJuIHNldChpbnZva2UocGFydGlhbCwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLCAkLmlzRnVuY3Rpb24oZm4pID8gZm4gOiBGdW5jdGlvbihmbikpLCB0aW1lKTtcbiAgfSA6IHNldDtcbn1cbiRkZWYoJGRlZi5HICsgJGRlZi5CICsgJGRlZi5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKCQuZy5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoJC5nLnNldEludGVydmFsKVxufSk7XG4iLCIvKiAqLyBcbnZhciAkZGVmID0gcmVxdWlyZShcIi4vJC5kZWZcIiksXG4gICAgJHRhc2sgPSByZXF1aXJlKFwiLi8kLnRhc2tcIik7XG4kZGVmKCRkZWYuRyArICRkZWYuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsIi8qICovIFxucmVxdWlyZShcIi4vZXM2LmFycmF5Lml0ZXJhdG9yXCIpO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIEl0ZXJhdG9ycyA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKS5JdGVyYXRvcnMsXG4gICAgSVRFUkFUT1IgPSByZXF1aXJlKFwiLi8kLndrc1wiKSgnaXRlcmF0b3InKSxcbiAgICBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheSxcbiAgICBOTCA9ICQuZy5Ob2RlTGlzdCxcbiAgICBIVEMgPSAkLmcuSFRNTENvbGxlY3Rpb24sXG4gICAgTkxQcm90byA9IE5MICYmIE5MLnByb3RvdHlwZSxcbiAgICBIVENQcm90byA9IEhUQyAmJiBIVEMucHJvdG90eXBlO1xuaWYgKCQuRlcpIHtcbiAgaWYgKE5MICYmICEoSVRFUkFUT1IgaW4gTkxQcm90bykpXG4gICAgJC5oaWRlKE5MUHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gIGlmIChIVEMgJiYgIShJVEVSQVRPUiBpbiBIVENQcm90bykpXG4gICAgJC5oaWRlKEhUQ1Byb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xufVxuSXRlcmF0b3JzLk5vZGVMaXN0ID0gSXRlcmF0b3JzLkhUTUxDb2xsZWN0aW9uID0gQXJyYXlWYWx1ZXM7XG4iLCIvKiAqLyBcbnZhciBhc3NlcnRGdW5jdGlvbiA9IHJlcXVpcmUoXCIuLyQuYXNzZXJ0XCIpLmZuO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFzc2VydEZ1bmN0aW9uKGZuKTtcbiAgaWYgKH5sZW5ndGggJiYgdGhhdCA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICAgIH07XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgICB9O1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgZ2xvYmFsID0gJC5nLFxuICAgIGNvcmUgPSAkLmNvcmUsXG4gICAgaXNGdW5jdGlvbiA9ICQuaXNGdW5jdGlvbixcbiAgICAkcmVkZWYgPSByZXF1aXJlKFwiLi8kLnJlZGVmXCIpO1xuZnVuY3Rpb24gY3R4KGZuLCB0aGF0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbmdsb2JhbC5jb3JlID0gY29yZTtcbiRkZWYuRiA9IDE7XG4kZGVmLkcgPSAyO1xuJGRlZi5TID0gNDtcbiRkZWYuUCA9IDg7XG4kZGVmLkIgPSAxNjtcbiRkZWYuVyA9IDMyO1xuZnVuY3Rpb24gJGRlZih0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIGtleSxcbiAgICAgIG93bixcbiAgICAgIG91dCxcbiAgICAgIGV4cCxcbiAgICAgIGlzR2xvYmFsID0gdHlwZSAmICRkZWYuRyxcbiAgICAgIGlzUHJvdG8gPSB0eXBlICYgJGRlZi5QLFxuICAgICAgdGFyZ2V0ID0gaXNHbG9iYWwgPyBnbG9iYWwgOiB0eXBlICYgJGRlZi5TID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSkucHJvdG90eXBlLFxuICAgICAgZXhwb3J0cyA9IGlzR2xvYmFsID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIGlmIChpc0dsb2JhbClcbiAgICBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBvd24gPSAhKHR5cGUgJiAkZGVmLkYpICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgaWYgKHR5cGUgJiAkZGVmLkIgJiYgb3duKVxuICAgICAgZXhwID0gY3R4KG91dCwgZ2xvYmFsKTtcbiAgICBlbHNlXG4gICAgICBleHAgPSBpc1Byb3RvICYmIGlzRnVuY3Rpb24ob3V0KSA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIGlmICh0YXJnZXQgJiYgIW93bilcbiAgICAgICRyZWRlZih0YXJnZXQsIGtleSwgb3V0KTtcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dClcbiAgICAgICQuaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKGlzUHJvdG8pXG4gICAgICAoZXhwb3J0cy5wcm90b3R5cGUgfHwgKGV4cG9ydHMucHJvdG90eXBlID0ge30pKVtrZXldID0gb3V0O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9ICRkZWY7XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBlbnVtS2V5cyA9IHJlcXVpcmUoXCIuLyQuZW51bS1rZXlzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgVCA9IE9iamVjdCgkLmFzc2VydERlZmluZWQodGFyZ2V0KSksXG4gICAgICBsID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgIGkgPSAxO1xuICB3aGlsZSAobCA+IGkpIHtcbiAgICB2YXIgUyA9ICQuRVM1T2JqZWN0KGFyZ3VtZW50c1tpKytdKSxcbiAgICAgICAga2V5cyA9IGVudW1LZXlzKFMpLFxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gailcbiAgICAgIFRba2V5ID0ga2V5c1tqKytdXSA9IFNba2V5XTtcbiAgfVxuICByZXR1cm4gVDtcbn07XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCkge1xuICB2YXIgTyA9ICQudG9PYmplY3Qob2JqZWN0KSxcbiAgICAgIGtleXMgPSAkLmdldEtleXMoTyksXG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KVxuICAgIGlmIChPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClcbiAgICAgIHJldHVybiBrZXk7XG59O1xuIiwiLyogKi8gXG52YXIgc2lkID0gMDtcbmZ1bmN0aW9uIHVpZChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsrc2lkICsgTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMzYpKTtcbn1cbnVpZC5zYWZlID0gcmVxdWlyZShcIi4vJFwiKS5nLlN5bWJvbCB8fCB1aWQ7XG5tb2R1bGUuZXhwb3J0cyA9IHVpZDtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpO1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbXNnMSwgbXNnMikge1xuICBpZiAoIWNvbmRpdGlvbilcbiAgICB0aHJvdyBUeXBlRXJyb3IobXNnMiA/IG1zZzEgKyBtc2cyIDogbXNnMSk7XG59XG5hc3NlcnQuZGVmID0gJC5hc3NlcnREZWZpbmVkO1xuYXNzZXJ0LmZuID0gZnVuY3Rpb24oaXQpIHtcbiAgaWYgKCEkLmlzRnVuY3Rpb24oaXQpKVxuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5hc3NlcnQub2JqID0gZnVuY3Rpb24oaXQpIHtcbiAgaWYgKCEkLmlzT2JqZWN0KGl0KSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5hc3NlcnQuaW5zdCA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArIFwiOiB1c2UgdGhlICduZXcnIG9wZXJhdG9yIVwiKTtcbiAgcmV0dXJuIGl0O1xufTtcbm1vZHVsZS5leHBvcnRzID0gYXNzZXJ0O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgY29mID0gcmVxdWlyZShcIi4vJC5jb2ZcIiksXG4gICAgY2xhc3NvZiA9IGNvZi5jbGFzc29mLFxuICAgIGFzc2VydCA9IHJlcXVpcmUoXCIuLyQuYXNzZXJ0XCIpLFxuICAgIGFzc2VydE9iamVjdCA9IGFzc2VydC5vYmosXG4gICAgU1lNQk9MX0lURVJBVE9SID0gcmVxdWlyZShcIi4vJC53a3NcIikoJ2l0ZXJhdG9yJyksXG4gICAgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcicsXG4gICAgSXRlcmF0b3JzID0gcmVxdWlyZShcIi4vJC5zaGFyZWRcIikoJ2l0ZXJhdG9ycycpLFxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5zZXRJdGVyYXRvcihJdGVyYXRvclByb3RvdHlwZSwgJC50aGF0KTtcbmZ1bmN0aW9uIHNldEl0ZXJhdG9yKE8sIHZhbHVlKSB7XG4gICQuaGlkZShPLCBTWU1CT0xfSVRFUkFUT1IsIHZhbHVlKTtcbiAgaWYgKEZGX0lURVJBVE9SIGluIFtdKVxuICAgICQuaGlkZShPLCBGRl9JVEVSQVRPUiwgdmFsdWUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJVR0dZOiAna2V5cycgaW4gW10gJiYgISgnbmV4dCcgaW4gW10ua2V5cygpKSxcbiAgSXRlcmF0b3JzOiBJdGVyYXRvcnMsXG4gIHN0ZXA6IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGRvbmU6ICEhZG9uZVxuICAgIH07XG4gIH0sXG4gIGlzOiBmdW5jdGlvbihpdCkge1xuICAgIHZhciBPID0gT2JqZWN0KGl0KSxcbiAgICAgICAgU3ltYm9sID0gJC5nLlN5bWJvbDtcbiAgICByZXR1cm4gKFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3IgfHwgRkZfSVRFUkFUT1IpIGluIE8gfHwgU1lNQk9MX0lURVJBVE9SIGluIE8gfHwgJC5oYXMoSXRlcmF0b3JzLCBjbGFzc29mKE8pKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihpdCkge1xuICAgIHZhciBTeW1ib2wgPSAkLmcuU3ltYm9sLFxuICAgICAgICBnZXRJdGVyO1xuICAgIGlmIChpdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGdldEl0ZXIgPSBpdFtTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IEZGX0lURVJBVE9SXSB8fCBpdFtTWU1CT0xfSVRFUkFUT1JdIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG4gICAgfVxuICAgIGFzc2VydCgkLmlzRnVuY3Rpb24oZ2V0SXRlciksIGl0LCAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgICByZXR1cm4gYXNzZXJ0T2JqZWN0KGdldEl0ZXIuY2FsbChpdCkpO1xuICB9LFxuICBzZXQ6IHNldEl0ZXJhdG9yLFxuICBjcmVhdGU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0LCBwcm90bykge1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQuY3JlYXRlKHByb3RvIHx8IEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogJC5kZXNjKDEsIG5leHQpfSk7XG4gICAgY29mLnNldChDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbiAgfVxufTtcbiIsIi8qICovIFxudmFyIGN0eCA9IHJlcXVpcmUoXCIuLyQuY3R4XCIpLFxuICAgIGdldCA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKS5nZXQsXG4gICAgY2FsbCA9IHJlcXVpcmUoXCIuLyQuaXRlci1jYWxsXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQpIHtcbiAgdmFyIGl0ZXJhdG9yID0gZ2V0KGl0ZXJhYmxlKSxcbiAgICAgIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSksXG4gICAgICBzdGVwO1xuICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgaWYgKGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGNhbGwuY2xvc2UoaXRlcmF0b3IpO1xuICAgIH1cbiAgfVxufTtcbiIsIi8qICovIFxudmFyIGFzc2VydE9iamVjdCA9IHJlcXVpcmUoXCIuLyQuYXNzZXJ0XCIpLm9iajtcbmZ1bmN0aW9uIGNsb3NlKGl0ZXJhdG9yKSB7XG4gIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gIGlmIChyZXQgIT09IHVuZGVmaW5lZClcbiAgICBhc3NlcnRPYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbn1cbmZ1bmN0aW9uIGNhbGwoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYXNzZXJ0T2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY2xvc2UoaXRlcmF0b3IpO1xuICAgIHRocm93IGU7XG4gIH1cbn1cbmNhbGwuY2xvc2UgPSBjbG9zZTtcbm1vZHVsZS5leHBvcnRzID0gY2FsbDtcbiIsIi8qICovIFxudmFyICRyZWRlZiA9IHJlcXVpcmUoXCIuLyQucmVkZWZcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpXG4gICAgJHJlZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgaW52b2tlID0gcmVxdWlyZShcIi4vJC5pbnZva2VcIiksXG4gICAgYXNzZXJ0RnVuY3Rpb24gPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKS5mbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmbiA9IGFzc2VydEZ1bmN0aW9uKHRoaXMpLFxuICAgICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgIHBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgIGkgPSAwLFxuICAgICAgXyA9ICQucGF0aC5fLFxuICAgICAgaG9sZGVyID0gZmFsc2U7XG4gIHdoaWxlIChsZW5ndGggPiBpKVxuICAgIGlmICgocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8pXG4gICAgICBob2xkZXIgPSB0cnVlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICBfbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGsgPSAwLFxuICAgICAgICBhcmdzO1xuICAgIGlmICghaG9sZGVyICYmICFfbGVuZ3RoKVxuICAgICAgcmV0dXJuIGludm9rZShmbiwgcGFyZ3MsIHRoYXQpO1xuICAgIGFyZ3MgPSBwYXJncy5zbGljZSgpO1xuICAgIGlmIChob2xkZXIpXG4gICAgICBmb3IgKDsgbGVuZ3RoID4gajsgaisrKVxuICAgICAgICBpZiAoYXJnc1tqXSA9PT0gXylcbiAgICAgICAgICBhcmdzW2pdID0gYXJndW1lbnRzW2srK107XG4gICAgd2hpbGUgKF9sZW5ndGggPiBrKVxuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBhc3NlcnRPYmplY3QgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKS5vYmo7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgYXNzZXJ0T2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSAkLmdldE5hbWVzKGl0KSxcbiAgICAgIGdldFN5bWJvbHMgPSAkLmdldFN5bWJvbHM7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBUQUcgPSByZXF1aXJlKFwiLi8kLndrc1wiKSgndG9TdHJpbmdUYWcnKSxcbiAgICB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuZnVuY3Rpb24gY29mKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59XG5jb2YuY2xhc3NvZiA9IGZ1bmN0aW9uKGl0KSB7XG4gIHZhciBPLFxuICAgICAgVDtcbiAgcmV0dXJuIGl0ID09IHVuZGVmaW5lZCA/IGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6ICdOdWxsJyA6IHR5cGVvZihUID0gKE8gPSBPYmplY3QoaXQpKVtUQUddKSA9PSAnc3RyaW5nJyA/IFQgOiBjb2YoTyk7XG59O1xuY29mLnNldCA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICEkLmhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlcbiAgICAkLmhpZGUoaXQsIFRBRywgdGFnKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvZjtcbiIsIi8qICovIFxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZShcIi4vJC53a3NcIikoJ3Vuc2NvcGFibGVzJyk7XG5pZiAoIShVTlNDT1BBQkxFUyBpbiBbXSkpXG4gIHJlcXVpcmUoXCIuLyRcIikuaGlkZShBcnJheS5wcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSkge1xuICBbXVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiLyogKi8gXG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgICRyZWRlZiA9IHJlcXVpcmUoXCIuLyQucmVkZWZcIiksXG4gICAgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgY29mID0gcmVxdWlyZShcIi4vJC5jb2ZcIiksXG4gICAgJGl0ZXIgPSByZXF1aXJlKFwiLi8kLml0ZXJcIiksXG4gICAgU1lNQk9MX0lURVJBVE9SID0gcmVxdWlyZShcIi4vJC53a3NcIikoJ2l0ZXJhdG9yJyksXG4gICAgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcicsXG4gICAgS0VZUyA9ICdrZXlzJyxcbiAgICBWQUxVRVMgPSAndmFsdWVzJyxcbiAgICBJdGVyYXRvcnMgPSAkaXRlci5JdGVyYXRvcnM7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFKSB7XG4gICRpdGVyLmNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZChraW5kKSB7XG4gICAgZnVuY3Rpb24gJCQodGhhdCkge1xuICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGF0LCBraW5kKTtcbiAgICB9XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgICAgIHJldHVybiAkJCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVkFMVUVTOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgIHJldHVybiAkJCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gJCQodGhpcyk7XG4gICAgfTtcbiAgfVxuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InLFxuICAgICAgcHJvdG8gPSBCYXNlLnByb3RvdHlwZSxcbiAgICAgIF9uYXRpdmUgPSBwcm90b1tTWU1CT0xfSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdLFxuICAgICAgX2RlZmF1bHQgPSBfbmF0aXZlIHx8IGNyZWF0ZU1ldGhvZChERUZBVUxUKSxcbiAgICAgIG1ldGhvZHMsXG4gICAgICBrZXk7XG4gIGlmIChfbmF0aXZlKSB7XG4gICAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gJC5nZXRQcm90byhfZGVmYXVsdC5jYWxsKG5ldyBCYXNlKSk7XG4gICAgY29mLnNldChJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICBpZiAoJC5GVyAmJiAkLmhhcyhwcm90bywgRkZfSVRFUkFUT1IpKVxuICAgICAgJGl0ZXIuc2V0KEl0ZXJhdG9yUHJvdG90eXBlLCAkLnRoYXQpO1xuICB9XG4gIGlmICgkLkZXIHx8IEZPUkNFKVxuICAgICRpdGVyLnNldChwcm90bywgX2RlZmF1bHQpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBfZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSAkLnRoYXQ7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIGtleXM6IElTX1NFVCA/IF9kZWZhdWx0IDogY3JlYXRlTWV0aG9kKEtFWVMpLFxuICAgICAgdmFsdWVzOiBERUZBVUxUID09IFZBTFVFUyA/IF9kZWZhdWx0IDogY3JlYXRlTWV0aG9kKFZBTFVFUyksXG4gICAgICBlbnRyaWVzOiBERUZBVUxUICE9IFZBTFVFUyA/IF9kZWZhdWx0IDogY3JlYXRlTWV0aG9kKCdlbnRyaWVzJylcbiAgICB9O1xuICAgIGlmIChGT1JDRSlcbiAgICAgIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSlcbiAgICAgICAgICAkcmVkZWYocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICAkZGVmKCRkZWYuUCArICRkZWYuRiAqICRpdGVyLkJVR0dZLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxufTtcbiIsIi8vIEZhc3QgYXBwbHlcbi8vIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICBjYXNlIDU6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZWdFeHAsIHJlcGxhY2UsIGlzU3RhdGljKXtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24ocGFydCl7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBTdHJpbmcoaXNTdGF0aWMgPyBpdCA6IHRoaXMpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59OyIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigkKXtcbiAgJC5GVyAgID0gdHJ1ZTtcbiAgJC5wYXRoID0gJC5nO1xuICByZXR1cm4gJDtcbn07IiwidmFyICQgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNvZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkZGVmICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgaW52b2tlICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKVxuICAsIGFycmF5TWV0aG9kICAgICAgPSByZXF1aXJlKCcuLyQuYXJyYXktbWV0aG9kcycpXG4gICwgSUVfUFJPVE8gICAgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdfX3Byb3RvX18nKVxuICAsIGFzc2VydCAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBhc3NlcnRPYmplY3QgICAgID0gYXNzZXJ0Lm9ialxuICAsIE9iamVjdFByb3RvICAgICAgPSBPYmplY3QucHJvdG90eXBlXG4gICwgQSAgICAgICAgICAgICAgICA9IFtdXG4gICwgc2xpY2UgICAgICAgICAgICA9IEEuc2xpY2VcbiAgLCBpbmRleE9mICAgICAgICAgID0gQS5pbmRleE9mXG4gICwgY2xhc3NvZiAgICAgICAgICA9IGNvZi5jbGFzc29mXG4gICwgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICwgaGFzICAgICAgICAgICAgICA9ICQuaGFzXG4gICwgZGVmaW5lUHJvcGVydHkgICA9ICQuc2V0RGVzY1xuICAsIGdldE93bkRlc2NyaXB0b3IgPSAkLmdldERlc2NcbiAgLCBpc0Z1bmN0aW9uICAgICAgID0gJC5pc0Z1bmN0aW9uXG4gICwgdG9PYmplY3QgICAgICAgICA9ICQudG9PYmplY3RcbiAgLCB0b0xlbmd0aCAgICAgICAgID0gJC50b0xlbmd0aFxuICAsIElFOF9ET01fREVGSU5FICAgPSBmYWxzZTtcblxuaWYoISQuREVTQyl7XG4gIHRyeSB7XG4gICAgSUU4X0RPTV9ERUZJTkUgPSBkZWZpbmVQcm9wZXJ0eShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgJ3gnLFxuICAgICAge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDg7IH19XG4gICAgKS54ID09IDg7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgJC5zZXREZXNjID0gZnVuY3Rpb24oTywgUCwgQXR0cmlidXRlcyl7XG4gICAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gICAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gICAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKWFzc2VydE9iamVjdChPKVtQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgcmV0dXJuIE87XG4gIH07XG4gICQuZ2V0RGVzYyA9IGZ1bmN0aW9uKE8sIFApe1xuICAgIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgICByZXR1cm4gZ2V0T3duRGVzY3JpcHRvcihPLCBQKTtcbiAgICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gICAgaWYoaGFzKE8sIFApKXJldHVybiAkLmRlc2MoIU9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoTywgUCksIE9bUF0pO1xuICB9O1xuICBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24oTywgUHJvcGVydGllcyl7XG4gICAgYXNzZXJ0T2JqZWN0KE8pO1xuICAgIHZhciBrZXlzICAgPSAkLmdldEtleXMoUHJvcGVydGllcylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSA9IDBcbiAgICAgICwgUDtcbiAgICB3aGlsZShsZW5ndGggPiBpKSQuc2V0RGVzYyhPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgICByZXR1cm4gTztcbiAgfTtcbn1cbiRkZWYoJGRlZi5TICsgJGRlZi5GICogISQuREVTQywgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjYgLyAxNS4yLjMuMyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJC5nZXREZXNjLFxuICAvLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJC5zZXREZXNjLFxuICAvLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuXG4gIC8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbnZhciBrZXlzMSA9ICgnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSwnICtcbiAgICAgICAgICAgICd0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJykuc3BsaXQoJywnKVxuICAvLyBBZGRpdGlvbmFsIGtleXMgZm9yIGdldE93blByb3BlcnR5TmFtZXNcbiAgLCBrZXlzMiA9IGtleXMxLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpXG4gICwga2V5c0xlbjEgPSBrZXlzMS5sZW5ndGg7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0ga2V5c0xlbjFcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAkLmh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoJzxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8L3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3QucHJvdG90eXBlW2tleXMxW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVHZXRLZXlzKG5hbWVzLCBsZW5ndGgpe1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3Qob2JqZWN0KVxuICAgICAgLCBpICAgICAgPSAwXG4gICAgICAsIHJlc3VsdCA9IFtdXG4gICAgICAsIGtleTtcbiAgICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICAgIHdoaWxlKGxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICAgIH5pbmRleE9mLmNhbGwocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShpdCl7IHJldHVybiAhJC5pc09iamVjdChpdCk7IH1cbmZ1bmN0aW9uIEVtcHR5KCl7fVxuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG4gIGdldFByb3RvdHlwZU9mOiAkLmdldFByb3RvID0gJC5nZXRQcm90byB8fCBmdW5jdGlvbihPKXtcbiAgICBPID0gT2JqZWN0KGFzc2VydC5kZWYoTykpO1xuICAgIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICAgIGlmKGlzRnVuY3Rpb24oTy5jb25zdHJ1Y3RvcikgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG4gIH0sXG4gIC8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJC5nZXROYW1lcyA9ICQuZ2V0TmFtZXMgfHwgY3JlYXRlR2V0S2V5cyhrZXlzMiwga2V5czIubGVuZ3RoLCB0cnVlKSxcbiAgLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJC5jcmVhdGUgPSAkLmNyZWF0ZSB8fCBmdW5jdGlvbihPLCAvKj8qL1Byb3BlcnRpZXMpe1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYoTyAhPT0gbnVsbCl7XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSBhc3NlcnRPYmplY3QoTyk7XG4gICAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHNoaW1cbiAgICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICAgIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gICAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbiAgfSxcbiAgLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG4gIGtleXM6ICQuZ2V0S2V5cyA9ICQuZ2V0S2V5cyB8fCBjcmVhdGVHZXRLZXlzKGtleXMxLCBrZXlzTGVuMSwgZmFsc2UpLFxuICAvLyAxOS4xLjIuMTcgLyAxNS4yLjMuOCBPYmplY3Quc2VhbChPKVxuICBzZWFsOiAkLml0LCAvLyA8LSBjYXBcbiAgLy8gMTkuMS4yLjUgLyAxNS4yLjMuOSBPYmplY3QuZnJlZXplKE8pXG4gIGZyZWV6ZTogJC5pdCwgLy8gPC0gY2FwXG4gIC8vIDE5LjEuMi4xNSAvIDE1LjIuMy4xMCBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbiAgcHJldmVudEV4dGVuc2lvbnM6ICQuaXQsIC8vIDwtIGNhcFxuICAvLyAxOS4xLjIuMTMgLyAxNS4yLjMuMTEgT2JqZWN0LmlzU2VhbGVkKE8pXG4gIGlzU2VhbGVkOiBpc1ByaW1pdGl2ZSwgLy8gPC0gY2FwXG4gIC8vIDE5LjEuMi4xMiAvIDE1LjIuMy4xMiBPYmplY3QuaXNGcm96ZW4oTylcbiAgaXNGcm96ZW46IGlzUHJpbWl0aXZlLCAvLyA8LSBjYXBcbiAgLy8gMTkuMS4yLjExIC8gMTUuMi4zLjEzIE9iamVjdC5pc0V4dGVuc2libGUoTylcbiAgaXNFeHRlbnNpYmxlOiAkLmlzT2JqZWN0IC8vIDwtIGNhcFxufSk7XG5cbi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbiRkZWYoJGRlZi5QLCAnRnVuY3Rpb24nLCB7XG4gIGJpbmQ6IGZ1bmN0aW9uKHRoYXQgLyosIGFyZ3MuLi4gKi8pe1xuICAgIHZhciBmbiAgICAgICA9IGFzc2VydC5mbih0aGlzKVxuICAgICAgLCBwYXJ0QXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBmdW5jdGlvbiBib3VuZCgvKiBhcmdzLi4uICovKXtcbiAgICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyAkLmNyZWF0ZShmbi5wcm90b3R5cGUpIDogdGhhdCk7XG4gICAgfVxuICAgIGlmKGZuLnByb3RvdHlwZSlib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9XG59KTtcblxuLy8gRml4IGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5nXG5mdW5jdGlvbiBhcnJheU1ldGhvZEZpeChmbil7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmbi5hcHBseSgkLkVTNU9iamVjdCh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbmlmKCEoMCBpbiBPYmplY3QoJ3onKSAmJiAneidbMF0gPT0gJ3onKSl7XG4gICQuRVM1T2JqZWN0ID0gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbiAgfTtcbn1cbiRkZWYoJGRlZi5QICsgJGRlZi5GICogKCQuRVM1T2JqZWN0ICE9IE9iamVjdCksICdBcnJheScsIHtcbiAgc2xpY2U6IGFycmF5TWV0aG9kRml4KHNsaWNlKSxcbiAgam9pbjogYXJyYXlNZXRob2RGaXgoQS5qb2luKVxufSk7XG5cbi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG4kZGVmKCRkZWYuUywgJ0FycmF5Jywge1xuICBpc0FycmF5OiBmdW5jdGlvbihhcmcpe1xuICAgIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xuICB9XG59KTtcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5UmVkdWNlKGlzUmlnaHQpe1xuICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2tmbiwgbWVtbyl7XG4gICAgYXNzZXJ0LmZuKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwXG4gICAgICAsIGkgICAgICA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDIpZm9yKDs7KXtcbiAgICAgIGlmKGluZGV4IGluIE8pe1xuICAgICAgICBtZW1vID0gT1tpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGFzc2VydChpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4LCAnUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gTyl7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBPW2luZGV4XSwgaW5kZXgsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn1cbiRkZWYoJGRlZi5QLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiAkLmVhY2ggPSAkLmVhY2ggfHwgYXJyYXlNZXRob2QoMCksXG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogYXJyYXlNZXRob2QoMSksXG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBhcnJheU1ldGhvZCgyKSxcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGFycmF5TWV0aG9kKDMpLFxuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGFycmF5TWV0aG9kKDQpLFxuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogY3JlYXRlQXJyYXlSZWR1Y2UoZmFsc2UpLFxuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGNyZWF0ZUFycmF5UmVkdWNlKHRydWUpLFxuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBpbmRleE9mID0gaW5kZXhPZiB8fCByZXF1aXJlKCcuLyQuYXJyYXktaW5jbHVkZXMnKShmYWxzZSksXG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24oZWwsIGZyb21JbmRleCAvKiA9IEBbKi0xXSAqLyl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSBsZW5ndGggLSAxO1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKWluZGV4ID0gTWF0aC5taW4oaW5kZXgsICQudG9JbnRlZ2VyKGZyb21JbmRleCkpO1xuICAgIGlmKGluZGV4IDwgMClpbmRleCA9IHRvTGVuZ3RoKGxlbmd0aCArIGluZGV4KTtcbiAgICBmb3IoO2luZGV4ID49IDA7IGluZGV4LS0paWYoaW5kZXggaW4gTylpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIGluZGV4O1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG5cbi8vIDIxLjEuMy4yNSAvIDE1LjUuNC4yMCBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7dHJpbTogcmVxdWlyZSgnLi8kLnJlcGxhY2VyJykoL15cXHMqKFtcXHNcXFNdKlxcUyk/XFxzKiQvLCAnJDEnKX0pO1xuXG4vLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbiRkZWYoJGRlZi5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCl7XG4gIHJldHVybiArbmV3IERhdGU7XG59fSk7XG5cbmZ1bmN0aW9uIGx6KG51bSl7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufVxuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbiRkZWYoJGRlZi5QLCAnRGF0ZScsIHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXtcbiAgaWYoIWlzRmluaXRlKHRoaXMpKXRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXNcbiAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAsIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufX0pO1xuXG5pZihjbGFzc29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ09iamVjdCcpY29mLmNsYXNzb2YgPSBmdW5jdGlvbihpdCl7XG4gIHZhciB0YWcgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIHRhZyA9PSAnT2JqZWN0JyAmJiBpc0Z1bmN0aW9uKGl0LmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHRhZztcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyICQgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBzZXRUYWcgICA9IHJlcXVpcmUoJy4vJC5jb2YnKS5zZXRcbiAgLCB1aWQgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKVxuICAsICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwga2V5T2YgICAgPSByZXF1aXJlKCcuLyQua2V5b2YnKVxuICAsIGhhcyAgICAgID0gJC5oYXNcbiAgLCBoaWRlICAgICA9ICQuaGlkZVxuICAsIGdldE5hbWVzID0gJC5nZXROYW1lc1xuICAsIHRvT2JqZWN0ID0gJC50b09iamVjdFxuICAsIFN5bWJvbCAgID0gJC5nLlN5bWJvbFxuICAsIEJhc2UgICAgID0gU3ltYm9sXG4gICwgc2V0dGVyICAgPSBmYWxzZVxuICAsIFRBRyAgICAgID0gdWlkLnNhZmUoJ3RhZycpXG4gICwgU3ltYm9sUmVnaXN0cnkgPSB7fVxuICAsIEFsbFN5bWJvbHMgICAgID0ge307XG5cbmZ1bmN0aW9uIHdyYXAodGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9ICQuc2V0KCQuY3JlYXRlKFN5bWJvbC5wcm90b3R5cGUpLCBUQUcsIHRhZyk7XG4gICQuREVTQyAmJiBzZXR0ZXIgJiYgJC5zZXREZXNjKE9iamVjdC5wcm90b3R5cGUsIHRhZywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGhpZGUodGhpcywgdGFnLCB2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN5bTtcbn1cblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighJC5pc0Z1bmN0aW9uKFN5bWJvbCkpe1xuICBTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woZGVzY3JpcHRpb24pe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pKTtcbiAgfTtcbiAgaGlkZShTeW1ib2wucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzW1RBR107XG4gIH0pO1xufVxuJGRlZigkZGVmLkcgKyAkZGVmLlcsIHtTeW1ib2w6IFN5bWJvbH0pO1xuXG52YXIgc3ltYm9sU3RhdGljcyA9IHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIHJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgfSxcbiAgcHVyZTogdWlkLnNhZmUsXG4gIHNldDogJC5zZXQsXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufTtcbi8vIDE5LjQuMi4yIFN5bWJvbC5oYXNJbnN0YW5jZVxuLy8gMTkuNC4yLjMgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZVxuLy8gMTkuNC4yLjQgU3ltYm9sLml0ZXJhdG9yXG4vLyAxOS40LjIuNiBTeW1ib2wubWF0Y2hcbi8vIDE5LjQuMi44IFN5bWJvbC5yZXBsYWNlXG4vLyAxOS40LjIuOSBTeW1ib2wuc2VhcmNoXG4vLyAxOS40LjIuMTAgU3ltYm9sLnNwZWNpZXNcbi8vIDE5LjQuMi4xMSBTeW1ib2wuc3BsaXRcbi8vIDE5LjQuMi4xMiBTeW1ib2wudG9QcmltaXRpdmVcbi8vIDE5LjQuMi4xMyBTeW1ib2wudG9TdHJpbmdUYWdcbi8vIDE5LjQuMi4xNCBTeW1ib2wudW5zY29wYWJsZXNcbiQuZWFjaC5jYWxsKChcbiAgICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLCcgK1xuICAgICdzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuICApLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgc3ltID0gcmVxdWlyZSgnLi8kLndrcycpKGl0KTtcbiAgICBzeW1ib2xTdGF0aWNzW2l0XSA9IFN5bWJvbCA9PT0gQmFzZSA/IHN5bSA6IHdyYXAoc3ltKTtcbiAgfVxuKTtcblxuc2V0dGVyID0gdHJ1ZTtcblxuJGRlZigkZGVmLlMsICdTeW1ib2wnLCBzeW1ib2xTdGF0aWNzKTtcblxuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAoU3ltYm9sICE9IEJhc2UpLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgICB2YXIgbmFtZXMgPSBnZXROYW1lcyh0b09iamVjdChpdCkpLCByZXN1bHQgPSBbXSwga2V5LCBpID0gMDtcbiAgICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSB8fCByZXN1bHQucHVzaChrZXkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICAgIHZhciBuYW1lcyA9IGdldE5hbWVzKHRvT2JqZWN0KGl0KSksIHJlc3VsdCA9IFtdLCBrZXksIGkgPSAwO1xuICAgIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnNldFRhZyhTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRhZygkLmcuSlNPTiwgJ0pTT04nLCB0cnVlKTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vJC5hc3NpZ24nKX0pOyIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnT2JqZWN0Jywge1xuICBpczogZnVuY3Rpb24gaXMoeCwgeSl7XG4gICAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG4gIH1cbn0pOyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnT2JqZWN0Jywge3NldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuLyQuc2V0LXByb3RvJykuc2V0fSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgJCAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCB0bXAgPSB7fTtcbnRtcFtyZXF1aXJlKCcuLyQud2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYoJC5GVyAmJiBjb2YodG1wKSAhPSAneicpJC5oaWRlKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gIHJldHVybiAnW29iamVjdCAnICsgY29mLmNsYXNzb2YodGhpcykgKyAnXSc7XG59KTsiLCJ2YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgaXNPYmplY3QgPSAkLmlzT2JqZWN0XG4gICwgdG9PYmplY3QgPSAkLnRvT2JqZWN0O1xuZnVuY3Rpb24gd3JhcE9iamVjdE1ldGhvZChNRVRIT0QsIE1PREUpe1xuICB2YXIgZm4gID0gKCQuY29yZS5PYmplY3QgfHwge30pW01FVEhPRF0gfHwgT2JqZWN0W01FVEhPRF1cbiAgICAsIGYgICA9IDBcbiAgICAsIG8gICA9IHt9O1xuICBvW01FVEhPRF0gPSBNT0RFID09IDEgPyBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IGl0O1xuICB9IDogTU9ERSA9PSAyID8gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiB0cnVlO1xuICB9IDogTU9ERSA9PSAzID8gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBmYWxzZTtcbiAgfSA6IE1PREUgPT0gNCA/IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gZm4odG9PYmplY3QoaXQpLCBrZXkpO1xuICB9IDogTU9ERSA9PSA1ID8gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiBmbihPYmplY3QoJC5hc3NlcnREZWZpbmVkKGl0KSkpO1xuICB9IDogZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBmbih0b09iamVjdChpdCkpO1xuICB9O1xuICB0cnkge1xuICAgIGZuKCd6Jyk7XG4gIH0gY2F0Y2goZSl7XG4gICAgZiA9IDE7XG4gIH1cbiAgJGRlZigkZGVmLlMgKyAkZGVmLkYgKiBmLCAnT2JqZWN0Jywgbyk7XG59XG53cmFwT2JqZWN0TWV0aG9kKCdmcmVlemUnLCAxKTtcbndyYXBPYmplY3RNZXRob2QoJ3NlYWwnLCAxKTtcbndyYXBPYmplY3RNZXRob2QoJ3ByZXZlbnRFeHRlbnNpb25zJywgMSk7XG53cmFwT2JqZWN0TWV0aG9kKCdpc0Zyb3plbicsIDIpO1xud3JhcE9iamVjdE1ldGhvZCgnaXNTZWFsZWQnLCAyKTtcbndyYXBPYmplY3RNZXRob2QoJ2lzRXh0ZW5zaWJsZScsIDMpO1xud3JhcE9iamVjdE1ldGhvZCgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgNCk7XG53cmFwT2JqZWN0TWV0aG9kKCdnZXRQcm90b3R5cGVPZicsIDUpO1xud3JhcE9iamVjdE1ldGhvZCgna2V5cycpO1xud3JhcE9iamVjdE1ldGhvZCgnZ2V0T3duUHJvcGVydHlOYW1lcycpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBOQU1FID0gJ25hbWUnXG4gICwgc2V0RGVzYyA9ICQuc2V0RGVzY1xuICAsIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZ1bmN0aW9uUHJvdG8gfHwgJC5GVyAmJiAkLkRFU0MgJiYgc2V0RGVzYyhGdW5jdGlvblByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpe1xuICAgIHZhciBtYXRjaCA9IFN0cmluZyh0aGlzKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoW14gKF0qKS8pXG4gICAgICAsIG5hbWUgID0gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnO1xuICAgICQuaGFzKHRoaXMsIE5BTUUpIHx8IHNldERlc2ModGhpcywgTkFNRSwgJC5kZXNjKDUsIG5hbWUpKTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgJC5oYXModGhpcywgTkFNRSkgfHwgc2V0RGVzYyh0aGlzLCBOQU1FLCAkLmRlc2MoMCwgdmFsdWUpKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGlzT2JqZWN0ICAgPSAkLmlzT2JqZWN0XG4gICwgaXNGdW5jdGlvbiA9ICQuaXNGdW5jdGlvblxuICAsIE5VTUJFUiAgICAgPSAnTnVtYmVyJ1xuICAsIE51bWJlciAgICAgPSAkLmdbTlVNQkVSXVxuICAsIEJhc2UgICAgICAgPSBOdW1iZXJcbiAgLCBwcm90byAgICAgID0gTnVtYmVyLnByb3RvdHlwZTtcbmZ1bmN0aW9uIHRvUHJpbWl0aXZlKGl0KXtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKGlzRnVuY3Rpb24oZm4gPSBpdC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKGlzRnVuY3Rpb24oZm4gPSBpdC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBudW1iZXJcIik7XG59XG5mdW5jdGlvbiB0b051bWJlcihpdCl7XG4gIGlmKGlzT2JqZWN0KGl0KSlpdCA9IHRvUHJpbWl0aXZlKGl0KTtcbiAgaWYodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIgJiYgaXQuY2hhckNvZGVBdCgwKSA9PSA0OCl7XG4gICAgdmFyIGJpbmFyeSA9IGZhbHNlO1xuICAgIHN3aXRjaChpdC5jaGFyQ29kZUF0KDEpKXtcbiAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IGJpbmFyeSA9IHRydWU7XG4gICAgICBjYXNlIDc5IDogY2FzZSAxMTEgOiByZXR1cm4gcGFyc2VJbnQoaXQuc2xpY2UoMiksIGJpbmFyeSA/IDIgOiA4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn1cbmlmKCQuRlcgJiYgIShOdW1iZXIoJzBvMScpICYmIE51bWJlcignMGIxJykpKXtcbiAgTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKGl0KXtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE51bWJlciA/IG5ldyBCYXNlKHRvTnVtYmVyKGl0KSkgOiB0b051bWJlcihpdCk7XG4gIH07XG4gICQuZWFjaC5jYWxsKCQuREVTQyA/ICQuZ2V0TmFtZXMoQmFzZSkgOiAoXG4gICAgICAvLyBFUzM6XG4gICAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgICApLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGtleSl7XG4gICAgICBpZigkLmhhcyhCYXNlLCBrZXkpICYmICEkLmhhcyhOdW1iZXIsIGtleSkpe1xuICAgICAgICAkLnNldERlc2MoTnVtYmVyLCBrZXksICQuZ2V0RGVzYyhCYXNlLCBrZXkpKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSBOdW1iZXI7XG4gICQuaGlkZSgkLmcsIE5VTUJFUiwgTnVtYmVyKTtcbn0iLCJ2YXIgJCAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgYWJzICAgPSBNYXRoLmFic1xuICAsIGZsb29yID0gTWF0aC5mbG9vclxuICAsIF9pc0Zpbml0ZSA9ICQuZy5pc0Zpbml0ZVxuICAsIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxO1xuZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICEkLmlzT2JqZWN0KGl0KSAmJiBfaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59XG4kZGVmKCRkZWYuUywgJ051bWJlcicsIHtcbiAgLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbiAgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSxcbiAgLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH0sXG4gIC8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxuICBpc0ludGVnZXI6IGlzSW50ZWdlcixcbiAgLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcil7XG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH0sXG4gIC8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpe1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICB9LFxuICAvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICBNQVhfU0FGRV9JTlRFR0VSOiBNQVhfU0FGRV9JTlRFR0VSLFxuICAvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbiAgTUlOX1NBRkVfSU5URUdFUjogLU1BWF9TQUZFX0lOVEVHRVIsXG4gIC8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXQsXG4gIC8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiAgcGFyc2VJbnQ6IHBhcnNlSW50XG59KTsiLCJ2YXIgSW5maW5pdHkgPSAxIC8gMFxuICAsICRkZWYgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgRSAgICAgPSBNYXRoLkVcbiAgLCBwb3cgICA9IE1hdGgucG93XG4gICwgYWJzICAgPSBNYXRoLmFic1xuICAsIGV4cCAgID0gTWF0aC5leHBcbiAgLCBsb2cgICA9IE1hdGgubG9nXG4gICwgc3FydCAgPSBNYXRoLnNxcnRcbiAgLCBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vclxuICAsIEVQU0lMT04gICA9IHBvdygyLCAtNTIpXG4gICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMylcbiAgLCBNQVgzMiAgICAgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKVxuICAsIE1JTjMyICAgICA9IHBvdygyLCAtMTI2KTtcbmZ1bmN0aW9uIHJvdW5kVGllc1RvRXZlbihuKXtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufVxuXG4vLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5mdW5jdGlvbiBzaWduKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59XG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG5mdW5jdGlvbiBhc2luaCh4KXtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBsb2coeCArIHNxcnQoeCAqIHggKyAxKSk7XG59XG4vLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxuZnVuY3Rpb24gZXhwbTEoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBleHAoeCkgLSAxO1xufVxuXG4kZGVmKCRkZWYuUywgJ01hdGgnLCB7XG4gIC8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiBpc0Zpbml0ZSh4KSA/IGxvZyh4IC8gRSArIHNxcnQoeCArIDEpICogc3FydCh4IC0gMSkgLyBFKSArIDEgOiB4O1xuICB9LFxuICAvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG4gIGFzaW5oOiBhc2luaCxcbiAgLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogbG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH0sXG4gIC8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpe1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBwb3coYWJzKHgpLCAxIC8gMyk7XG4gIH0sXG4gIC8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KXtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gZmxvb3IobG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfSxcbiAgLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpe1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH0sXG4gIC8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG4gIGV4cG0xOiBleHBtMSxcbiAgLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG4gIGZyb3VuZDogZnVuY3Rpb24gZnJvdW5kKHgpe1xuICAgIHZhciAkYWJzICA9IGFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfSxcbiAgLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgbGVuMSA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGVuMiA9IGxlbjFcbiAgICAgICwgYXJncyA9IEFycmF5KGxlbjEpXG4gICAgICAsIGxhcmcgPSAtSW5maW5pdHlcbiAgICAgICwgYXJnO1xuICAgIHdoaWxlKGxlbjEtLSl7XG4gICAgICBhcmcgPSBhcmdzW2xlbjFdID0gK2FyZ3VtZW50c1tsZW4xXTtcbiAgICAgIGlmKGFyZyA9PSBJbmZpbml0eSB8fCBhcmcgPT0gLUluZmluaXR5KXJldHVybiBJbmZpbml0eTtcbiAgICAgIGlmKGFyZyA+IGxhcmcpbGFyZyA9IGFyZztcbiAgICB9XG4gICAgbGFyZyA9IGFyZyB8fCAxO1xuICAgIHdoaWxlKGxlbjItLSlzdW0gKz0gcG93KGFyZ3NbbGVuMl0gLyBsYXJnLCAyKTtcbiAgICByZXR1cm4gbGFyZyAqIHNxcnQoc3VtKTtcbiAgfSxcbiAgLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpe1xuICAgIHZhciBVSW50MTYgPSAweGZmZmZcbiAgICAgICwgeG4gPSAreFxuICAgICAgLCB5biA9ICt5XG4gICAgICAsIHhsID0gVUludDE2ICYgeG5cbiAgICAgICwgeWwgPSBVSW50MTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJbnQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJbnQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9LFxuICAvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxuICBsb2cxcDogZnVuY3Rpb24gbG9nMXAoeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogbG9nKDEgKyB4KTtcbiAgfSxcbiAgLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpe1xuICAgIHJldHVybiBsb2coeCkgLyBNYXRoLkxOMTA7XG4gIH0sXG4gIC8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KXtcbiAgICByZXR1cm4gbG9nKHgpIC8gTWF0aC5MTjI7XG4gIH0sXG4gIC8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbiAgc2lnbjogc2lnbixcbiAgLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBhYnMoeCA9ICt4KSA8IDEgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMiA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKEUgLyAyKTtcbiAgfSxcbiAgLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpe1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KVxuICAgICAgLCBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH0sXG4gIC8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbiAgfVxufSk7IiwidmFyICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCB0b0luZGV4ID0gcmVxdWlyZSgnLi8kJykudG9JbmRleFxuICAsIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbiRkZWYoJGRlZi5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdXG4gICAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaSAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmKHRvSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKXRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pOyIsInZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuXG4kZGVmKCRkZWYuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpe1xuICAgIHZhciB0cGwgPSAkLnRvT2JqZWN0KGNhbGxTaXRlLnJhdylcbiAgICAgICwgbGVuID0gJC50b0xlbmd0aCh0cGwubGVuZ3RoKVxuICAgICAgLCBzbG4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlcyA9IFtdXG4gICAgICAsIGkgICA9IDA7XG4gICAgd2hpbGUobGVuID4gaSl7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmKGkgPCBzbG4pcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwidmFyIHNldCAgID0gcmVxdWlyZSgnLi8kJykuc2V0XG4gICwgYXQgICAgPSByZXF1aXJlKCcuLyQuc3RyaW5nLWF0JykodHJ1ZSlcbiAgLCBJVEVSICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdpdGVyJylcbiAgLCAkaXRlciA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBzdGVwICA9ICRpdGVyLnN0ZXA7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbiRpdGVyLnN0ZChTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHNldCh0aGlzLCBJVEVSLCB7bzogU3RyaW5nKGl0ZXJhdGVkKSwgaTogMH0pO1xuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIGl0ZXIgID0gdGhpc1tJVEVSXVxuICAgICwgTyAgICAgPSBpdGVyLm9cbiAgICAsIGluZGV4ID0gaXRlci5pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHN0ZXAoMSk7XG4gIHBvaW50ID0gYXQuY2FsbChPLCBpbmRleCk7XG4gIGl0ZXIuaSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiBzdGVwKDAsIHBvaW50KTtcbn0pOyIsInZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogcmVxdWlyZSgnLi8kLnN0cmluZy1hdCcpKGZhbHNlKVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNvZiAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgdG9MZW5ndGggPSAkLnRvTGVuZ3RoO1xuXG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIGlmKGNvZihzZWFyY2hTdHJpbmcpID09ICdSZWdFeHAnKXRocm93IFR5cGVFcnJvcigpO1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSlcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHNbMV1cbiAgICAgICwgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpXG4gICAgICAsIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgc2VhcmNoU3RyaW5nICs9ICcnO1xuICAgIHJldHVybiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaFN0cmluZy5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaFN0cmluZztcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNvZiAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuXG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICBpZihjb2Yoc2VhcmNoU3RyaW5nKSA9PSAnUmVnRXhwJyl0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICByZXR1cm4gISF+U3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSkuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuXG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChjb3VudCl7XG4gICAgdmFyIHN0ciA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhpcykpXG4gICAgICAsIHJlcyA9ICcnXG4gICAgICAsIG4gICA9ICQudG9JbnRlZ2VyKGNvdW50KTtcbiAgICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgICBmb3IoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSlpZihuICYgMSlyZXMgKz0gc3RyO1xuICAgIHJldHVybiByZXM7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcblxuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIGlmKGNvZihzZWFyY2hTdHJpbmcpID09ICdSZWdFeHAnKXRocm93IFR5cGVFcnJvcigpO1xuICAgIHZhciB0aGF0ICA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhpcykpXG4gICAgICAsIGluZGV4ID0gJC50b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHNbMV0sIHRoYXQubGVuZ3RoKSk7XG4gICAgc2VhcmNoU3RyaW5nICs9ICcnO1xuICAgIHJldHVybiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaFN0cmluZy5sZW5ndGgpID09PSBzZWFyY2hTdHJpbmc7XG4gIH1cbn0pOyIsInZhciAkICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3R4ICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRpdGVyID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIHN0ZXBDYWxsID0gJGl0ZXIuc3RlcENhbGw7XG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICFyZXF1aXJlKCcuLyQuaXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IE9iamVjdCgkLmFzc2VydERlZmluZWQoYXJyYXlMaWtlKSlcbiAgICAgICwgbWFwZm4gICA9IGFyZ3VtZW50c1sxXVxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBmICAgICAgID0gbWFwcGluZyA/IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKSA6IHVuZGVmaW5lZFxuICAgICAgLCBpbmRleCAgID0gMFxuICAgICAgLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYoJGl0ZXIuaXMoTykpe1xuICAgICAgaXRlcmF0b3IgPSAkaXRlci5nZXQoTyk7XG4gICAgICAvLyBzdHJhbmdlIElFIHF1aXJrcyBtb2RlIGJ1ZyAtPiB1c2UgdHlwZW9mIGluc3RlYWQgb2YgaXNGdW5jdGlvblxuICAgICAgcmVzdWx0ICAgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpO1xuICAgICAgZm9yKDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IG1hcHBpbmcgPyBzdGVwQ2FsbChpdGVyYXRvciwgZiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdHJhbmdlIElFIHF1aXJrcyBtb2RlIGJ1ZyAtPiB1c2UgdHlwZW9mIGluc3RlYWQgb2YgaXNGdW5jdGlvblxuICAgICAgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShsZW5ndGggPSAkLnRvTGVuZ3RoKE8ubGVuZ3RoKSk7XG4gICAgICBmb3IoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBtYXBwaW5nID8gZihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCJ2YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgIC8vIHN0cmFuZ2UgSUUgcXVpcmtzIG1vZGUgYnVnIC0+IHVzZSB0eXBlb2YgaW5zdGVhZCBvZiBpc0Z1bmN0aW9uXG4gICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkobGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwidmFyICQgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIHNldFVuc2NvcGUgPSByZXF1aXJlKCcuLyQudW5zY29wZScpXG4gICwgSVRFUiAgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdpdGVyJylcbiAgLCAkaXRlciAgICAgID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIHN0ZXAgICAgICAgPSAkaXRlci5zdGVwXG4gICwgSXRlcmF0b3JzICA9ICRpdGVyLkl0ZXJhdG9ycztcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuJGl0ZXIuc3RkKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICQuc2V0KHRoaXMsIElURVIsIHtvOiAkLnRvT2JqZWN0KGl0ZXJhdGVkKSwgaTogMCwgazoga2luZH0pO1xuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgaXRlciAgPSB0aGlzW0lURVJdXG4gICAgLCBPICAgICA9IGl0ZXIub1xuICAgICwga2luZCAgPSBpdGVyLmtcbiAgICAsIGluZGV4ID0gaXRlci5pKys7XG4gIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcbiAgICBpdGVyLm8gPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5JyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWUnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnNldFVuc2NvcGUoJ2tleXMnKTtcbnNldFVuc2NvcGUoJ3ZhbHVlcycpO1xuc2V0VW5zY29wZSgnZW50cmllcycpOyIsInJlcXVpcmUoJy4vJC5zcGVjaWVzJykoQXJyYXkpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgdG9JbmRleCA9ICQudG9JbmRleDtcbiRkZWYoJGRlZi5QLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKXtcbiAgICB2YXIgTyAgICAgPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKHRoaXMpKVxuICAgICAgLCBsZW4gICA9ICQudG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIHRvICAgID0gdG9JbmRleCh0YXJnZXQsIGxlbilcbiAgICAgICwgZnJvbSAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGVuZCAgID0gYXJndW1lbnRzWzJdXG4gICAgICAsIGZpbiAgID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0luZGV4KGVuZCwgbGVuKVxuICAgICAgLCBjb3VudCA9IE1hdGgubWluKGZpbiAtIGZyb20sIGxlbiAtIHRvKVxuICAgICAgLCBpbmMgICA9IDE7XG4gICAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXtcbiAgICAgIGluYyAgPSAtMTtcbiAgICAgIGZyb20gPSBmcm9tICsgY291bnQgLSAxO1xuICAgICAgdG8gICA9IHRvICAgKyBjb3VudCAtIDE7XG4gICAgfVxuICAgIHdoaWxlKGNvdW50LS0gPiAwKXtcbiAgICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07XG4gICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIHRvICAgKz0gaW5jO1xuICAgICAgZnJvbSArPSBpbmM7XG4gICAgfSByZXR1cm4gTztcbiAgfVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCdjb3B5V2l0aGluJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCB0b0luZGV4ID0gJC50b0luZGV4O1xuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4gIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLyl7XG4gICAgdmFyIE8gICAgICA9IE9iamVjdCgkLmFzc2VydERlZmluZWQodGhpcykpXG4gICAgICAsIGxlbmd0aCA9ICQudG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoYXJndW1lbnRzWzFdLCBsZW5ndGgpXG4gICAgICAsIGVuZCAgICA9IGFyZ3VtZW50c1syXVxuICAgICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpO1xuICAgIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTtcbiAgICByZXR1cm4gTztcbiAgfVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCdmaWxsJyk7IiwidmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZpbmQ6IHJlcXVpcmUoJy4vJC5hcnJheS1tZXRob2RzJykoNSlcbn0pO1xucmVxdWlyZSgnLi8kLnVuc2NvcGUnKSgnZmluZCcpOyIsInZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZpbmRJbmRleDogcmVxdWlyZSgnLi8kLmFycmF5LW1ldGhvZHMnKSg2KVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCdmaW5kSW5kZXgnKTsiLCJ2YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCBSZWdFeHAgPSAkLmcuUmVnRXhwXG4gICwgQmFzZSAgID0gUmVnRXhwXG4gICwgcHJvdG8gID0gUmVnRXhwLnByb3RvdHlwZTtcbmlmKCQuRlcgJiYgJC5ERVNDKXtcbiAgLy8gUmVnRXhwIGFsbG93cyBhIHJlZ2V4IHdpdGggZmxhZ3MgYXMgdGhlIHBhdHRlcm5cbiAgaWYoIWZ1bmN0aW9uKCl7dHJ5eyByZXR1cm4gUmVnRXhwKC9hL2csICdpJykgPT0gJy9hL2knOyB9Y2F0Y2goZSl7IC8qIGVtcHR5ICovIH19KCkpe1xuICAgIFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwYXR0ZXJuLCBmbGFncyl7XG4gICAgICByZXR1cm4gbmV3IEJhc2UoY29mKHBhdHRlcm4pID09ICdSZWdFeHAnICYmIGZsYWdzICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBwYXR0ZXJuLnNvdXJjZSA6IHBhdHRlcm4sIGZsYWdzKTtcbiAgICB9O1xuICAgICQuZWFjaC5jYWxsKCQuZ2V0TmFtZXMoQmFzZSksIGZ1bmN0aW9uKGtleSl7XG4gICAgICBrZXkgaW4gUmVnRXhwIHx8ICQuc2V0RGVzYyhSZWdFeHAsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBwcm90by5jb25zdHJ1Y3RvciA9IFJlZ0V4cDtcbiAgICBSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gICAgJC5oaWRlKCQuZywgJ1JlZ0V4cCcsIFJlZ0V4cCk7XG4gIH1cbiAgLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuICBpZigvLi9nLmZsYWdzICE9ICdnJykkLnNldERlc2MocHJvdG8sICdmbGFncycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiByZXF1aXJlKCcuLyQucmVwbGFjZXInKSgvXi4qXFwvKFxcdyopJC8sICckMScpXG4gIH0pO1xufVxucmVxdWlyZSgnLi8kLnNwZWNpZXMnKShSZWdFeHApOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjdHggICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgY29mICAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBhc3NlcnQgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgJGl0ZXIgICA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBTUEVDSUVTID0gcmVxdWlyZSgnLi8kLndrcycpKCdzcGVjaWVzJylcbiAgLCBSRUNPUkQgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ3JlY29yZCcpXG4gICwgZm9yT2YgICA9ICRpdGVyLmZvck9mXG4gICwgUFJPTUlTRSA9ICdQcm9taXNlJ1xuICAsIGdsb2JhbCAgPSAkLmdcbiAgLCBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBhc2FwICAgID0gcHJvY2VzcyAmJiBwcm9jZXNzLm5leHRUaWNrIHx8IHJlcXVpcmUoJy4vJC50YXNrJykuc2V0XG4gICwgUCAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIEJhc2UgICAgPSBQXG4gICwgaXNGdW5jdGlvbiAgICAgPSAkLmlzRnVuY3Rpb25cbiAgLCBpc09iamVjdCAgICAgICA9ICQuaXNPYmplY3RcbiAgLCBhc3NlcnRGdW5jdGlvbiA9IGFzc2VydC5mblxuICAsIGFzc2VydE9iamVjdCAgID0gYXNzZXJ0Lm9ialxuICAsIHRlc3Q7XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9yKEMpe1xuICB2YXIgUyA9IGFzc2VydE9iamVjdChDKVtTUEVDSUVTXTtcbiAgcmV0dXJuIFMgIT0gdW5kZWZpbmVkID8gUyA6IEM7XG59XG5mdW5jdGlvbiBpc1RoZW5hYmxlKGl0KXtcbiAgdmFyIHRoZW47XG4gIGlmKGlzT2JqZWN0KGl0KSl0aGVuID0gaXQudGhlbjtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odGhlbikgPyB0aGVuIDogZmFsc2U7XG59XG5mdW5jdGlvbiBpc1VuaGFuZGxlZChwcm9taXNlKXtcbiAgdmFyIHJlY29yZCA9IHByb21pc2VbUkVDT1JEXVxuICAgICwgY2hhaW4gID0gcmVjb3JkLmNcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlYWN0O1xuICBpZihyZWNvcmQuaClyZXR1cm4gZmFsc2U7XG4gIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpe1xuICAgIHJlYWN0ID0gY2hhaW5baSsrXTtcbiAgICBpZihyZWFjdC5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdC5QKSlyZXR1cm4gZmFsc2U7XG4gIH0gcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBub3RpZnkocmVjb3JkLCBpc1JlamVjdCl7XG4gIHZhciBjaGFpbiA9IHJlY29yZC5jO1xuICBpZihpc1JlamVjdCB8fCBjaGFpbi5sZW5ndGgpYXNhcChmdW5jdGlvbigpe1xuICAgIHZhciBwcm9taXNlID0gcmVjb3JkLnBcbiAgICAgICwgdmFsdWUgICA9IHJlY29yZC52XG4gICAgICAsIG9rICAgICAgPSByZWNvcmQucyA9PSAxXG4gICAgICAsIGkgICAgICAgPSAwO1xuICAgIGlmKGlzUmVqZWN0ICYmIGlzVW5oYW5kbGVkKHByb21pc2UpKXtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSkpe1xuICAgICAgICAgIGlmKGNvZihwcm9jZXNzKSA9PSAncHJvY2Vzcycpe1xuICAgICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGdsb2JhbC5jb25zb2xlICYmIGlzRnVuY3Rpb24oY29uc29sZS5lcnJvcikpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgMWUzKTtcbiAgICB9IGVsc2Ugd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSkhZnVuY3Rpb24ocmVhY3Qpe1xuICAgICAgdmFyIGNiID0gb2sgPyByZWFjdC5vayA6IHJlYWN0LmZhaWxcbiAgICAgICAgLCByZXQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZihjYil7XG4gICAgICAgICAgaWYoIW9rKXJlY29yZC5oID0gdHJ1ZTtcbiAgICAgICAgICByZXQgPSBjYiA9PT0gdHJ1ZSA/IHZhbHVlIDogY2IodmFsdWUpO1xuICAgICAgICAgIGlmKHJldCA9PT0gcmVhY3QuUCl7XG4gICAgICAgICAgICByZWFjdC5yZWooVHlwZUVycm9yKFBST01JU0UgKyAnLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXQsIHJlYWN0LnJlcywgcmVhY3QucmVqKTtcbiAgICAgICAgICB9IGVsc2UgcmVhY3QucmVzKHJldCk7XG4gICAgICAgIH0gZWxzZSByZWFjdC5yZWoodmFsdWUpO1xuICAgICAgfSBjYXRjaChlcnIpe1xuICAgICAgICByZWFjdC5yZWooZXJyKTtcbiAgICAgIH1cbiAgICB9KGNoYWluW2krK10pO1xuICAgIGNoYWluLmxlbmd0aCA9IDA7XG4gIH0pO1xufVxuZnVuY3Rpb24gJHJlamVjdCh2YWx1ZSl7XG4gIHZhciByZWNvcmQgPSB0aGlzO1xuICBpZihyZWNvcmQuZClyZXR1cm47XG4gIHJlY29yZC5kID0gdHJ1ZTtcbiAgcmVjb3JkID0gcmVjb3JkLnIgfHwgcmVjb3JkOyAvLyB1bndyYXBcbiAgcmVjb3JkLnYgPSB2YWx1ZTtcbiAgcmVjb3JkLnMgPSAyO1xuICBub3RpZnkocmVjb3JkLCB0cnVlKTtcbn1cbmZ1bmN0aW9uICRyZXNvbHZlKHZhbHVlKXtcbiAgdmFyIHJlY29yZCA9IHRoaXNcbiAgICAsIHRoZW4sIHdyYXBwZXI7XG4gIGlmKHJlY29yZC5kKXJldHVybjtcbiAgcmVjb3JkLmQgPSB0cnVlO1xuICByZWNvcmQgPSByZWNvcmQuciB8fCByZWNvcmQ7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7XG4gICAgICB3cmFwcGVyID0ge3I6IHJlY29yZCwgZDogZmFsc2V9OyAvLyB3cmFwXG4gICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY29yZC52ID0gdmFsdWU7XG4gICAgICByZWNvcmQucyA9IDE7XG4gICAgICBub3RpZnkocmVjb3JkKTtcbiAgICB9XG4gIH0gY2F0Y2goZXJyKXtcbiAgICAkcmVqZWN0LmNhbGwod3JhcHBlciB8fCB7cjogcmVjb3JkLCBkOiBmYWxzZX0sIGVycik7IC8vIHdyYXBcbiAgfVxufVxuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIShpc0Z1bmN0aW9uKFApICYmIGlzRnVuY3Rpb24oUC5yZXNvbHZlKSAmJiBQLnJlc29sdmUodGVzdCA9IG5ldyBQKGZ1bmN0aW9uKCl7fSkpID09IHRlc3QpKXtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFzc2VydEZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICB2YXIgcmVjb3JkID0ge1xuICAgICAgcDogYXNzZXJ0Lmluc3QodGhpcywgUCwgUFJPTUlTRSksICAgICAgIC8vIDwtIHByb21pc2VcbiAgICAgIGM6IFtdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBjaGFpblxuICAgICAgczogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgICBkOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gZG9uZVxuICAgICAgdjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICBoOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gaGFuZGxlZCByZWplY3Rpb25cbiAgICB9O1xuICAgICQuaGlkZSh0aGlzLCBSRUNPUkQsIHJlY29yZCk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgcmVjb3JkLCAxKSwgY3R4KCRyZWplY3QsIHJlY29yZCwgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbChyZWNvcmQsIGVycik7XG4gICAgfVxuICB9O1xuICAkLm1peChQLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl7XG4gICAgICB2YXIgUyA9IGFzc2VydE9iamVjdChhc3NlcnRPYmplY3QodGhpcykuY29uc3RydWN0b3IpW1NQRUNJRVNdO1xuICAgICAgdmFyIHJlYWN0ID0ge1xuICAgICAgICBvazogICBpc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdHJ1ZSxcbiAgICAgICAgZmFpbDogaXNGdW5jdGlvbihvblJlamVjdGVkKSAgPyBvblJlamVjdGVkICA6IGZhbHNlXG4gICAgICB9O1xuICAgICAgdmFyIHByb21pc2UgPSByZWFjdC5QID0gbmV3IChTICE9IHVuZGVmaW5lZCA/IFMgOiBQKShmdW5jdGlvbihyZXMsIHJlail7XG4gICAgICAgIHJlYWN0LnJlcyA9IGFzc2VydEZ1bmN0aW9uKHJlcyk7XG4gICAgICAgIHJlYWN0LnJlaiA9IGFzc2VydEZ1bmN0aW9uKHJlaik7XG4gICAgICB9KTtcbiAgICAgIHZhciByZWNvcmQgPSB0aGlzW1JFQ09SRF07XG4gICAgICByZWNvcmQuYy5wdXNoKHJlYWN0KTtcbiAgICAgIHJlY29yZC5zICYmIG5vdGlmeShyZWNvcmQpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpe1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGV4cG9ydFxuJGRlZigkZGVmLkcgKyAkZGVmLlcgKyAkZGVmLkYgKiAoUCAhPSBCYXNlKSwge1Byb21pc2U6IFB9KTtcbmNvZi5zZXQoUCwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuLyQuc3BlY2llcycpKFApO1xuXG4vLyBzdGF0aWNzXG4kZGVmKCRkZWYuUywgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICByZXR1cm4gbmV3IChnZXRDb25zdHJ1Y3Rvcih0aGlzKSkoZnVuY3Rpb24ocmVzLCByZWope1xuICAgICAgcmVqKHIpO1xuICAgIH0pO1xuICB9LFxuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICByZXR1cm4gaXNPYmplY3QoeCkgJiYgUkVDT1JEIGluIHggJiYgJC5nZXRQcm90byh4KSA9PT0gdGhpcy5wcm90b3R5cGVcbiAgICAgID8geCA6IG5ldyAoZ2V0Q29uc3RydWN0b3IodGhpcykpKGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgIHJlcyh4KTtcbiAgICAgIH0pO1xuICB9XG59KTtcbiRkZWYoJGRlZi5TICsgJGRlZi5GICogIXJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpe1xuICBQLmFsbChpdGVyKVsnY2F0Y2gnXShmdW5jdGlvbigpe30pO1xufSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyAgICAgID0gZ2V0Q29uc3RydWN0b3IodGhpcylcbiAgICAgICwgdmFsdWVzID0gW107XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKHJlcywgcmVqKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgdmFsdWVzLnB1c2gsIHZhbHVlcyk7XG4gICAgICB2YXIgcmVtYWluaW5nID0gdmFsdWVzLmxlbmd0aFxuICAgICAgICAsIHJlc3VsdHMgICA9IEFycmF5KHJlbWFpbmluZyk7XG4gICAgICBpZihyZW1haW5pbmcpJC5lYWNoLmNhbGwodmFsdWVzLCBmdW5jdGlvbihwcm9taXNlLCBpbmRleCl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlcyhyZXN1bHRzKTtcbiAgICAgICAgfSwgcmVqKTtcbiAgICAgIH0pO1xuICAgICAgZWxzZSByZXMocmVzdWx0cyk7XG4gICAgfSk7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgPSBnZXRDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ocmVzLCByZWope1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4ocmVzLCByZWopO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuLyQuY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xucmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24nKSgnTWFwJywge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTsiLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uJykoJ1NldCcsIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgd2VhayAgICAgID0gcmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24td2VhaycpXG4gICwgbGVha1N0b3JlID0gd2Vhay5sZWFrU3RvcmVcbiAgLCBJRCAgICAgICAgPSB3ZWFrLklEXG4gICwgV0VBSyAgICAgID0gd2Vhay5XRUFLXG4gICwgaGFzICAgICAgID0gJC5oYXNcbiAgLCBpc09iamVjdCAgPSAkLmlzT2JqZWN0XG4gICwgaXNGcm96ZW4gID0gT2JqZWN0LmlzRnJvemVuIHx8ICQuY29yZS5PYmplY3QuaXNGcm96ZW5cbiAgLCB0bXAgICAgICAgPSB7fTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciBXZWFrTWFwID0gcmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24nKSgnV2Vha01hcCcsIHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICBpZihpc09iamVjdChrZXkpKXtcbiAgICAgIGlmKGlzRnJvemVuKGtleSkpcmV0dXJuIGxlYWtTdG9yZSh0aGlzKS5nZXQoa2V5KTtcbiAgICAgIGlmKGhhcyhrZXksIFdFQUspKXJldHVybiBrZXlbV0VBS11bdGhpc1tJRF1dO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufSwgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmKCQuRlcgJiYgbmV3IFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KXtcbiAgJC5lYWNoLmNhbGwoWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgbWV0aG9kID0gV2Vha01hcC5wcm90b3R5cGVba2V5XTtcbiAgICBXZWFrTWFwLnByb3RvdHlwZVtrZXldID0gZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBsZWFreSBtYXBcbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmIGlzRnJvemVuKGEpKXtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGxlYWtTdG9yZSh0aGlzKVtrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuLyQuY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuLyQuY29sbGVjdGlvbicpKCdXZWFrU2V0Jywge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7IiwidmFyICQgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgc2V0UHJvdG8gID0gcmVxdWlyZSgnLi8kLnNldC1wcm90bycpXG4gICwgJGl0ZXIgICAgID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIElURVIgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdpdGVyJylcbiAgLCBzdGVwICAgICAgPSAkaXRlci5zdGVwXG4gICwgYXNzZXJ0ICAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgaXNPYmplY3QgID0gJC5pc09iamVjdFxuICAsIGdldERlc2MgICA9ICQuZ2V0RGVzY1xuICAsIHNldERlc2MgICA9ICQuc2V0RGVzY1xuICAsIGdldFByb3RvICA9ICQuZ2V0UHJvdG9cbiAgLCBhcHBseSAgICAgPSBGdW5jdGlvbi5hcHBseVxuICAsIGFzc2VydE9iamVjdCAgPSBhc3NlcnQub2JqXG4gICwgX2lzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgJC5pdDtcbmZ1bmN0aW9uIEVudW1lcmF0ZShpdGVyYXRlZCl7XG4gIHZhciBrZXlzID0gW10sIGtleTtcbiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTtcbiAgJC5zZXQodGhpcywgSVRFUiwge286IGl0ZXJhdGVkLCBhOiBrZXlzLCBpOiAwfSk7XG59XG4kaXRlci5jcmVhdGUoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24oKXtcbiAgdmFyIGl0ZXIgPSB0aGlzW0lURVJdXG4gICAgLCBrZXlzID0gaXRlci5hXG4gICAgLCBrZXk7XG4gIGRvIHtcbiAgICBpZihpdGVyLmkgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHN0ZXAoMSk7XG4gIH0gd2hpbGUoISgoa2V5ID0ga2V5c1tpdGVyLmkrK10pIGluIGl0ZXIubykpO1xuICByZXR1cm4gc3RlcCgwLCBrZXkpO1xufSk7XG5cbmZ1bmN0aW9uIHdyYXAoZm4pe1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIGFzc2VydE9iamVjdChpdCk7XG4gICAgdHJ5IHtcbiAgICAgIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleS8qLCByZWNlaXZlciovKXtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl1cbiAgICAsIGRlc2MgPSBnZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSksIHByb3RvO1xuICBpZihkZXNjKXJldHVybiAkLmhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgPT09IHVuZGVmaW5lZFxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gIHJldHVybiBpc09iamVjdChwcm90byA9IGdldFByb3RvKHRhcmdldCkpXG4gICAgPyBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcilcbiAgICA6IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSlcbiAgICAsIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmKCFvd25EZXNjKXtcbiAgICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvKHRhcmdldCkpKXtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSAkLmRlc2MoMCk7XG4gIH1cbiAgaWYoJC5oYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdldERlc2MocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCAkLmRlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBzZXREZXNjKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxudmFyIHJlZmxlY3QgPSB7XG4gIC8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxuICBhcHBseTogcmVxdWlyZSgnLi8kLmN0eCcpKEZ1bmN0aW9uLmNhbGwsIGFwcGx5LCAzKSxcbiAgLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgLyosIG5ld1RhcmdldCovKXtcbiAgICB2YXIgcHJvdG8gICAgPSBhc3NlcnQuZm4oYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl0pLnByb3RvdHlwZVxuICAgICAgLCBpbnN0YW5jZSA9ICQuY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBhcHBseS5jYWxsKHRhcmdldCwgaW5zdGFuY2UsIGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH0sXG4gIC8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiB3cmFwKHNldERlc2MpLFxuICAvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgdmFyIGRlc2MgPSBnZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfSxcbiAgLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KXtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZShhc3NlcnRPYmplY3QodGFyZ2V0KSk7XG4gIH0sXG4gIC8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbiAgZ2V0OiBnZXQsXG4gIC8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gZ2V0RGVzYyhhc3NlcnRPYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9LFxuICAvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpe1xuICAgIHJldHVybiBnZXRQcm90byhhc3NlcnRPYmplY3QodGFyZ2V0KSk7XG4gIH0sXG4gIC8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9LFxuICAvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KXtcbiAgICByZXR1cm4gISFfaXNFeHRlbnNpYmxlKGFzc2VydE9iamVjdCh0YXJnZXQpKTtcbiAgfSxcbiAgLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxuICBvd25LZXlzOiByZXF1aXJlKCcuLyQub3duLWtleXMnKSxcbiAgLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbiAgcHJldmVudEV4dGVuc2lvbnM6IHdyYXAoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zIHx8ICQuaXQpLFxuICAvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxuICBzZXQ6IHNldFxufTtcbi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxuaWYoc2V0UHJvdG8pcmVmbGVjdC5zZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgdHJ5IHtcbiAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4kZGVmKCRkZWYuRywge1JlZmxlY3Q6IHt9fSk7XG4kZGVmKCRkZWYuUywgJ1JlZmxlY3QnLCByZWZsZWN0KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vZG9tZW5pYy9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IHJlcXVpcmUoJy4vJC5hcnJheS1pbmNsdWRlcycpKHRydWUpXG59KTtcbnJlcXVpcmUoJy4vJC51bnNjb3BlJykoJ2luY2x1ZGVzJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IHJlcXVpcmUoJy4vJC5zdHJpbmctYXQnKSh0cnVlKVxufSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20va2FuZ2F4Lzk2OTgxMDBcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLlMsICdSZWdFeHAnLCB7XG4gIGVzY2FwZTogcmVxdWlyZSgnLi8kLnJlcGxhY2VyJykoLyhbXFxcXFxcLVtcXF17fSgpKis/LixeJHxdKS9nLCAnXFxcXCQxJywgdHJ1ZSlcbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vOTM1Mzc4MVxudmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBvd25LZXlzID0gcmVxdWlyZSgnLi8kLm93bi1rZXlzJyk7XG5cbiRkZWYoJGRlZi5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCl7XG4gICAgdmFyIE8gICAgICA9ICQudG9PYmplY3Qob2JqZWN0KVxuICAgICAgLCByZXN1bHQgPSB7fTtcbiAgICAkLmVhY2guY2FsbChvd25LZXlzKE8pLCBmdW5jdGlvbihrZXkpe1xuICAgICAgJC5zZXREZXNjKHJlc3VsdCwga2V5LCAkLmRlc2MoMCwgJC5nZXREZXNjKE8sIGtleSkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCIvLyBodHRwOi8vZ29vLmdsL1hrQnJqRFxudmFyICQgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG5mdW5jdGlvbiBjcmVhdGVPYmplY3RUb0FycmF5KGlzRW50cmllcyl7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3Qpe1xuICAgIHZhciBPICAgICAgPSAkLnRvT2JqZWN0KG9iamVjdClcbiAgICAgICwga2V5cyAgID0gJC5nZXRLZXlzKE8pXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGkgICAgICA9IDBcbiAgICAgICwgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKVxuICAgICAgLCBrZXk7XG4gICAgaWYoaXNFbnRyaWVzKXdoaWxlKGxlbmd0aCA+IGkpcmVzdWx0W2ldID0gW2tleSA9IGtleXNbaSsrXSwgT1trZXldXTtcbiAgICBlbHNlIHdoaWxlKGxlbmd0aCA+IGkpcmVzdWx0W2ldID0gT1trZXlzW2krK11dO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiAgY3JlYXRlT2JqZWN0VG9BcnJheShmYWxzZSksXG4gIGVudHJpZXM6IGNyZWF0ZU9iamVjdFRvQXJyYXkodHJ1ZSlcbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGZvck9mID0gcmVxdWlyZSgnLi8kLml0ZXInKS5mb3JPZjtcbiRkZWYoJGRlZi5QLCAnU2V0Jywge1xuICB0b0pTT046IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvck9mKHRoaXMsIGZhbHNlLCBhcnIucHVzaCwgYXJyKTtcbiAgICByZXR1cm4gYXJyO1xuICB9XG59KTsiLCIvLyBKYXZhU2NyaXB0IDEuNiAvIFN0cmF3bWFuIGFycmF5IHN0YXRpY3Mgc2hpbVxudmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkQXJyYXkgID0gJC5jb3JlLkFycmF5IHx8IEFycmF5XG4gICwgc3RhdGljcyA9IHt9O1xuZnVuY3Rpb24gc2V0U3RhdGljcyhrZXlzLCBsZW5ndGgpe1xuICAkLmVhY2guY2FsbChrZXlzLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGtleSl7XG4gICAgaWYobGVuZ3RoID09IHVuZGVmaW5lZCAmJiBrZXkgaW4gJEFycmF5KXN0YXRpY3Nba2V5XSA9ICRBcnJheVtrZXldO1xuICAgIGVsc2UgaWYoa2V5IGluIFtdKXN0YXRpY3Nba2V5XSA9IHJlcXVpcmUoJy4vJC5jdHgnKShGdW5jdGlvbi5jYWxsLCBbXVtrZXldLCBsZW5ndGgpO1xuICB9KTtcbn1cbnNldFN0YXRpY3MoJ3BvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMnLCAxKTtcbnNldFN0YXRpY3MoJ2luZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMnLCAzKTtcbnNldFN0YXRpY3MoJ2pvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZiwnICtcbiAgICAgICAgICAgJ3JlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGwsdHVybicpO1xuJGRlZigkZGVmLlMsICdBcnJheScsIHN0YXRpY3MpOyIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciAkICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGludm9rZSAgICA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKVxuICAsIHBhcnRpYWwgICA9IHJlcXVpcmUoJy4vJC5wYXJ0aWFsJylcbiAgLCBuYXZpZ2F0b3IgPSAkLmcubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xuZnVuY3Rpb24gd3JhcChzZXQpe1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gc2V0KGludm9rZShcbiAgICAgIHBhcnRpYWwsXG4gICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksXG4gICAgICAkLmlzRnVuY3Rpb24oZm4pID8gZm4gOiBGdW5jdGlvbihmbilcbiAgICApLCB0aW1lKTtcbiAgfSA6IHNldDtcbn1cbiRkZWYoJGRlZi5HICsgJGRlZi5CICsgJGRlZi5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcCgkLmcuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKCQuZy5zZXRJbnRlcnZhbClcbn0pOyIsInZhciAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICR0YXNrID0gcmVxdWlyZSgnLi8kLnRhc2snKTtcbiRkZWYoJGRlZi5HICsgJGRlZi5CLCB7XG4gIHNldEltbWVkaWF0ZTogICAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7IiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkICAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgSXRlcmF0b3JzICAgPSByZXF1aXJlKCcuLyQuaXRlcicpLkl0ZXJhdG9yc1xuICAsIElURVJBVE9SICAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXlcbiAgLCBOb2RlTGlzdCAgICA9ICQuZy5Ob2RlTGlzdDtcbmlmKCQuRlcgJiYgTm9kZUxpc3QgJiYgIShJVEVSQVRPUiBpbiBOb2RlTGlzdC5wcm90b3R5cGUpKXtcbiAgJC5oaWRlKE5vZGVMaXN0LnByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbn1cbkl0ZXJhdG9ycy5Ob2RlTGlzdCA9IEFycmF5VmFsdWVzOyIsIi8vIE9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFzc2VydEZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpLmZuO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYXNzZXJ0RnVuY3Rpb24oZm4pO1xuICBpZih+bGVuZ3RoICYmIHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG4gIHN3aXRjaChsZW5ndGgpe1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9IHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgIH07XG59OyIsInZhciAkICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBnbG9iYWwgICAgID0gJC5nXG4gICwgY29yZSAgICAgICA9ICQuY29yZVxuICAsIGlzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb247XG5mdW5jdGlvbiBjdHgoZm4sIHRoYXQpe1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZGVmLkYgPSAxOyAgLy8gZm9yY2VkXG4kZGVmLkcgPSAyOyAgLy8gZ2xvYmFsXG4kZGVmLlMgPSA0OyAgLy8gc3RhdGljXG4kZGVmLlAgPSA4OyAgLy8gcHJvdG9cbiRkZWYuQiA9IDE2OyAvLyBiaW5kXG4kZGVmLlcgPSAzMjsgLy8gd3JhcFxuZnVuY3Rpb24gJGRlZih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwXG4gICAgLCBpc0dsb2JhbCA9IHR5cGUgJiAkZGVmLkdcbiAgICAsIHRhcmdldCAgID0gaXNHbG9iYWwgPyBnbG9iYWwgOiB0eXBlICYgJGRlZi5TXG4gICAgICAgID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSkucHJvdG90eXBlXG4gICAgLCBleHBvcnRzICA9IGlzR2xvYmFsID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIGlmKGlzR2xvYmFsKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhKHR5cGUgJiAkZGVmLkYpICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGlmKHR5cGUgJiAkZGVmLkIgJiYgb3duKWV4cCA9IGN0eChvdXQsIGdsb2JhbCk7XG4gICAgZWxzZSBleHAgPSB0eXBlICYgJGRlZi5QICYmIGlzRnVuY3Rpb24ob3V0KSA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZih0YXJnZXQgJiYgIW93bil7XG4gICAgICBpZihpc0dsb2JhbCl0YXJnZXRba2V5XSA9IG91dDtcbiAgICAgIGVsc2UgZGVsZXRlIHRhcmdldFtrZXldICYmICQuaGlkZSh0YXJnZXQsIGtleSwgb3V0KTtcbiAgICB9XG4gICAgLy8gZXhwb3J0XG4gICAgaWYoZXhwb3J0c1trZXldICE9IG91dCkkLmhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9ICRkZWY7IiwidmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbi8qZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2Upe1xuLyplc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHZhciBUID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZCh0YXJnZXQpKVxuICAgICwgbCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGkgPSAxO1xuICB3aGlsZShsID4gaSl7XG4gICAgdmFyIFMgICAgICA9ICQuRVM1T2JqZWN0KGFyZ3VtZW50c1tpKytdKVxuICAgICAgLCBrZXlzICAgPSAkLmdldEtleXMoUylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaiAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gailUW2tleSA9IGtleXNbaisrXV0gPSBTW2tleV07XG4gIH1cbiAgcmV0dXJuIFQ7XG59OyIsInZhciAkID0gcmVxdWlyZSgnLi8kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICB2YXIgTyAgICAgID0gJC50b09iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSAkLmdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59OyIsInZhciBzaWQgPSAwO1xuZnVuY3Rpb24gdWlkKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBrZXkgKyAnKV8nICsgKCsrc2lkICsgTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMzYpO1xufVxudWlkLnNhZmUgPSByZXF1aXJlKCcuLyQnKS5nLlN5bWJvbCB8fCB1aWQ7XG5tb2R1bGUuZXhwb3J0cyA9IHVpZDsiLCJ2YXIgJCA9IHJlcXVpcmUoJy4vJCcpO1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbXNnMSwgbXNnMil7XG4gIGlmKCFjb25kaXRpb24pdGhyb3cgVHlwZUVycm9yKG1zZzIgPyBtc2cxICsgbXNnMiA6IG1zZzEpO1xufVxuYXNzZXJ0LmRlZiA9ICQuYXNzZXJ0RGVmaW5lZDtcbmFzc2VydC5mbiA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoISQuaXNGdW5jdGlvbihpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbmFzc2VydC5vYmogPSBmdW5jdGlvbihpdCl7XG4gIGlmKCEkLmlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5hc3NlcnQuaW5zdCA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpdGhyb3cgVHlwZUVycm9yKG5hbWUgKyBcIjogdXNlIHRoZSAnbmV3JyBvcGVyYXRvciFcIik7XG4gIHJldHVybiBpdDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGFzc2VydDsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgY29mICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkZGVmICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGFzc2VydE9iamVjdCAgICAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpLm9ialxuICAsIFNZTUJPTF9JVEVSQVRPUiAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgRkZfSVRFUkFUT1IgICAgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBJdGVyYXRvcnMgICAgICAgICA9IHt9XG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbi8vIFNhZmFyaSBoYXMgYnlnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBCVUdHWSA9ICdrZXlzJyBpbiBbXSAmJiAhKCduZXh0JyBpbiBbXS5rZXlzKCkpO1xuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnNldEl0ZXJhdG9yKEl0ZXJhdG9yUHJvdG90eXBlLCAkLnRoYXQpO1xuZnVuY3Rpb24gc2V0SXRlcmF0b3IoTywgdmFsdWUpe1xuICAkLmhpZGUoTywgU1lNQk9MX0lURVJBVE9SLCB2YWx1ZSk7XG4gIC8vIEFkZCBpdGVyYXRvciBmb3IgRkYgaXRlcmF0b3IgcHJvdG9jb2xcbiAgaWYoRkZfSVRFUkFUT1IgaW4gW10pJC5oaWRlKE8sIEZGX0lURVJBVE9SLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBkZWZpbmVJdGVyYXRvcihDb25zdHJ1Y3RvciwgTkFNRSwgdmFsdWUsIERFRkFVTFQpe1xuICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgICAsIGl0ZXIgID0gcHJvdG9bU1lNQk9MX0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXSB8fCB2YWx1ZTtcbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCQuRlcpc2V0SXRlcmF0b3IocHJvdG8sIGl0ZXIpO1xuICBpZihpdGVyICE9PSB2YWx1ZSl7XG4gICAgdmFyIGl0ZXJQcm90byA9ICQuZ2V0UHJvdG8oaXRlci5jYWxsKG5ldyBDb25zdHJ1Y3RvcikpO1xuICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICBjb2Yuc2V0KGl0ZXJQcm90bywgTkFNRSArICcgSXRlcmF0b3InLCB0cnVlKTtcbiAgICAvLyBGRiBmaXhcbiAgICBpZigkLkZXKSQuaGFzKHByb3RvLCBGRl9JVEVSQVRPUikgJiYgc2V0SXRlcmF0b3IoaXRlclByb3RvLCAkLnRoYXQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gaXRlcjtcbiAgLy8gRkYgJiB2OCBmaXhcbiAgSXRlcmF0b3JzW05BTUUgKyAnIEl0ZXJhdG9yJ10gPSAkLnRoYXQ7XG4gIHJldHVybiBpdGVyO1xufVxuZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXQpe1xuICB2YXIgU3ltYm9sICA9ICQuZy5TeW1ib2xcbiAgICAsIGV4dCAgICAgPSBpdFtTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IEZGX0lURVJBVE9SXVxuICAgICwgZ2V0SXRlciA9IGV4dCB8fCBpdFtTWU1CT0xfSVRFUkFUT1JdIHx8IEl0ZXJhdG9yc1tjb2YuY2xhc3NvZihpdCldO1xuICByZXR1cm4gYXNzZXJ0T2JqZWN0KGdldEl0ZXIuY2FsbChpdCkpO1xufVxuZnVuY3Rpb24gY2xvc2VJdGVyYXRvcihpdGVyYXRvcil7XG4gIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFzc2VydE9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xufVxuZnVuY3Rpb24gc3RlcENhbGwoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhc3NlcnRPYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIH0gY2F0Y2goZSl7XG4gICAgY2xvc2VJdGVyYXRvcihpdGVyYXRvcik7XG4gICAgdGhyb3cgZTtcbiAgfVxufVxudmFyICRpdGVyID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJVR0dZOiBCVUdHWSxcbiAgSXRlcmF0b3JzOiBJdGVyYXRvcnMsXG4gIHByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIHN0ZXA6IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbiAgfSxcbiAgc3RlcENhbGw6IHN0ZXBDYWxsLFxuICBjbG9zZTogY2xvc2VJdGVyYXRvcixcbiAgaXM6IGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgTyAgICAgID0gT2JqZWN0KGl0KVxuICAgICAgLCBTeW1ib2wgPSAkLmcuU3ltYm9sXG4gICAgICAsIFNZTSAgICA9IFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3IgfHwgRkZfSVRFUkFUT1I7XG4gICAgcmV0dXJuIFNZTSBpbiBPIHx8IFNZTUJPTF9JVEVSQVRPUiBpbiBPIHx8ICQuaGFzKEl0ZXJhdG9ycywgY29mLmNsYXNzb2YoTykpO1xuICB9LFxuICBnZXQ6IGdldEl0ZXJhdG9yLFxuICBzZXQ6IHNldEl0ZXJhdG9yLFxuICBjcmVhdGU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0LCBwcm90byl7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gJC5jcmVhdGUocHJvdG8gfHwgJGl0ZXIucHJvdG90eXBlLCB7bmV4dDogJC5kZXNjKDEsIG5leHQpfSk7XG4gICAgY29mLnNldChDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbiAgfSxcbiAgZGVmaW5lOiBkZWZpbmVJdGVyYXRvcixcbiAgc3RkOiBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRSl7XG4gICAgZnVuY3Rpb24gY3JlYXRlSXRlcihraW5kKXtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpO1xuICAgICAgfTtcbiAgICB9XG4gICAgJGl0ZXIuY3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgICB2YXIgZW50cmllcyA9IGNyZWF0ZUl0ZXIoJ2tleSt2YWx1ZScpXG4gICAgICAsIHZhbHVlcyAgPSBjcmVhdGVJdGVyKCd2YWx1ZScpXG4gICAgICAsIHByb3RvICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICAgLCBtZXRob2RzLCBrZXk7XG4gICAgaWYoREVGQVVMVCA9PSAndmFsdWUnKXZhbHVlcyA9IGRlZmluZUl0ZXJhdG9yKEJhc2UsIE5BTUUsIHZhbHVlcywgJ3ZhbHVlcycpO1xuICAgIGVsc2UgZW50cmllcyA9IGRlZmluZUl0ZXJhdG9yKEJhc2UsIE5BTUUsIGVudHJpZXMsICdlbnRyaWVzJyk7XG4gICAgaWYoREVGQVVMVCl7XG4gICAgICBtZXRob2RzID0ge1xuICAgICAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgICAgICBrZXlzOiAgICBJU19TRVQgPyB2YWx1ZXMgOiBjcmVhdGVJdGVyKCdrZXknKSxcbiAgICAgICAgdmFsdWVzOiAgdmFsdWVzXG4gICAgICB9O1xuICAgICAgJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBCVUdHWSwgTkFNRSwgbWV0aG9kcyk7XG4gICAgICBpZihGT1JDRSlmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgICBpZighKGtleSBpbiBwcm90bykpJC5oaWRlKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBmb3JPZjogZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0KXtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSlcbiAgICAgICwgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICAgLCBzdGVwO1xuICAgIHdoaWxlKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSl7XG4gICAgICBpZihzdGVwQ2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcykgPT09IGZhbHNlKXtcbiAgICAgICAgcmV0dXJuIGNsb3NlSXRlcmF0b3IoaXRlcmF0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBpbnZva2UgPSByZXF1aXJlKCcuLyQuaW52b2tlJylcbiAgLCBhc3NlcnRGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5mbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oLyogLi4ucGFyZ3MgKi8pe1xuICB2YXIgZm4gICAgID0gYXNzZXJ0RnVuY3Rpb24odGhpcylcbiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIHBhcmdzICA9IEFycmF5KGxlbmd0aClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIF8gICAgICA9ICQucGF0aC5fXG4gICAgLCBob2xkZXIgPSBmYWxzZTtcbiAgd2hpbGUobGVuZ3RoID4gaSlpZigocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8paG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciB0aGF0ICAgID0gdGhpc1xuICAgICAgLCBfbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7XG4gICAgaWYoIWhvbGRlciAmJiAhX2xlbmd0aClyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlKF9sZW5ndGggPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7XG4gICAgcmV0dXJuIGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG59OyIsIi8vIEZhc3QgYXBwbHlcbi8vIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICBjYXNlIDU6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsInZhciAkICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGFzc2VydE9iamVjdCA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5vYmo7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG93bktleXMoaXQpe1xuICBhc3NlcnRPYmplY3QoaXQpO1xuICByZXR1cm4gJC5nZXRTeW1ib2xzID8gJC5nZXROYW1lcyhpdCkuY29uY2F0KCQuZ2V0U3ltYm9scyhpdCkpIDogJC5nZXROYW1lcyhpdCk7XG59OyIsInZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgVEFHICAgICAgPSByZXF1aXJlKCcuLyQud2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLCB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuZnVuY3Rpb24gY29mKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn1cbmNvZi5jbGFzc29mID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVDtcbiAgcmV0dXJuIGl0ID09IHVuZGVmaW5lZCA/IGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6ICdOdWxsJ1xuICAgIDogdHlwZW9mIChUID0gKE8gPSBPYmplY3QoaXQpKVtUQUddKSA9PSAnc3RyaW5nJyA/IFQgOiBjb2YoTyk7XG59O1xuY29mLnNldCA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhJC5oYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpJC5oaWRlKGl0LCBUQUcsIHRhZyk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBjb2Y7IiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyICQgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vJC53a3MnKSgndW5zY29wYWJsZXMnKTtcbmlmKCQuRlcgJiYgIShVTlNDT1BBQkxFUyBpbiBbXSkpJC5oaWRlKEFycmF5LnByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgaWYoJC5GVylbXVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59OyIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlLCBpc1N0YXRpYyl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGlzU3RhdGljID8gaXQgOiB0aGlzKS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCQpe1xuICAkLkZXICAgPSB0cnVlO1xuICAkLnBhdGggPSAkLmc7XG4gIHJldHVybiAkO1xufTsiLCIvKiAqLyBcbmRlZmluZShbJ2V4cG9ydHMnLCAnYXVyZWxpYS1iaW5kaW5nJ10sIGZ1bmN0aW9uIChleHBvcnRzLCBfYXVyZWxpYUJpbmRpbmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgdmFyIFBhdGhPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGF0aE9ic2VydmVyKG9ic2VydmVyTG9jYXRvciwgc3ViamVjdCwgcGF0aCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdGhPYnNlcnZlcik7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgICAgdGhpcy5wYXRoID0gcGF0aC5zcGxpdCgnLicpO1xuICAgICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgaWYgKHRoaXMucGF0aC5sZW5ndGggPiAxKSB0aGlzLm9ic2VydmVQYXJ0cygpO1xuICAgIH1cblxuICAgIFBhdGhPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZVBhcnRzID0gZnVuY3Rpb24gb2JzZXJ2ZVBhcnRzKHByb3BlcnR5TmFtZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHByb3BlcnR5TmFtZSAhPT0gdW5kZWZpbmVkICYmIHByb3BlcnR5TmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5vYnNlcnZlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB2YXIgY3VycmVudE9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnNbaV07XG4gICAgICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlci5wcm9wZXJ0eU5hbWUgPT09IHByb3BlcnR5TmFtZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzLnBvcCgpO1xuICAgICAgICAgIGlmIChvYnNlcnZlciAmJiBvYnNlcnZlci5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9ic2VydmVyLnN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG5cbiAgICAgIHZhciBvYnNlcnZlcnNBcmVDb21wbGV0ZSA9IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA9PT0gdGhpcy5wYXRoLmxlbmd0aDtcblxuICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXMub2JzZXJ2ZXJzW2ldO1xuICAgICAgICBpZiAoIW9ic2VydmVyKSB7XG5cbiAgICAgICAgICB2YXIgY3VycmVudFBhdGggPSBfdGhpcy5wYXRoW2ldO1xuICAgICAgICAgIG9ic2VydmVyID0gX3RoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldE9ic2VydmVyKGN1cnJlbnRTdWJqZWN0LCBjdXJyZW50UGF0aCk7XG4gICAgICAgICAgX3RoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBvYnNlcnZlci5zdWJzY3JpYmUoZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMub2JzZXJ2ZVBhcnRzKG9ic2VydmVyLnByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2JzZXJ2ZXIuc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IG9ic2VydmVyLmdldFZhbHVlKCk7XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gJ2JyZWFrJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50U3ViamVjdCA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIF9yZXQgPSBfbG9vcChpKTtcblxuICAgICAgICBpZiAoX3JldCA9PT0gJ2JyZWFrJykgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmICghb2JzZXJ2ZXJzQXJlQ29tcGxldGUgJiYgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID09PSB0aGlzLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhY3R1YWxPYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzW3RoaXMub2JzZXJ2ZXJzLmxlbmd0aCAtIDFdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYWN0dWFsT2JzZXJ2ZXIuc3Vic2NyaWJlKHRoaXMuY2FsbGJhY2tzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXRoT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVQYXJ0ID0gZnVuY3Rpb24gb2JzZXJ2ZVBhcnQocGFydCkge1xuICAgICAgaWYgKHBhcnQgIT09IHRoaXMucGF0aFt0aGlzLnBhdGgubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlUGFydHMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUGF0aE9ic2VydmVyLnByb3RvdHlwZS5nZXRPYnNlcnZlciA9IGZ1bmN0aW9uIGdldE9ic2VydmVyKCkge1xuICAgICAgaWYgKHRoaXMucGF0aC5sZW5ndGggPT0gMSkge1xuICAgICAgICB2YXIgcmVzb2x2ZSA9IHRoaXMuc3ViamVjdFt0aGlzLnBhdGhbMF1dO1xuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0T2JzZXJ2ZXIodGhpcy5zdWJqZWN0LCB0aGlzLnBhdGhbMF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFBhdGhPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHZhciBleHBlY3RlZFN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50T2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyc1tpXTtcbiAgICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlciA9PT0gbnVsbCB8fCBjdXJyZW50T2JzZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMub2JzZXJ2ZVBhcnRzKHRoaXMucGF0aFtpXSk7XG4gICAgICAgICAgY3VycmVudE9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnNbaV07XG5cbiAgICAgICAgICBpZiAoY3VycmVudE9ic2VydmVyID09PSBudWxsIHx8IGN1cnJlbnRPYnNlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlci5vYmogIT09IGV4cGVjdGVkU3ViamVjdCkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlUGFydHModGhpcy5wYXRoW2kgLSAxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGV4cGVjdGVkU3ViamVjdCA9IGN1cnJlbnRPYnNlcnZlci5nZXRWYWx1ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vYnNlcnZlcnMubGVuZ3RoICE9PSB0aGlzLnBhdGgubGVuZ3RoKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5vYnNlcnZlcnNbdGhpcy5vYnNlcnZlcnMubGVuZ3RoIC0gMV0uZ2V0VmFsdWUoKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgUGF0aE9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLmNhbGxiYWNrcy51bnNoaWZ0KGNhbGxiYWNrKTtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVycy5sZW5ndGggPT09IHRoaXMucGF0aC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLm9ic2VydmVyc1t0aGlzLm9ic2VydmVycy5sZW5ndGggLSAxXS5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUGF0aE9ic2VydmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbiAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24oKTtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLm9ic2VydmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVycy5wb3AoKTtcbiAgICAgICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIG9ic2VydmVyLnN1YnNjcmlwdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBQYXRoT2JzZXJ2ZXI7XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5QYXRoT2JzZXJ2ZXIgPSBQYXRoT2JzZXJ2ZXI7XG59KTsiLCIvKiAqLyBcbmRlZmluZShbXCJleHBvcnRzXCJdLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbiAgdmFyIERlYm91bmNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VyKGRlYm91bmNlVGltZW91dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlYm91bmNlcik7XG5cbiAgICAgIHRoaXMuY3VycmVudEZ1bmN0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMuZGVib3VuY2VUaW1lb3V0ID0gZGVib3VuY2VUaW1lb3V0O1xuICAgIH1cblxuICAgIERlYm91bmNlci5wcm90b3R5cGUuZGVib3VuY2UgPSBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmN1cnJlbnRGdW5jdGlvbiA9IGZ1bmM7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGZ1bmMgIT09IG51bGwgJiYgZnVuYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGZ1bmMgPT09IF90aGlzLmN1cnJlbnRGdW5jdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudEZ1bmN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuZGVib3VuY2VUaW1lb3V0KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIERlYm91bmNlcjtcbiAgfSkoKTtcblxuICBleHBvcnRzLkRlYm91bmNlciA9IERlYm91bmNlcjtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImdpdGh1Yjpqc3BtL25vZGVsaWJzLXByb2Nlc3NAMC4xLjEvaW5kZXhcIik7IiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgZG9jdW1lbnQgPSAkLmcuZG9jdW1lbnQsXG4gICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LFxuICAgIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIGN0eCA9IHJlcXVpcmUoXCIuLyQuY3R4XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDEsXG4gICAgICBJU19GSUxURVIgPSBUWVBFID09IDIsXG4gICAgICBJU19TT01FID0gVFlQRSA9PSAzLFxuICAgICAgSVNfRVZFUlkgPSBUWVBFID09IDQsXG4gICAgICBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2LFxuICAgICAgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKCR0aGlzKSksXG4gICAgICAgIHNlbGYgPSAkLkVTNU9iamVjdChPKSxcbiAgICAgICAgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKSxcbiAgICAgICAgbGVuZ3RoID0gJC50b0xlbmd0aChzZWxmLmxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gSVNfTUFQID8gQXJyYXkobGVuZ3RoKSA6IElTX0ZJTFRFUiA/IFtdIDogdW5kZWZpbmVkLFxuICAgICAgICB2YWwsXG4gICAgICAgIHJlcztcbiAgICBmb3IgKDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspXG4gICAgICBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgICBpZiAoSVNfTUFQKVxuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IHJlcztcbiAgICAgICAgICBlbHNlIGlmIChyZXMpXG4gICAgICAgICAgICBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoSVNfRVZFUlkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9ICQudG9PYmplY3QoJHRoaXMpLFxuICAgICAgICBsZW5ndGggPSAkLnRvTGVuZ3RoKE8ubGVuZ3RoKSxcbiAgICAgICAgaW5kZXggPSAkLnRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpLFxuICAgICAgICB2YWx1ZTtcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpXG4gICAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgICBpZiAodmFsdWUgIT0gdmFsdWUpXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgZWxzZVxuICAgICAgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKVxuICAgICAgICBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpXG4gICAgICAgICAgICByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXg7XG4gICAgICAgIH1cbiAgICByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICBleGVjKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59OyIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nLFxuICAgIHN0b3JlID0gJC5nW1NIQVJFRF0gfHwgKCQuZ1tTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgdHBsID0gU3RyaW5nKHt9Lmhhc093blByb3BlcnR5KSxcbiAgICBTUkMgPSByZXF1aXJlKFwiLi8kLnVpZFwiKS5zYWZlKCdzcmMnKSxcbiAgICBfdG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcbmZ1bmN0aW9uICRyZWRlZihPLCBrZXksIHZhbCwgc2FmZSkge1xuICBpZiAoJC5pc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICB2YXIgYmFzZSA9IE9ba2V5XTtcbiAgICAkLmhpZGUodmFsLCBTUkMsIGJhc2UgPyBTdHJpbmcoYmFzZSkgOiB0cGwucmVwbGFjZSgvaGFzT3duUHJvcGVydHkvLCBTdHJpbmcoa2V5KSkpO1xuICAgIGlmICghKCduYW1lJyBpbiB2YWwpKVxuICAgICAgdmFsLm5hbWUgPSBrZXk7XG4gIH1cbiAgaWYgKE8gPT09ICQuZykge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXNhZmUpXG4gICAgICBkZWxldGUgT1trZXldO1xuICAgICQuaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbn1cbiRyZWRlZihGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJC5oYXModGhpcywgU1JDKSA/IHRoaXNbU1JDXSA6IF90b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4kLmNvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChpdCk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSAkcmVkZWY7XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgdmFyIGtleXMgPSAkLmdldEtleXMoaXQpLFxuICAgICAgZ2V0RGVzYyA9ICQuZ2V0RGVzYyxcbiAgICAgIGdldFN5bWJvbHMgPSAkLmdldFN5bWJvbHM7XG4gIGlmIChnZXRTeW1ib2xzKVxuICAgICQuZWFjaC5jYWxsKGdldFN5bWJvbHMoaXQpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGlmIChnZXREZXNjKGl0LCBrZXkpLmVudW1lcmFibGUpXG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH0pO1xuICByZXR1cm4ga2V5cztcbn07XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICB0b1N0cmluZyA9IHt9LnRvU3RyaW5nLFxuICAgIGdldE5hbWVzID0gJC5nZXROYW1lcztcbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5mdW5jdGlvbiBnZXRXaW5kb3dOYW1lcyhpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnZXROYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICBpZiAod2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScpXG4gICAgcmV0dXJuIGdldFdpbmRvd05hbWVzKGl0KTtcbiAgcmV0dXJuIGdldE5hbWVzKCQudG9PYmplY3QoaXQpKTtcbn07XG4iLCIvKiAqLyBcbnZhciBnbG9iYWwgPSByZXF1aXJlKFwiLi8kXCIpLmcsXG4gICAgc3RvcmUgPSByZXF1aXJlKFwiLi8kLnNoYXJlZFwiKSgnd2tzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9IGdsb2JhbC5TeW1ib2wgJiYgZ2xvYmFsLlN5bWJvbFtuYW1lXSB8fCByZXF1aXJlKFwiLi8kLnVpZFwiKS5zYWZlKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG4iLCIvKiAqLyBcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpe1xyXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xyXG59OyIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgIGFzc2VydCA9IHJlcXVpcmUoXCIuLyQuYXNzZXJ0XCIpO1xuZnVuY3Rpb24gY2hlY2soTywgcHJvdG8pIHtcbiAgYXNzZXJ0Lm9iaihPKTtcbiAgYXNzZXJ0KHByb3RvID09PSBudWxsIHx8ICQuaXNPYmplY3QocHJvdG8pLCBwcm90bywgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uKGJ1Z2d5LCBzZXQpIHtcbiAgICB0cnkge1xuICAgICAgc2V0ID0gcmVxdWlyZShcIi4vJC5jdHhcIikoRnVuY3Rpb24uY2FsbCwgJC5nZXREZXNjKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgc2V0KHt9LCBbXSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYnVnZ3kgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgIGlmIChidWdneSlcbiAgICAgICAgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgIGVsc2VcbiAgICAgICAgc2V0KE8sIHByb3RvKTtcbiAgICAgIHJldHVybiBPO1xuICAgIH07XG4gIH0oKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGF0KSksXG4gICAgICAgIGkgPSAkLnRvSW50ZWdlcihwb3MpLFxuICAgICAgICBsID0gcy5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbClcbiAgICAgIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhpcykpLFxuICAgICAgcmVzID0gJycsXG4gICAgICBuID0gJC50b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSlcbiAgICB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoOyBuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpXG4gICAgaWYgKG4gJiAxKVxuICAgICAgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIvKiAqLyBcbnZhciBTWU1CT0xfSVRFUkFUT1IgPSByZXF1aXJlKFwiLi8kLndrc1wiKSgnaXRlcmF0b3InKSxcbiAgICBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtTWU1CT0xfSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCkge1xuICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gIH07XG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCkge1xuICAgIHRocm93IDI7XG4gIH0pO1xufSBjYXRjaCAoZSkge31cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYykge1xuICBpZiAoIVNBRkVfQ0xPU0lORylcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XSxcbiAgICAgICAgaXRlciA9IGFycltTWU1CT0xfSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzYWZlID0gdHJ1ZTtcbiAgICB9O1xuICAgIGFycltTWU1CT0xfSVRFUkFUT1JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcjtcbiAgICB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoXCIuLyRcIiksXG4gICAgU1BFQ0lFUyA9IHJlcXVpcmUoXCIuLyQud2tzXCIpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEMpIHtcbiAgaWYgKCQuREVTQyAmJiAhKFNQRUNJRVMgaW4gQykpXG4gICAgJC5zZXREZXNjKEMsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogJC50aGF0XG4gICAgfSk7XG59O1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICAgIGN0eCA9IHJlcXVpcmUoXCIuLyQuY3R4XCIpLFxuICAgICAgY29mID0gcmVxdWlyZShcIi4vJC5jb2ZcIiksXG4gICAgICBpbnZva2UgPSByZXF1aXJlKFwiLi8kLmludm9rZVwiKSxcbiAgICAgIGNlbCA9IHJlcXVpcmUoXCIuLyQuZG9tLWNyZWF0ZVwiKSxcbiAgICAgIGdsb2JhbCA9ICQuZyxcbiAgICAgIGlzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb24sXG4gICAgICBodG1sID0gJC5odG1sLFxuICAgICAgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzLFxuICAgICAgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGUsXG4gICAgICBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGUsXG4gICAgICBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCxcbiAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgcXVldWUgPSB7fSxcbiAgICAgIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnLFxuICAgICAgZGVmZXIsXG4gICAgICBjaGFubmVsLFxuICAgICAgcG9ydDtcbiAgZnVuY3Rpb24gcnVuKCkge1xuICAgIHZhciBpZCA9ICt0aGlzO1xuICAgIGlmICgkLmhhcyhxdWV1ZSwgaWQpKSB7XG4gICAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgICAgZm4oKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbGlzdG5lcihldmVudCkge1xuICAgIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xuICB9XG4gIGlmICghaXNGdW5jdGlvbihzZXRUYXNrKSB8fCAhaXNGdW5jdGlvbihjbGVhclRhc2spKSB7XG4gICAgc2V0VGFzayA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgIGkgPSAxO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKVxuICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpbnZva2UoaXNGdW5jdGlvbihmbikgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgICB9O1xuICAgICAgZGVmZXIoY291bnRlcik7XG4gICAgICByZXR1cm4gY291bnRlcjtcbiAgICB9O1xuICAgIGNsZWFyVGFzayA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIH07XG4gICAgaWYgKGNvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIGlzRnVuY3Rpb24oZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkLCAnKicpO1xuICAgICAgfTtcbiAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdG5lciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihNZXNzYWdlQ2hhbm5lbCkpIHtcbiAgICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdG5lcjtcbiAgICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAgIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNldDogc2V0VGFzayxcbiAgICBjbGVhcjogY2xlYXJUYXNrXG4gIH07XG59KShyZXF1aXJlKFwicHJvY2Vzc1wiKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBjdHggPSByZXF1aXJlKFwiLi8kLmN0eFwiKSxcbiAgICBzYWZlID0gcmVxdWlyZShcIi4vJC51aWRcIikuc2FmZSxcbiAgICBhc3NlcnQgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKSxcbiAgICBmb3JPZiA9IHJlcXVpcmUoXCIuLyQuZm9yLW9mXCIpLFxuICAgIHN0ZXAgPSByZXF1aXJlKFwiLi8kLml0ZXJcIikuc3RlcCxcbiAgICAkaGFzID0gJC5oYXMsXG4gICAgc2V0ID0gJC5zZXQsXG4gICAgaXNPYmplY3QgPSAkLmlzT2JqZWN0LFxuICAgIGhpZGUgPSAkLmhpZGUsXG4gICAgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBpc09iamVjdCxcbiAgICBJRCA9IHNhZmUoJ2lkJyksXG4gICAgTzEgPSBzYWZlKCdPMScpLFxuICAgIExBU1QgPSBzYWZlKCdsYXN0JyksXG4gICAgRklSU1QgPSBzYWZlKCdmaXJzdCcpLFxuICAgIElURVIgPSBzYWZlKCdpdGVyJyksXG4gICAgU0laRSA9ICQuREVTQyA/IHNhZmUoJ3NpemUnKSA6ICdzaXplJyxcbiAgICBpZCA9IDA7XG5mdW5jdGlvbiBmYXN0S2V5KGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpXG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCEkaGFzKGl0LCBJRCkpIHtcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpXG4gICAgICByZXR1cm4gJ0YnO1xuICAgIGlmICghY3JlYXRlKVxuICAgICAgcmV0dXJuICdFJztcbiAgICBoaWRlKGl0LCBJRCwgKytpZCk7XG4gIH1cbiAgcmV0dXJuICdPJyArIGl0W0lEXTtcbn1cbmZ1bmN0aW9uIGdldEVudHJ5KHRoYXQsIGtleSkge1xuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksXG4gICAgICBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpXG4gICAgcmV0dXJuIHRoYXRbTzFdW2luZGV4XTtcbiAgZm9yIChlbnRyeSA9IHRoYXRbRklSU1RdOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KVxuICAgICAgcmV0dXJuIGVudHJ5O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFzc2VydC5pbnN0KHRoYXQsIEMsIE5BTUUpO1xuICAgICAgc2V0KHRoYXQsIE8xLCAkLmNyZWF0ZShudWxsKSk7XG4gICAgICBzZXQodGhhdCwgU0laRSwgMCk7XG4gICAgICBzZXQodGhhdCwgTEFTVCwgdW5kZWZpbmVkKTtcbiAgICAgIHNldCh0aGF0LCBGSVJTVCwgdW5kZWZpbmVkKTtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpXG4gICAgICAgIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZXF1aXJlKFwiLi8kLm1peFwiKShDLnByb3RvdHlwZSwge1xuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGRhdGEgPSB0aGF0W08xXSxcbiAgICAgICAgICAgIGVudHJ5ID0gdGhhdFtGSVJTVF07IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucClcbiAgICAgICAgICAgIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdFtGSVJTVF0gPSB0aGF0W0xBU1RdID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uLFxuICAgICAgICAgICAgICBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdFtPMV1bZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpXG4gICAgICAgICAgICBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KVxuICAgICAgICAgICAgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdFtGSVJTVF0gPT0gZW50cnkpXG4gICAgICAgICAgICB0aGF0W0ZJUlNUXSA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXRbTEFTVF0gPT0gZW50cnkpXG4gICAgICAgICAgICB0aGF0W0xBU1RdID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuKSB7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSwgMyksXG4gICAgICAgICAgICBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpc1tGSVJTVF0pIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKVxuICAgICAgICAgICAgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCQuREVTQylcbiAgICAgICQuc2V0RGVzYyhDLnByb3RvdHlwZSwgJ3NpemUnLCB7Z2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXNzZXJ0LmRlZih0aGlzW1NJWkVdKTtcbiAgICAgICAgfX0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpLFxuICAgICAgICBwcmV2LFxuICAgICAgICBpbmRleDtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdFtMQVNUXSA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSxcbiAgICAgICAgazoga2V5LFxuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgcDogcHJldiA9IHRoYXRbTEFTVF0sXG4gICAgICAgIG46IHVuZGVmaW5lZCxcbiAgICAgICAgcjogZmFsc2VcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXRbRklSU1RdKVxuICAgICAgICB0aGF0W0ZJUlNUXSA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpXG4gICAgICAgIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgaWYgKGluZGV4ICE9PSAnRicpXG4gICAgICAgIHRoYXRbTzFdW2luZGV4XSA9IGVudHJ5O1xuICAgIH1cbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRJdGVyOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApIHtcbiAgICByZXF1aXJlKFwiLi8kLml0ZXItZGVmaW5lXCIpKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICBzZXQodGhpcywgSVRFUiwge1xuICAgICAgICBvOiBpdGVyYXRlZCxcbiAgICAgICAgazoga2luZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXRlciA9IHRoaXNbSVRFUl0sXG4gICAgICAgICAga2luZCA9IGl0ZXIuayxcbiAgICAgICAgICBlbnRyeSA9IGl0ZXIubDtcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKVxuICAgICAgICBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICBpZiAoIWl0ZXIubyB8fCAhKGl0ZXIubCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogaXRlci5vW0ZJUlNUXSkpIHtcbiAgICAgICAgaXRlci5vID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIGlmIChraW5kID09ICdrZXlzJylcbiAgICAgICAgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJylcbiAgICAgICAgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcbiAgfVxufTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKFwiLi8kXCIpLFxuICAgICRkZWYgPSByZXF1aXJlKFwiLi8kLmRlZlwiKSxcbiAgICBCVUdHWSA9IHJlcXVpcmUoXCIuLyQuaXRlclwiKS5CVUdHWSxcbiAgICBmb3JPZiA9IHJlcXVpcmUoXCIuLyQuZm9yLW9mXCIpLFxuICAgIHNwZWNpZXMgPSByZXF1aXJlKFwiLi8kLnNwZWNpZXNcIiksXG4gICAgYXNzZXJ0SW5zdGFuY2UgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKS5pbnN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9ICQuZ1tOQU1FXSxcbiAgICAgIEMgPSBCYXNlLFxuICAgICAgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnLFxuICAgICAgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlLFxuICAgICAgTyA9IHt9O1xuICBmdW5jdGlvbiBmaXhNZXRob2QoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZXF1aXJlKFwiLi8kLnJlZGVmXCIpKHByb3RvLCBLRVksIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHtcbiAgICAgIGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gOiBmdW5jdGlvbiBzZXQoYSwgYikge1xuICAgICAgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCEkLmlzRnVuY3Rpb24oQykgfHwgIShJU19XRUFLIHx8ICFCVUdHWSAmJiBwcm90by5mb3JFYWNoICYmIHByb3RvLmVudHJpZXMpKSB7XG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZXF1aXJlKFwiLi8kLm1peFwiKShDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3QgPSBuZXcgQyxcbiAgICAgICAgY2hhaW4gPSBpbnN0W0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSksXG4gICAgICAgIGJ1Z2d5WmVybztcbiAgICBpZiAoIXJlcXVpcmUoXCIuLyQuaXRlci1kZXRlY3RcIikoZnVuY3Rpb24oaXRlcikge1xuICAgICAgbmV3IEMoaXRlcik7XG4gICAgfSkpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYXNzZXJ0SW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBuZXcgQmFzZTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClcbiAgICAgICAgICBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBJU19XRUFLIHx8IGluc3QuZm9yRWFjaChmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgYnVnZ3laZXJvID0gMSAvIGtleSA9PT0gLUluZmluaXR5O1xuICAgIH0pO1xuICAgIGlmIChidWdneVplcm8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChidWdneVplcm8gfHwgY2hhaW4gIT09IGluc3QpXG4gICAgICBmaXhNZXRob2QoQURERVIpO1xuICB9XG4gIHJlcXVpcmUoXCIuLyQuY29mXCIpLnNldChDLCBOQU1FKTtcbiAgT1tOQU1FXSA9IEM7XG4gICRkZWYoJGRlZi5HICsgJGRlZi5XICsgJGRlZi5GICogKEMgIT0gQmFzZSksIE8pO1xuICBzcGVjaWVzKEMpO1xuICBzcGVjaWVzKCQuY29yZVtOQU1FXSk7XG4gIGlmICghSVNfV0VBSylcbiAgICBjb21tb24uc2V0SXRlcihDLCBOQU1FLCBJU19NQVApO1xuICByZXR1cm4gQztcbn07XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICBzYWZlID0gcmVxdWlyZShcIi4vJC51aWRcIikuc2FmZSxcbiAgICBhc3NlcnQgPSByZXF1aXJlKFwiLi8kLmFzc2VydFwiKSxcbiAgICBmb3JPZiA9IHJlcXVpcmUoXCIuLyQuZm9yLW9mXCIpLFxuICAgICRoYXMgPSAkLmhhcyxcbiAgICBpc09iamVjdCA9ICQuaXNPYmplY3QsXG4gICAgaGlkZSA9ICQuaGlkZSxcbiAgICBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGlzT2JqZWN0LFxuICAgIGlkID0gMCxcbiAgICBJRCA9IHNhZmUoJ2lkJyksXG4gICAgV0VBSyA9IHNhZmUoJ3dlYWsnKSxcbiAgICBMRUFLID0gc2FmZSgnbGVhaycpLFxuICAgIG1ldGhvZCA9IHJlcXVpcmUoXCIuLyQuYXJyYXktbWV0aG9kc1wiKSxcbiAgICBmaW5kID0gbWV0aG9kKDUpLFxuICAgIGZpbmRJbmRleCA9IG1ldGhvZCg2KTtcbmZ1bmN0aW9uIGZpbmRGcm96ZW4oc3RvcmUsIGtleSkge1xuICByZXR1cm4gZmluZChzdG9yZS5hcnJheSwgZnVuY3Rpb24oaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59XG5mdW5jdGlvbiBsZWFrU3RvcmUodGhhdCkge1xuICByZXR1cm4gdGhhdFtMRUFLXSB8fCBoaWRlKHRoYXQsIExFQUssIHtcbiAgICBhcnJheTogW10sXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBlbnRyeSA9IGZpbmRGcm96ZW4odGhpcywga2V5KTtcbiAgICAgIGlmIChlbnRyeSlcbiAgICAgICAgcmV0dXJuIGVudHJ5WzFdO1xuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiAhIWZpbmRGcm96ZW4odGhpcywga2V5KTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGVudHJ5ID0gZmluZEZyb3plbih0aGlzLCBrZXkpO1xuICAgICAgaWYgKGVudHJ5KVxuICAgICAgICBlbnRyeVsxXSA9IHZhbHVlO1xuICAgICAgZWxzZVxuICAgICAgICB0aGlzLmFycmF5LnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICB9LFxuICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmFycmF5LCBmdW5jdGlvbihpdCkge1xuICAgICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICAgIH0pO1xuICAgICAgaWYgKH5pbmRleClcbiAgICAgICAgdGhpcy5hcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgcmV0dXJuICEhfmluZGV4O1xuICAgIH1cbiAgfSlbTEVBS107XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpIHtcbiAgICAgICQuc2V0KGFzc2VydC5pbnN0KHRoYXQsIEMsIE5BTUUpLCBJRCwgaWQrKyk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKVxuICAgICAgICBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVxdWlyZShcIi4vJC5taXhcIikoQy5wcm90b3R5cGUsIHtcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFpc0V4dGVuc2libGUoa2V5KSlcbiAgICAgICAgICByZXR1cm4gbGVha1N0b3JlKHRoaXMpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gJGhhcyhrZXksIFdFQUspICYmICRoYXMoa2V5W1dFQUtdLCB0aGlzW0lEXSkgJiYgZGVsZXRlIGtleVtXRUFLXVt0aGlzW0lEXV07XG4gICAgICB9LFxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghaXNFeHRlbnNpYmxlKGtleSkpXG4gICAgICAgICAgcmV0dXJuIGxlYWtTdG9yZSh0aGlzKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuICRoYXMoa2V5LCBXRUFLKSAmJiAkaGFzKGtleVtXRUFLXSwgdGhpc1tJRF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShhc3NlcnQub2JqKGtleSkpKSB7XG4gICAgICBsZWFrU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkaGFzKGtleSwgV0VBSykgfHwgaGlkZShrZXksIFdFQUssIHt9KTtcbiAgICAgIGtleVtXRUFLXVt0aGF0W0lEXV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGxlYWtTdG9yZTogbGVha1N0b3JlLFxuICBXRUFLOiBXRUFLLFxuICBJRDogSURcbn07XG4iLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZShcIi4vJFwiKSxcbiAgICByZXBlYXQgPSByZXF1aXJlKFwiLi8kLnN0cmluZy1yZXBlYXRcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIG1pbkxlbmd0aCwgZmlsbENoYXIsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoJC5hc3NlcnREZWZpbmVkKHRoYXQpKTtcbiAgaWYgKG1pbkxlbmd0aCA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBTO1xuICB2YXIgaW50TWluTGVuZ3RoID0gJC50b0ludGVnZXIobWluTGVuZ3RoKTtcbiAgdmFyIGZpbGxMZW4gPSBpbnRNaW5MZW5ndGggLSBTLmxlbmd0aDtcbiAgaWYgKGZpbGxMZW4gPCAwIHx8IGZpbGxMZW4gPT09IEluZmluaXR5KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Nhbm5vdCBzYXRpc2Z5IHN0cmluZyBsZW5ndGggJyArIG1pbkxlbmd0aCArICcgZm9yIHN0cmluZzogJyArIFMpO1xuICB9XG4gIHZhciBzRmlsbFN0ciA9IGZpbGxDaGFyID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbENoYXIpO1xuICB2YXIgc0ZpbGxWYWwgPSByZXBlYXQuY2FsbChzRmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBzRmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHNGaWxsVmFsLmxlbmd0aCA+IGZpbGxMZW4pXG4gICAgc0ZpbGxWYWwgPSBsZWZ0ID8gc0ZpbGxWYWwuc2xpY2Uoc0ZpbGxWYWwubGVuZ3RoIC0gZmlsbExlbikgOiBzRmlsbFZhbC5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzRmlsbFZhbC5jb25jYXQoUykgOiBTLmNvbmNhdChzRmlsbFZhbCk7XG59O1xuIiwiLyogKi8gXG52YXIgJGRlZiA9IHJlcXVpcmUoXCIuLyQuZGVmXCIpLFxuICAgIGZvck9mID0gcmVxdWlyZShcIi4vJC5mb3Itb2ZcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUpIHtcbiAgJGRlZigkZGVmLlAsIE5BTUUsIHt0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgIGZvck9mKHRoaXMsIGZhbHNlLCBhcnIucHVzaCwgYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfX0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciAkICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCA9IHJlcXVpcmUoJy4vJC5jdHgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVFlQRSl7XG4gIHZhciBJU19NQVAgICAgICAgID0gVFlQRSA9PSAxXG4gICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyXG4gICAgLCBJU19TT01FICAgICAgID0gVFlQRSA9PSAzXG4gICAgLCBJU19FVkVSWSAgICAgID0gVFlQRSA9PSA0XG4gICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2XG4gICAgLCBOT19IT0xFUyAgICAgID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbihjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHZhciBPICAgICAgPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKHRoaXMpKVxuICAgICAgLCBzZWxmICAgPSAkLkVTNU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdLCAzKVxuICAgICAgLCBsZW5ndGggPSAkLnRvTGVuZ3RoKHNlbGYubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAsIHJlc3VsdCA9IElTX01BUCA/IEFycmF5KGxlbmd0aCkgOiBJU19GSUxURVIgPyBbXSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbihlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgdmFyIE8gICAgICA9ICQudG9PYmplY3QodGhpcylcbiAgICAgICwgbGVuZ3RoID0gJC50b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gJC50b0luZGV4KGFyZ3VtZW50c1sxXSwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXg7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi8kJykuZ1xuICAsIHN0b3JlICA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgZ2xvYmFsLlN5bWJvbCAmJiBnbG9iYWwuU3ltYm9sW25hbWVdIHx8IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07IiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKmVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBhc3NlcnQgPSByZXF1aXJlKCcuLyQuYXNzZXJ0Jyk7XG5mdW5jdGlvbiBjaGVjayhPLCBwcm90byl7XG4gIGFzc2VydC5vYmooTyk7XG4gIGFzc2VydChwcm90byA9PT0gbnVsbCB8fCAkLmlzT2JqZWN0KHByb3RvKSwgcHJvdG8sIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgID8gZnVuY3Rpb24oYnVnZ3ksIHNldCl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi8kLmN0eCcpKEZ1bmN0aW9uLmNhbGwsICQuZ2V0RGVzYyhPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgICBzZXQoe30sIFtdKTtcbiAgICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICAgIHJldHVybiBPO1xuICAgICAgICB9O1xuICAgICAgfSgpXG4gICAgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbnZhciAkID0gcmVxdWlyZSgnLi8kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbihwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSlcbiAgICAgICwgaSA9ICQudG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGxcbiAgICAgIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07IiwidmFyIFNZTUJPTF9JVEVSQVRPUiA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKVxuICAsIFNBRkVfQ0xPU0lORyAgICA9IGZhbHNlO1xudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW1NZTUJPTF9JVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICBpZighU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW1NZTUJPTF9JVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyBzYWZlID0gdHJ1ZTsgfTtcbiAgICBhcnJbU1lNQk9MX0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07IiwidmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQyl7XG4gIGlmKCQuREVTQyAmJiAkLkZXKSQuc2V0RGVzYyhDLCByZXF1aXJlKCcuLyQud2tzJykoJ3NwZWNpZXMnKSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6ICQudGhhdFxuICB9KTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3R4ICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgY29mICAgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgaW52b2tlID0gcmVxdWlyZSgnLi8kLmludm9rZScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gJC5nXG4gICwgaXNGdW5jdGlvbiAgICAgICAgID0gJC5pc0Z1bmN0aW9uXG4gICwgaHRtbCAgICAgICAgICAgICAgID0gJC5odG1sXG4gICwgZG9jdW1lbnQgICAgICAgICAgID0gZ2xvYmFsLmRvY3VtZW50XG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgcG9zdE1lc3NhZ2UgICAgICAgID0gZ2xvYmFsLnBvc3RNZXNzYWdlXG4gICwgYWRkRXZlbnRMaXN0ZW5lciAgID0gZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXJcbiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWxcbiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwXG4gICwgcXVldWUgICAgICAgICAgICAgID0ge31cbiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJ1xuICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuZnVuY3Rpb24gcnVuKCl7XG4gIHZhciBpZCA9ICt0aGlzO1xuICBpZigkLmhhcyhxdWV1ZSwgaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59XG5mdW5jdGlvbiBsaXN0bmVyKGV2ZW50KXtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighaXNGdW5jdGlvbihzZXRUYXNrKSB8fCAhaXNGdW5jdGlvbihjbGVhclRhc2spKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgaW52b2tlKGlzRnVuY3Rpb24oZm4pID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uKGlkKXtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYoY29mKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gTW9kZXJuIGJyb3dzZXJzLCBza2lwIGltcGxlbWVudGF0aW9uIGZvciBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzIG9iamVjdFxuICB9IGVsc2UgaWYoYWRkRXZlbnRMaXN0ZW5lciAmJiBpc0Z1bmN0aW9uKHBvc3RNZXNzYWdlKSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgcG9zdE1lc3NhZ2UoaWQsICcqJyk7XG4gICAgfTtcbiAgICBhZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdG5lciwgZmFsc2UpO1xuICAvLyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZihpc0Z1bmN0aW9uKE1lc3NhZ2VDaGFubmVsKSl7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDtcbiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKGRvY3VtZW50ICYmIE9OUkVBRFlTVEFURUNIQU5HRSBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6ICAgc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCAgICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgc2FmZSAgICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZVxuICAsIGFzc2VydCAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgJGl0ZXIgICAgPSByZXF1aXJlKCcuLyQuaXRlcicpXG4gICwgaGFzICAgICAgPSAkLmhhc1xuICAsIHNldCAgICAgID0gJC5zZXRcbiAgLCBpc09iamVjdCA9ICQuaXNPYmplY3RcbiAgLCBoaWRlICAgICA9ICQuaGlkZVxuICAsIHN0ZXAgICAgID0gJGl0ZXIuc3RlcFxuICAsIGlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuIHx8ICQuY29yZS5PYmplY3QuaXNGcm96ZW5cbiAgLCBJRCAgICAgICA9IHNhZmUoJ2lkJylcbiAgLCBPMSAgICAgICA9IHNhZmUoJ08xJylcbiAgLCBMQVNUICAgICA9IHNhZmUoJ2xhc3QnKVxuICAsIEZJUlNUICAgID0gc2FmZSgnZmlyc3QnKVxuICAsIElURVIgICAgID0gc2FmZSgnaXRlcicpXG4gICwgU0laRSAgICAgPSAkLkRFU0MgPyBzYWZlKCdzaXplJykgOiAnc2l6ZSdcbiAgLCBpZCAgICAgICA9IDA7XG5cbmZ1bmN0aW9uIGZhc3RLZXkoaXQsIGNyZWF0ZSl7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgLy8gY2FuJ3Qgc2V0IGlkIHRvIGZyb3plbiBvYmplY3RcbiAgaWYoaXNGcm96ZW4oaXQpKXJldHVybiAnRic7XG4gIGlmKCFoYXMoaXQsIElEKSl7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgaWRcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3Npbmcgb2JqZWN0IGlkXG4gICAgaGlkZShpdCwgSUQsICsraWQpO1xuICAvLyByZXR1cm4gb2JqZWN0IGlkIHdpdGggcHJlZml4XG4gIH0gcmV0dXJuICdPJyArIGl0W0lEXTtcbn1cblxuZnVuY3Rpb24gZ2V0RW50cnkodGhhdCwga2V5KXtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KSwgZW50cnk7XG4gIGlmKGluZGV4ICE9ICdGJylyZXR1cm4gdGhhdFtPMV1baW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yKGVudHJ5ID0gdGhhdFtGSVJTVF07IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIGZ1bmN0aW9uIEMoaXRlcmFibGUpe1xuICAgICAgdmFyIHRoYXQgPSBhc3NlcnQuaW5zdCh0aGlzLCBDLCBOQU1FKTtcbiAgICAgIHNldCh0aGF0LCBPMSwgJC5jcmVhdGUobnVsbCkpO1xuICAgICAgc2V0KHRoYXQsIFNJWkUsIDApO1xuICAgICAgc2V0KHRoYXQsIExBU1QsIHVuZGVmaW5lZCk7XG4gICAgICBzZXQodGhhdCwgRklSU1QsIHVuZGVmaW5lZCk7XG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpJGl0ZXIuZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH1cbiAgICAkLm1peChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdFtPMV0sIGVudHJ5ID0gdGhhdFtGSVJTVF07IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKGVudHJ5LnApZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0W0ZJUlNUXSA9IHRoYXRbTEFTVF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdFtPMV1bZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0W0ZJUlNUXSA9PSBlbnRyeSl0aGF0W0ZJUlNUXSA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdFtMQVNUXSA9PSBlbnRyeSl0aGF0W0xBU1RdID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSwgMylcbiAgICAgICAgICAsIGVudHJ5O1xuICAgICAgICB3aGlsZShlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXNbRklSU1RdKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCQuREVTQykkLnNldERlc2MoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gYXNzZXJ0LmRlZih0aGlzW1NJWkVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpXG4gICAgICAsIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmKGVudHJ5KXtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXRbTEFTVF0gPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0W0xBU1RdLCAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmKCF0aGF0W0ZJUlNUXSl0aGF0W0ZJUlNUXSA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT0gJ0YnKXRoYXRbTzFdW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgZ2V0SXRlckNvbnN0cnVjdG9yOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICBzZXQodGhpcywgSVRFUiwge286IGl0ZXJhdGVkLCBrOiBraW5kfSk7XG4gICAgfTtcbiAgfSxcbiAgbmV4dDogZnVuY3Rpb24oKXtcbiAgICB2YXIgaXRlciAgPSB0aGlzW0lURVJdXG4gICAgICAsIGtpbmQgID0gaXRlci5rXG4gICAgICAsIGVudHJ5ID0gaXRlci5sO1xuICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgaWYoIWl0ZXIubyB8fCAhKGl0ZXIubCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogaXRlci5vW0ZJUlNUXSkpe1xuICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgIGl0ZXIubyA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgIH1cbiAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgaWYoa2luZCA9PSAna2V5JyAgKXJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgIGlmKGtpbmQgPT0gJ3ZhbHVlJylyZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkaXRlciA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBhc3NlcnRJbnN0YW5jZSA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5pbnN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBpc1dlYWspe1xuICB2YXIgQmFzZSAgPSAkLmdbTkFNRV1cbiAgICAsIEMgICAgID0gQmFzZVxuICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnXG4gICAgLCBwcm90byA9IEMgJiYgQy5wcm90b3R5cGVcbiAgICAsIE8gICAgID0ge307XG4gIGZ1bmN0aW9uIGZpeE1ldGhvZChLRVksIENIQUlOKXtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9bS0VZXTtcbiAgICBpZigkLkZXKXByb3RvW0tFWV0gPSBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHZhciByZXN1bHQgPSBtZXRob2QuY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgcmV0dXJuIENIQUlOID8gdGhpcyA6IHJlc3VsdDtcbiAgICB9O1xuICB9XG4gIGlmKCEkLmlzRnVuY3Rpb24oQykgfHwgIShpc1dlYWsgfHwgISRpdGVyLkJVR0dZICYmIHByb3RvLmZvckVhY2ggJiYgcHJvdG8uZW50cmllcykpe1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3RvcihOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICAkLm1peChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3QgID0gbmV3IENcbiAgICAgICwgY2hhaW4gPSBpbnN0W0FEREVSXShpc1dlYWsgPyB7fSA6IC0wLCAxKVxuICAgICAgLCBidWdneVplcm87XG4gICAgLy8gd3JhcCBmb3IgaW5pdCBjb2xsZWN0aW9ucyBmcm9tIGl0ZXJhYmxlXG4gICAgaWYoIXJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgQyA9IGZ1bmN0aW9uKGl0ZXJhYmxlKXtcbiAgICAgICAgYXNzZXJ0SW5zdGFuY2UodGhpcywgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gbmV3IEJhc2U7XG4gICAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkkaXRlci5mb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBpZigkLkZXKXByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaXNXZWFrIHx8IGluc3QuZm9yRWFjaChmdW5jdGlvbih2YWwsIGtleSl7XG4gICAgICBidWdneVplcm8gPSAxIC8ga2V5ID09PSAtSW5maW5pdHk7XG4gICAgfSk7XG4gICAgLy8gZml4IGNvbnZlcnRpbmcgLTAga2V5IHRvICswXG4gICAgaWYoYnVnZ3laZXJvKXtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIC8vICsgZml4IC5hZGQgJiAuc2V0IGZvciBjaGFpbmluZ1xuICAgIGlmKGJ1Z2d5WmVybyB8fCBjaGFpbiAhPT0gaW5zdClmaXhNZXRob2QoQURERVIsIHRydWUpO1xuICB9XG5cbiAgcmVxdWlyZSgnLi8kLmNvZicpLnNldChDLCBOQU1FKTtcbiAgcmVxdWlyZSgnLi8kLnNwZWNpZXMnKShDKTtcblxuICBPW05BTUVdID0gQztcbiAgJGRlZigkZGVmLkcgKyAkZGVmLlcgKyAkZGVmLkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgaWYoIWlzV2VhaykkaXRlci5zdGQoXG4gICAgQywgTkFNRSxcbiAgICBjb21tb24uZ2V0SXRlckNvbnN0cnVjdG9yKCksIGNvbW1vbi5uZXh0LFxuICAgIElTX01BUCA/ICdrZXkrdmFsdWUnIDogJ3ZhbHVlJyAsICFJU19NQVAsIHRydWVcbiAgKTtcblxuICByZXR1cm4gQztcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgc2FmZSAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmVcbiAgLCBhc3NlcnQgICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBmb3JPZiAgICAgPSByZXF1aXJlKCcuLyQuaXRlcicpLmZvck9mXG4gICwgX2hhcyAgICAgID0gJC5oYXNcbiAgLCBpc09iamVjdCAgPSAkLmlzT2JqZWN0XG4gICwgaGlkZSAgICAgID0gJC5oaWRlXG4gICwgaXNGcm96ZW4gID0gT2JqZWN0LmlzRnJvemVuIHx8ICQuY29yZS5PYmplY3QuaXNGcm96ZW5cbiAgLCBpZCAgICAgICAgPSAwXG4gICwgSUQgICAgICAgID0gc2FmZSgnaWQnKVxuICAsIFdFQUsgICAgICA9IHNhZmUoJ3dlYWsnKVxuICAsIExFQUsgICAgICA9IHNhZmUoJ2xlYWsnKVxuICAsIG1ldGhvZCAgICA9IHJlcXVpcmUoJy4vJC5hcnJheS1tZXRob2RzJylcbiAgLCBmaW5kICAgICAgPSBtZXRob2QoNSlcbiAgLCBmaW5kSW5kZXggPSBtZXRob2QoNik7XG5mdW5jdGlvbiBmaW5kRnJvemVuKHN0b3JlLCBrZXkpe1xuICByZXR1cm4gZmluZC5jYWxsKHN0b3JlLmFycmF5LCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufVxuLy8gZmFsbGJhY2sgZm9yIGZyb3plbiBrZXlzXG5mdW5jdGlvbiBsZWFrU3RvcmUodGhhdCl7XG4gIHJldHVybiB0aGF0W0xFQUtdIHx8IGhpZGUodGhhdCwgTEVBSywge1xuICAgIGFycmF5OiBbXSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgICB2YXIgZW50cnkgPSBmaW5kRnJvemVuKHRoaXMsIGtleSk7XG4gICAgICBpZihlbnRyeSlyZXR1cm4gZW50cnlbMV07XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgICByZXR1cm4gISFmaW5kRnJvemVuKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgICAgdmFyIGVudHJ5ID0gZmluZEZyb3plbih0aGlzLCBrZXkpO1xuICAgICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICAgIGVsc2UgdGhpcy5hcnJheS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgfSxcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleC5jYWxsKHRoaXMuYXJyYXksIGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgICB9KTtcbiAgICAgIGlmKH5pbmRleCl0aGlzLmFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICByZXR1cm4gISF+aW5kZXg7XG4gICAgfVxuICB9KVtMRUFLXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbihOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICBmdW5jdGlvbiBDKGl0ZXJhYmxlKXtcbiAgICAgICQuc2V0KGFzc2VydC5pbnN0KHRoaXMsIEMsIE5BTUUpLCBJRCwgaWQrKyk7XG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhpc1tBRERFUl0sIHRoaXMpO1xuICAgIH1cbiAgICAkLm1peChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmKGlzRnJvemVuKGtleSkpcmV0dXJuIGxlYWtTdG9yZSh0aGlzKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIF9oYXMoa2V5LCBXRUFLKSAmJiBfaGFzKGtleVtXRUFLXSwgdGhpc1tJRF0pICYmIGRlbGV0ZSBrZXlbV0VBS11bdGhpc1tJRF1dO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmKGlzRnJvemVuKGtleSkpcmV0dXJuIGxlYWtTdG9yZSh0aGlzKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIF9oYXMoa2V5LCBXRUFLKSAmJiBfaGFzKGtleVtXRUFLXSwgdGhpc1tJRF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIGlmKGlzRnJvemVuKGFzc2VydC5vYmooa2V5KSkpe1xuICAgICAgbGVha1N0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2hhcyhrZXksIFdFQUspIHx8IGhpZGUoa2V5LCBXRUFLLCB7fSk7XG4gICAgICBrZXlbV0VBS11bdGhhdFtJRF1dID0gdmFsdWU7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgbGVha1N0b3JlOiBsZWFrU3RvcmUsXG4gIFdFQUs6IFdFQUssXG4gIElEOiBJRFxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IFN5c3RlbS5fbm9kZVJlcXVpcmUgPyBwcm9jZXNzIDogcmVxdWlyZSgncHJvY2VzcycpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5wbTpwcm9jZXNzQDAuMTAuMS9icm93c2VyXCIpOyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gdHJ1ZTtcbiAgICB2YXIgY3VycmVudFF1ZXVlO1xuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50UXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG59XG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHF1ZXVlLnB1c2goZnVuKTtcbiAgICBpZiAoIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJTeXN0ZW0ucmVnaXN0ZXIoWydhdXJlbGlhLWZyYW1ld29yaycsICdzcmMvdmlld3MvaG9tZS93aXphcmQnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBpbmplY3QsIFdpemFyZCwgV2l6YXJkU3RlcDM7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF9hdXJlbGlhRnJhbWV3b3JrKSB7XG4gICAgICBpbmplY3QgPSBfYXVyZWxpYUZyYW1ld29yay5pbmplY3Q7XG4gICAgfSwgZnVuY3Rpb24gKF9zcmNWaWV3c0hvbWVXaXphcmQpIHtcbiAgICAgIFdpemFyZCA9IF9zcmNWaWV3c0hvbWVXaXphcmQuV2l6YXJkO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFdpemFyZFN0ZXAzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gV2l6YXJkU3RlcDMod2l6YXJkKSB7XG4gICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9XaXphcmRTdGVwMyk7XG5cbiAgICAgICAgICB0aGlzLndpemFyZCA9IHdpemFyZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfV2l6YXJkU3RlcDMgPSBXaXphcmRTdGVwMztcbiAgICAgICAgV2l6YXJkU3RlcDMgPSBpbmplY3QoV2l6YXJkKShXaXphcmRTdGVwMykgfHwgV2l6YXJkU3RlcDM7XG4gICAgICAgIHJldHVybiBXaXphcmRTdGVwMztcbiAgICAgIH0pKCk7XG5cbiAgICAgIF9leHBvcnQoJ1dpemFyZFN0ZXAzJywgV2l6YXJkU3RlcDMpO1xuICAgIH1cbiAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTkyYVdWM2N5OW9iMjFsTDNkcGVtRnlaQzF6ZEdWd0xUTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzNOQ1FVbGhMRmRCUVZjN096czdPenRwUTBGS2FFSXNUVUZCVFRzN2JVTkJRMDRzVFVGQlRUczdPMEZCUjBRc2FVSkJRVmM3UVVGRFdDeHBRa0ZFUVN4WFFVRlhMRU5CUTFZc1RVRkJUU3hGUVVGRk96czdRVUZEYkVJc1kwRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVMEZEZEVJN096SkNRVWhWTEZkQlFWYzdRVUZCV0N4dFFrRkJWeXhIUVVSMlFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUTBZc1YwRkJWeXhMUVVGWUxGZEJRVmM3WlVGQldDeFhRVUZYSWl3aVptbHNaU0k2SW5OeVl5OTJhV1YzY3k5b2IyMWxMM2RwZW1GeVpDMXpkR1Z3TFRNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdlMmx1YW1WamRIMGdabkp2YlNBbllYVnlaV3hwWVMxbWNtRnRaWGR2Y21zbk8xeHlYRzVwYlhCdmNuUWdlMWRwZW1GeVpIMGdabkp2YlNBbmMzSmpMM1pwWlhkekwyaHZiV1V2ZDJsNllYSmtKenRjY2x4dVhISmNia0JwYm1wbFkzUW9WMmw2WVhKa0tWeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1YybDZZWEprVTNSbGNETWdlMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLSGRwZW1GeVpDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1M2FYcGhjbVFnUFNCM2FYcGhjbVE3WEhKY2JpQWdmVnh5WEc1OVhISmNiaUpkTENKemIzVnlZMlZTYjI5MElqb2lMM052ZFhKalpTOGlmUT09IiwiU3lzdGVtLnJlZ2lzdGVyKFsnYXVyZWxpYS1mcmFtZXdvcmsnLCAnc3JjL3ZpZXdzL2hvbWUvd2l6YXJkJ10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgaW5qZWN0LCBiaW5kYWJsZSwgV2l6YXJkLCBXaXphcmRTdGVwMjtcblxuICB2YXIgX2NyZWF0ZURlY29yYXRlZENsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIGRlc2NyaXB0b3JzLCBpbml0aWFsaXplcnMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXNjcmlwdG9ycy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JzW2ldOyB2YXIgZGVjb3JhdG9ycyA9IGRlc2NyaXB0b3IuZGVjb3JhdG9yczsgdmFyIGtleSA9IGRlc2NyaXB0b3Iua2V5OyBkZWxldGUgZGVzY3JpcHRvci5rZXk7IGRlbGV0ZSBkZXNjcmlwdG9yLmRlY29yYXRvcnM7IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yIHx8IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBpZiAoZGVjb3JhdG9ycykgeyBmb3IgKHZhciBmID0gMDsgZiA8IGRlY29yYXRvcnMubGVuZ3RoOyBmKyspIHsgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbZl07IGlmICh0eXBlb2YgZGVjb3JhdG9yID09PSAnZnVuY3Rpb24nKSB7IGRlc2NyaXB0b3IgPSBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHx8IGRlc2NyaXB0b3I7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkZWNvcmF0b3IgZm9yIG1ldGhvZCAnICsgZGVzY3JpcHRvci5rZXkgKyAnIGlzIG9mIHRoZSBpbnZhbGlkIHR5cGUgJyArIHR5cGVvZiBkZWNvcmF0b3IpOyB9IH0gaWYgKGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgIT09IHVuZGVmaW5lZCkgeyBpbml0aWFsaXplcnNba2V5XSA9IGRlc2NyaXB0b3I7IGNvbnRpbnVlOyB9IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzLCBwcm90b0luaXRpYWxpemVycywgc3RhdGljSW5pdGlhbGl6ZXJzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcywgcHJvdG9Jbml0aWFsaXplcnMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzLCBzdGF0aWNJbml0aWFsaXplcnMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZURlY29yYXRlZFByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSwgZGVzY3JpcHRvcnMpIHsgdmFyIF9kZXNjcmlwdG9yID0gZGVzY3JpcHRvcnNba2V5XTsgaWYgKCFfZGVzY3JpcHRvcikgcmV0dXJuOyB2YXIgZGVzY3JpcHRvciA9IHt9OyBmb3IgKHZhciBfa2V5IGluIF9kZXNjcmlwdG9yKSBkZXNjcmlwdG9yW19rZXldID0gX2Rlc2NyaXB0b3JbX2tleV07IGRlc2NyaXB0b3IudmFsdWUgPSBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKHRhcmdldCkgOiB1bmRlZmluZWQ7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7IH1cblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2F1cmVsaWFGcmFtZXdvcmspIHtcbiAgICAgIGluamVjdCA9IF9hdXJlbGlhRnJhbWV3b3JrLmluamVjdDtcbiAgICAgIGJpbmRhYmxlID0gX2F1cmVsaWFGcmFtZXdvcmsuYmluZGFibGU7XG4gICAgfSwgZnVuY3Rpb24gKF9zcmNWaWV3c0hvbWVXaXphcmQpIHtcbiAgICAgIFdpemFyZCA9IF9zcmNWaWV3c0hvbWVXaXphcmQuV2l6YXJkO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFdpemFyZFN0ZXAyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9pbnN0YW5jZUluaXRpYWxpemVycyA9IHt9O1xuICAgICAgICB2YXIgX2luc3RhbmNlSW5pdGlhbGl6ZXJzID0ge307XG5cbiAgICAgICAgX2NyZWF0ZURlY29yYXRlZENsYXNzKFdpemFyZFN0ZXAyLCBbe1xuICAgICAgICAgIGtleTogJ2hvdXNlTmFtZScsXG4gICAgICAgICAgZGVjb3JhdG9yczogW2JpbmRhYmxlXSxcbiAgICAgICAgICBpbml0aWFsaXplcjogbnVsbCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBrZXk6ICdob3VzZU51bWJlcicsXG4gICAgICAgICAgZGVjb3JhdG9yczogW2JpbmRhYmxlXSxcbiAgICAgICAgICBpbml0aWFsaXplcjogbnVsbCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1dLCBudWxsLCBfaW5zdGFuY2VJbml0aWFsaXplcnMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIFdpemFyZFN0ZXAyKHdpemFyZCkge1xuICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfV2l6YXJkU3RlcDIpO1xuXG4gICAgICAgICAgX2RlZmluZURlY29yYXRlZFByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCAnaG91c2VOYW1lJywgX2luc3RhbmNlSW5pdGlhbGl6ZXJzKTtcblxuICAgICAgICAgIF9kZWZpbmVEZWNvcmF0ZWRQcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgJ2hvdXNlTnVtYmVyJywgX2luc3RhbmNlSW5pdGlhbGl6ZXJzKTtcblxuICAgICAgICAgIHRoaXMud2l6YXJkID0gd2l6YXJkO1xuICAgICAgICAgIHRoaXMuaG91c2VOYW1lID0gdGhpcy53aXphcmQuYWRkcmVzcy5ob3VzZU5hbWU7XG4gICAgICAgICAgdGhpcy5ob3VzZU51bWJlciA9IHRoaXMud2l6YXJkLmFkZHJlc3MuaG91c2VOdW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlRGVjb3JhdGVkQ2xhc3MoV2l6YXJkU3RlcDIsIFt7XG4gICAgICAgICAga2V5OiAnaG91c2VOYW1lQ2hhbmdlZCcsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhvdXNlTmFtZUNoYW5nZWQobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMud2l6YXJkLmFkZHJlc3MuaG91c2VOYW1lID0gbmV3VmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy53aXphcmQudmFsaWRhdGlvblN0ZXAyLnJlc3VsdC5wcm9wZXJ0aWVzWydhZGRyZXNzLmhvdXNlTmFtZSddLmlzRGlydHkpIHtcbiAgICAgICAgICAgICAgdGhpcy5jaGVja0hvdXNlSXNWYWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ2hvdXNlTnVtYmVyQ2hhbmdlZCcsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhvdXNlTnVtYmVyQ2hhbmdlZChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy53aXphcmQuYWRkcmVzcy5ob3VzZU51bWJlciA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMud2l6YXJkLnZhbGlkYXRpb25TdGVwMi5yZXN1bHQucHJvcGVydGllc1snYWRkcmVzcy5ob3VzZU51bWJlciddLmlzRGlydHkpIHtcbiAgICAgICAgICAgICAgdGhpcy5jaGVja0hvdXNlSXNWYWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ2NoZWNrSG91c2VJc1ZhbGlkJyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tIb3VzZUlzVmFsaWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aXphcmQudmFsaWRhdGlvblN0ZXAyLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBrZXk6ICdhdHRhY2hlZCcsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaGVkKCkge1xuICAgICAgICAgICAgdmFyIGZhdlR5cGUgPSB0aGlzLndpemFyZC52YWxpZGF0aW9uU3RlcDIucmVzdWx0LnByb3BlcnRpZXNbJ3BlcnNvbi5mYXZvdXJpdGVWZXJ0ZWJyYXRlVHlwZSddO1xuICAgICAgICAgICAgZmF2VHlwZS5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBmYXZUeXBlLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1dLCBudWxsLCBfaW5zdGFuY2VJbml0aWFsaXplcnMpO1xuXG4gICAgICAgIHZhciBfV2l6YXJkU3RlcDIgPSBXaXphcmRTdGVwMjtcbiAgICAgICAgV2l6YXJkU3RlcDIgPSBpbmplY3QoV2l6YXJkKShXaXphcmRTdGVwMikgfHwgV2l6YXJkU3RlcDI7XG4gICAgICAgIHJldHVybiBXaXphcmRTdGVwMjtcbiAgICAgIH0pKCk7XG5cbiAgICAgIF9leHBvcnQoJ1dpemFyZFN0ZXAyJywgV2l6YXJkU3RlcDIpO1xuICAgIH1cbiAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTkyYVdWM2N5OW9iMjFsTDNkcGVtRnlaQzF6ZEdWd0xUSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzJkRFFVbGhMRmRCUVZjN096czdPenM3T3pzN2FVTkJTbWhDTEUxQlFVMDdiVU5CUVVVc1VVRkJVVHM3YlVOQlEyaENMRTFCUVUwN096dEJRVWRFTEdsQ1FVRlhPenM3T3poQ1FVRllMRmRCUVZjN08zVkNRVVZ5UWl4UlFVRlJPenM3T3p0MVFrRkRVaXhSUVVGUk96czdPenRCUVVWRkxHbENRVXhCTEZkQlFWY3NRMEZMVml4TlFVRk5MRVZCUVVVN096czdPenM3UVVGRGJFSXNZMEZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGNrSXNZMEZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRMME1zWTBGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTTdVMEZEY0VRN096aENRVlJWTEZkQlFWYzdPMmxDUVZkT0xEQkNRVUZETEZGQlFWRXNSVUZCUlR0QlFVTjZRaXhuUWtGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU42UXl4blFrRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRemxGTEd0Q1FVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0aFFVTXhRanRYUVVOR096czdhVUpCUldsQ0xEUkNRVUZETEZGQlFWRXNSVUZCUlR0QlFVTXpRaXhuUWtGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU16UXl4blFrRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMmhHTEd0Q1FVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0aFFVTXhRanRYUVVOR096czdhVUpCUldkQ0xEWkNRVUZITzBGQlEyeENMRzFDUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGRGFFUTdjVUpCUVUwc1NVRkJTVHRoUVVGQkxFVkJRMVk3Y1VKQlFVMHNTMEZCU3p0aFFVRkJMRU5CUTFvc1EwRkJRenRYUVVOSU96czdhVUpCUlU4c2IwSkJRVWM3UVVGSFZDeG5Ra0ZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhuUTBGQlowTXNRMEZCUXl4RFFVRkRPMEZCUXpsR0xHMUNRVUZQTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVONFFpeHRRa0ZCVHl4RFFVRkRMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU03VjBGRGVrSTdPenN5UWtGMFExVXNWMEZCVnp0QlFVRllMRzFDUVVGWExFZEJSSFpDTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkRSaXhYUVVGWExFdEJRVmdzVjBGQlZ6dGxRVUZZTEZkQlFWY2lMQ0ptYVd4bElqb2ljM0pqTDNacFpYZHpMMmh2YldVdmQybDZZWEprTFhOMFpYQXRNaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN2FXNXFaV04wTENCaWFXNWtZV0pzWlgwZ1puSnZiU0FuWVhWeVpXeHBZUzFtY21GdFpYZHZjbXNuTzF4eVhHNXBiWEJ2Y25RZ2UxZHBlbUZ5WkgwZ1puSnZiU0FuYzNKakwzWnBaWGR6TDJodmJXVXZkMmw2WVhKa0p6dGNjbHh1WEhKY2JrQnBibXBsWTNRb1YybDZZWEprS1Z4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVjJsNllYSmtVM1JsY0RJZ2UxeHlYRzVjY2x4dUlDQkFZbWx1WkdGaWJHVWdhRzkxYzJWT1lXMWxPMXh5WEc0Z0lFQmlhVzVrWVdKc1pTQm9iM1Z6WlU1MWJXSmxjanRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2QybDZZWEprS1NCN1hISmNiaUFnSUNCMGFHbHpMbmRwZW1GeVpDQTlJSGRwZW1GeVpEdGNjbHh1SUNBZ0lIUm9hWE11YUc5MWMyVk9ZVzFsSUQwZ2RHaHBjeTUzYVhwaGNtUXVZV1JrY21WemN5NW9iM1Z6WlU1aGJXVTdYSEpjYmlBZ0lDQjBhR2x6TG1odmRYTmxUblZ0WW1WeUlEMGdkR2hwY3k1M2FYcGhjbVF1WVdSa2NtVnpjeTVvYjNWelpVNTFiV0psY2p0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdodmRYTmxUbUZ0WlVOb1lXNW5aV1FvYm1WM1ZtRnNkV1VwSUh0Y2NseHVJQ0FnSUhSb2FYTXVkMmw2WVhKa0xtRmtaSEpsYzNNdWFHOTFjMlZPWVcxbElEMGdibVYzVm1Gc2RXVTdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NTNhWHBoY21RdWRtRnNhV1JoZEdsdmJsTjBaWEF5TG5KbGMzVnNkQzV3Y205d1pYSjBhV1Z6V3lkaFpHUnlaWE56TG1odmRYTmxUbUZ0WlNkZExtbHpSR2x5ZEhrcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1amFHVmphMGh2ZFhObFNYTldZV3hwWkNncE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2FHOTFjMlZPZFcxaVpYSkRhR0Z1WjJWa0tHNWxkMVpoYkhWbEtTQjdYSEpjYmlBZ0lDQjBhR2x6TG5kcGVtRnlaQzVoWkdSeVpYTnpMbWh2ZFhObFRuVnRZbVZ5SUQwZ2JtVjNWbUZzZFdVN1hISmNiaUFnSUNCcFppQW9kR2hwY3k1M2FYcGhjbVF1ZG1Gc2FXUmhkR2x2YmxOMFpYQXlMbkpsYzNWc2RDNXdjbTl3WlhKMGFXVnpXeWRoWkdSeVpYTnpMbWh2ZFhObFRuVnRZbVZ5SjEwdWFYTkVhWEowZVNrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG1Ob1pXTnJTRzkxYzJWSmMxWmhiR2xrS0NrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCamFHVmphMGh2ZFhObFNYTldZV3hwWkNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmRwZW1GeVpDNTJZV3hwWkdGMGFXOXVVM1JsY0RJdWRtRnNhV1JoZEdVb0tTNTBhR1Z1S0Z4eVhHNGdJQ0FnSUNBb0tTQTlQaUIwY25WbExGeHlYRzRnSUNBZ0lDQW9LU0E5UGlCbVlXeHpaVnh5WEc0Z0lDQWdLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR0YwZEdGamFHVmtLQ2tnZTF4eVhHNGdJQ0FnTHk4Z2NtVnpaWFFnZG1Gc2FXUmhkR2x2YmlCbWJHRm5jeUIwYnlCd2NtVjJaVzUwSUdsdWFYUnBZV3dnZG1Gc2FXUmhkR2x2YmlCbGNuSnZjaUJoY0hCbFlYSnBibWNnZDJobGJseHlYRzRnSUNBZ0x5OGdabUYyYjNWeWFYUmxWbVZ5ZEdWaWNtRjBaVU5zWVhOeklHaGhjeUIwY21sbloyVnlaV1FnWVNCamFHRnVaMlVnYVc0Z1ptRjJiM1Z5YVhSbFZtVnlkR1ZpY21GMFpWUjVjR1ZjY2x4dUlDQWdJR3hsZENCbVlYWlVlWEJsSUQwZ2RHaHBjeTUzYVhwaGNtUXVkbUZzYVdSaGRHbHZibE4wWlhBeUxuSmxjM1ZzZEM1d2NtOXdaWEowYVdWeld5ZHdaWEp6YjI0dVptRjJiM1Z5YVhSbFZtVnlkR1ZpY21GMFpWUjVjR1VuWFR0Y2NseHVJQ0FnSUdaaGRsUjVjR1V1YVhOV1lXeHBaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdabUYyVkhsd1pTNXBjMFJwY25SNUlEMGdabUZzYzJVN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmlKZExDSnpiM1Z5WTJWU2IyOTBJam9pTDNOdmRYSmpaUzhpZlE9PSIsIlN5c3RlbS5yZWdpc3RlcihbJ2F1cmVsaWEtZnJhbWV3b3JrJywgJ3NyYy92aWV3cy9ob21lL3dpemFyZCddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGluamVjdCwgT2JzZXJ2ZXJMb2NhdG9yLCBXaXphcmQsIFdpemFyZFN0ZXAxO1xuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF9hdXJlbGlhRnJhbWV3b3JrKSB7XG4gICAgICBpbmplY3QgPSBfYXVyZWxpYUZyYW1ld29yay5pbmplY3Q7XG4gICAgICBPYnNlcnZlckxvY2F0b3IgPSBfYXVyZWxpYUZyYW1ld29yay5PYnNlcnZlckxvY2F0b3I7XG4gICAgfSwgZnVuY3Rpb24gKF9zcmNWaWV3c0hvbWVXaXphcmQpIHtcbiAgICAgIFdpemFyZCA9IF9zcmNWaWV3c0hvbWVXaXphcmQuV2l6YXJkO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFdpemFyZFN0ZXAxID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gV2l6YXJkU3RlcDEod2l6YXJkLCBvYnNlcnZlckxvY2F0b3IpIHtcbiAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9XaXphcmRTdGVwMSk7XG5cbiAgICAgICAgICB0aGlzLndpemFyZCA9IHdpemFyZDtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IG9ic2VydmVyTG9jYXRvcjtcblxuICAgICAgICAgIHRoaXMuZGlzcG9zZVN1YnNjcmlwdGlvbiA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldE9ic2VydmVyKHRoaXMud2l6YXJkLnBlcnNvbiwgJ2Zhdm91cml0ZVZlcnRlYnJhdGVDbGFzcycpLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25GYXZvdXJpdGVWZXJ0ZWJyYXRlQ2xhc3NDaGFuZ2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhXaXphcmRTdGVwMSwgW3tcbiAgICAgICAgICBrZXk6ICdvbkZhdm91cml0ZVZlcnRlYnJhdGVDbGFzc0NoYW5nZScsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRmF2b3VyaXRlVmVydGVicmF0ZUNsYXNzQ2hhbmdlKCkge1xuICAgICAgICAgICAgdGhpcy53aXphcmQucGVyc29uLmZhdm91cml0ZVZlcnRlYnJhdGVUeXBlID0gJyc7XG5cbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy53aXphcmQudmFsaWRhdGlvblN0ZXAyLnJlc3VsdC5wcm9wZXJ0aWVzWydwZXJzb24uZmF2b3VyaXRlVmVydGVicmF0ZVR5cGUnXTtcbiAgICAgICAgICAgIHQuaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgdC5pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnZGV0YWNoZWQnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRhY2hlZCgpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHZhciBfV2l6YXJkU3RlcDEgPSBXaXphcmRTdGVwMTtcbiAgICAgICAgV2l6YXJkU3RlcDEgPSBpbmplY3QoV2l6YXJkLCBPYnNlcnZlckxvY2F0b3IpKFdpemFyZFN0ZXAxKSB8fCBXaXphcmRTdGVwMTtcbiAgICAgICAgcmV0dXJuIFdpemFyZFN0ZXAxO1xuICAgICAgfSkoKTtcblxuICAgICAgX2V4cG9ydCgnV2l6YXJkU3RlcDEnLCBXaXphcmRTdGVwMSk7XG4gICAgfVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OTJhV1YzY3k5b2IyMWxMM2RwZW1GeVpDMXpkR1Z3TFRFdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPM1ZEUVVsaExGZEJRVmM3T3pzN096czdPMmxEUVVwb1FpeE5RVUZOT3pCRFFVRkZMR1ZCUVdVN08yMURRVU4yUWl4TlFVRk5PenM3UVVGSFJDeHBRa0ZCVnp0QlFVTllMR2xDUVVSQkxGZEJRVmNzUTBGRFZpeE5RVUZOTEVWQlFVVXNaVUZCWlN4RlFVRkZPenM3T3p0QlFVTnVReXhqUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTnlRaXhqUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEdWQlFXVXNRMEZCUXpzN1FVRkZka01zWTBGQlNTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlF6VkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlN3d1FrRkJNRUlzUTBGQlF5eERRVU16UkN4VFFVRlRMRU5CUVVNN2JVSkJRVTBzVFVGQlN5eG5RMEZCWjBNc1JVRkJSVHRYUVVGQkxFTkJRVU1zUTBGQlF6dFRRVU0zUkRzN2NVSkJVbFVzVjBGQlZ6czdhVUpCVlZVc05FTkJRVWM3UVVGRGFrTXNaMEpCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZKYUVRc1owSkJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNaME5CUVdkRExFTkJRVU1zUTBGQlF6dEJRVU40Uml4aFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU5zUWl4aFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF6dFhRVU51UWpzN08ybENRVVZQTEc5Q1FVRkhPMEZCUTFRc1owSkJRVWtzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRE8xZEJRelZDT3pzN01rSkJkRUpWTEZkQlFWYzdRVUZCV0N4dFFrRkJWeXhIUVVSMlFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMR1ZCUVdVc1EwRkJReXhEUVVOdVFpeFhRVUZYTEV0QlFWZ3NWMEZCVnp0bFFVRllMRmRCUVZjaUxDSm1hV3hsSWpvaWMzSmpMM1pwWlhkekwyaHZiV1V2ZDJsNllYSmtMWE4wWlhBdE1TNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3YVc1cVpXTjBMQ0JQWW5ObGNuWmxja3h2WTJGMGIzSjlJR1p5YjIwZ0oyRjFjbVZzYVdFdFpuSmhiV1YzYjNKckp6dGNjbHh1YVcxd2IzSjBJSHRYYVhwaGNtUjlJR1p5YjIwZ0ozTnlZeTkyYVdWM2N5OW9iMjFsTDNkcGVtRnlaQ2M3WEhKY2JseHlYRzVBYVc1cVpXTjBLRmRwZW1GeVpDd2dUMkp6WlhKMlpYSk1iMk5oZEc5eUtWeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1YybDZZWEprVTNSbGNERWdlMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLSGRwZW1GeVpDd2diMkp6WlhKMlpYSk1iMk5oZEc5eUtTQjdYSEpjYmlBZ0lDQjBhR2x6TG5kcGVtRnlaQ0E5SUhkcGVtRnlaRHRjY2x4dUlDQWdJSFJvYVhNdWIySnpaWEoyWlhKTWIyTmhkRzl5SUQwZ2IySnpaWEoyWlhKTWIyTmhkRzl5TzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WkdsemNHOXpaVk4xWW5OamNtbHdkR2x2YmlBOUlIUm9hWE11YjJKelpYSjJaWEpNYjJOaGRHOXlYSEpjYmlBZ0lDQWdJQzVuWlhSUFluTmxjblpsY2loMGFHbHpMbmRwZW1GeVpDNXdaWEp6YjI0c0lDZG1ZWFp2ZFhKcGRHVldaWEowWldKeVlYUmxRMnhoYzNNbktWeHlYRzRnSUNBZ0lDQXVjM1ZpYzJOeWFXSmxLQ2dwSUQwK0lIUm9hWE11YjI1R1lYWnZkWEpwZEdWV1pYSjBaV0p5WVhSbFEyeGhjM05EYUdGdVoyVW9LU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J2YmtaaGRtOTFjbWwwWlZabGNuUmxZbkpoZEdWRGJHRnpjME5vWVc1blpTZ3BJSHRjY2x4dUlDQWdJSFJvYVhNdWQybDZZWEprTG5CbGNuTnZiaTVtWVhadmRYSnBkR1ZXWlhKMFpXSnlZWFJsVkhsd1pTQTlJQ2NuTzF4eVhHNWNjbHh1SUNBZ0lDOHZJSEpsYzJWMElIWmhiR2xrWVhScGIyNGdabXhoWjNNZ2RHOGdjSEpsZG1WdWRDQnBibWwwYVdGc0lIWmhiR2xrWVhScGIyNGdaWEp5YjNJZ1lYQndaV0Z5YVc1bklIZG9aVzVjY2x4dUlDQWdJQzh2SUdaaGRtOTFjbWwwWlZabGNuUmxZbkpoZEdWRGJHRnpjeUJvWVhNZ2RISnBaMmRsY21Wa0lHRWdZMmhoYm1kbElHbHVJR1poZG05MWNtbDBaVlpsY25SbFluSmhkR1ZVZVhCbFhISmNiaUFnSUNCc1pYUWdkQ0E5SUhSb2FYTXVkMmw2WVhKa0xuWmhiR2xrWVhScGIyNVRkR1Z3TWk1eVpYTjFiSFF1Y0hKdmNHVnlkR2xsYzFzbmNHVnljMjl1TG1aaGRtOTFjbWwwWlZabGNuUmxZbkpoZEdWVWVYQmxKMTA3WEhKY2JpQWdJQ0IwTG1selZtRnNhV1FnUFNCbVlXeHpaVHRjY2x4dUlDQWdJSFF1YVhORWFYSjBlU0E5SUdaaGJITmxPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaR1YwWVdOb1pXUW9LU0I3WEhKY2JpQWdJQ0IwYUdsekxtUnBjM0J2YzJWVGRXSnpZM0pwY0hScGIyNG9LVHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYmlKZExDSnpiM1Z5WTJWU2IyOTBJam9pTDNOdmRYSmpaUzhpZlE9PSIsIlN5c3RlbS5yZWdpc3RlcihbJ2F1cmVsaWEtZnJhbWV3b3JrJywgJ3NyYy92aWV3cy9ob21lL3dpemFyZCddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGluamVjdCwgY29tcHV0ZWRGcm9tLCBXaXphcmQsIEhvbWUsIFN0ZXA7XG5cbiAgdmFyIF9jcmVhdGVEZWNvcmF0ZWRDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBkZXNjcmlwdG9ycywgaW5pdGlhbGl6ZXJzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgZGVzY3JpcHRvcnMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1tpXTsgdmFyIGRlY29yYXRvcnMgPSBkZXNjcmlwdG9yLmRlY29yYXRvcnM7IHZhciBrZXkgPSBkZXNjcmlwdG9yLmtleTsgZGVsZXRlIGRlc2NyaXB0b3Iua2V5OyBkZWxldGUgZGVzY3JpcHRvci5kZWNvcmF0b3JzOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvciB8fCBkZXNjcmlwdG9yLmluaXRpYWxpemVyKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgaWYgKGRlY29yYXRvcnMpIHsgZm9yICh2YXIgZiA9IDA7IGYgPCBkZWNvcmF0b3JzLmxlbmd0aDsgZisrKSB7IHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ZdOyBpZiAodHlwZW9mIGRlY29yYXRvciA9PT0gJ2Z1bmN0aW9uJykgeyBkZXNjcmlwdG9yID0gZGVjb3JhdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB8fCBkZXNjcmlwdG9yOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZGVjb3JhdG9yIGZvciBtZXRob2QgJyArIGRlc2NyaXB0b3Iua2V5ICsgJyBpcyBvZiB0aGUgaW52YWxpZCB0eXBlICcgKyB0eXBlb2YgZGVjb3JhdG9yKTsgfSB9IGlmIChkZXNjcmlwdG9yLmluaXRpYWxpemVyICE9PSB1bmRlZmluZWQpIHsgaW5pdGlhbGl6ZXJzW2tleV0gPSBkZXNjcmlwdG9yOyBjb250aW51ZTsgfSB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcywgcHJvdG9Jbml0aWFsaXplcnMsIHN0YXRpY0luaXRpYWxpemVycykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMsIHByb3RvSW5pdGlhbGl6ZXJzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcywgc3RhdGljSW5pdGlhbGl6ZXJzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW2Z1bmN0aW9uIChfYXVyZWxpYUZyYW1ld29yaykge1xuICAgICAgaW5qZWN0ID0gX2F1cmVsaWFGcmFtZXdvcmsuaW5qZWN0O1xuICAgICAgY29tcHV0ZWRGcm9tID0gX2F1cmVsaWFGcmFtZXdvcmsuY29tcHV0ZWRGcm9tO1xuICAgIH0sIGZ1bmN0aW9uIChfc3JjVmlld3NIb21lV2l6YXJkKSB7XG4gICAgICBXaXphcmQgPSBfc3JjVmlld3NIb21lV2l6YXJkLldpemFyZDtcbiAgICB9XSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBIb21lID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gSG9tZSh3aXphcmQpIHtcbiAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX0hvbWUpO1xuXG4gICAgICAgICAgdGhpcy53aXphcmQgPSB3aXphcmQ7XG4gICAgICAgICAgdGhpcy5zdGVwcyA9IFtuZXcgU3RlcCgxLCAnUGVyc29uYWwgZGV0YWlscycsICd3aXphcmQtc3RlcC0xJyksIG5ldyBTdGVwKDIsICdGYXZvdXJpdGUgYW5pbWFscycsICd3aXphcmQtc3RlcC0yJyksIG5ldyBTdGVwKDMsICdUZXJtcyBhbmQgY29uZGl0aW9ucycsICd3aXphcmQtc3RlcC0zJyldO1xuICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NyZWF0ZURlY29yYXRlZENsYXNzKEhvbWUsIFt7XG4gICAgICAgICAga2V5OiAnbmV4dFN0ZXAnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0U3RlcCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVTdGVwKHRoaXMuYWN0aXZlU3RlcCkudGhlbihmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5hY3RpdmVTdGVwLmlkICE9PSBfdGhpcy5zdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLmFjdGl2ZVN0ZXAgPSBfdGhpcy5zdGVwc1tfdGhpcy5hY3RpdmVTdGVwLmlkXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBrZXk6ICdwcmV2aW91c1N0ZXAnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2aW91c1N0ZXAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVTdGVwLmlkICE9PSAxKSB7XG4gICAgICAgICAgICAgIHRoaXMud2l6YXJkWyd2YWxpZGF0aW9uU3RlcCcgKyB0aGlzLmFjdGl2ZVN0ZXAuaWRdLmNsZWFyKCk7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RlcCA9IHRoaXMuc3RlcHNbdGhpcy5hY3RpdmVTdGVwLmlkIC0gMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnZmluaXNoJyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoKCkge1xuICAgICAgICAgICAgdGhpcy5uZXh0U3RlcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ3Jlc3RhcnQnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0YXJ0KCkge1xuICAgICAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVN0ZXAgPSB0aGlzLnN0ZXBzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ3ZhbGlkYXRlU3RlcCcsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlU3RlcChzdGVwKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gJ3ZhbGlkYXRpb25TdGVwJyArIHN0ZXAuaWQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aXphcmRba2V5XS52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnaXNMYXN0UGFnZScsXG4gICAgICAgICAgZGVjb3JhdG9yczogW2NvbXB1dGVkRnJvbSgnYWN0aXZlU3RlcCcpXSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVN0ZXAuaWQgPT09IDM7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnaXNGaXJzdFBhZ2UnLFxuICAgICAgICAgIGRlY29yYXRvcnM6IFtjb21wdXRlZEZyb20oJ2FjdGl2ZVN0ZXAnKV0sXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVTdGVwLmlkID09PSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHZhciBfSG9tZSA9IEhvbWU7XG4gICAgICAgIEhvbWUgPSBpbmplY3QoV2l6YXJkKShIb21lKSB8fCBIb21lO1xuICAgICAgICByZXR1cm4gSG9tZTtcbiAgICAgIH0pKCk7XG5cbiAgICAgIF9leHBvcnQoJ0hvbWUnLCBIb21lKTtcblxuICAgICAgU3RlcCA9IGZ1bmN0aW9uIFN0ZXAoaWQsIHRpdGxlLCBwYXRoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGVwKTtcblxuICAgICAgICB0aGlzLmlkID0gMDtcbiAgICAgICAgdGhpcy50aXRsZSA9ICcnO1xuICAgICAgICB0aGlzLnBhdGggPSAnJztcblxuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5wYXRoID0gJ3NyYy92aWV3cy9ob21lLycgKyBwYXRoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5MmFXVjNjeTlvYjIxbEwyaHZiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08yOURRVWxoTEVsQlFVa3NSVUV5UkZnc1NVRkJTVHM3T3pzN096czdhVU5CTDBSR0xFMUJRVTA3ZFVOQlFVVXNXVUZCV1RzN2JVTkJRM0JDTEUxQlFVMDdPenRCUVVkRUxGVkJRVWs3UVVGRlNpeHBRa0ZHUVN4SlFVRkpMRU5CUlVnc1RVRkJUU3hGUVVGRk96czdRVUZEYkVJc1kwRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEY2tJc1kwRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVU5ZTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4bFFVRmxMRU5CUVVNc1JVRkRhRVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEdWQlFXVXNRMEZCUXl4RlFVTnFSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNjMEpCUVhOQ0xFVkJRVVVzWlVGQlpTeERRVUZETEVOQlEzSkVMRU5CUVVNN1FVRkRSaXhqUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdVMEZEYUVJN096aENRVlpWTEVsQlFVazdPMmxDUVZsUUxHOUNRVUZIT3pzN1FVRkRWQ3huUWtGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNUMEZCVHl4RlFVRkxPMEZCUTI1RUxHdENRVUZKTEU5QlFVOHNSVUZCUlR0QlFVTllMRzlDUVVGSkxFMUJRVXNzVlVGQlZTeERRVUZETEVWQlFVVXNTMEZCU3l4TlFVRkxMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRE5VTXNkMEpCUVVzc1ZVRkJWU3hIUVVGSExFMUJRVXNzUzBGQlN5eERRVUZETEUxQlFVc3NWVUZCVlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8ybENRVU5zUkN4TlFVRk5PMEZCUTB3c2QwSkJRVXNzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXp0cFFrRkRlRUk3WlVGRFJqdGhRVU5HTEVOQlFVTXNRMEZCUXp0WFFVTktPenM3YVVKQlJWY3NkMEpCUVVjN1FVRkRZaXhuUWtGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRE5VSXNhMEpCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVNelJDeHJRa0ZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlEzUkVPMWRCUTBZN096dHBRa0ZaU3l4clFrRkJSenRCUVVOUUxHZENRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1YwRkRha0k3T3p0cFFrRkZUU3h0UWtGQlJ6dEJRVU5TTEdkQ1FVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU40UWl4blFrRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xZEJRMnBET3pzN2FVSkJSVmNzYzBKQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTJwQ0xHZENRVUZKTEVkQlFVY3NSMEZCUnl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPMEZCUTNKRExHMUNRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVTnlRenR4UWtGQlRTeEpRVUZKTzJGQlFVRXNSVUZEVmp0eFFrRkJUU3hMUVVGTE8yRkJRVUVzUTBGRFdpeERRVUZETzFkQlEwZzdPenQxUWtGNlFrRXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJRenRsUVVOaUxHVkJRVWM3UVVGRFppeHRRa0ZCVHl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdWMEZEYWtNN096dDFRa0ZGUVN4WlFVRlpMRU5CUVVNc1dVRkJXU3hEUVVGRE8yVkJRMW9zWlVGQlJ6dEJRVU5vUWl4dFFrRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1YwRkRha003T3p0dlFrRjJRMVVzU1VGQlNUdEJRVUZLTEZsQlFVa3NSMEZFYUVJc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVU5HTEVsQlFVa3NTMEZCU2l4SlFVRkpPMlZCUVVvc1NVRkJTVHM3T3pzN1FVRXlSRmdzVlVGQlNTeEhRVXRITEZOQlRGQXNTVUZCU1N4RFFVdEpMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGT3poQ1FVeDZRaXhKUVVGSk96dGhRVU5TTEVWQlFVVXNSMEZCUnl4RFFVRkRPMkZCUTA0c1MwRkJTeXhIUVVGSExFVkJRVVU3WVVGRFZpeEpRVUZKTEVkQlFVY3NSVUZCUlRzN1FVRkhVQ3haUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmlMRmxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEyNUNMRmxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzYVVKQlFXbENMRWRCUVVjc1NVRkJTU3hEUVVGRE8wOUJRM1JESWl3aVptbHNaU0k2SW5OeVl5OTJhV1YzY3k5b2IyMWxMMmh2YldVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdlMmx1YW1WamRDd2dZMjl0Y0hWMFpXUkdjbTl0ZlNCbWNtOXRJQ2RoZFhKbGJHbGhMV1p5WVcxbGQyOXlheWM3WEhKY2JtbHRjRzl5ZENCN1YybDZZWEprZlNCbWNtOXRJQ2R6Y21NdmRtbGxkM012YUc5dFpTOTNhWHBoY21Rbk8xeHlYRzVjY2x4dVFHbHVhbVZqZENoWGFYcGhjbVFwWEhKY2JtVjRjRzl5ZENCamJHRnpjeUJJYjIxbElIdGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvZDJsNllYSmtLU0I3WEhKY2JpQWdJQ0IwYUdsekxuZHBlbUZ5WkNBOUlIZHBlbUZ5WkR0Y2NseHVJQ0FnSUhSb2FYTXVjM1JsY0hNZ1BTQmJYSEpjYmlBZ0lDQWdJRzVsZHlCVGRHVndLREVzSUNkUVpYSnpiMjVoYkNCa1pYUmhhV3h6Snl3Z0ozZHBlbUZ5WkMxemRHVndMVEVuS1N4Y2NseHVJQ0FnSUNBZ2JtVjNJRk4wWlhBb01pd2dKMFpoZG05MWNtbDBaU0JoYm1sdFlXeHpKeXdnSjNkcGVtRnlaQzF6ZEdWd0xUSW5LU3hjY2x4dUlDQWdJQ0FnYm1WM0lGTjBaWEFvTXl3Z0oxUmxjbTF6SUdGdVpDQmpiMjVrYVhScGIyNXpKeXdnSjNkcGVtRnlaQzF6ZEdWd0xUTW5LVnh5WEc0Z0lDQWdYVHRjY2x4dUlDQWdJSFJvYVhNdWNtVnpkR0Z5ZENncE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2JtVjRkRk4wWlhBb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TG5aaGJHbGtZWFJsVTNSbGNDaDBhR2x6TG1GamRHbDJaVk4wWlhBcExuUm9aVzRvS0dselZtRnNhV1FwSUQwK0lIdGNjbHh1SUNBZ0lDQWdhV1lnS0dselZtRnNhV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWhZM1JwZG1WVGRHVndMbWxrSUNFOVBTQjBhR2x6TG5OMFpYQnpMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWTNScGRtVlRkR1Z3SUQwZ2RHaHBjeTV6ZEdWd2MxdDBhR2x6TG1GamRHbDJaVk4wWlhBdWFXUmRPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1selEyOXRjR3hsZEdVZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J3Y21WMmFXOTFjMU4wWlhBb0tTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWhZM1JwZG1WVGRHVndMbWxrSUNFOVBTQXhLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVkMmw2WVhKa1d5ZDJZV3hwWkdGMGFXOXVVM1JsY0NjZ0t5QjBhR2x6TG1GamRHbDJaVk4wWlhBdWFXUmRMbU5zWldGeUtDazdYSEpjYmlBZ0lDQWdJSFJvYVhNdVlXTjBhWFpsVTNSbGNDQTlJSFJvYVhNdWMzUmxjSE5iZEdocGN5NWhZM1JwZG1WVGRHVndMbWxrSUMwZ01sMDdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQkFZMjl0Y0hWMFpXUkdjbTl0S0NkaFkzUnBkbVZUZEdWd0p5bGNjbHh1SUNCblpYUWdhWE5NWVhOMFVHRm5aU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtRmpkR2wyWlZOMFpYQXVhV1FnUFQwOUlETTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQkFZMjl0Y0hWMFpXUkdjbTl0S0NkaFkzUnBkbVZUZEdWd0p5bGNjbHh1SUNCblpYUWdhWE5HYVhKemRGQmhaMlVvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWhZM1JwZG1WVGRHVndMbWxrSUQwOVBTQXhPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdabWx1YVhOb0tDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1dVpYaDBVM1JsY0NncE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2NtVnpkR0Z5ZENncElIdGNjbHh1SUNBZ0lIUm9hWE11YVhORGIyMXdiR1YwWlNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnZEdocGN5NWhZM1JwZG1WVGRHVndJRDBnZEdocGN5NXpkR1Z3YzFzd1hUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lIWmhiR2xrWVhSbFUzUmxjQ2h6ZEdWd0tTQjdYSEpjYmlBZ0lDQnNaWFFnYTJWNUlEMGdKM1poYkdsa1lYUnBiMjVUZEdWd0p5QXJJSE4wWlhBdWFXUTdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUzYVhwaGNtUmJhMlY1WFM1MllXeHBaR0YwWlNncExuUm9aVzRvWEhKY2JpQWdJQ0FnSUNncElEMCtJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDZ3BJRDArSUdaaGJITmxYSEpjYmlBZ0lDQXBPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1WTJ4aGMzTWdVM1JsY0NCN1hISmNiaUFnYVdRZ1BTQXdPMXh5WEc0Z0lIUnBkR3hsSUQwZ0p5YzdYSEpjYmlBZ2NHRjBhQ0E5SUNjbk8xeHlYRzVjY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwWkN3Z2RHbDBiR1VzSUhCaGRHZ3BJSHRjY2x4dUlDQWdJSFJvYVhNdWFXUWdQU0JwWkR0Y2NseHVJQ0FnSUhSb2FYTXVkR2wwYkdVZ1BTQjBhWFJzWlR0Y2NseHVJQ0FnSUhSb2FYTXVjR0YwYUNBOUlDZHpjbU12ZG1sbGQzTXZhRzl0WlM4bklDc2djR0YwYUR0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1SWwwc0luTnZkWEpqWlZKdmIzUWlPaUl2YzI5MWNtTmxMeUo5IiwiU3lzdGVtLnJlZ2lzdGVyKFtdLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBfZXhwb3J0KFwibXVzdEJlRW1wdHlcIiwgbXVzdEJlRW1wdHkpO1xuXG4gIGZ1bmN0aW9uIG11c3RCZUVtcHR5KG1zZykge1xuICAgIHRoaXMucGFzc2VzKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuICFuZXdWYWx1ZTtcbiAgICB9KS53aXRoTWVzc2FnZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbXNnO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbXSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7fVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OTJZV3hwWkdGMGFXOXVMMk4xYzNSdmJTMTJZV3hwWkdGMGFXOXVMWEoxYkdWekxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzBGQlFVOHNWMEZCVXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJReTlDTEZGQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJReXhSUVVGUkxFVkJRVXM3UVVGRGVFSXNZVUZCVHl4RFFVRkRMRkZCUVZFc1EwRkJRenRMUVVOc1FpeERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMRmxCUVUwN1FVRkRia0lzWVVGQlR5eEhRVUZITEVOQlFVTTdTMEZEV2l4RFFVRkRMRU5CUVVNN1FVRkRTQ3hYUVVGUExFbEJRVWtzUTBGQlF6dEhRVU5pSWl3aVptbHNaU0k2SW5OeVl5OTJZV3hwWkdGMGFXOXVMMk4xYzNSdmJTMTJZV3hwWkdGMGFXOXVMWEoxYkdWekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR1oxYm1OMGFXOXVJRzExYzNSQ1pVVnRjSFI1S0cxelp5a2dlMXh5WEc0Z0lIUm9hWE11Y0dGemMyVnpLQ2h1WlhkV1lXeDFaU2tnUFQ0Z2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNGdVpYZFdZV3gxWlR0Y2NseHVJQ0I5S1M1M2FYUm9UV1Z6YzJGblpTZ29LU0E5UGlCN1hISmNiaUFnSUNCeVpYUjFjbTRnYlhObk8xeHlYRzRnSUgwcE8xeHlYRzRnSUhKbGRIVnliaUIwYUdsek8xeHlYRzU5WEhKY2JseHlYRzRpWFN3aWMyOTFjbU5sVW05dmRDSTZJaTl6YjNWeVkyVXZJbjA9IiwiU3lzdGVtLnJlZ2lzdGVyKFtdLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgX2V4cG9ydCgnY29uZmlndXJlJywgY29uZmlndXJlKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmUoYXVyZWxpYSkge1xuICAgIGF1cmVsaWEudXNlLnN0YW5kYXJkQ29uZmlndXJhdGlvbigpLmRldmVsb3BtZW50TG9nZ2luZygpLnBsdWdpbignYXVyZWxpYS12YWxpZGF0aW9uJyk7XG5cbiAgICBhdXJlbGlhLnN0YXJ0KCkudGhlbihmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGEuc2V0Um9vdCgnc3JjL2FwcCcpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbXSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7fVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OXRZV2x1TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVU4c1YwRkJVeXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEycERMRmRCUVU4c1EwRkJReXhIUVVGSExFTkJRMUlzY1VKQlFYRkNMRVZCUVVVc1EwRkRka0lzYTBKQlFXdENMRVZCUVVVc1EwRkRjRUlzVFVGQlRTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU03TzBGQlJXaERMRmRCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUVN4RFFVRkRPMkZCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTTdTMEZCUVN4RFFVRkRMRU5CUVVNN1IwRkRha1FpTENKbWFXeGxJam9pYzNKakwyMWhhVzR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kyOXVabWxuZFhKbEtHRjFjbVZzYVdFcElIdGNjbHh1SUNCaGRYSmxiR2xoTG5WelpWeHlYRzRnSUNBZ0xuTjBZVzVrWVhKa1EyOXVabWxuZFhKaGRHbHZiaWdwWEhKY2JpQWdJQ0F1WkdWMlpXeHZjRzFsYm5STWIyZG5hVzVuS0NsY2NseHVJQ0FnSUM1d2JIVm5hVzRvSjJGMWNtVnNhV0V0ZG1Gc2FXUmhkR2x2YmljcE8xeHlYRzVjY2x4dUlDQmhkWEpsYkdsaExuTjBZWEowS0NrdWRHaGxiaWhoSUQwK0lHRXVjMlYwVW05dmRDZ25jM0pqTDJGd2NDY3BLVHRjY2x4dWZWeHlYRzRpWFN3aWMyOTFjbU5sVW05dmRDSTZJaTl6YjNWeVkyVXZJbjA9IiwiU3lzdGVtLnJlZ2lzdGVyKFsnYXVyZWxpYS12YWxpZGF0aW9uJywgJy4vdmFsaWRhdGlvbi9jdXN0b20tdmFsaWRhdGlvbi1ydWxlcyddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIFZhbGlkYXRpb25Hcm91cCwgbXVzdEJlRW1wdHksIEFwcDtcblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW2Z1bmN0aW9uIChfYXVyZWxpYVZhbGlkYXRpb24pIHtcbiAgICAgIFZhbGlkYXRpb25Hcm91cCA9IF9hdXJlbGlhVmFsaWRhdGlvbi5WYWxpZGF0aW9uR3JvdXA7XG4gICAgfSwgZnVuY3Rpb24gKF92YWxpZGF0aW9uQ3VzdG9tVmFsaWRhdGlvblJ1bGVzKSB7XG4gICAgICBtdXN0QmVFbXB0eSA9IF92YWxpZGF0aW9uQ3VzdG9tVmFsaWRhdGlvblJ1bGVzLm11c3RCZUVtcHR5O1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIEFwcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEFwcCgpIHtcbiAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwKTtcblxuICAgICAgICAgIFZhbGlkYXRpb25Hcm91cC5wcm90b3R5cGUubXVzdEJlRW1wdHkgPSBtdXN0QmVFbXB0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhBcHAsIFt7XG4gICAgICAgICAga2V5OiAnY29uZmlndXJlUm91dGVyJyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29uZmlndXJlUm91dGVyKGNvbmZpZywgcm91dGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgICAgICAgICAgIGNvbmZpZy5tYXAoW3sgcm91dGU6IFsnJywgJ2hvbWUnXSwgbW9kdWxlSWQ6ICcuL3ZpZXdzL2hvbWUvaG9tZScsIHRpdGxlOiAnRm9ybSBXaXphcmQnLCBuYXY6IHRydWUgfV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBBcHA7XG4gICAgICB9KSgpO1xuXG4gICAgICBfZXhwb3J0KCdBcHAnLCBBcHApO1xuICAgIH1cbiAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTloY0hBdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMjlEUVVkaExFZEJRVWM3T3pzN096czdPekpEUVVoU0xHVkJRV1U3TzNGRVFVTm1MRmRCUVZjN096dEJRVVZPTEZOQlFVYzdRVUZEU0N4cFFrRkVRU3hIUVVGSExFZEJRMEU3WjBOQlJFZ3NSMEZCUnpzN1FVRkZXaXg1UWtGQlpTeERRVUZETEZOQlFWTXNRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRE8xTkJRM0pFT3p0eFFrRklWU3hIUVVGSE96dHBRa0ZMUXl4NVFrRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF6bENMR2RDUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTnlRaXhyUWtGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVTlVMRVZCUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4TFFVRkxMRVZCUVVVc1lVRkJZU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVTXNRMEZEZEVZc1EwRkJReXhEUVVGRE8xZEJRMG83T3p0bFFWWlZMRWRCUVVjaUxDSm1hV3hsSWpvaWMzSmpMMkZ3Y0M1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdWbUZzYVdSaGRHbHZia2R5YjNWd2ZTQm1jbTl0SUNkaGRYSmxiR2xoTFhaaGJHbGtZWFJwYjI0bk8xeHlYRzVwYlhCdmNuUWdlMjExYzNSQ1pVVnRjSFI1ZlNCbWNtOXRJQ2N1TDNaaGJHbGtZWFJwYjI0dlkzVnpkRzl0TFhaaGJHbGtZWFJwYjI0dGNuVnNaWE1uTzF4eVhHNWNjbHh1Wlhod2IzSjBJR05zWVhOeklFRndjQ0I3WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hISmNiaUFnSUNCV1lXeHBaR0YwYVc5dVIzSnZkWEF1Y0hKdmRHOTBlWEJsTG0xMWMzUkNaVVZ0Y0hSNUlEMGdiWFZ6ZEVKbFJXMXdkSGs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JqYjI1bWFXZDFjbVZTYjNWMFpYSW9ZMjl1Wm1sbkxDQnliM1YwWlhJcElIdGNjbHh1SUNBZ0lIUm9hWE11Y205MWRHVnlJRDBnY205MWRHVnlPMXh5WEc0Z0lDQWdZMjl1Wm1sbkxtMWhjQ2hiWEhKY2JpQWdJQ0FnSUh0eWIzVjBaVG9nV3ljbkxDQW5hRzl0WlNkZExDQnRiMlIxYkdWSlpEb2dKeTR2ZG1sbGQzTXZhRzl0WlM5b2IyMWxKeXdnZEdsMGJHVTZJQ2RHYjNKdElGZHBlbUZ5WkNjc0lHNWhkam9nZEhKMVpYMWNjbHh1SUNBZ0lGMHBPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpOXpiM1Z5WTJVdkluMD0iXX0=